
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef0  08005db0  08005db0  00015db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca0  08006ca0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006ca0  08006ca0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ca0  08006ca0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  200001dc  08006e84  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  08006e84  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008731  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001687  00000000  00000000  00028936  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a0  00000000  00000000  00029fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  0002a660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013eea  00000000  00000000  0002ac48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000063a2  00000000  00000000  0003eb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b3ca  00000000  00000000  00044ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b029e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a8  00000000  00000000  000b031c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d94 	.word	0x08005d94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005d94 	.word	0x08005d94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	f5ad 5dd3 	sub.w	sp, sp, #6752	; 0x1a60
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f001 fb33 	bl	80020fc <HAL_Init>

  /* USER CODE BEGIN Init */
  static_strings_init();
 8000a96:	f002 fbf7 	bl	8003288 <static_strings_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f001 f95f 	bl	8001d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9e:	f001 f9cd 	bl	8001e3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aa2:	f001 f9a1 	bl	8001de8 <MX_USART1_UART_Init>

  //test 1

  uint8_t very_long_string[700];
  uint16_t i;
  for(i = 0; i < 699; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000aac:	f102 0216 	add.w	r2, r2, #22
 8000ab0:	8013      	strh	r3, [r2, #0]
 8000ab2:	e015      	b.n	8000ae0 <main+0x58>
	  very_long_string[i] = 'a';
 8000ab4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ab8:	f103 0316 	add.w	r3, r3, #22
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000ac2:	f102 021c 	add.w	r2, r2, #28
 8000ac6:	2161      	movs	r1, #97	; 0x61
 8000ac8:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 699; i++){
 8000aca:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ace:	f103 0316 	add.w	r3, r3, #22
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000ada:	f102 0216 	add.w	r2, r2, #22
 8000ade:	8013      	strh	r3, [r2, #0]
 8000ae0:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ae4:	f103 0316 	add.w	r3, r3, #22
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d9e0      	bls.n	8000ab4 <main+0x2c>
  }
  very_long_string[699] = '\0';
 8000af2:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000af6:	f103 031c 	add.w	r3, r3, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
  static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 8000b00:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b04:	f103 031c 	add.w	r3, r3, #28
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fd31 	bl	8003570 <static_strings_save>
 8000b0e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000b12:	f103 030c 	add.w	r3, r3, #12
 8000b16:	6018      	str	r0, [r3, #0]
  char length[6];
  sprintf(length,"%04d",very_long_string_descriptor->length);
 8000b18:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000b1c:	f103 030c 	add.w	r3, r3, #12
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	889b      	ldrh	r3, [r3, #4]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b2a:	f103 0314 	add.w	r3, r3, #20
 8000b2e:	49a2      	ldr	r1, [pc, #648]	; (8000db8 <main+0x330>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fd4d 	bl	80045d0 <siprintf>
  length[4] = '\r';
 8000b36:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b3a:	f103 0314 	add.w	r3, r3, #20
 8000b3e:	220d      	movs	r2, #13
 8000b40:	711a      	strb	r2, [r3, #4]
  length[5] = '\n';
 8000b42:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b46:	f103 0314 	add.w	r3, r3, #20
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	715a      	strb	r2, [r3, #5]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000b4e:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000b52:	f101 0114 	add.w	r1, r1, #20
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	4897      	ldr	r0, [pc, #604]	; (8000dbc <main+0x334>)
 8000b5e:	f002 f9d6 	bl	8002f0e <HAL_UART_Transmit>
  char type[3];
  type[0] = very_long_string_descriptor->type + 48;
 8000b62:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000b66:	f103 030c 	add.w	r3, r3, #12
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	3330      	adds	r3, #48	; 0x30
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b76:	f103 0310 	add.w	r3, r3, #16
 8000b7a:	701a      	strb	r2, [r3, #0]
  type[1] = '\r';
 8000b7c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b80:	f103 0310 	add.w	r3, r3, #16
 8000b84:	220d      	movs	r2, #13
 8000b86:	705a      	strb	r2, [r3, #1]
  type[2] = '\n';
 8000b88:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b8c:	f103 0310 	add.w	r3, r3, #16
 8000b90:	220a      	movs	r2, #10
 8000b92:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000b94:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000b98:	f101 0110 	add.w	r1, r1, #16
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4886      	ldr	r0, [pc, #536]	; (8000dbc <main+0x334>)
 8000ba4:	f002 f9b3 	bl	8002f0e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000ba8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000bac:	f103 030c 	add.w	r3, r3, #12
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000bb8:	f103 030c 	add.w	r3, r3, #12
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	889a      	ldrh	r2, [r3, #4]
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	487d      	ldr	r0, [pc, #500]	; (8000dbc <main+0x334>)
 8000bc6:	f002 f9a2 	bl	8002f0e <HAL_UART_Transmit>

  static_strings_deallocate(very_long_string_descriptor);
 8000bca:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000bce:	f103 030c 	add.w	r3, r3, #12
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f002 fd10 	bl	80035f8 <static_strings_deallocate>

  uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000bd8:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 8000bdc:	f103 031c 	add.w	r3, r3, #28
 8000be0:	4a77      	ldr	r2, [pc, #476]	; (8000dc0 <main+0x338>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	4611      	mov	r1, r2
 8000be6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bea:	461a      	mov	r2, r3
 8000bec:	f003 f88e 	bl	8003d0c <memcpy>
  uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 8000bf0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8000bf4:	f103 0304 	add.w	r3, r3, #4
 8000bf8:	4a72      	ldr	r2, [pc, #456]	; (8000dc4 <main+0x33c>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c02:	461a      	mov	r2, r3
 8000c04:	f003 f882 	bl	8003d0c <memcpy>
  uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 8000c08:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8000c0c:	f103 0314 	add.w	r3, r3, #20
 8000c10:	4a6d      	ldr	r2, [pc, #436]	; (8000dc8 <main+0x340>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	4611      	mov	r1, r2
 8000c16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f003 f876 	bl	8003d0c <memcpy>
  uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 8000c20:	f507 647a 	add.w	r4, r7, #4000	; 0xfa0
 8000c24:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <main+0x344>)
 8000c26:	4620      	mov	r0, r4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f240 1361 	movw	r3, #353	; 0x161
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f003 f86c 	bl	8003d0c <memcpy>
 8000c34:	f204 1361 	addw	r3, r4, #353	; 0x161
 8000c38:	2293      	movs	r2, #147	; 0x93
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f870 	bl	8003d22 <memset>
  uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 8000c42:	f607 34b8 	addw	r4, r7, #3000	; 0xbb8
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <main+0x348>)
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f240 235b 	movw	r3, #603	; 0x25b
 8000c50:	461a      	mov	r2, r3
 8000c52:	f003 f85b 	bl	8003d0c <memcpy>
 8000c56:	f204 235b 	addw	r3, r4, #603	; 0x25b
 8000c5a:	f240 128d 	movw	r2, #397	; 0x18d
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 f85e 	bl	8003d22 <memset>

  static_strings_string_descriptor *string_descriptor;

  //test 2

  string_descriptor = static_strings_save(test_very_long_string);
 8000c66:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fc80 	bl	8003570 <static_strings_save>
 8000c70:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000c74:	f103 0308 	add.w	r3, r3, #8
 8000c78:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000c7a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000c7e:	f103 0308 	add.w	r3, r3, #8
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	889b      	ldrh	r3, [r3, #4]
 8000c86:	461a      	mov	r2, r3
 8000c88:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000c8c:	f103 0314 	add.w	r3, r3, #20
 8000c90:	4949      	ldr	r1, [pc, #292]	; (8000db8 <main+0x330>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fc9c 	bl	80045d0 <siprintf>
  length[4] = '\r';
 8000c98:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000c9c:	f103 0314 	add.w	r3, r3, #20
 8000ca0:	220d      	movs	r2, #13
 8000ca2:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000ca4:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000ca8:	f101 0114 	add.w	r1, r1, #20
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	2206      	movs	r2, #6
 8000cb2:	4842      	ldr	r0, [pc, #264]	; (8000dbc <main+0x334>)
 8000cb4:	f002 f92b 	bl	8002f0e <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000cb8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000cbc:	f103 0308 	add.w	r3, r3, #8
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	799b      	ldrb	r3, [r3, #6]
 8000cc4:	3330      	adds	r3, #48	; 0x30
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000ccc:	f103 0310 	add.w	r3, r3, #16
 8000cd0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000cd2:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000cd6:	f101 0110 	add.w	r1, r1, #16
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	2203      	movs	r2, #3
 8000ce0:	4836      	ldr	r0, [pc, #216]	; (8000dbc <main+0x334>)
 8000ce2:	f002 f914 	bl	8002f0e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000ce6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000cea:	f103 0308 	add.w	r3, r3, #8
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6819      	ldr	r1, [r3, #0]
 8000cf2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000cf6:	f103 0308 	add.w	r3, r3, #8
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	889a      	ldrh	r2, [r3, #4]
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	482e      	ldr	r0, [pc, #184]	; (8000dbc <main+0x334>)
 8000d04:	f002 f903 	bl	8002f0e <HAL_UART_Transmit>

  //test 3

  string_descriptor = static_strings_save(test_long_string);
 8000d08:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fc2f 	bl	8003570 <static_strings_save>
 8000d12:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d16:	f103 0308 	add.w	r3, r3, #8
 8000d1a:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000d1c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d20:	f103 0308 	add.w	r3, r3, #8
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	889b      	ldrh	r3, [r3, #4]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d2e:	f103 0314 	add.w	r3, r3, #20
 8000d32:	4921      	ldr	r1, [pc, #132]	; (8000db8 <main+0x330>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fc4b 	bl	80045d0 <siprintf>
  length[4] = '\r';
 8000d3a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d3e:	f103 0314 	add.w	r3, r3, #20
 8000d42:	220d      	movs	r2, #13
 8000d44:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000d46:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000d4a:	f101 0114 	add.w	r1, r1, #20
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	2206      	movs	r2, #6
 8000d54:	4819      	ldr	r0, [pc, #100]	; (8000dbc <main+0x334>)
 8000d56:	f002 f8da 	bl	8002f0e <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000d5a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d5e:	f103 0308 	add.w	r3, r3, #8
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	799b      	ldrb	r3, [r3, #6]
 8000d66:	3330      	adds	r3, #48	; 0x30
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d6e:	f103 0310 	add.w	r3, r3, #16
 8000d72:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000d74:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000d78:	f101 0110 	add.w	r1, r1, #16
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d80:	2203      	movs	r2, #3
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <main+0x334>)
 8000d84:	f002 f8c3 	bl	8002f0e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000d88:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d8c:	f103 0308 	add.w	r3, r3, #8
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d98:	f103 0308 	add.w	r3, r3, #8
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	889a      	ldrh	r2, [r3, #4]
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <main+0x334>)
 8000da6:	f002 f8b2 	bl	8002f0e <HAL_UART_Transmit>

  //test 4,5

  for(i = 0; i < 2; i++){
 8000daa:	2300      	movs	r3, #0
 8000dac:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000db0:	f102 0216 	add.w	r2, r2, #22
 8000db4:	8013      	strh	r3, [r2, #0]
 8000db6:	e074      	b.n	8000ea2 <main+0x41a>
 8000db8:	08005db0 	.word	0x08005db0
 8000dbc:	20000ca4 	.word	0x20000ca4
 8000dc0:	08005dc8 	.word	0x08005dc8
 8000dc4:	08005fbc 	.word	0x08005fbc
 8000dc8:	08006214 	.word	0x08006214
 8000dcc:	080063a4 	.word	0x080063a4
 8000dd0:	08006598 	.word	0x08006598
  	  string_descriptor = static_strings_save(test_medium_strings[i]);
 8000dd4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000dd8:	f103 0316 	add.w	r3, r3, #22
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8000de2:	f102 0214 	add.w	r2, r2, #20
 8000de6:	21c8      	movs	r1, #200	; 0xc8
 8000de8:	fb01 f303 	mul.w	r3, r1, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fbbe 	bl	8003570 <static_strings_save>
 8000df4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000df8:	f103 0308 	add.w	r3, r3, #8
 8000dfc:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000dfe:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e02:	f103 0308 	add.w	r3, r3, #8
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	889b      	ldrh	r3, [r3, #4]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000e10:	f103 0314 	add.w	r3, r3, #20
 8000e14:	4967      	ldr	r1, [pc, #412]	; (8000fb4 <main+0x52c>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fbda 	bl	80045d0 <siprintf>
  	  length[4] = '\r';
 8000e1c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000e20:	f103 0314 	add.w	r3, r3, #20
 8000e24:	220d      	movs	r2, #13
 8000e26:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000e28:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000e2c:	f101 0114 	add.w	r1, r1, #20
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	2206      	movs	r2, #6
 8000e36:	4860      	ldr	r0, [pc, #384]	; (8000fb8 <main+0x530>)
 8000e38:	f002 f869 	bl	8002f0e <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000e3c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e40:	f103 0308 	add.w	r3, r3, #8
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	799b      	ldrb	r3, [r3, #6]
 8000e48:	3330      	adds	r3, #48	; 0x30
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000e50:	f103 0310 	add.w	r3, r3, #16
 8000e54:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000e56:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000e5a:	f101 0110 	add.w	r1, r1, #16
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	2203      	movs	r2, #3
 8000e64:	4854      	ldr	r0, [pc, #336]	; (8000fb8 <main+0x530>)
 8000e66:	f002 f852 	bl	8002f0e <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000e6a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e6e:	f103 0308 	add.w	r3, r3, #8
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e7a:	f103 0308 	add.w	r3, r3, #8
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	889a      	ldrh	r2, [r3, #4]
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	484c      	ldr	r0, [pc, #304]	; (8000fb8 <main+0x530>)
 8000e88:	f002 f841 	bl	8002f0e <HAL_UART_Transmit>
  for(i = 0; i < 2; i++){
 8000e8c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e90:	f103 0316 	add.w	r3, r3, #22
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000e9c:	f102 0216 	add.w	r2, r2, #22
 8000ea0:	8013      	strh	r3, [r2, #0]
 8000ea2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ea6:	f103 0316 	add.w	r3, r3, #22
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d991      	bls.n	8000dd4 <main+0x34c>
  }

  //test 6-11

  for(i = 0; i < 6; i++){
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000eb6:	f102 0216 	add.w	r2, r2, #22
 8000eba:	8013      	strh	r3, [r2, #0]
 8000ebc:	e066      	b.n	8000f8c <main+0x504>
  	  string_descriptor = static_strings_save(test_short_strings[i]);
 8000ebe:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ec2:	f103 0316 	add.w	r3, r3, #22
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8000ecc:	f102 0204 	add.w	r2, r2, #4
 8000ed0:	2164      	movs	r1, #100	; 0x64
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fb49 	bl	8003570 <static_strings_save>
 8000ede:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ee2:	f103 0308 	add.w	r3, r3, #8
 8000ee6:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000ee8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000eec:	f103 0308 	add.w	r3, r3, #8
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	889b      	ldrh	r3, [r3, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000efa:	f103 0314 	add.w	r3, r3, #20
 8000efe:	492d      	ldr	r1, [pc, #180]	; (8000fb4 <main+0x52c>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fb65 	bl	80045d0 <siprintf>
  	  length[4] = '\r';
 8000f06:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000f0a:	f103 0314 	add.w	r3, r3, #20
 8000f0e:	220d      	movs	r2, #13
 8000f10:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000f12:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000f16:	f101 0114 	add.w	r1, r1, #20
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	2206      	movs	r2, #6
 8000f20:	4825      	ldr	r0, [pc, #148]	; (8000fb8 <main+0x530>)
 8000f22:	f001 fff4 	bl	8002f0e <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000f26:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f2a:	f103 0308 	add.w	r3, r3, #8
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	799b      	ldrb	r3, [r3, #6]
 8000f32:	3330      	adds	r3, #48	; 0x30
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000f3a:	f103 0310 	add.w	r3, r3, #16
 8000f3e:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000f40:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000f44:	f101 0110 	add.w	r1, r1, #16
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <main+0x530>)
 8000f50:	f001 ffdd 	bl	8002f0e <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000f54:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f58:	f103 0308 	add.w	r3, r3, #8
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f64:	f103 0308 	add.w	r3, r3, #8
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	889a      	ldrh	r2, [r3, #4]
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <main+0x530>)
 8000f72:	f001 ffcc 	bl	8002f0e <HAL_UART_Transmit>
  for(i = 0; i < 6; i++){
 8000f76:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f7a:	f103 0316 	add.w	r3, r3, #22
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000f86:	f102 0216 	add.w	r2, r2, #22
 8000f8a:	8013      	strh	r3, [r2, #0]
 8000f8c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f90:	f103 0316 	add.w	r3, r3, #22
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d991      	bls.n	8000ebe <main+0x436>
  }

  //test 12-21

  static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000fa0:	f102 0210 	add.w	r2, r2, #16
 8000fa4:	6013      	str	r3, [r2, #0]
  for(i = 0; i < 10; i++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000fac:	f102 0216 	add.w	r2, r2, #22
 8000fb0:	8013      	strh	r3, [r2, #0]
 8000fb2:	e07b      	b.n	80010ac <main+0x624>
 8000fb4:	08005db0 	.word	0x08005db0
 8000fb8:	20000ca4 	.word	0x20000ca4
	  string_descriptor = static_strings_save(test_very_short_strings[i]);
 8000fbc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000fc0:	f103 0316 	add.w	r3, r3, #22
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	f507 52ab 	add.w	r2, r7, #5472	; 0x1560
 8000fca:	f102 021c 	add.w	r2, r2, #28
 8000fce:	2132      	movs	r1, #50	; 0x32
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 faca 	bl	8003570 <static_strings_save>
 8000fdc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000fe0:	f103 0308 	add.w	r3, r3, #8
 8000fe4:	6018      	str	r0, [r3, #0]
	  if(i == 6){
 8000fe6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000fea:	f103 0316 	add.w	r3, r3, #22
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	d109      	bne.n	8001008 <main+0x580>
		  string_descriptor_deallocate = string_descriptor;
 8000ff4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ff8:	f103 0308 	add.w	r3, r3, #8
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001002:	f102 0210 	add.w	r2, r2, #16
 8001006:	6013      	str	r3, [r2, #0]
	  }
	  sprintf(length,"%04d",string_descriptor->length);
 8001008:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800100c:	f103 0308 	add.w	r3, r3, #8
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	889b      	ldrh	r3, [r3, #4]
 8001014:	461a      	mov	r2, r3
 8001016:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800101a:	f103 0314 	add.w	r3, r3, #20
 800101e:	49d0      	ldr	r1, [pc, #832]	; (8001360 <main+0x8d8>)
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fad5 	bl	80045d0 <siprintf>
	  length[4] = '\r';
 8001026:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800102a:	f103 0314 	add.w	r3, r3, #20
 800102e:	220d      	movs	r2, #13
 8001030:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8001032:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8001036:	f101 0114 	add.w	r1, r1, #20
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2206      	movs	r2, #6
 8001040:	48c8      	ldr	r0, [pc, #800]	; (8001364 <main+0x8dc>)
 8001042:	f001 ff64 	bl	8002f0e <HAL_UART_Transmit>
	  type[0] = string_descriptor->type + 48;
 8001046:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800104a:	f103 0308 	add.w	r3, r3, #8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	799b      	ldrb	r3, [r3, #6]
 8001052:	3330      	adds	r3, #48	; 0x30
 8001054:	b2da      	uxtb	r2, r3
 8001056:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800105a:	f103 0310 	add.w	r3, r3, #16
 800105e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8001060:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8001064:	f101 0110 	add.w	r1, r1, #16
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	2203      	movs	r2, #3
 800106e:	48bd      	ldr	r0, [pc, #756]	; (8001364 <main+0x8dc>)
 8001070:	f001 ff4d 	bl	8002f0e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001074:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001078:	f103 0308 	add.w	r3, r3, #8
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6819      	ldr	r1, [r3, #0]
 8001080:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001084:	f103 0308 	add.w	r3, r3, #8
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	889a      	ldrh	r2, [r3, #4]
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	48b4      	ldr	r0, [pc, #720]	; (8001364 <main+0x8dc>)
 8001092:	f001 ff3c 	bl	8002f0e <HAL_UART_Transmit>
  for(i = 0; i < 10; i++){
 8001096:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800109a:	f103 0316 	add.w	r3, r3, #22
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80010a6:	f102 0216 	add.w	r2, r2, #22
 80010aa:	8013      	strh	r3, [r2, #0]
 80010ac:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80010b0:	f103 0316 	add.w	r3, r3, #22
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	2b09      	cmp	r3, #9
 80010b8:	d980      	bls.n	8000fbc <main+0x534>
  }

  //test 22

  static_strings_deallocate(string_descriptor_deallocate);
 80010ba:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80010be:	f103 0310 	add.w	r3, r3, #16
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f002 fa98 	bl	80035f8 <static_strings_deallocate>
  uint8_t test_short_string[50] = "reallocate_test\r\n";
 80010c8:	f607 3684 	addw	r6, r7, #2948	; 0xb84
 80010cc:	4ba6      	ldr	r3, [pc, #664]	; (8001368 <main+0x8e0>)
 80010ce:	4634      	mov	r4, r6
 80010d0:	461d      	mov	r5, r3
 80010d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	8023      	strh	r3, [r4, #0]
 80010da:	f106 0312 	add.w	r3, r6, #18
 80010de:	2220      	movs	r2, #32
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fe1d 	bl	8003d22 <memset>
  string_descriptor = static_strings_save(test_short_string);
 80010e8:	f607 3384 	addw	r3, r7, #2948	; 0xb84
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fa3f 	bl	8003570 <static_strings_save>
 80010f2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80010f6:	f103 0308 	add.w	r3, r3, #8
 80010fa:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 80010fc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001100:	f103 0308 	add.w	r3, r3, #8
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	461a      	mov	r2, r3
 800110a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800110e:	f103 0314 	add.w	r3, r3, #20
 8001112:	4993      	ldr	r1, [pc, #588]	; (8001360 <main+0x8d8>)
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fa5b 	bl	80045d0 <siprintf>
  length[4] = '\r';
 800111a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800111e:	f103 0314 	add.w	r3, r3, #20
 8001122:	220d      	movs	r2, #13
 8001124:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8001126:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 800112a:	f101 0114 	add.w	r1, r1, #20
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	2206      	movs	r2, #6
 8001134:	488b      	ldr	r0, [pc, #556]	; (8001364 <main+0x8dc>)
 8001136:	f001 feea 	bl	8002f0e <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 800113a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800113e:	f103 0308 	add.w	r3, r3, #8
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	799b      	ldrb	r3, [r3, #6]
 8001146:	3330      	adds	r3, #48	; 0x30
 8001148:	b2da      	uxtb	r2, r3
 800114a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800114e:	f103 0310 	add.w	r3, r3, #16
 8001152:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8001154:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8001158:	f101 0110 	add.w	r1, r1, #16
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	2203      	movs	r2, #3
 8001162:	4880      	ldr	r0, [pc, #512]	; (8001364 <main+0x8dc>)
 8001164:	f001 fed3 	bl	8002f0e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001168:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800116c:	f103 0308 	add.w	r3, r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6819      	ldr	r1, [r3, #0]
 8001174:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001178:	f103 0308 	add.w	r3, r3, #8
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	889a      	ldrh	r2, [r3, #4]
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	4877      	ldr	r0, [pc, #476]	; (8001364 <main+0x8dc>)
 8001186:	f001 fec2 	bl	8002f0e <HAL_UART_Transmit>

  //test 23

  uint8_t pointer[12];
  sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 800118a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800118e:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001192:	f102 0210 	add.w	r2, r2, #16
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	4974      	ldr	r1, [pc, #464]	; (800136c <main+0x8e4>)
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fa18 	bl	80045d0 <siprintf>
  pointer[10] = '\r';
 80011a0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011a4:	220d      	movs	r2, #13
 80011a6:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 80011a8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011ac:	220a      	movs	r2, #10
 80011ae:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80011b0:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	220c      	movs	r2, #12
 80011ba:	486a      	ldr	r0, [pc, #424]	; (8001364 <main+0x8dc>)
 80011bc:	f001 fea7 	bl	8002f0e <HAL_UART_Transmit>

  sprintf((char *)pointer,"%10p",string_descriptor);
 80011c0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011c4:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80011c8:	f102 0208 	add.w	r2, r2, #8
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	4967      	ldr	r1, [pc, #412]	; (800136c <main+0x8e4>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 f9fd 	bl	80045d0 <siprintf>
  pointer[10] = '\r';
 80011d6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011da:	220d      	movs	r2, #13
 80011dc:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 80011de:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011e2:	220a      	movs	r2, #10
 80011e4:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80011e6:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	220c      	movs	r2, #12
 80011f0:	485c      	ldr	r0, [pc, #368]	; (8001364 <main+0x8dc>)
 80011f2:	f001 fe8c 	bl	8002f0e <HAL_UART_Transmit>
  uint8_t error_code_char;

  //test 24

  uint8_t no_memory_string[800];
  for(i = 0; i < 798; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80011fc:	f102 0216 	add.w	r2, r2, #22
 8001200:	8013      	strh	r3, [r2, #0]
 8001202:	e014      	b.n	800122e <main+0x7a6>
	  no_memory_string[i] = 'a';
 8001204:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001208:	f103 0316 	add.w	r3, r3, #22
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001212:	3b04      	subs	r3, #4
 8001214:	2161      	movs	r1, #97	; 0x61
 8001216:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 798; i++){
 8001218:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800121c:	f103 0316 	add.w	r3, r3, #22
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001228:	f102 0216 	add.w	r2, r2, #22
 800122c:	8013      	strh	r3, [r2, #0]
 800122e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001232:	f103 0316 	add.w	r3, r3, #22
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	f240 321d 	movw	r2, #797	; 0x31d
 800123c:	4293      	cmp	r3, r2
 800123e:	d9e1      	bls.n	8001204 <main+0x77c>
  }
  no_memory_string[798] = '\r';
 8001240:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001244:	3b04      	subs	r3, #4
 8001246:	220d      	movs	r2, #13
 8001248:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  no_memory_string[799] = '\n';
 800124c:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001250:	3b04      	subs	r3, #4
 8001252:	220a      	movs	r2, #10
 8001254:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  string_descriptor = static_strings_save(no_memory_string);
 8001258:	f607 0358 	addw	r3, r7, #2136	; 0x858
 800125c:	3b04      	subs	r3, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f986 	bl	8003570 <static_strings_save>
 8001264:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001268:	f103 0308 	add.w	r3, r3, #8
 800126c:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800126e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001272:	f103 0308 	add.w	r3, r3, #8
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <main+0x804>
	  error_code_char = static_strings_error_code + 48;
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <main+0x8e8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3330      	adds	r3, #48	; 0x30
 8001282:	b2da      	uxtb	r2, r3
 8001284:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e003      	b.n	8001294 <main+0x80c>
  }
  else{
	  error_code_char = '3';
 800128c:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001290:	2233      	movs	r2, #51	; 0x33
 8001292:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001294:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	2201      	movs	r2, #1
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <main+0x8dc>)
 80012a0:	f001 fe35 	bl	8002f0e <HAL_UART_Transmit>

  //test 25

  uint8_t unallocable_invalid_string[1200];
  for(i = 0; i < 1198; i++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80012aa:	f102 0216 	add.w	r2, r2, #22
 80012ae:	8013      	strh	r3, [r2, #0]
 80012b0:	e014      	b.n	80012dc <main+0x854>
	  unallocable_invalid_string[i] = 'a';
 80012b2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80012b6:	f103 0316 	add.w	r3, r3, #22
 80012ba:	881a      	ldrh	r2, [r3, #0]
 80012bc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80012c0:	3b14      	subs	r3, #20
 80012c2:	2161      	movs	r1, #97	; 0x61
 80012c4:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 1198; i++){
 80012c6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80012ca:	f103 0316 	add.w	r3, r3, #22
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80012d6:	f102 0216 	add.w	r2, r2, #22
 80012da:	8013      	strh	r3, [r2, #0]
 80012dc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80012e0:	f103 0316 	add.w	r3, r3, #22
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	f240 42ad 	movw	r2, #1197	; 0x4ad
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d9e1      	bls.n	80012b2 <main+0x82a>
  }
  unallocable_invalid_string[1198] = '\r';
 80012ee:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80012f2:	3b14      	subs	r3, #20
 80012f4:	220d      	movs	r2, #13
 80012f6:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
  unallocable_invalid_string[1199] = '\n';
 80012fa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80012fe:	3b14      	subs	r3, #20
 8001300:	220a      	movs	r2, #10
 8001302:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
  string_descriptor = static_strings_save(unallocable_invalid_string);
 8001306:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800130a:	3b14      	subs	r3, #20
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f92f 	bl	8003570 <static_strings_save>
 8001312:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001316:	f103 0308 	add.w	r3, r3, #8
 800131a:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800131c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001320:	f103 0308 	add.w	r3, r3, #8
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d107      	bne.n	800133a <main+0x8b2>
	  error_code_char = static_strings_error_code + 48;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <main+0x8e8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3330      	adds	r3, #48	; 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e003      	b.n	8001342 <main+0x8ba>
  }
  else{
	  error_code_char = '4';
 800133a:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 800133e:	2234      	movs	r2, #52	; 0x34
 8001340:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001342:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	2201      	movs	r2, #1
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <main+0x8dc>)
 800134e:	f001 fdde 	bl	8002f0e <HAL_UART_Transmit>

  //test 26

  uint8_t no_line_end_invalid_string[800];
  for(i = 0; i < 800; i++){
 8001352:	2300      	movs	r3, #0
 8001354:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001358:	f102 0216 	add.w	r2, r2, #22
 800135c:	8013      	strh	r3, [r2, #0]
 800135e:	e01e      	b.n	800139e <main+0x916>
 8001360:	08005db0 	.word	0x08005db0
 8001364:	20000ca4 	.word	0x20000ca4
 8001368:	08006980 	.word	0x08006980
 800136c:	08005db8 	.word	0x08005db8
 8001370:	20000664 	.word	0x20000664
	  no_line_end_invalid_string[i] = 'a';
 8001374:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001378:	f103 0316 	add.w	r3, r3, #22
 800137c:	881a      	ldrh	r2, [r3, #0]
 800137e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001382:	3b14      	subs	r3, #20
 8001384:	2161      	movs	r1, #97	; 0x61
 8001386:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 800; i++){
 8001388:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800138c:	f103 0316 	add.w	r3, r3, #22
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001398:	f102 0216 	add.w	r2, r2, #22
 800139c:	8013      	strh	r3, [r2, #0]
 800139e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80013a2:	f103 0316 	add.w	r3, r3, #22
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013ac:	d3e2      	bcc.n	8001374 <main+0x8ec>
  }
  string_descriptor = static_strings_save(no_line_end_invalid_string);
 80013ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013b2:	3b14      	subs	r3, #20
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f8db 	bl	8003570 <static_strings_save>
 80013ba:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80013be:	f103 0308 	add.w	r3, r3, #8
 80013c2:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 80013c4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80013c8:	f103 0308 	add.w	r3, r3, #8
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <main+0x95a>
	  error_code_char = static_strings_error_code + 48;
 80013d2:	4bc5      	ldr	r3, [pc, #788]	; (80016e8 <main+0xc60>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3330      	adds	r3, #48	; 0x30
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e003      	b.n	80013ea <main+0x962>
  }
  else{
	  error_code_char = '5';
 80013e2:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 80013e6:	2235      	movs	r2, #53	; 0x35
 80013e8:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80013ea:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2201      	movs	r2, #1
 80013f4:	48bd      	ldr	r0, [pc, #756]	; (80016ec <main+0xc64>)
 80013f6:	f001 fd8a 	bl	8002f0e <HAL_UART_Transmit>

  //test 27

  string_descriptor = static_strings_allocate(1200);
 80013fa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80013fe:	f001 fffd 	bl	80033fc <static_strings_allocate>
 8001402:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001406:	f103 0308 	add.w	r3, r3, #8
 800140a:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800140c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001410:	f103 0308 	add.w	r3, r3, #8
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <main+0x9a2>
  	  error_code_char = static_strings_error_code + 48;
 800141a:	4bb3      	ldr	r3, [pc, #716]	; (80016e8 <main+0xc60>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3330      	adds	r3, #48	; 0x30
 8001420:	b2da      	uxtb	r2, r3
 8001422:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e003      	b.n	8001432 <main+0x9aa>
  }
  else{
  	  error_code_char = '6';
 800142a:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 800142e:	2236      	movs	r2, #54	; 0x36
 8001430:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001432:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	2201      	movs	r2, #1
 800143c:	48ab      	ldr	r0, [pc, #684]	; (80016ec <main+0xc64>)
 800143e:	f001 fd66 	bl	8002f0e <HAL_UART_Transmit>

  //test 28

  uint8_t custom[10] = "123,56,89\0";
 8001442:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001446:	4aaa      	ldr	r2, [pc, #680]	; (80016f0 <main+0xc68>)
 8001448:	ca07      	ldmia	r2, {r0, r1, r2}
 800144a:	c303      	stmia	r3!, {r0, r1}
 800144c:	801a      	strh	r2, [r3, #0]
  static_strings_string_descriptor custom_string_descriptor;
  string_descriptor = &custom_string_descriptor;
 800144e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001452:	3b08      	subs	r3, #8
 8001454:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001458:	f102 0208 	add.w	r2, r2, #8
 800145c:	6013      	str	r3, [r2, #0]
  static_strings_create_custom_string(string_descriptor,custom);
 800145e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001462:	4619      	mov	r1, r3
 8001464:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001468:	f103 0308 	add.w	r3, r3, #8
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	f002 f8a6 	bl	80035be <static_strings_create_custom_string>
  HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001472:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001476:	f103 0308 	add.w	r3, r3, #8
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001482:	f103 0308 	add.w	r3, r3, #8
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	889a      	ldrh	r2, [r3, #4]
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	4897      	ldr	r0, [pc, #604]	; (80016ec <main+0xc64>)
 8001490:	f001 fd3d 	bl	8002f0e <HAL_UART_Transmit>

  // test 29

  if(static_strings_is_line(string_descriptor)){
 8001494:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001498:	f103 0308 	add.w	r3, r3, #8
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f002 f8bb 	bl	8003618 <static_strings_is_line>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <main+0xa30>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	2203      	movs	r2, #3
 80014ae:	4991      	ldr	r1, [pc, #580]	; (80016f4 <main+0xc6c>)
 80014b0:	488e      	ldr	r0, [pc, #568]	; (80016ec <main+0xc64>)
 80014b2:	f001 fd2c 	bl	8002f0e <HAL_UART_Transmit>
 80014b6:	e006      	b.n	80014c6 <main+0xa3e>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	2203      	movs	r2, #3
 80014be:	498e      	ldr	r1, [pc, #568]	; (80016f8 <main+0xc70>)
 80014c0:	488a      	ldr	r0, [pc, #552]	; (80016ec <main+0xc64>)
 80014c2:	f001 fd24 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 30

  uint8_t custom_line[10] = "123,56,8\r\n";
 80014c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014ca:	3b14      	subs	r3, #20
 80014cc:	4a8b      	ldr	r2, [pc, #556]	; (80016fc <main+0xc74>)
 80014ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d0:	c303      	stmia	r3!, {r0, r1}
 80014d2:	801a      	strh	r2, [r3, #0]
  static_strings_create_custom_string(string_descriptor,custom_line);
 80014d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014d8:	3b14      	subs	r3, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80014e0:	f103 0308 	add.w	r3, r3, #8
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	f002 f86a 	bl	80035be <static_strings_create_custom_string>

  if(static_strings_is_line(string_descriptor)){
 80014ea:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80014ee:	f103 0308 	add.w	r3, r3, #8
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	f002 f890 	bl	8003618 <static_strings_is_line>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <main+0xa86>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	2203      	movs	r2, #3
 8001504:	497b      	ldr	r1, [pc, #492]	; (80016f4 <main+0xc6c>)
 8001506:	4879      	ldr	r0, [pc, #484]	; (80016ec <main+0xc64>)
 8001508:	f001 fd01 	bl	8002f0e <HAL_UART_Transmit>
 800150c:	e006      	b.n	800151c <main+0xa94>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	2203      	movs	r2, #3
 8001514:	4978      	ldr	r1, [pc, #480]	; (80016f8 <main+0xc70>)
 8001516:	4875      	ldr	r0, [pc, #468]	; (80016ec <main+0xc64>)
 8001518:	f001 fcf9 	bl	8002f0e <HAL_UART_Transmit>
  }

  // reset all descriptors
  static_strings_init();
 800151c:	f001 feb4 	bl	8003288 <static_strings_init>

  // test 31-33

  static_strings_string_descriptor *token;
  static_strings_string_splitter_set_parameters(string_descriptor,',');
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001526:	f103 0308 	add.w	r3, r3, #8
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	f002 f8d2 	bl	80036d4 <static_strings_string_splitter_set_parameters>
  while(static_strings_string_splitter_get_next_token(&token)){
 8001530:	e015      	b.n	800155e <main+0xad6>
	  HAL_UART_Transmit(&huart1,token->string,token->length,HAL_MAX_DELAY);
 8001532:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001536:	3b18      	subs	r3, #24
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001540:	3b18      	subs	r3, #24
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	889a      	ldrh	r2, [r3, #4]
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	4868      	ldr	r0, [pc, #416]	; (80016ec <main+0xc64>)
 800154c:	f001 fcdf 	bl	8002f0e <HAL_UART_Transmit>
	  static_strings_deallocate(token);
 8001550:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001554:	3b18      	subs	r3, #24
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 f84d 	bl	80035f8 <static_strings_deallocate>
  while(static_strings_string_splitter_get_next_token(&token)){
 800155e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001562:	3b18      	subs	r3, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f002 f8cd 	bl	8003704 <static_strings_string_splitter_get_next_token>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e0      	bne.n	8001532 <main+0xaaa>
  }

  // test 34

  int next_token_result = static_strings_string_splitter_get_next_token(&token);
 8001570:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001574:	3b18      	subs	r3, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f002 f8c4 	bl	8003704 <static_strings_string_splitter_get_next_token>
 800157c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001580:	f103 0304 	add.w	r3, r3, #4
 8001584:	6018      	str	r0, [r3, #0]
  if(next_token_result){
 8001586:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800158a:	f103 0304 	add.w	r3, r3, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <main+0xb1c>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	2203      	movs	r2, #3
 800159a:	4956      	ldr	r1, [pc, #344]	; (80016f4 <main+0xc6c>)
 800159c:	4853      	ldr	r0, [pc, #332]	; (80016ec <main+0xc64>)
 800159e:	f001 fcb6 	bl	8002f0e <HAL_UART_Transmit>
 80015a2:	e006      	b.n	80015b2 <main+0xb2a>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	2203      	movs	r2, #3
 80015aa:	4953      	ldr	r1, [pc, #332]	; (80016f8 <main+0xc70>)
 80015ac:	484f      	ldr	r0, [pc, #316]	; (80016ec <main+0xc64>)
 80015ae:	f001 fcae 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 35

  static_strings_create_custom_string(string_descriptor,custom);
 80015b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015b6:	4619      	mov	r1, r3
 80015b8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015bc:	f103 0308 	add.w	r3, r3, #8
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	f001 fffc 	bl	80035be <static_strings_create_custom_string>
  static_strings_string_descriptor *substring = static_strings_substring(string_descriptor,2,8);
 80015c6:	2208      	movs	r2, #8
 80015c8:	2102      	movs	r1, #2
 80015ca:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015ce:	f103 0308 	add.w	r3, r3, #8
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	f002 f8f4 	bl	80037c0 <static_strings_substring>
 80015d8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015dc:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 80015de:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d011      	beq.n	800160c <main+0xb84>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 80015e8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	889a      	ldrh	r2, [r3, #4]
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	483b      	ldr	r0, [pc, #236]	; (80016ec <main+0xc64>)
 80015fe:	f001 fc86 	bl	8002f0e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8001602:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f001 fff6 	bl	80035f8 <static_strings_deallocate>
  }

  // test 36

  substring = static_strings_substring(string_descriptor,0,string_descriptor->length);
 800160c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001610:	f103 0308 	add.w	r3, r3, #8
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	889b      	ldrh	r3, [r3, #4]
 8001618:	461a      	mov	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001620:	f103 0308 	add.w	r3, r3, #8
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	f002 f8cb 	bl	80037c0 <static_strings_substring>
 800162a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800162e:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 8001630:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d011      	beq.n	800165e <main+0xbd6>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 800163a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	889a      	ldrh	r2, [r3, #4]
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	4827      	ldr	r0, [pc, #156]	; (80016ec <main+0xc64>)
 8001650:	f001 fc5d 	bl	8002f0e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8001654:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	f001 ffcd 	bl	80035f8 <static_strings_deallocate>
  }

  // test 37

  substring = static_strings_substring(string_descriptor,0,12);
 800165e:	220c      	movs	r2, #12
 8001660:	2100      	movs	r1, #0
 8001662:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001666:	f103 0308 	add.w	r3, r3, #8
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f002 f8a8 	bl	80037c0 <static_strings_substring>
 8001670:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001674:	6018      	str	r0, [r3, #0]
  if (substring != NULL) {
 8001676:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00c      	beq.n	800169a <main+0xc12>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	2203      	movs	r2, #3
 8001686:	491b      	ldr	r1, [pc, #108]	; (80016f4 <main+0xc6c>)
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <main+0xc64>)
 800168a:	f001 fc40 	bl	8002f0e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 800168e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f001 ffb0 	bl	80035f8 <static_strings_deallocate>
 8001698:	e006      	b.n	80016a8 <main+0xc20>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	2203      	movs	r2, #3
 80016a0:	4915      	ldr	r1, [pc, #84]	; (80016f8 <main+0xc70>)
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <main+0xc64>)
 80016a4:	f001 fc33 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 38

  substring = static_strings_substring(string_descriptor,-2,5);
 80016a8:	2205      	movs	r2, #5
 80016aa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80016ae:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80016b2:	f103 0308 	add.w	r3, r3, #8
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	f002 f882 	bl	80037c0 <static_strings_substring>
 80016bc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80016c0:	6018      	str	r0, [r3, #0]
  if (substring != NULL){
 80016c2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d019      	beq.n	8001700 <main+0xc78>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
 80016d0:	2203      	movs	r2, #3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <main+0xc6c>)
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <main+0xc64>)
 80016d6:	f001 fc1a 	bl	8002f0e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 80016da:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	f001 ff8a 	bl	80035f8 <static_strings_deallocate>
 80016e4:	e013      	b.n	800170e <main+0xc86>
 80016e6:	bf00      	nop
 80016e8:	20000664 	.word	0x20000664
 80016ec:	20000ca4 	.word	0x20000ca4
 80016f0:	080069b4 	.word	0x080069b4
 80016f4:	08005dc0 	.word	0x08005dc0
 80016f8:	08005dc4 	.word	0x08005dc4
 80016fc:	080069c0 	.word	0x080069c0
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	2203      	movs	r2, #3
 8001706:	49b9      	ldr	r1, [pc, #740]	; (80019ec <main+0xf64>)
 8001708:	48b9      	ldr	r0, [pc, #740]	; (80019f0 <main+0xf68>)
 800170a:	f001 fc00 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 39

  uint8_t concatenate_at_memory[] = "Hello \0";
 800170e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001712:	4ab8      	ldr	r2, [pc, #736]	; (80019f4 <main+0xf6c>)
 8001714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001718:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate_at;
  static_strings_create_custom_string(&concatenate_at,concatenate_at_memory);
 800171c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001720:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001724:	3b08      	subs	r3, #8
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f001 ff48 	bl	80035be <static_strings_create_custom_string>
  uint8_t concatenate_memory[] = "World\r\n";
 800172e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001732:	3b10      	subs	r3, #16
 8001734:	4ab0      	ldr	r2, [pc, #704]	; (80019f8 <main+0xf70>)
 8001736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173a:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate;
  static_strings_create_custom_string(&concatenate,concatenate_memory);
 800173e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001742:	3a10      	subs	r2, #16
 8001744:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001748:	3b18      	subs	r3, #24
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f001 ff36 	bl	80035be <static_strings_create_custom_string>
  static_strings_string_descriptor *concatenated;
  concatenated = static_strings_concatenate(&concatenate_at,&concatenate);
 8001752:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001756:	3a18      	subs	r2, #24
 8001758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800175c:	3b08      	subs	r3, #8
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f002 f86f 	bl	8003844 <static_strings_concatenate>
 8001766:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800176a:	f103 031c 	add.w	r3, r3, #28
 800176e:	6018      	str	r0, [r3, #0]
  if (concatenated != NULL) {
 8001770:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001774:	f103 031c 	add.w	r3, r3, #28
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d017      	beq.n	80017ae <main+0xd26>
  	  HAL_UART_Transmit(&huart1,concatenated->string,concatenated->length,HAL_MAX_DELAY);
 800177e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001782:	f103 031c 	add.w	r3, r3, #28
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800178e:	f103 031c 	add.w	r3, r3, #28
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	889a      	ldrh	r2, [r3, #4]
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	4895      	ldr	r0, [pc, #596]	; (80019f0 <main+0xf68>)
 800179c:	f001 fbb7 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(concatenated);
 80017a0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80017a4:	f103 031c 	add.w	r3, r3, #28
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f001 ff25 	bl	80035f8 <static_strings_deallocate>
  }

  // test 40

  if(static_strings_contains_string(concatenated,&concatenate_at)){
 80017ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017b2:	3b08      	subs	r3, #8
 80017b4:	4619      	mov	r1, r3
 80017b6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80017ba:	f103 031c 	add.w	r3, r3, #28
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	f002 f875 	bl	80038ae <static_strings_contains_string>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <main+0xd52>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	2203      	movs	r2, #3
 80017d0:	498a      	ldr	r1, [pc, #552]	; (80019fc <main+0xf74>)
 80017d2:	4887      	ldr	r0, [pc, #540]	; (80019f0 <main+0xf68>)
 80017d4:	f001 fb9b 	bl	8002f0e <HAL_UART_Transmit>
 80017d8:	e006      	b.n	80017e8 <main+0xd60>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	2203      	movs	r2, #3
 80017e0:	4982      	ldr	r1, [pc, #520]	; (80019ec <main+0xf64>)
 80017e2:	4883      	ldr	r0, [pc, #524]	; (80019f0 <main+0xf68>)
 80017e4:	f001 fb93 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 41

  if(static_strings_contains_string(concatenated,&concatenate)){
 80017e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ec:	3b18      	subs	r3, #24
 80017ee:	4619      	mov	r1, r3
 80017f0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80017f4:	f103 031c 	add.w	r3, r3, #28
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	f002 f858 	bl	80038ae <static_strings_contains_string>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <main+0xd8c>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	2203      	movs	r2, #3
 800180a:	497c      	ldr	r1, [pc, #496]	; (80019fc <main+0xf74>)
 800180c:	4878      	ldr	r0, [pc, #480]	; (80019f0 <main+0xf68>)
 800180e:	f001 fb7e 	bl	8002f0e <HAL_UART_Transmit>
 8001812:	e006      	b.n	8001822 <main+0xd9a>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	2203      	movs	r2, #3
 800181a:	4974      	ldr	r1, [pc, #464]	; (80019ec <main+0xf64>)
 800181c:	4874      	ldr	r0, [pc, #464]	; (80019f0 <main+0xf68>)
 800181e:	f001 fb76 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 42

  uint8_t non_contained_memory[] = "Hill\0";
 8001822:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001826:	4a76      	ldr	r2, [pc, #472]	; (8001a00 <main+0xf78>)
 8001828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182c:	6018      	str	r0, [r3, #0]
 800182e:	3304      	adds	r3, #4
 8001830:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor non_contained;
  static_strings_create_custom_string(&non_contained,non_contained_memory);
 8001832:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800183a:	3b08      	subs	r3, #8
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f001 febd 	bl	80035be <static_strings_create_custom_string>
  if(static_strings_contains_string(concatenated,&non_contained)){
 8001844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001848:	3b08      	subs	r3, #8
 800184a:	4619      	mov	r1, r3
 800184c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001850:	f103 031c 	add.w	r3, r3, #28
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f002 f82a 	bl	80038ae <static_strings_contains_string>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <main+0xde8>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	2203      	movs	r2, #3
 8001866:	4965      	ldr	r1, [pc, #404]	; (80019fc <main+0xf74>)
 8001868:	4861      	ldr	r0, [pc, #388]	; (80019f0 <main+0xf68>)
 800186a:	f001 fb50 	bl	8002f0e <HAL_UART_Transmit>
 800186e:	e006      	b.n	800187e <main+0xdf6>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	2203      	movs	r2, #3
 8001876:	495d      	ldr	r1, [pc, #372]	; (80019ec <main+0xf64>)
 8001878:	485d      	ldr	r0, [pc, #372]	; (80019f0 <main+0xf68>)
 800187a:	f001 fb48 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 43

  if(static_strings_contains_char(concatenated,'W')){
 800187e:	2157      	movs	r1, #87	; 0x57
 8001880:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001884:	f103 031c 	add.w	r3, r3, #28
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	f002 f857 	bl	800393c <static_strings_contains_char>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <main+0xe1c>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	2203      	movs	r2, #3
 800189a:	4958      	ldr	r1, [pc, #352]	; (80019fc <main+0xf74>)
 800189c:	4854      	ldr	r0, [pc, #336]	; (80019f0 <main+0xf68>)
 800189e:	f001 fb36 	bl	8002f0e <HAL_UART_Transmit>
 80018a2:	e006      	b.n	80018b2 <main+0xe2a>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	2203      	movs	r2, #3
 80018aa:	4950      	ldr	r1, [pc, #320]	; (80019ec <main+0xf64>)
 80018ac:	4850      	ldr	r0, [pc, #320]	; (80019f0 <main+0xf68>)
 80018ae:	f001 fb2e 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 44

  if(static_strings_contains_char(concatenated,'e')){
 80018b2:	2165      	movs	r1, #101	; 0x65
 80018b4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80018b8:	f103 031c 	add.w	r3, r3, #28
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f002 f83d 	bl	800393c <static_strings_contains_char>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <main+0xe50>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	2203      	movs	r2, #3
 80018ce:	494b      	ldr	r1, [pc, #300]	; (80019fc <main+0xf74>)
 80018d0:	4847      	ldr	r0, [pc, #284]	; (80019f0 <main+0xf68>)
 80018d2:	f001 fb1c 	bl	8002f0e <HAL_UART_Transmit>
 80018d6:	e006      	b.n	80018e6 <main+0xe5e>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	2203      	movs	r2, #3
 80018de:	4943      	ldr	r1, [pc, #268]	; (80019ec <main+0xf64>)
 80018e0:	4843      	ldr	r0, [pc, #268]	; (80019f0 <main+0xf68>)
 80018e2:	f001 fb14 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 45

  if(static_strings_contains_char(concatenated,'m')){
 80018e6:	216d      	movs	r1, #109	; 0x6d
 80018e8:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80018ec:	f103 031c 	add.w	r3, r3, #28
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	f002 f823 	bl	800393c <static_strings_contains_char>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <main+0xe84>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	2203      	movs	r2, #3
 8001902:	493e      	ldr	r1, [pc, #248]	; (80019fc <main+0xf74>)
 8001904:	483a      	ldr	r0, [pc, #232]	; (80019f0 <main+0xf68>)
 8001906:	f001 fb02 	bl	8002f0e <HAL_UART_Transmit>
 800190a:	e006      	b.n	800191a <main+0xe92>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2203      	movs	r2, #3
 8001912:	4936      	ldr	r1, [pc, #216]	; (80019ec <main+0xf64>)
 8001914:	4836      	ldr	r0, [pc, #216]	; (80019f0 <main+0xf68>)
 8001916:	f001 fafa 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 46

  uint8_t equal_a_memory[] = "Hall\0";
 800191a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800191e:	3b10      	subs	r3, #16
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <main+0xf7c>)
 8001922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001926:	6018      	str	r0, [r3, #0]
 8001928:	3304      	adds	r3, #4
 800192a:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_a;
  uint8_t equal_b_memory[] = "Hall\0";
 800192c:	f107 0318 	add.w	r3, r7, #24
 8001930:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <main+0xf7c>)
 8001932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001936:	6018      	str	r0, [r3, #0]
 8001938:	3304      	adds	r3, #4
 800193a:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_b;
  uint8_t non_equal_memory[] = "oil\0";
 800193c:	f107 0318 	add.w	r3, r7, #24
 8001940:	3b10      	subs	r3, #16
 8001942:	4a31      	ldr	r2, [pc, #196]	; (8001a08 <main+0xf80>)
 8001944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001948:	6018      	str	r0, [r3, #0]
 800194a:	3304      	adds	r3, #4
 800194c:	7019      	strb	r1, [r3, #0]
  static_strings_string_descriptor non_equal;
  static_strings_create_custom_string(&equal_a,equal_a_memory);
 800194e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001952:	3a10      	subs	r2, #16
 8001954:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001958:	3b18      	subs	r3, #24
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f001 fe2e 	bl	80035be <static_strings_create_custom_string>
  static_strings_create_custom_string(&equal_b,equal_b_memory);
 8001962:	f107 0218 	add.w	r2, r7, #24
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	3b08      	subs	r3, #8
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fe25 	bl	80035be <static_strings_create_custom_string>
  static_strings_create_custom_string(&non_equal,non_equal_memory);
 8001974:	f107 0218 	add.w	r2, r7, #24
 8001978:	3a10      	subs	r2, #16
 800197a:	f107 0318 	add.w	r3, r7, #24
 800197e:	3b18      	subs	r3, #24
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fe1b 	bl	80035be <static_strings_create_custom_string>

  if(static_strings_compare(&equal_a,&equal_b)){
 8001988:	f107 0218 	add.w	r2, r7, #24
 800198c:	3a08      	subs	r2, #8
 800198e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001992:	3b18      	subs	r3, #24
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f001 fff2 	bl	8003980 <static_strings_compare>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <main+0xf2a>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	2203      	movs	r2, #3
 80019a8:	4914      	ldr	r1, [pc, #80]	; (80019fc <main+0xf74>)
 80019aa:	4811      	ldr	r0, [pc, #68]	; (80019f0 <main+0xf68>)
 80019ac:	f001 faaf 	bl	8002f0e <HAL_UART_Transmit>
 80019b0:	e006      	b.n	80019c0 <main+0xf38>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	2203      	movs	r2, #3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <main+0xf64>)
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <main+0xf68>)
 80019bc:	f001 faa7 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 47

  if(static_strings_compare(&equal_a,&non_equal)){
 80019c0:	f107 0218 	add.w	r2, r7, #24
 80019c4:	3a18      	subs	r2, #24
 80019c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ca:	3b18      	subs	r3, #24
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 ffd6 	bl	8003980 <static_strings_compare>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d018      	beq.n	8001a0c <main+0xf84>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	2203      	movs	r2, #3
 80019e0:	4906      	ldr	r1, [pc, #24]	; (80019fc <main+0xf74>)
 80019e2:	4803      	ldr	r0, [pc, #12]	; (80019f0 <main+0xf68>)
 80019e4:	f001 fa93 	bl	8002f0e <HAL_UART_Transmit>
 80019e8:	e017      	b.n	8001a1a <main+0xf92>
 80019ea:	bf00      	nop
 80019ec:	08005dc4 	.word	0x08005dc4
 80019f0:	20000ca4 	.word	0x20000ca4
 80019f4:	080069cc 	.word	0x080069cc
 80019f8:	080069d4 	.word	0x080069d4
 80019fc:	08005dc0 	.word	0x08005dc0
 8001a00:	080069dc 	.word	0x080069dc
 8001a04:	080069e4 	.word	0x080069e4
 8001a08:	080069ec 	.word	0x080069ec
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	2203      	movs	r2, #3
 8001a12:	49cd      	ldr	r1, [pc, #820]	; (8001d48 <main+0x12c0>)
 8001a14:	48cd      	ldr	r0, [pc, #820]	; (8001d4c <main+0x12c4>)
 8001a16:	f001 fa7a 	bl	8002f0e <HAL_UART_Transmit>
  }

  // test 48

  static_strings_string_descriptor *var_string;
  uint8_t uint8 = 200;
 8001a1a:	23c8      	movs	r3, #200	; 0xc8
 8001a1c:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001a20:	f102 021b 	add.w	r2, r2, #27
 8001a24:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_uint8_to_string(uint8);
 8001a26:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a2a:	f103 031b 	add.w	r3, r3, #27
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 ffd3 	bl	80039dc <static_strings_uint8_to_string>
 8001a36:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a3a:	f103 0314 	add.w	r3, r3, #20
 8001a3e:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001a40:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a44:	f103 0314 	add.w	r3, r3, #20
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d017      	beq.n	8001a7e <main+0xff6>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001a4e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a52:	f103 0314 	add.w	r3, r3, #20
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a5e:	f103 0314 	add.w	r3, r3, #20
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	889a      	ldrh	r2, [r3, #4]
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	48b8      	ldr	r0, [pc, #736]	; (8001d4c <main+0x12c4>)
 8001a6c:	f001 fa4f 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001a70:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a74:	f103 0314 	add.w	r3, r3, #20
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f001 fdbd 	bl	80035f8 <static_strings_deallocate>
  }

  // test 49

  uint16_t uint16 = 64200;
 8001a7e:	f64f 23c8 	movw	r3, #64200	; 0xfac8
 8001a82:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001a86:	f102 0212 	add.w	r2, r2, #18
 8001a8a:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_uint16_to_string(uint16);
 8001a8c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a90:	f103 0312 	add.w	r3, r3, #18
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 ffd4 	bl	8003a44 <static_strings_uint16_to_string>
 8001a9c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001aa0:	f103 0314 	add.w	r3, r3, #20
 8001aa4:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001aa6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001aaa:	f103 0314 	add.w	r3, r3, #20
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <main+0x105c>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001ab4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ab8:	f103 0314 	add.w	r3, r3, #20
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ac4:	f103 0314 	add.w	r3, r3, #20
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	889a      	ldrh	r2, [r3, #4]
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	489e      	ldr	r0, [pc, #632]	; (8001d4c <main+0x12c4>)
 8001ad2:	f001 fa1c 	bl	8002f0e <HAL_UART_Transmit>
	  static_strings_deallocate(var_string);
 8001ad6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ada:	f103 0314 	add.w	r3, r3, #20
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	f001 fd8a 	bl	80035f8 <static_strings_deallocate>
  }

  // test 50

  uint32_t uint32 = 1000064200;
 8001ae4:	4b9a      	ldr	r3, [pc, #616]	; (8001d50 <main+0x12c8>)
 8001ae6:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001aea:	f102 020c 	add.w	r2, r2, #12
 8001aee:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(uint32);
 8001af0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001af4:	f103 030c 	add.w	r3, r3, #12
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f001 ffd7 	bl	8003aac <static_strings_uint32_to_string>
 8001afe:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b02:	f103 0314 	add.w	r3, r3, #20
 8001b06:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001b08:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b0c:	f103 0314 	add.w	r3, r3, #20
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d017      	beq.n	8001b46 <main+0x10be>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b16:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b1a:	f103 0314 	add.w	r3, r3, #20
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6819      	ldr	r1, [r3, #0]
 8001b22:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b26:	f103 0314 	add.w	r3, r3, #20
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	889a      	ldrh	r2, [r3, #4]
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	4886      	ldr	r0, [pc, #536]	; (8001d4c <main+0x12c4>)
 8001b34:	f001 f9eb 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001b38:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b3c:	f103 0314 	add.w	r3, r3, #20
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	f001 fd59 	bl	80035f8 <static_strings_deallocate>
  }

  // test 51

  int8_t int8 = 100;
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001b4c:	f102 020b 	add.w	r2, r2, #11
 8001b50:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_int8_to_string(int8);
 8001b52:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b56:	f103 030b 	add.w	r3, r3, #11
 8001b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 ffd6 	bl	8003b10 <static_strings_int8_to_string>
 8001b64:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b68:	f103 0314 	add.w	r3, r3, #20
 8001b6c:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001b6e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b72:	f103 0314 	add.w	r3, r3, #20
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <main+0x1124>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b7c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b80:	f103 0314 	add.w	r3, r3, #20
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b8c:	f103 0314 	add.w	r3, r3, #20
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	889a      	ldrh	r2, [r3, #4]
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	486c      	ldr	r0, [pc, #432]	; (8001d4c <main+0x12c4>)
 8001b9a:	f001 f9b8 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001b9e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ba2:	f103 0314 	add.w	r3, r3, #20
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f001 fd26 	bl	80035f8 <static_strings_deallocate>
  }

  // test 52

  int16_t int16 = -32100;
 8001bac:	f248 239c 	movw	r3, #33436	; 0x829c
 8001bb0:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001bb4:	f102 0208 	add.w	r2, r2, #8
 8001bb8:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_int16_to_string(int16);
 8001bba:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bbe:	f103 0308 	add.w	r3, r3, #8
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 ffd6 	bl	8003b78 <static_strings_int16_to_string>
 8001bcc:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bd0:	f103 0314 	add.w	r3, r3, #20
 8001bd4:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001bd6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bda:	f103 0314 	add.w	r3, r3, #20
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d017      	beq.n	8001c14 <main+0x118c>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001be4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001be8:	f103 0314 	add.w	r3, r3, #20
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bf4:	f103 0314 	add.w	r3, r3, #20
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	889a      	ldrh	r2, [r3, #4]
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	4852      	ldr	r0, [pc, #328]	; (8001d4c <main+0x12c4>)
 8001c02:	f001 f984 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001c06:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c0a:	f103 0314 	add.w	r3, r3, #20
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f001 fcf2 	bl	80035f8 <static_strings_deallocate>
  }

  // test 53

  int32_t int32 = 500032100;
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <main+0x12cc>)
 8001c16:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001c1a:	f102 0204 	add.w	r2, r2, #4
 8001c1e:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(int32);
 8001c20:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c24:	f103 0304 	add.w	r3, r3, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 ff3e 	bl	8003aac <static_strings_uint32_to_string>
 8001c30:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c34:	f103 0314 	add.w	r3, r3, #20
 8001c38:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c3a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c3e:	f103 0314 	add.w	r3, r3, #20
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d017      	beq.n	8001c78 <main+0x11f0>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c48:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c4c:	f103 0314 	add.w	r3, r3, #20
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c58:	f103 0314 	add.w	r3, r3, #20
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	889a      	ldrh	r2, [r3, #4]
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	4839      	ldr	r0, [pc, #228]	; (8001d4c <main+0x12c4>)
 8001c66:	f001 f952 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001c6a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c6e:	f103 0314 	add.w	r3, r3, #20
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f001 fcc0 	bl	80035f8 <static_strings_deallocate>
  }

  // test 54

  float float_number = 19.60232;
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <main+0x12d0>)
 8001c7a:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001c7e:	6013      	str	r3, [r2, #0]
  var_string = static_strings_float_to_string(float_number);
 8001c80:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	f001 ffab 	bl	8003be0 <static_strings_float_to_string>
 8001c8a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c8e:	f103 0314 	add.w	r3, r3, #20
 8001c92:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c94:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c98:	f103 0314 	add.w	r3, r3, #20
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <main+0x124a>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001ca2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ca6:	f103 0314 	add.w	r3, r3, #20
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001cb2:	f103 0314 	add.w	r3, r3, #20
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	889a      	ldrh	r2, [r3, #4]
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	4823      	ldr	r0, [pc, #140]	; (8001d4c <main+0x12c4>)
 8001cc0:	f001 f925 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001cc4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001cc8:	f103 0314 	add.w	r3, r3, #20
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	f001 fc93 	bl	80035f8 <static_strings_deallocate>
  }

  // test 55

  double double_number = -1924.2342;
 8001cd2:	a41b      	add	r4, pc, #108	; (adr r4, 8001d40 <main+0x12b8>)
 8001cd4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cd8:	f507 52d1 	add.w	r2, r7, #6688	; 0x1a20
 8001cdc:	f102 0218 	add.w	r2, r2, #24
 8001ce0:	e9c2 3400 	strd	r3, r4, [r2]
  var_string = static_strings_double_to_string(double_number);
 8001ce4:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001ce8:	f103 0318 	add.w	r3, r3, #24
 8001cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf0:	f001 ffae 	bl	8003c50 <static_strings_double_to_string>
 8001cf4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001cf8:	f103 0314 	add.w	r3, r3, #20
 8001cfc:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001cfe:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d02:	f103 0314 	add.w	r3, r3, #20
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d017      	beq.n	8001d3c <main+0x12b4>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001d0c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d10:	f103 0314 	add.w	r3, r3, #20
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d1c:	f103 0314 	add.w	r3, r3, #20
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	889a      	ldrh	r2, [r3, #4]
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	4808      	ldr	r0, [pc, #32]	; (8001d4c <main+0x12c4>)
 8001d2a:	f001 f8f0 	bl	8002f0e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001d2e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d32:	f103 0314 	add.w	r3, r3, #20
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f001 fc5e 	bl	80035f8 <static_strings_deallocate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <main+0x12b4>
 8001d3e:	bf00      	nop
 8001d40:	d21ff2e5 	.word	0xd21ff2e5
 8001d44:	c09e10ef 	.word	0xc09e10ef
 8001d48:	08005dc4 	.word	0x08005dc4
 8001d4c:	20000ca4 	.word	0x20000ca4
 8001d50:	3b9bc4c8 	.word	0x3b9bc4c8
 8001d54:	1dcde264 	.word	0x1dcde264
 8001d58:	419cd18d 	.word	0x419cd18d

08001d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b090      	sub	sp, #64	; 0x40
 8001d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	2228      	movs	r2, #40	; 0x28
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 ffd9 	bl	8003d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d90:	2302      	movs	r3, #2
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fc49 	bl	800263c <HAL_RCC_OscConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001db0:	f000 f866 	bl	8001e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db4:	230f      	movs	r3, #15
 8001db6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db8:	2302      	movs	r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 feb4 	bl	8002b3c <HAL_RCC_ClockConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dda:	f000 f851 	bl	8001e80 <Error_Handler>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3740      	adds	r7, #64	; 0x40
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_USART1_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e20:	f001 f828 	bl	8002e74 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f000 f829 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000ca4 	.word	0x20000ca4
 8001e38:	40013800 	.word	0x40013800

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_GPIO_Init+0x40>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <MX_GPIO_Init+0x40>)
 8001e48:	f043 0320 	orr.w	r3, r3, #32
 8001e4c:	6193      	str	r3, [r2, #24]
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_GPIO_Init+0x40>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_GPIO_Init+0x40>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <MX_GPIO_Init+0x40>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <MX_GPIO_Init+0x40>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_MspInit+0x5c>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_MspInit+0x5c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6193      	str	r3, [r2, #24]
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_MspInit+0x5c>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_MspInit+0x5c>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_MspInit+0x5c>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_MspInit+0x5c>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_MspInit+0x60>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_MspInit+0x60>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010000 	.word	0x40010000

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <HAL_UART_MspInit+0x8c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d131      	bne.n	8001f74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_UART_MspInit+0x90>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_UART_MspInit+0x90>)
 8001f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_UART_MspInit+0x90>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_UART_MspInit+0x90>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_UART_MspInit+0x90>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_UART_MspInit+0x90>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <HAL_UART_MspInit+0x94>)
 8001f56:	f000 fa17 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <HAL_UART_MspInit+0x94>)
 8001f70:	f000 fa0a 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010800 	.word	0x40010800

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <HardFault_Handler+0x4>

08001f9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <MemManage_Handler+0x4>

08001fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <BusFault_Handler+0x4>

08001fa6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <UsageFault_Handler+0x4>

08001fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f8d8 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <_sbrk+0x5c>)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <_sbrk+0x60>)
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_sbrk+0x64>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <_sbrk+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d207      	bcs.n	800201c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800200c:	f001 fe54 	bl	8003cb8 <__errno>
 8002010:	4602      	mov	r2, r0
 8002012:	230c      	movs	r3, #12
 8002014:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e009      	b.n	8002030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <_sbrk+0x64>)
 800202c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20005000 	.word	0x20005000
 800203c:	00000400 	.word	0x00000400
 8002040:	200001f8 	.word	0x200001f8
 8002044:	20000eb8 	.word	0x20000eb8

08002048 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <SystemInit+0x5c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <SystemInit+0x5c>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <SystemInit+0x5c>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4911      	ldr	r1, [pc, #68]	; (80020a4 <SystemInit+0x5c>)
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <SystemInit+0x60>)
 8002060:	4013      	ands	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <SystemInit+0x5c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <SystemInit+0x5c>)
 800206a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800206e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002072:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <SystemInit+0x5c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SystemInit+0x5c>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SystemInit+0x5c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SystemInit+0x5c>)
 8002086:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800208a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SystemInit+0x5c>)
 800208e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002092:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SystemInit+0x64>)
 8002096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209a:	609a      	str	r2, [r3, #8]
#endif 
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40021000 	.word	0x40021000
 80020a8:	f8ff0000 	.word	0xf8ff0000
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020b2:	e003      	b.n	80020bc <LoopCopyDataInit>

080020b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80020b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80020ba:	3104      	adds	r1, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80020bc:	480a      	ldr	r0, [pc, #40]	; (80020e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80020c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80020c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020c4:	d3f6      	bcc.n	80020b4 <CopyDataInit>
  ldr r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020c8:	e002      	b.n	80020d0 <LoopFillZerobss>

080020ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020cc:	f842 3b04 	str.w	r3, [r2], #4

080020d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020d4:	d3f9      	bcc.n	80020ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020d6:	f7ff ffb7 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f001 fdf3 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020de:	f7fe fcd3 	bl	8000a88 <main>
  bx lr
 80020e2:	4770      	bx	lr
  ldr r3, =_sidata
 80020e4:	08006ca8 	.word	0x08006ca8
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80020f0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80020f4:	20000eb4 	.word	0x20000eb4

080020f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC1_2_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_Init+0x28>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_Init+0x28>)
 8002106:	f043 0310 	orr.w	r3, r3, #16
 800210a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 f907 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff feb8 	bl	8001e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f911 	bl	800236e <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 f8e7 	bl	8002336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_IncTick+0x1c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_IncTick+0x20>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_IncTick+0x20>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	20000008 	.word	0x20000008
 80021a8:	20000eac 	.word	0x20000eac

080021ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <HAL_GetTick+0x10>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	20000eac 	.word	0x20000eac

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f7ff ff90 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff49 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff5e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff90 	bl	8002278 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5f 	bl	8002224 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffb0 	bl	80022dc <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b08b      	sub	sp, #44	; 0x2c
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	e127      	b.n	80025ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800239c:	2201      	movs	r2, #1
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f040 8116 	bne.w	80025e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d034      	beq.n	800242c <HAL_GPIO_Init+0xa4>
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d80d      	bhi.n	80023e2 <HAL_GPIO_Init+0x5a>
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d02b      	beq.n	8002422 <HAL_GPIO_Init+0x9a>
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d804      	bhi.n	80023d8 <HAL_GPIO_Init+0x50>
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d031      	beq.n	8002436 <HAL_GPIO_Init+0xae>
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d01c      	beq.n	8002410 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023d6:	e048      	b.n	800246a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d043      	beq.n	8002464 <HAL_GPIO_Init+0xdc>
 80023dc:	2b11      	cmp	r3, #17
 80023de:	d01b      	beq.n	8002418 <HAL_GPIO_Init+0x90>
          break;
 80023e0:	e043      	b.n	800246a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023e2:	4a89      	ldr	r2, [pc, #548]	; (8002608 <HAL_GPIO_Init+0x280>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d026      	beq.n	8002436 <HAL_GPIO_Init+0xae>
 80023e8:	4a87      	ldr	r2, [pc, #540]	; (8002608 <HAL_GPIO_Init+0x280>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d806      	bhi.n	80023fc <HAL_GPIO_Init+0x74>
 80023ee:	4a87      	ldr	r2, [pc, #540]	; (800260c <HAL_GPIO_Init+0x284>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d020      	beq.n	8002436 <HAL_GPIO_Init+0xae>
 80023f4:	4a86      	ldr	r2, [pc, #536]	; (8002610 <HAL_GPIO_Init+0x288>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01d      	beq.n	8002436 <HAL_GPIO_Init+0xae>
          break;
 80023fa:	e036      	b.n	800246a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023fc:	4a85      	ldr	r2, [pc, #532]	; (8002614 <HAL_GPIO_Init+0x28c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0xae>
 8002402:	4a85      	ldr	r2, [pc, #532]	; (8002618 <HAL_GPIO_Init+0x290>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d016      	beq.n	8002436 <HAL_GPIO_Init+0xae>
 8002408:	4a84      	ldr	r2, [pc, #528]	; (800261c <HAL_GPIO_Init+0x294>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0xae>
          break;
 800240e:	e02c      	b.n	800246a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e028      	b.n	800246a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e023      	b.n	800246a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3308      	adds	r3, #8
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e01e      	b.n	800246a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	330c      	adds	r3, #12
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e019      	b.n	800246a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243e:	2304      	movs	r3, #4
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e012      	b.n	800246a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800244c:	2308      	movs	r3, #8
 800244e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	611a      	str	r2, [r3, #16]
          break;
 8002456:	e008      	b.n	800246a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	615a      	str	r2, [r3, #20]
          break;
 8002462:	e002      	b.n	800246a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2bff      	cmp	r3, #255	; 0xff
 800246e:	d801      	bhi.n	8002474 <HAL_GPIO_Init+0xec>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	e001      	b.n	8002478 <HAL_GPIO_Init+0xf0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2bff      	cmp	r3, #255	; 0xff
 800247e:	d802      	bhi.n	8002486 <HAL_GPIO_Init+0xfe>
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	e002      	b.n	800248c <HAL_GPIO_Init+0x104>
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3b08      	subs	r3, #8
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	210f      	movs	r1, #15
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	401a      	ands	r2, r3
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	431a      	orrs	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8096 	beq.w	80025e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ba:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_GPIO_Init+0x298>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_GPIO_Init+0x298>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6193      	str	r3, [r2, #24]
 80024c6:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_GPIO_Init+0x298>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d2:	4a54      	ldr	r2, [pc, #336]	; (8002624 <HAL_GPIO_Init+0x29c>)
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4013      	ands	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <HAL_GPIO_Init+0x2a0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_GPIO_Init+0x19e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4a      	ldr	r2, [pc, #296]	; (800262c <HAL_GPIO_Init+0x2a4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00d      	beq.n	8002522 <HAL_GPIO_Init+0x19a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a49      	ldr	r2, [pc, #292]	; (8002630 <HAL_GPIO_Init+0x2a8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <HAL_GPIO_Init+0x196>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_GPIO_Init+0x2ac>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_GPIO_Init+0x192>
 8002516:	2303      	movs	r3, #3
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x1a0>
 800251a:	2304      	movs	r3, #4
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x1a0>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x1a0>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x1a0>
 8002526:	2300      	movs	r3, #0
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002538:	493a      	ldr	r1, [pc, #232]	; (8002624 <HAL_GPIO_Init+0x29c>)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002552:	4b39      	ldr	r3, [pc, #228]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4938      	ldr	r1, [pc, #224]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	43db      	mvns	r3, r3
 8002568:	4933      	ldr	r1, [pc, #204]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 800256a:	4013      	ands	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	492e      	ldr	r1, [pc, #184]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	43db      	mvns	r3, r3
 8002590:	4929      	ldr	r1, [pc, #164]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 8002592:	4013      	ands	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	4924      	ldr	r1, [pc, #144]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	491f      	ldr	r1, [pc, #124]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	491a      	ldr	r1, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60cb      	str	r3, [r1, #12]
 80025d6:	e006      	b.n	80025e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	43db      	mvns	r3, r3
 80025e0:	4915      	ldr	r1, [pc, #84]	; (8002638 <HAL_GPIO_Init+0x2b0>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f aed0 	bne.w	800239c <HAL_GPIO_Init+0x14>
  }
}
 80025fc:	bf00      	nop
 80025fe:	372c      	adds	r7, #44	; 0x2c
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	10210000 	.word	0x10210000
 800260c:	10110000 	.word	0x10110000
 8002610:	10120000 	.word	0x10120000
 8002614:	10310000 	.word	0x10310000
 8002618:	10320000 	.word	0x10320000
 800261c:	10220000 	.word	0x10220000
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	40010800 	.word	0x40010800
 800262c:	40010c00 	.word	0x40010c00
 8002630:	40011000 	.word	0x40011000
 8002634:	40011400 	.word	0x40011400
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e26c      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8087 	beq.w	800276a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265c:	4b92      	ldr	r3, [pc, #584]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b04      	cmp	r3, #4
 8002666:	d00c      	beq.n	8002682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002668:	4b8f      	ldr	r3, [pc, #572]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d112      	bne.n	800269a <HAL_RCC_OscConfig+0x5e>
 8002674:	4b8c      	ldr	r3, [pc, #560]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d10b      	bne.n	800269a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d06c      	beq.n	8002768 <HAL_RCC_OscConfig+0x12c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d168      	bne.n	8002768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e246      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x76>
 80026a4:	4b80      	ldr	r3, [pc, #512]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a7f      	ldr	r2, [pc, #508]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	e02e      	b.n	8002710 <HAL_RCC_OscConfig+0xd4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b7b      	ldr	r3, [pc, #492]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7a      	ldr	r2, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b78      	ldr	r3, [pc, #480]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a77      	ldr	r2, [pc, #476]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0xd4>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0xbc>
 80026de:	4b72      	ldr	r3, [pc, #456]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a71      	ldr	r2, [pc, #452]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6f      	ldr	r3, [pc, #444]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6e      	ldr	r2, [pc, #440]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0xd4>
 80026f8:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6a      	ldr	r2, [pc, #424]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a67      	ldr	r2, [pc, #412]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fd48 	bl	80021ac <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7ff fd44 	bl	80021ac <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e1fa      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0xe4>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff fd34 	bl	80021ac <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff fd30 	bl	80021ac <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1e6      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x10c>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d063      	beq.n	800283e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002776:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x18c>
 800278e:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x176>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1ba      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4939      	ldr	r1, [pc, #228]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	e03a      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d0:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCC_OscConfig+0x270>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7ff fce9 	bl	80021ac <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7ff fce5 	bl	80021ac <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e19b      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4927      	ldr	r1, [pc, #156]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x270>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff fcc8 	bl	80021ac <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7ff fcc4 	bl	80021ac <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e17a      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03a      	beq.n	80028c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d019      	beq.n	8002886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_RCC_OscConfig+0x274>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7ff fca8 	bl	80021ac <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002860:	f7ff fca4 	bl	80021ac <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e15a      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f000 fada 	bl	8002e38 <RCC_Delay>
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCC_OscConfig+0x274>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7ff fc8e 	bl	80021ac <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002892:	e00f      	b.n	80028b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002894:	f7ff fc8a 	bl	80021ac <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d908      	bls.n	80028b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e140      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	42420000 	.word	0x42420000
 80028b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	4b9e      	ldr	r3, [pc, #632]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e9      	bne.n	8002894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a6 	beq.w	8002a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d2:	4b97      	ldr	r3, [pc, #604]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b94      	ldr	r3, [pc, #592]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a93      	ldr	r2, [pc, #588]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b91      	ldr	r3, [pc, #580]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d118      	bne.n	8002938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b8b      	ldr	r3, [pc, #556]	; (8002b34 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a8a      	ldr	r2, [pc, #552]	; (8002b34 <HAL_RCC_OscConfig+0x4f8>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7ff fc4b 	bl	80021ac <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7ff fc47 	bl	80021ac <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b64      	cmp	r3, #100	; 0x64
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0fd      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	4b81      	ldr	r3, [pc, #516]	; (8002b34 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x312>
 8002940:	4b7b      	ldr	r3, [pc, #492]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a7a      	ldr	r2, [pc, #488]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	e02d      	b.n	80029aa <HAL_RCC_OscConfig+0x36e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x334>
 8002956:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a75      	ldr	r2, [pc, #468]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6213      	str	r3, [r2, #32]
 8002962:	4b73      	ldr	r3, [pc, #460]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a72      	ldr	r2, [pc, #456]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	f023 0304 	bic.w	r3, r3, #4
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	e01c      	b.n	80029aa <HAL_RCC_OscConfig+0x36e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x356>
 8002978:	4b6d      	ldr	r3, [pc, #436]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	4b6a      	ldr	r3, [pc, #424]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4a69      	ldr	r2, [pc, #420]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6213      	str	r3, [r2, #32]
 8002990:	e00b      	b.n	80029aa <HAL_RCC_OscConfig+0x36e>
 8002992:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a66      	ldr	r2, [pc, #408]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	4b64      	ldr	r3, [pc, #400]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a63      	ldr	r2, [pc, #396]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d015      	beq.n	80029de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7ff fbfb 	bl	80021ac <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7ff fbf7 	bl	80021ac <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0ab      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ee      	beq.n	80029ba <HAL_RCC_OscConfig+0x37e>
 80029dc:	e014      	b.n	8002a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7ff fbe5 	bl	80021ac <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7ff fbe1 	bl	80021ac <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e095      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ee      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d105      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a47      	ldr	r2, [pc, #284]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8081 	beq.w	8002b26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a24:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d061      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d146      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a38:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <HAL_RCC_OscConfig+0x4fc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff fbb5 	bl	80021ac <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7ff fbb1 	bl	80021ac <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e067      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d108      	bne.n	8002a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	492d      	ldr	r1, [pc, #180]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a19      	ldr	r1, [r3, #32]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	430b      	orrs	r3, r1
 8002a92:	4927      	ldr	r1, [pc, #156]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x4fc>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7ff fb85 	bl	80021ac <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7ff fb81 	bl	80021ac <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e037      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x46a>
 8002ac4:	e02f      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_RCC_OscConfig+0x4fc>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff fb6e 	bl	80021ac <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7ff fb6a 	bl	80021ac <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e020      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x498>
 8002af2:	e018      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e013      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d106      	bne.n	8002b22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
 8002b38:	42420060 	.word	0x42420060

08002b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0d0      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d910      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b67      	ldr	r3, [pc, #412]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	4965      	ldr	r1, [pc, #404]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b8      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ba2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	494d      	ldr	r1, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d040      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d115      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e073      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06b      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1a:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4936      	ldr	r1, [pc, #216]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7ff fabe 	bl	80021ac <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7ff faba 	bl	80021ac <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e053      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 020c 	and.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d210      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4922      	ldr	r1, [pc, #136]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cca:	f000 f821 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	fa21 f303 	lsr.w	r3, r1, r3
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fa1c 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08006a28 	.word	0x08006a28
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	20000004 	.word	0x20000004

08002d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	b490      	push	{r4, r7}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d18:	1d3c      	adds	r4, r7, #4
 8002d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x40>
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x46>
 8002d4e:	e02d      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d50:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d52:	623b      	str	r3, [r7, #32]
      break;
 8002d54:	e02d      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	0c9b      	lsrs	r3, r3, #18
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d62:	4413      	add	r3, r2
 8002d64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	0c5b      	lsrs	r3, r3, #17
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d82:	4413      	add	r3, r2
 8002d84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d8e:	fb02 f203 	mul.w	r2, r2, r3
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9a:	e004      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	623b      	str	r3, [r7, #32]
      break;
 8002daa:	e002      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dae:	623b      	str	r3, [r7, #32]
      break;
 8002db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db2:	6a3b      	ldr	r3, [r7, #32]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3728      	adds	r7, #40	; 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc90      	pop	{r4, r7}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	080069f4 	.word	0x080069f4
 8002dc4:	08006a04 	.word	0x08006a04
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	007a1200 	.word	0x007a1200
 8002dd0:	003d0900 	.word	0x003d0900

08002dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	; (8002de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff2 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df0:	4601      	mov	r1, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08006a38 	.word	0x08006a38

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0adb      	lsrs	r3, r3, #11
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08006a38 	.word	0x08006a38

08002e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <RCC_Delay+0x34>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <RCC_Delay+0x38>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0a5b      	lsrs	r3, r3, #9
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e54:	bf00      	nop
  }
  while (Delay --);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e5a      	subs	r2, r3, #1
 8002e5a:	60fa      	str	r2, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f9      	bne.n	8002e54 <RCC_Delay+0x1c>
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	10624dd3 	.word	0x10624dd3

08002e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e03f      	b.n	8002f06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff f828 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f90b 	bl	80030d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b088      	sub	sp, #32
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	f040 8083 	bne.w	8003036 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Transmit+0x2e>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e07b      	b.n	8003038 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Transmit+0x40>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e074      	b.n	8003038 <HAL_UART_Transmit+0x12a>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2221      	movs	r2, #33	; 0x21
 8002f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f64:	f7ff f922 	bl	80021ac <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f76:	e042      	b.n	8002ffe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8e:	d122      	bne.n	8002fd6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f850 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e046      	b.n	8003038 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	e017      	b.n	8002ffe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	e013      	b.n	8002ffe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f82d 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e023      	b.n	8003038 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	60ba      	str	r2, [r7, #8]
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1b7      	bne.n	8002f78 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	2140      	movs	r1, #64	; 0x40
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f814 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e00a      	b.n	8003038 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003050:	e02c      	b.n	80030ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d028      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x30>
 8003060:	f7ff f8a4 	bl	80021ac <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	429a      	cmp	r2, r3
 800306e:	d21d      	bcs.n	80030ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800307e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e00f      	b.n	80030cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d0c3      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800310e:	f023 030c 	bic.w	r3, r3, #12
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	430b      	orrs	r3, r1
 800311a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a52      	ldr	r2, [pc, #328]	; (8003280 <UART_SetConfig+0x1ac>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d14e      	bne.n	80031da <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800313c:	f7ff fe68 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8003140:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009a      	lsls	r2, r3, #2
 800314c:	441a      	add	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <UART_SetConfig+0x1b0>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	0119      	lsls	r1, r3, #4
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fbb2 f2f3 	udiv	r2, r2, r3
 8003178:	4b42      	ldr	r3, [pc, #264]	; (8003284 <UART_SetConfig+0x1b0>)
 800317a:	fba3 0302 	umull	r0, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2064      	movs	r0, #100	; 0x64
 8003182:	fb00 f303 	mul.w	r3, r0, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a3d      	ldr	r2, [pc, #244]	; (8003284 <UART_SetConfig+0x1b0>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003198:	4419      	add	r1, r3
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <UART_SetConfig+0x1b0>)
 80031b2:	fba3 0302 	umull	r0, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2064      	movs	r0, #100	; 0x64
 80031ba:	fb00 f303 	mul.w	r3, r0, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	3332      	adds	r3, #50	; 0x32
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <UART_SetConfig+0x1b0>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	440a      	add	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80031d8:	e04d      	b.n	8003276 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80031da:	f7ff fe05 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 80031de:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009a      	lsls	r2, r3, #2
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	4a23      	ldr	r2, [pc, #140]	; (8003284 <UART_SetConfig+0x1b0>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	0119      	lsls	r1, r3, #4
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009a      	lsls	r2, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	fbb2 f2f3 	udiv	r2, r2, r3
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <UART_SetConfig+0x1b0>)
 8003218:	fba3 0302 	umull	r0, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2064      	movs	r0, #100	; 0x64
 8003220:	fb00 f303 	mul.w	r3, r0, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	3332      	adds	r3, #50	; 0x32
 800322a:	4a16      	ldr	r2, [pc, #88]	; (8003284 <UART_SetConfig+0x1b0>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003236:	4419      	add	r1, r3
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009a      	lsls	r2, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	fbb2 f2f3 	udiv	r2, r2, r3
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <UART_SetConfig+0x1b0>)
 8003250:	fba3 0302 	umull	r0, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	2064      	movs	r0, #100	; 0x64
 8003258:	fb00 f303 	mul.w	r3, r0, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	3332      	adds	r3, #50	; 0x32
 8003262:	4a08      	ldr	r2, [pc, #32]	; (8003284 <UART_SetConfig+0x1b0>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	f003 020f 	and.w	r2, r3, #15
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	440a      	add	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40013800 	.word	0x40013800
 8003284:	51eb851f 	.word	0x51eb851f

08003288 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	e018      	b.n	80032c6 <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2232      	movs	r2, #50	; 0x32
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	4a4d      	ldr	r2, [pc, #308]	; (80033d4 <static_strings_init+0x14c>)
 800329e:	441a      	add	r2, r3
 80032a0:	494d      	ldr	r1, [pc, #308]	; (80033d8 <static_strings_init+0x150>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <static_strings_init+0x150>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	2200      	movs	r2, #0
 80032b2:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80032b4:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <static_strings_init+0x150>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	2200      	movs	r2, #0
 80032be:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3301      	adds	r3, #1
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	dde3      	ble.n	8003294 <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	e018      	b.n	8003304 <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2264      	movs	r2, #100	; 0x64
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	4a40      	ldr	r2, [pc, #256]	; (80033dc <static_strings_init+0x154>)
 80032dc:	441a      	add	r2, r3
 80032de:	4940      	ldr	r1, [pc, #256]	; (80033e0 <static_strings_init+0x158>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 80032e6:	4a3e      	ldr	r2, [pc, #248]	; (80033e0 <static_strings_init+0x158>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	2201      	movs	r2, #1
 80032f0:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80032f2:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <static_strings_init+0x158>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	2200      	movs	r2, #0
 80032fc:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3301      	adds	r3, #1
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b05      	cmp	r3, #5
 8003308:	dde3      	ble.n	80032d2 <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	e018      	b.n	8003342 <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	22c8      	movs	r2, #200	; 0xc8
 8003314:	fb02 f303 	mul.w	r3, r2, r3
 8003318:	4a32      	ldr	r2, [pc, #200]	; (80033e4 <static_strings_init+0x15c>)
 800331a:	441a      	add	r2, r3
 800331c:	4932      	ldr	r1, [pc, #200]	; (80033e8 <static_strings_init+0x160>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 8003324:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <static_strings_init+0x160>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	2202      	movs	r2, #2
 800332e:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <static_strings_init+0x160>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	2200      	movs	r2, #0
 800333a:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	dde3      	ble.n	8003310 <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003348:	2300      	movs	r3, #0
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	e019      	b.n	8003382 <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <static_strings_init+0x164>)
 800335a:	441a      	add	r2, r3
 800335c:	4924      	ldr	r1, [pc, #144]	; (80033f0 <static_strings_init+0x168>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 8003364:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <static_strings_init+0x168>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	2203      	movs	r2, #3
 800336e:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003370:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <static_strings_init+0x168>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	2200      	movs	r2, #0
 800337a:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	dde2      	ble.n	800334e <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	e019      	b.n	80033c2 <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <static_strings_init+0x16c>)
 800339a:	441a      	add	r2, r3
 800339c:	4916      	ldr	r1, [pc, #88]	; (80033f8 <static_strings_init+0x170>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <static_strings_init+0x170>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	2204      	movs	r2, #4
 80033ae:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <static_strings_init+0x170>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	2200      	movs	r2, #0
 80033ba:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3301      	adds	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	dde2      	ble.n	800338e <static_strings_init+0x106>
	}
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000470 	.word	0x20000470
 80033d8:	20000a60 	.word	0x20000a60
 80033dc:	20000218 	.word	0x20000218
 80033e0:	20000e74 	.word	0x20000e74
 80033e4:	20000ce4 	.word	0x20000ce4
 80033e8:	20000a50 	.word	0x20000a50
 80033ec:	20000ab0 	.word	0x20000ab0
 80033f0:	20000ea4 	.word	0x20000ea4
 80033f4:	20000668 	.word	0x20000668
 80033f8:	20000210 	.word	0x20000210

080033fc <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b32      	cmp	r3, #50	; 0x32
 800340a:	d81a      	bhi.n	8003442 <static_strings_allocate+0x46>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e014      	b.n	800343c <static_strings_allocate+0x40>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003412:	4a51      	ldr	r2, [pc, #324]	; (8003558 <static_strings_allocate+0x15c>)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	79db      	ldrb	r3, [r3, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <static_strings_allocate+0x3a>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003420:	4a4d      	ldr	r2, [pc, #308]	; (8003558 <static_strings_allocate+0x15c>)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	2201      	movs	r2, #1
 800342a:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_short_strings_descriptors[i];
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4a49      	ldr	r2, [pc, #292]	; (8003558 <static_strings_allocate+0x15c>)
 8003432:	4413      	add	r3, r2
 8003434:	e08b      	b.n	800354e <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3301      	adds	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b09      	cmp	r3, #9
 8003440:	dde7      	ble.n	8003412 <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b64      	cmp	r3, #100	; 0x64
 8003446:	d81a      	bhi.n	800347e <static_strings_allocate+0x82>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e014      	b.n	8003478 <static_strings_allocate+0x7c>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800344e:	4a43      	ldr	r2, [pc, #268]	; (800355c <static_strings_allocate+0x160>)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	79db      	ldrb	r3, [r3, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <static_strings_allocate+0x76>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 800345c:	4a3f      	ldr	r2, [pc, #252]	; (800355c <static_strings_allocate+0x160>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	2201      	movs	r2, #1
 8003466:	71da      	strb	r2, [r3, #7]
				return &static_strings_short_strings_descriptors[i];
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4a3b      	ldr	r2, [pc, #236]	; (800355c <static_strings_allocate+0x160>)
 800346e:	4413      	add	r3, r2
 8003470:	e06d      	b.n	800354e <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3301      	adds	r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b05      	cmp	r3, #5
 800347c:	dde7      	ble.n	800344e <static_strings_allocate+0x52>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2bc8      	cmp	r3, #200	; 0xc8
 8003482:	d81a      	bhi.n	80034ba <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e014      	b.n	80034b4 <static_strings_allocate+0xb8>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800348a:	4a35      	ldr	r2, [pc, #212]	; (8003560 <static_strings_allocate+0x164>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	79db      	ldrb	r3, [r3, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <static_strings_allocate+0xb2>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003498:	4a31      	ldr	r2, [pc, #196]	; (8003560 <static_strings_allocate+0x164>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	2201      	movs	r2, #1
 80034a2:	71da      	strb	r2, [r3, #7]
				return &static_strings_medium_strings_descriptors[i];
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4a2d      	ldr	r2, [pc, #180]	; (8003560 <static_strings_allocate+0x164>)
 80034aa:	4413      	add	r3, r2
 80034ac:	e04f      	b.n	800354e <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3301      	adds	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	dde7      	ble.n	800348a <static_strings_allocate+0x8e>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034c0:	d81a      	bhi.n	80034f8 <static_strings_allocate+0xfc>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e014      	b.n	80034f2 <static_strings_allocate+0xf6>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80034c8:	4a26      	ldr	r2, [pc, #152]	; (8003564 <static_strings_allocate+0x168>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	79db      	ldrb	r3, [r3, #7]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <static_strings_allocate+0xf0>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80034d6:	4a23      	ldr	r2, [pc, #140]	; (8003564 <static_strings_allocate+0x168>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	2201      	movs	r2, #1
 80034e0:	71da      	strb	r2, [r3, #7]
				return &static_strings_long_strings_descriptors[i];
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <static_strings_allocate+0x168>)
 80034e8:	4413      	add	r3, r2
 80034ea:	e030      	b.n	800354e <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	dde7      	ble.n	80034c8 <static_strings_allocate+0xcc>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034fe:	d81a      	bhi.n	8003536 <static_strings_allocate+0x13a>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e014      	b.n	8003530 <static_strings_allocate+0x134>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <static_strings_allocate+0x16c>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	79db      	ldrb	r3, [r3, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <static_strings_allocate+0x12e>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <static_strings_allocate+0x16c>)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	2201      	movs	r2, #1
 800351e:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_long_strings_descriptors[i];
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4a10      	ldr	r2, [pc, #64]	; (8003568 <static_strings_allocate+0x16c>)
 8003526:	4413      	add	r3, r2
 8003528:	e011      	b.n	800354e <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3301      	adds	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	dde7      	ble.n	8003506 <static_strings_allocate+0x10a>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353c:	d803      	bhi.n	8003546 <static_strings_allocate+0x14a>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <static_strings_allocate+0x170>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e002      	b.n	800354c <static_strings_allocate+0x150>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <static_strings_allocate+0x170>)
 8003548:	2202      	movs	r2, #2
 800354a:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	20000a60 	.word	0x20000a60
 800355c:	20000e74 	.word	0x20000e74
 8003560:	20000a50 	.word	0x20000a50
 8003564:	20000ea4 	.word	0x20000ea4
 8003568:	20000210 	.word	0x20000210
 800356c:	20000664 	.word	0x20000664

08003570 <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f86b 	bl	8003654 <static_strings_strlen>
 800357e:	4603      	mov	r3, r0
 8003580:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 8003582:	89fb      	ldrh	r3, [r7, #14]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	e014      	b.n	80035b6 <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 800358c:	89fb      	ldrh	r3, [r7, #14]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff34 	bl	80033fc <static_strings_allocate>
 8003594:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <static_strings_save+0x30>
		return descriptor;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	e00a      	b.n	80035b6 <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	89fa      	ldrh	r2, [r7, #14]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fbaf 	bl	8003d0c <memcpy>
	descriptor->length = string_length;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	89fa      	ldrh	r2, [r7, #14]
 80035b2:	809a      	strh	r2, [r3, #4]
	return descriptor;
 80035b4:	68bb      	ldr	r3, [r7, #8]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2205      	movs	r2, #5
 80035cc:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f838 	bl	8003654 <static_strings_strlen>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	889b      	ldrh	r3, [r3, #4]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	if(string_descriptor->type != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	799b      	ldrb	r3, [r3, #6]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d002      	beq.n	800360e <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	71da      	strb	r2, [r3, #7]
	}
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	889b      	ldrh	r3, [r3, #4]
 8003628:	3b02      	subs	r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b0d      	cmp	r3, #13
 8003630:	d008      	beq.n	8003644 <static_strings_is_line+0x2c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	889b      	ldrh	r3, [r3, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b0a      	cmp	r3, #10
 8003642:	d101      	bne.n	8003648 <static_strings_is_line+0x30>
		return 1;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <static_strings_is_line+0x32>
	}
	return 0;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 800365c:	2300      	movs	r3, #0
 800365e:	81fb      	strh	r3, [r7, #14]
 8003660:	e010      	b.n	8003684 <static_strings_strlen+0x30>
		if( *(string + length) == '\r'){
 8003662:	89fb      	ldrh	r3, [r7, #14]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b0d      	cmp	r3, #13
 800366c:	d00f      	beq.n	800368e <static_strings_strlen+0x3a>
			break;
		}
		if( *(string + length) == '\0'){
 800366e:	89fb      	ldrh	r3, [r7, #14]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <static_strings_strlen+0x2a>
			return length;
 800367a:	89fb      	ldrh	r3, [r7, #14]
 800367c:	e022      	b.n	80036c4 <static_strings_strlen+0x70>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	3301      	adds	r3, #1
 8003682:	81fb      	strh	r3, [r7, #14]
 8003684:	89fb      	ldrh	r3, [r7, #14]
 8003686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800368a:	d3ea      	bcc.n	8003662 <static_strings_strlen+0xe>
 800368c:	e000      	b.n	8003690 <static_strings_strlen+0x3c>
			break;
 800368e:	bf00      	nop
		}
	}
	if(length >= 999){
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003696:	4293      	cmp	r3, r2
 8003698:	d904      	bls.n	80036a4 <static_strings_strlen+0x50>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_INVALID_STRING;
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <static_strings_strlen+0x7c>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
		return 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e00f      	b.n	80036c4 <static_strings_strlen+0x70>
	}
	else{
		if(*(string + length + 1) != '\n'){
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	3301      	adds	r3, #1
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b0a      	cmp	r3, #10
 80036b0:	d005      	beq.n	80036be <static_strings_strlen+0x6a>
			*(string + length + 1) = '\n';
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	3301      	adds	r3, #1
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	220a      	movs	r2, #10
 80036bc:	701a      	strb	r2, [r3, #0]
		}
		return length + 2;
 80036be:	89fb      	ldrh	r3, [r7, #14]
 80036c0:	3302      	adds	r3, #2
 80036c2:	b29b      	uxth	r3, r3
	}
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000664 	.word	0x20000664

080036d4 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <static_strings_string_splitter_set_parameters+0x2c>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a05      	ldr	r2, [pc, #20]	; (8003700 <static_strings_string_splitter_set_parameters+0x2c>)
 80036ec:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 80036ee:	4a04      	ldr	r2, [pc, #16]	; (8003700 <static_strings_string_splitter_set_parameters+0x2c>)
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	7213      	strb	r3, [r2, #8]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	200001fc 	.word	0x200001fc

08003704 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor **string_descriptor){
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4929      	ldr	r1, [pc, #164]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003718:	6809      	ldr	r1, [r1, #0]
 800371a:	8889      	ldrh	r1, [r1, #4]
 800371c:	440b      	add	r3, r1
 800371e:	429a      	cmp	r2, r3
 8003720:	d101      	bne.n	8003726 <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 8003722:	2300      	movs	r3, #0
 8003724:	e045      	b.n	80037b2 <static_strings_string_splitter_get_next_token+0xae>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 800372c:	bf00      	nop
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	60fa      	str	r2, [r7, #12]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	4b21      	ldr	r3, [pc, #132]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003738:	7a1b      	ldrb	r3, [r3, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d009      	beq.n	8003752 <static_strings_string_splitter_get_next_token+0x4e>
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	8892      	ldrh	r2, [r2, #4]
 800374a:	4413      	add	r3, r2
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	429a      	cmp	r2, r3
 8003750:	d3ed      	bcc.n	800372e <static_strings_string_splitter_get_next_token+0x2a>

	int token_length;
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	8892      	ldrh	r2, [r2, #4]
 800375e:	4413      	add	r3, r2
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	429a      	cmp	r2, r3
 8003764:	d105      	bne.n	8003772 <static_strings_string_splitter_get_next_token+0x6e>
		token_length = current_position - static_strings_string_splitter.next_token_start;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 800376a:	6852      	ldr	r2, [r2, #4]
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	e005      	b.n	800377e <static_strings_string_splitter_get_next_token+0x7a>
	}
	else{
		token_length = current_position - static_strings_string_splitter.next_token_start - 1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003776:	6852      	ldr	r2, [r2, #4]
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	3b01      	subs	r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
	}
	*string_descriptor = static_strings_allocate(token_length);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	b29b      	uxth	r3, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fe3a 	bl	80033fc <static_strings_allocate>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	601a      	str	r2, [r3, #0]
	memcpy((*string_descriptor)->string,static_strings_string_splitter.next_token_start,token_length);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	4619      	mov	r1, r3
 800379c:	f000 fab6 	bl	8003d0c <memcpy>
	(*string_descriptor)->length = token_length;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	b292      	uxth	r2, r2
 80037a8:	809a      	strh	r2, [r3, #4]
	static_strings_string_splitter.next_token_start = current_position;
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <static_strings_string_splitter_get_next_token+0xb8>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6053      	str	r3, [r2, #4]
	return 1;
 80037b0:	2301      	movs	r3, #1
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200001fc 	.word	0x200001fc

080037c0 <static_strings_substring>:

static_strings_string_descriptor *static_strings_substring(static_strings_string_descriptor* string,uint16_t start_index,uint16_t finish_index){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
 80037cc:	4613      	mov	r3, r2
 80037ce:	803b      	strh	r3, [r7, #0]
	if(start_index < 0 || start_index >= string->length){
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	889b      	ldrh	r3, [r3, #4]
 80037d4:	887a      	ldrh	r2, [r7, #2]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d304      	bcc.n	80037e4 <static_strings_substring+0x24>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_START_INDEX_OUT_OF_RANGE;
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <static_strings_substring+0x80>)
 80037dc:	2203      	movs	r2, #3
 80037de:	701a      	strb	r2, [r3, #0]
		return NULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e028      	b.n	8003836 <static_strings_substring+0x76>
	}
	if(finish_index <= 0 || finish_index > string->length){
 80037e4:	883b      	ldrh	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <static_strings_substring+0x34>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	889b      	ldrh	r3, [r3, #4]
 80037ee:	883a      	ldrh	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d904      	bls.n	80037fe <static_strings_substring+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_FINISH_INDEX_OUT_OF_RANGE;
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <static_strings_substring+0x80>)
 80037f6:	2204      	movs	r2, #4
 80037f8:	701a      	strb	r2, [r3, #0]
		return NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e01b      	b.n	8003836 <static_strings_substring+0x76>
	}
	uint16_t substring_length = finish_index - start_index;
 80037fe:	883a      	ldrh	r2, [r7, #0]
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	81fb      	strh	r3, [r7, #14]
	static_strings_string_descriptor *substring = static_strings_allocate(substring_length);
 8003806:	89fb      	ldrh	r3, [r7, #14]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fdf7 	bl	80033fc <static_strings_allocate>
 800380e:	60b8      	str	r0, [r7, #8]
	if(substring == NULL){
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <static_strings_substring+0x5a>
		return substring;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	e00d      	b.n	8003836 <static_strings_substring+0x76>
	}
	memcpy(substring->string,string->string + start_index,substring_length);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	887b      	ldrh	r3, [r7, #2]
 8003824:	4413      	add	r3, r2
 8003826:	89fa      	ldrh	r2, [r7, #14]
 8003828:	4619      	mov	r1, r3
 800382a:	f000 fa6f 	bl	8003d0c <memcpy>
	substring->length = substring_length;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	89fa      	ldrh	r2, [r7, #14]
 8003832:	809a      	strh	r2, [r3, #4]
	return substring;
 8003834:	68bb      	ldr	r3, [r7, #8]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000664 	.word	0x20000664

08003844 <static_strings_concatenate>:

static_strings_string_descriptor *static_strings_concatenate(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
	int concatenated_string_length = concatenate_at->length + concatenate->length;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	889b      	ldrh	r3, [r3, #4]
 8003852:	461a      	mov	r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	889b      	ldrh	r3, [r3, #4]
 8003858:	4413      	add	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(concatenated_string_length);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fdcb 	bl	80033fc <static_strings_allocate>
 8003866:	60b8      	str	r0, [r7, #8]
	if(concatenated_string == NULL){
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <static_strings_concatenate+0x2e>
		return concatenated_string;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	e019      	b.n	80038a6 <static_strings_concatenate+0x62>
	}
	memcpy(concatenated_string->string,concatenate_at->string,concatenate_at->length);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	889b      	ldrh	r3, [r3, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	f000 fa44 	bl	8003d0c <memcpy>
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	8892      	ldrh	r2, [r2, #4]
 800388c:	1898      	adds	r0, r3, r2
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	889b      	ldrh	r3, [r3, #4]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 fa38 	bl	8003d0c <memcpy>
	concatenated_string->length = concatenated_string_length;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	809a      	strh	r2, [r3, #4]
	return concatenated_string;
 80038a4:	68bb      	ldr	r3, [r7, #8]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <static_strings_contains_string>:

int static_strings_contains_string(static_strings_string_descriptor* search_in,static_strings_string_descriptor* search_for){
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
	if(search_in->length < search_for->length){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	889a      	ldrh	r2, [r3, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	889b      	ldrh	r3, [r3, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d201      	bcs.n	80038c8 <static_strings_contains_string+0x1a>
		return 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e034      	b.n	8003932 <static_strings_contains_string+0x84>
	}
	int i,j;
	int searched_string_found;
	for(i = 0;search_for->length <= search_in->length - i;i++){
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e026      	b.n	800391c <static_strings_contains_string+0x6e>
		searched_string_found = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < search_for->length;j++){
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e013      	b.n	8003900 <static_strings_contains_string+0x52>
			if( *(search_in->string + i + j) != *(search_for->string + j) ){
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	6979      	ldr	r1, [r7, #20]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	440b      	add	r3, r1
 80038e2:	4413      	add	r3, r2
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	440b      	add	r3, r1
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d002      	beq.n	80038fa <static_strings_contains_string+0x4c>
				searched_string_found = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
				break;
 80038f8:	e008      	b.n	800390c <static_strings_contains_string+0x5e>
		for(j = 0; j < search_for->length;j++){
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3301      	adds	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	889b      	ldrh	r3, [r3, #4]
 8003904:	461a      	mov	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4293      	cmp	r3, r2
 800390a:	dbe5      	blt.n	80038d8 <static_strings_contains_string+0x2a>
			}
		}
		if(searched_string_found){
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <static_strings_contains_string+0x68>
			return 1;
 8003912:	2301      	movs	r3, #1
 8003914:	e00d      	b.n	8003932 <static_strings_contains_string+0x84>
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3301      	adds	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	889b      	ldrh	r3, [r3, #4]
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	889b      	ldrh	r3, [r3, #4]
 8003926:	4619      	mov	r1, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	1acb      	subs	r3, r1, r3
 800392c:	429a      	cmp	r2, r3
 800392e:	ddce      	ble.n	80038ce <static_strings_contains_string+0x20>
		}
	}
	return 0;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <static_strings_contains_char>:

int static_strings_contains_char(static_strings_string_descriptor* search_in,uint8_t search_for){
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i = 0;i < search_in->length;i++){
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e00c      	b.n	8003968 <static_strings_contains_char+0x2c>
		if( *(search_in->string + i) == search_for){
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	429a      	cmp	r2, r3
 800395c:	d101      	bne.n	8003962 <static_strings_contains_char+0x26>
			return 1;
 800395e:	2301      	movs	r3, #1
 8003960:	e009      	b.n	8003976 <static_strings_contains_char+0x3a>
	for(i = 0;i < search_in->length;i++){
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	889b      	ldrh	r3, [r3, #4]
 800396c:	461a      	mov	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4293      	cmp	r3, r2
 8003972:	dbec      	blt.n	800394e <static_strings_contains_char+0x12>
		}
	}
	return 0;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <static_strings_compare>:

int static_strings_compare(static_strings_string_descriptor* compare_string_one,static_strings_string_descriptor* compare_string_two){
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	if(compare_string_one->length != compare_string_two->length){
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	889a      	ldrh	r2, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	889b      	ldrh	r3, [r3, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d001      	beq.n	800399a <static_strings_compare+0x1a>
		return 0;
 8003996:	2300      	movs	r3, #0
 8003998:	e01a      	b.n	80039d0 <static_strings_compare+0x50>
	}
	int i;
	for(i = 0;i < compare_string_one->length;i++){
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e010      	b.n	80039c2 <static_strings_compare+0x42>
		if(*(compare_string_one->string + i) != *(compare_string_two->string + i)){
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	440b      	add	r3, r1
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <static_strings_compare+0x3c>
			return 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e009      	b.n	80039d0 <static_strings_compare+0x50>
	for(i = 0;i < compare_string_one->length;i++){
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	889b      	ldrh	r3, [r3, #4]
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4293      	cmp	r3, r2
 80039cc:	dbe8      	blt.n	80039a0 <static_strings_compare+0x20>
		}
	}
	return 1;
 80039ce:	2301      	movs	r3, #1
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
	...

080039dc <static_strings_uint8_to_string>:

static_strings_string_descriptor *static_strings_uint8_to_string(uint8_t uint8){
 80039dc:	b580      	push	{r7, lr}
 80039de:	b092      	sub	sp, #72	; 0x48
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
	uint8_t uint8_temp_string[50];
	sprintf((char *)uint8_temp_string,"%" PRIu8,uint8);
 80039e6:	79fa      	ldrb	r2, [r7, #7]
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	4914      	ldr	r1, [pc, #80]	; (8003a40 <static_strings_uint8_to_string+0x64>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fdee 	bl	80045d0 <siprintf>
	uint16_t uint8_string_length = static_strings_strlen(uint8_temp_string);
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fe2b 	bl	8003654 <static_strings_strlen>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint8_string = static_strings_allocate(uint8_string_length);
 8003a04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fcf7 	bl	80033fc <static_strings_allocate>
 8003a0e:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint8_string == NULL){
 8003a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <static_strings_uint8_to_string+0x3e>
		return uint8_string;
 8003a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a18:	e00d      	b.n	8003a36 <static_strings_uint8_to_string+0x5a>
	}
	memcpy(uint8_string->string,uint8_temp_string,uint8_string_length);
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003a22:	f107 010c 	add.w	r1, r7, #12
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f970 	bl	8003d0c <memcpy>
	uint8_string->length = uint8_string_length;
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003a32:	809a      	strh	r2, [r3, #4]
	return uint8_string;
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3748      	adds	r7, #72	; 0x48
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	08006a08 	.word	0x08006a08

08003a44 <static_strings_uint16_to_string>:

static_strings_string_descriptor *static_strings_uint16_to_string(uint16_t uint16){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b092      	sub	sp, #72	; 0x48
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
	uint8_t uint16_temp_string[50];
	sprintf((char *)uint16_temp_string,"%" PRIu16,uint16);
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	4914      	ldr	r1, [pc, #80]	; (8003aa8 <static_strings_uint16_to_string+0x64>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fdba 	bl	80045d0 <siprintf>
	uint16_t uint16_string_length = static_strings_strlen(uint16_temp_string);
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fdf7 	bl	8003654 <static_strings_strlen>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint16_string = static_strings_allocate(uint16_string_length);
 8003a6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fcc3 	bl	80033fc <static_strings_allocate>
 8003a76:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint16_string == NULL){
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <static_strings_uint16_to_string+0x3e>
		return uint16_string;
 8003a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a80:	e00d      	b.n	8003a9e <static_strings_uint16_to_string+0x5a>
	}
	memcpy(uint16_string->string,uint16_temp_string,uint16_string_length);
 8003a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003a8a:	f107 010c 	add.w	r1, r7, #12
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f93c 	bl	8003d0c <memcpy>
	uint16_string->length = uint16_string_length;
 8003a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a96:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003a9a:	809a      	strh	r2, [r3, #4]
	return uint16_string;
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3748      	adds	r7, #72	; 0x48
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08006a0c 	.word	0x08006a0c

08003aac <static_strings_uint32_to_string>:

static_strings_string_descriptor *static_strings_uint32_to_string(uint32_t uint32){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b092      	sub	sp, #72	; 0x48
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	uint8_t uint32_temp_string[50];
	sprintf((char *)uint32_temp_string,"%" PRIu32,uint32);
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4914      	ldr	r1, [pc, #80]	; (8003b0c <static_strings_uint32_to_string+0x60>)
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fd87 	bl	80045d0 <siprintf>
	uint16_t uint32_string_length = static_strings_strlen(uint32_temp_string);
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fdc4 	bl	8003654 <static_strings_strlen>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint32_string = static_strings_allocate(uint32_string_length);
 8003ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fc90 	bl	80033fc <static_strings_allocate>
 8003adc:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint32_string == NULL){
 8003ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <static_strings_uint32_to_string+0x3c>
		return uint32_string;
 8003ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae6:	e00d      	b.n	8003b04 <static_strings_uint32_to_string+0x58>
	}
	memcpy(uint32_string->string,uint32_temp_string,uint32_string_length);
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003af0:	f107 010c 	add.w	r1, r7, #12
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f909 	bl	8003d0c <memcpy>
	uint32_string->length = uint32_string_length;
 8003afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003b00:	809a      	strh	r2, [r3, #4]
	return uint32_string;
 8003b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3748      	adds	r7, #72	; 0x48
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	08006a10 	.word	0x08006a10

08003b10 <static_strings_int8_to_string>:

static_strings_string_descriptor *static_strings_int8_to_string(int8_t int8){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b092      	sub	sp, #72	; 0x48
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
	uint8_t int8_temp_string[50];
	sprintf((char *)int8_temp_string,"%" PRId8,int8);
 8003b1a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003b1e:	f107 030c 	add.w	r3, r7, #12
 8003b22:	4914      	ldr	r1, [pc, #80]	; (8003b74 <static_strings_int8_to_string+0x64>)
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fd53 	bl	80045d0 <siprintf>
	uint16_t int8_string_length = static_strings_strlen(int8_temp_string);
 8003b2a:	f107 030c 	add.w	r3, r7, #12
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fd90 	bl	8003654 <static_strings_strlen>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int8_string = static_strings_allocate(int8_string_length);
 8003b3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fc5c 	bl	80033fc <static_strings_allocate>
 8003b44:	6438      	str	r0, [r7, #64]	; 0x40
	if(int8_string == NULL){
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <static_strings_int8_to_string+0x40>
		return int8_string;
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4e:	e00d      	b.n	8003b6c <static_strings_int8_to_string+0x5c>
	}
	memcpy(int8_string->string,int8_temp_string,int8_string_length);
 8003b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003b58:	f107 010c 	add.w	r1, r7, #12
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f8d5 	bl	8003d0c <memcpy>
	int8_string->length = int8_string_length;
 8003b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003b68:	809a      	strh	r2, [r3, #4]
	return int8_string;
 8003b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3748      	adds	r7, #72	; 0x48
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	08006a14 	.word	0x08006a14

08003b78 <static_strings_int16_to_string>:

static_strings_string_descriptor *static_strings_int16_to_string(int16_t int16){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b092      	sub	sp, #72	; 0x48
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
	uint8_t int16_temp_string[50];
	sprintf((char *)int16_temp_string,"%" PRId16,int16);
 8003b82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b86:	f107 030c 	add.w	r3, r7, #12
 8003b8a:	4914      	ldr	r1, [pc, #80]	; (8003bdc <static_strings_int16_to_string+0x64>)
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fd1f 	bl	80045d0 <siprintf>
	int16_t int16_string_length = static_strings_strlen(int16_temp_string);
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fd5c 	bl	8003654 <static_strings_strlen>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int16_string = static_strings_allocate(int16_string_length);
 8003ba2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fc28 	bl	80033fc <static_strings_allocate>
 8003bac:	6438      	str	r0, [r7, #64]	; 0x40
	if(int16_string == NULL){
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <static_strings_int16_to_string+0x40>
		return int16_string;
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb6:	e00d      	b.n	8003bd4 <static_strings_int16_to_string+0x5c>
	}
	memcpy(int16_string->string,int16_temp_string,int16_string_length);
 8003bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003bc0:	f107 010c 	add.w	r1, r7, #12
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f8a1 	bl	8003d0c <memcpy>
	int16_string->length = int16_string_length;
 8003bca:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd0:	809a      	strh	r2, [r3, #4]
	return int16_string;
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3748      	adds	r7, #72	; 0x48
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	08006a18 	.word	0x08006a18

08003be0 <static_strings_float_to_string>:
	memcpy(int32_string->string,int32_temp_string,int32_string_length);
	int32_string->length = int32_string_length;
	return int32_string;
}

static_strings_string_descriptor *static_strings_float_to_string(float float_arg){
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b093      	sub	sp, #76	; 0x4c
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	uint8_t float_temp_string[50];
	sprintf((char *)float_temp_string,"%f",float_arg);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fc fc1d 	bl	8000428 <__aeabi_f2d>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	f107 000c 	add.w	r0, r7, #12
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	4914      	ldr	r1, [pc, #80]	; (8003c4c <static_strings_float_to_string+0x6c>)
 8003bfc:	f000 fce8 	bl	80045d0 <siprintf>
	int16_t float_string_length = static_strings_strlen(float_temp_string);
 8003c00:	f107 030c 	add.w	r3, r7, #12
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fd25 	bl	8003654 <static_strings_strlen>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *float_string = static_strings_allocate(float_string_length);
 8003c10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fbf1 	bl	80033fc <static_strings_allocate>
 8003c1a:	6438      	str	r0, [r7, #64]	; 0x40
	if(float_string == NULL){
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <static_strings_float_to_string+0x46>
		return float_string;
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	e00d      	b.n	8003c42 <static_strings_float_to_string+0x62>
	}
	memcpy(float_string->string,float_temp_string,float_string_length);
 8003c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003c2e:	f107 010c 	add.w	r1, r7, #12
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f86a 	bl	8003d0c <memcpy>
	float_string->length = float_string_length;
 8003c38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3e:	809a      	strh	r2, [r3, #4]
	return float_string;
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	374c      	adds	r7, #76	; 0x4c
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	08006a20 	.word	0x08006a20

08003c50 <static_strings_double_to_string>:

static_strings_string_descriptor *static_strings_double_to_string(double double_arg){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b092      	sub	sp, #72	; 0x48
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t double_temp_string[50];
	sprintf((char *)double_temp_string,"%lf",double_arg);
 8003c5a:	f107 000c 	add.w	r0, r7, #12
 8003c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c62:	4914      	ldr	r1, [pc, #80]	; (8003cb4 <static_strings_double_to_string+0x64>)
 8003c64:	f000 fcb4 	bl	80045d0 <siprintf>
	int16_t double_string_length = static_strings_strlen(double_temp_string);
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fcf1 	bl	8003654 <static_strings_strlen>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *double_string = static_strings_allocate(double_string_length);
 8003c78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fbbd 	bl	80033fc <static_strings_allocate>
 8003c82:	6438      	str	r0, [r7, #64]	; 0x40
	if(double_string == NULL){
 8003c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <static_strings_double_to_string+0x3e>
		return double_string;
 8003c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8c:	e00d      	b.n	8003caa <static_strings_double_to_string+0x5a>
	}
	memcpy(double_string->string,double_temp_string,double_string_length);
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003c96:	f107 010c 	add.w	r1, r7, #12
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f836 	bl	8003d0c <memcpy>
	double_string->length = double_string_length;
 8003ca0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca6:	809a      	strh	r2, [r3, #4]
	return double_string;
 8003ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3748      	adds	r7, #72	; 0x48
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	08006a24 	.word	0x08006a24

08003cb8 <__errno>:
 8003cb8:	4b01      	ldr	r3, [pc, #4]	; (8003cc0 <__errno+0x8>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	2000000c 	.word	0x2000000c

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	4e0c      	ldr	r6, [pc, #48]	; (8003cfc <__libc_init_array+0x38>)
 8003cca:	4c0d      	ldr	r4, [pc, #52]	; (8003d00 <__libc_init_array+0x3c>)
 8003ccc:	1ba4      	subs	r4, r4, r6
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	42a5      	cmp	r5, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	f002 f85e 	bl	8005d94 <_init>
 8003cd8:	2500      	movs	r5, #0
 8003cda:	4e0a      	ldr	r6, [pc, #40]	; (8003d04 <__libc_init_array+0x40>)
 8003cdc:	4c0a      	ldr	r4, [pc, #40]	; (8003d08 <__libc_init_array+0x44>)
 8003cde:	1ba4      	subs	r4, r4, r6
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	42a5      	cmp	r5, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cec:	4798      	blx	r3
 8003cee:	3501      	adds	r5, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cf6:	4798      	blx	r3
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	08006ca0 	.word	0x08006ca0
 8003d00:	08006ca0 	.word	0x08006ca0
 8003d04:	08006ca0 	.word	0x08006ca0
 8003d08:	08006ca4 	.word	0x08006ca4

08003d0c <memcpy>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	1e43      	subs	r3, r0, #1
 8003d10:	440a      	add	r2, r1
 8003d12:	4291      	cmp	r1, r2
 8003d14:	d100      	bne.n	8003d18 <memcpy+0xc>
 8003d16:	bd10      	pop	{r4, pc}
 8003d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d20:	e7f7      	b.n	8003d12 <memcpy+0x6>

08003d22 <memset>:
 8003d22:	4603      	mov	r3, r0
 8003d24:	4402      	add	r2, r0
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d100      	bne.n	8003d2c <memset+0xa>
 8003d2a:	4770      	bx	lr
 8003d2c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d30:	e7f9      	b.n	8003d26 <memset+0x4>

08003d32 <__cvt>:
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	461e      	mov	r6, r3
 8003d3a:	bfbb      	ittet	lt
 8003d3c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	461e      	movlt	r6, r3
 8003d42:	2300      	movge	r3, #0
 8003d44:	232d      	movlt	r3, #45	; 0x2d
 8003d46:	b088      	sub	sp, #32
 8003d48:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003d4a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003d4e:	f027 0720 	bic.w	r7, r7, #32
 8003d52:	2f46      	cmp	r7, #70	; 0x46
 8003d54:	4614      	mov	r4, r2
 8003d56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d58:	700b      	strb	r3, [r1, #0]
 8003d5a:	d004      	beq.n	8003d66 <__cvt+0x34>
 8003d5c:	2f45      	cmp	r7, #69	; 0x45
 8003d5e:	d100      	bne.n	8003d62 <__cvt+0x30>
 8003d60:	3501      	adds	r5, #1
 8003d62:	2302      	movs	r3, #2
 8003d64:	e000      	b.n	8003d68 <__cvt+0x36>
 8003d66:	2303      	movs	r3, #3
 8003d68:	aa07      	add	r2, sp, #28
 8003d6a:	9204      	str	r2, [sp, #16]
 8003d6c:	aa06      	add	r2, sp, #24
 8003d6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d72:	e9cd 3500 	strd	r3, r5, [sp]
 8003d76:	4622      	mov	r2, r4
 8003d78:	4633      	mov	r3, r6
 8003d7a:	f000 fcd9 	bl	8004730 <_dtoa_r>
 8003d7e:	2f47      	cmp	r7, #71	; 0x47
 8003d80:	4680      	mov	r8, r0
 8003d82:	d102      	bne.n	8003d8a <__cvt+0x58>
 8003d84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d86:	07db      	lsls	r3, r3, #31
 8003d88:	d526      	bpl.n	8003dd8 <__cvt+0xa6>
 8003d8a:	2f46      	cmp	r7, #70	; 0x46
 8003d8c:	eb08 0905 	add.w	r9, r8, r5
 8003d90:	d111      	bne.n	8003db6 <__cvt+0x84>
 8003d92:	f898 3000 	ldrb.w	r3, [r8]
 8003d96:	2b30      	cmp	r3, #48	; 0x30
 8003d98:	d10a      	bne.n	8003db0 <__cvt+0x7e>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4620      	mov	r0, r4
 8003da0:	4631      	mov	r1, r6
 8003da2:	f7fc fe01 	bl	80009a8 <__aeabi_dcmpeq>
 8003da6:	b918      	cbnz	r0, 8003db0 <__cvt+0x7e>
 8003da8:	f1c5 0501 	rsb	r5, r5, #1
 8003dac:	f8ca 5000 	str.w	r5, [sl]
 8003db0:	f8da 3000 	ldr.w	r3, [sl]
 8003db4:	4499      	add	r9, r3
 8003db6:	2200      	movs	r2, #0
 8003db8:	2300      	movs	r3, #0
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	f7fc fdf3 	bl	80009a8 <__aeabi_dcmpeq>
 8003dc2:	b938      	cbnz	r0, 8003dd4 <__cvt+0xa2>
 8003dc4:	2230      	movs	r2, #48	; 0x30
 8003dc6:	9b07      	ldr	r3, [sp, #28]
 8003dc8:	454b      	cmp	r3, r9
 8003dca:	d205      	bcs.n	8003dd8 <__cvt+0xa6>
 8003dcc:	1c59      	adds	r1, r3, #1
 8003dce:	9107      	str	r1, [sp, #28]
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e7f8      	b.n	8003dc6 <__cvt+0x94>
 8003dd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8003dd8:	4640      	mov	r0, r8
 8003dda:	9b07      	ldr	r3, [sp, #28]
 8003ddc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003dde:	eba3 0308 	sub.w	r3, r3, r8
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	b008      	add	sp, #32
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003dea <__exponent>:
 8003dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dec:	2900      	cmp	r1, #0
 8003dee:	bfb4      	ite	lt
 8003df0:	232d      	movlt	r3, #45	; 0x2d
 8003df2:	232b      	movge	r3, #43	; 0x2b
 8003df4:	4604      	mov	r4, r0
 8003df6:	bfb8      	it	lt
 8003df8:	4249      	neglt	r1, r1
 8003dfa:	2909      	cmp	r1, #9
 8003dfc:	f804 2b02 	strb.w	r2, [r4], #2
 8003e00:	7043      	strb	r3, [r0, #1]
 8003e02:	dd21      	ble.n	8003e48 <__exponent+0x5e>
 8003e04:	f10d 0307 	add.w	r3, sp, #7
 8003e08:	461f      	mov	r7, r3
 8003e0a:	260a      	movs	r6, #10
 8003e0c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e10:	fb06 1115 	mls	r1, r6, r5, r1
 8003e14:	2d09      	cmp	r5, #9
 8003e16:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003e1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e22:	4629      	mov	r1, r5
 8003e24:	dc09      	bgt.n	8003e3a <__exponent+0x50>
 8003e26:	3130      	adds	r1, #48	; 0x30
 8003e28:	3b02      	subs	r3, #2
 8003e2a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e2e:	42bb      	cmp	r3, r7
 8003e30:	4622      	mov	r2, r4
 8003e32:	d304      	bcc.n	8003e3e <__exponent+0x54>
 8003e34:	1a10      	subs	r0, r2, r0
 8003e36:	b003      	add	sp, #12
 8003e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	e7e6      	b.n	8003e0c <__exponent+0x22>
 8003e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e42:	f804 2b01 	strb.w	r2, [r4], #1
 8003e46:	e7f2      	b.n	8003e2e <__exponent+0x44>
 8003e48:	2330      	movs	r3, #48	; 0x30
 8003e4a:	4419      	add	r1, r3
 8003e4c:	7083      	strb	r3, [r0, #2]
 8003e4e:	1d02      	adds	r2, r0, #4
 8003e50:	70c1      	strb	r1, [r0, #3]
 8003e52:	e7ef      	b.n	8003e34 <__exponent+0x4a>

08003e54 <_printf_float>:
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	b091      	sub	sp, #68	; 0x44
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003e5e:	4693      	mov	fp, r2
 8003e60:	461e      	mov	r6, r3
 8003e62:	4605      	mov	r5, r0
 8003e64:	f001 fa18 	bl	8005298 <_localeconv_r>
 8003e68:	6803      	ldr	r3, [r0, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6e:	f7fc f96f 	bl	8000150 <strlen>
 8003e72:	2300      	movs	r3, #0
 8003e74:	930e      	str	r3, [sp, #56]	; 0x38
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	900a      	str	r0, [sp, #40]	; 0x28
 8003e7a:	3307      	adds	r3, #7
 8003e7c:	f023 0307 	bic.w	r3, r3, #7
 8003e80:	f103 0208 	add.w	r2, r3, #8
 8003e84:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003e88:	f8d4 a000 	ldr.w	sl, [r4]
 8003e8c:	603a      	str	r2, [r7, #0]
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e96:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	4ba6      	ldr	r3, [pc, #664]	; (8004140 <_printf_float+0x2ec>)
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eaa:	f7fc fdaf 	bl	8000a0c <__aeabi_dcmpun>
 8003eae:	bb68      	cbnz	r0, 8003f0c <_printf_float+0xb8>
 8003eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb4:	4ba2      	ldr	r3, [pc, #648]	; (8004140 <_printf_float+0x2ec>)
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eba:	f7fc fd89 	bl	80009d0 <__aeabi_dcmple>
 8003ebe:	bb28      	cbnz	r0, 8003f0c <_printf_float+0xb8>
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	f7fc fd78 	bl	80009bc <__aeabi_dcmplt>
 8003ecc:	b110      	cbz	r0, 8003ed4 <_printf_float+0x80>
 8003ece:	232d      	movs	r3, #45	; 0x2d
 8003ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed4:	4f9b      	ldr	r7, [pc, #620]	; (8004144 <_printf_float+0x2f0>)
 8003ed6:	4b9c      	ldr	r3, [pc, #624]	; (8004148 <_printf_float+0x2f4>)
 8003ed8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003edc:	bf98      	it	ls
 8003ede:	461f      	movls	r7, r3
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f04f 0900 	mov.w	r9, #0
 8003ee6:	6123      	str	r3, [r4, #16]
 8003ee8:	f02a 0304 	bic.w	r3, sl, #4
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	9600      	str	r6, [sp, #0]
 8003ef0:	465b      	mov	r3, fp
 8003ef2:	aa0f      	add	r2, sp, #60	; 0x3c
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 f9e2 	bl	80042c0 <_printf_common>
 8003efc:	3001      	adds	r0, #1
 8003efe:	f040 8090 	bne.w	8004022 <_printf_float+0x1ce>
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295
 8003f06:	b011      	add	sp, #68	; 0x44
 8003f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0c:	463a      	mov	r2, r7
 8003f0e:	464b      	mov	r3, r9
 8003f10:	4638      	mov	r0, r7
 8003f12:	4649      	mov	r1, r9
 8003f14:	f7fc fd7a 	bl	8000a0c <__aeabi_dcmpun>
 8003f18:	b110      	cbz	r0, 8003f20 <_printf_float+0xcc>
 8003f1a:	4f8c      	ldr	r7, [pc, #560]	; (800414c <_printf_float+0x2f8>)
 8003f1c:	4b8c      	ldr	r3, [pc, #560]	; (8004150 <_printf_float+0x2fc>)
 8003f1e:	e7db      	b.n	8003ed8 <_printf_float+0x84>
 8003f20:	6863      	ldr	r3, [r4, #4]
 8003f22:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	a80d      	add	r0, sp, #52	; 0x34
 8003f2a:	a90e      	add	r1, sp, #56	; 0x38
 8003f2c:	d140      	bne.n	8003fb0 <_printf_float+0x15c>
 8003f2e:	2306      	movs	r3, #6
 8003f30:	6063      	str	r3, [r4, #4]
 8003f32:	f04f 0c00 	mov.w	ip, #0
 8003f36:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003f3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003f3e:	6863      	ldr	r3, [r4, #4]
 8003f40:	6022      	str	r2, [r4, #0]
 8003f42:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	463a      	mov	r2, r7
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003f50:	4628      	mov	r0, r5
 8003f52:	f7ff feee 	bl	8003d32 <__cvt>
 8003f56:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003f5a:	2b47      	cmp	r3, #71	; 0x47
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	d109      	bne.n	8003f74 <_printf_float+0x120>
 8003f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f62:	1cd8      	adds	r0, r3, #3
 8003f64:	db02      	blt.n	8003f6c <_printf_float+0x118>
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	dd47      	ble.n	8003ffc <_printf_float+0x1a8>
 8003f6c:	f1a8 0802 	sub.w	r8, r8, #2
 8003f70:	fa5f f888 	uxtb.w	r8, r8
 8003f74:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003f78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f7a:	d824      	bhi.n	8003fc6 <_printf_float+0x172>
 8003f7c:	3901      	subs	r1, #1
 8003f7e:	4642      	mov	r2, r8
 8003f80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f84:	910d      	str	r1, [sp, #52]	; 0x34
 8003f86:	f7ff ff30 	bl	8003dea <__exponent>
 8003f8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f8c:	4681      	mov	r9, r0
 8003f8e:	1813      	adds	r3, r2, r0
 8003f90:	2a01      	cmp	r2, #1
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	dc02      	bgt.n	8003f9c <_printf_float+0x148>
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	07d1      	lsls	r1, r2, #31
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_float+0x14c>
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	6123      	str	r3, [r4, #16]
 8003fa0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0a2      	beq.n	8003eee <_printf_float+0x9a>
 8003fa8:	232d      	movs	r3, #45	; 0x2d
 8003faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fae:	e79e      	b.n	8003eee <_printf_float+0x9a>
 8003fb0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003fb4:	f000 816e 	beq.w	8004294 <_printf_float+0x440>
 8003fb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fbc:	d1b9      	bne.n	8003f32 <_printf_float+0xde>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1b7      	bne.n	8003f32 <_printf_float+0xde>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e7b4      	b.n	8003f30 <_printf_float+0xdc>
 8003fc6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003fca:	d119      	bne.n	8004000 <_printf_float+0x1ac>
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	dd0c      	ble.n	8003fec <_printf_float+0x198>
 8003fd2:	6121      	str	r1, [r4, #16]
 8003fd4:	b913      	cbnz	r3, 8003fdc <_printf_float+0x188>
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	07d2      	lsls	r2, r2, #31
 8003fda:	d502      	bpl.n	8003fe2 <_printf_float+0x18e>
 8003fdc:	3301      	adds	r3, #1
 8003fde:	440b      	add	r3, r1
 8003fe0:	6123      	str	r3, [r4, #16]
 8003fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fe4:	f04f 0900 	mov.w	r9, #0
 8003fe8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fea:	e7d9      	b.n	8003fa0 <_printf_float+0x14c>
 8003fec:	b913      	cbnz	r3, 8003ff4 <_printf_float+0x1a0>
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	07d0      	lsls	r0, r2, #31
 8003ff2:	d501      	bpl.n	8003ff8 <_printf_float+0x1a4>
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	e7f3      	b.n	8003fe0 <_printf_float+0x18c>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e7f1      	b.n	8003fe0 <_printf_float+0x18c>
 8003ffc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004000:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004004:	4293      	cmp	r3, r2
 8004006:	db05      	blt.n	8004014 <_printf_float+0x1c0>
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	07d1      	lsls	r1, r2, #31
 800400e:	d5e8      	bpl.n	8003fe2 <_printf_float+0x18e>
 8004010:	3301      	adds	r3, #1
 8004012:	e7e5      	b.n	8003fe0 <_printf_float+0x18c>
 8004014:	2b00      	cmp	r3, #0
 8004016:	bfcc      	ite	gt
 8004018:	2301      	movgt	r3, #1
 800401a:	f1c3 0302 	rsble	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	e7de      	b.n	8003fe0 <_printf_float+0x18c>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	055a      	lsls	r2, r3, #21
 8004026:	d407      	bmi.n	8004038 <_printf_float+0x1e4>
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	463a      	mov	r2, r7
 800402c:	4659      	mov	r1, fp
 800402e:	4628      	mov	r0, r5
 8004030:	47b0      	blx	r6
 8004032:	3001      	adds	r0, #1
 8004034:	d129      	bne.n	800408a <_printf_float+0x236>
 8004036:	e764      	b.n	8003f02 <_printf_float+0xae>
 8004038:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800403c:	f240 80d7 	bls.w	80041ee <_printf_float+0x39a>
 8004040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004044:	2200      	movs	r2, #0
 8004046:	2300      	movs	r3, #0
 8004048:	f7fc fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800404c:	b388      	cbz	r0, 80040b2 <_printf_float+0x25e>
 800404e:	2301      	movs	r3, #1
 8004050:	4a40      	ldr	r2, [pc, #256]	; (8004154 <_printf_float+0x300>)
 8004052:	4659      	mov	r1, fp
 8004054:	4628      	mov	r0, r5
 8004056:	47b0      	blx	r6
 8004058:	3001      	adds	r0, #1
 800405a:	f43f af52 	beq.w	8003f02 <_printf_float+0xae>
 800405e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004062:	429a      	cmp	r2, r3
 8004064:	db02      	blt.n	800406c <_printf_float+0x218>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	07d8      	lsls	r0, r3, #31
 800406a:	d50e      	bpl.n	800408a <_printf_float+0x236>
 800406c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004070:	4659      	mov	r1, fp
 8004072:	4628      	mov	r0, r5
 8004074:	47b0      	blx	r6
 8004076:	3001      	adds	r0, #1
 8004078:	f43f af43 	beq.w	8003f02 <_printf_float+0xae>
 800407c:	2700      	movs	r7, #0
 800407e:	f104 081a 	add.w	r8, r4, #26
 8004082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004084:	3b01      	subs	r3, #1
 8004086:	42bb      	cmp	r3, r7
 8004088:	dc09      	bgt.n	800409e <_printf_float+0x24a>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	079f      	lsls	r7, r3, #30
 800408e:	f100 80fd 	bmi.w	800428c <_printf_float+0x438>
 8004092:	68e0      	ldr	r0, [r4, #12]
 8004094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004096:	4298      	cmp	r0, r3
 8004098:	bfb8      	it	lt
 800409a:	4618      	movlt	r0, r3
 800409c:	e733      	b.n	8003f06 <_printf_float+0xb2>
 800409e:	2301      	movs	r3, #1
 80040a0:	4642      	mov	r2, r8
 80040a2:	4659      	mov	r1, fp
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b0      	blx	r6
 80040a8:	3001      	adds	r0, #1
 80040aa:	f43f af2a 	beq.w	8003f02 <_printf_float+0xae>
 80040ae:	3701      	adds	r7, #1
 80040b0:	e7e7      	b.n	8004082 <_printf_float+0x22e>
 80040b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dc2b      	bgt.n	8004110 <_printf_float+0x2bc>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4a26      	ldr	r2, [pc, #152]	; (8004154 <_printf_float+0x300>)
 80040bc:	4659      	mov	r1, fp
 80040be:	4628      	mov	r0, r5
 80040c0:	47b0      	blx	r6
 80040c2:	3001      	adds	r0, #1
 80040c4:	f43f af1d 	beq.w	8003f02 <_printf_float+0xae>
 80040c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ca:	b923      	cbnz	r3, 80040d6 <_printf_float+0x282>
 80040cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040ce:	b913      	cbnz	r3, 80040d6 <_printf_float+0x282>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	07d9      	lsls	r1, r3, #31
 80040d4:	d5d9      	bpl.n	800408a <_printf_float+0x236>
 80040d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040da:	4659      	mov	r1, fp
 80040dc:	4628      	mov	r0, r5
 80040de:	47b0      	blx	r6
 80040e0:	3001      	adds	r0, #1
 80040e2:	f43f af0e 	beq.w	8003f02 <_printf_float+0xae>
 80040e6:	f04f 0800 	mov.w	r8, #0
 80040ea:	f104 091a 	add.w	r9, r4, #26
 80040ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040f0:	425b      	negs	r3, r3
 80040f2:	4543      	cmp	r3, r8
 80040f4:	dc01      	bgt.n	80040fa <_printf_float+0x2a6>
 80040f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040f8:	e797      	b.n	800402a <_printf_float+0x1d6>
 80040fa:	2301      	movs	r3, #1
 80040fc:	464a      	mov	r2, r9
 80040fe:	4659      	mov	r1, fp
 8004100:	4628      	mov	r0, r5
 8004102:	47b0      	blx	r6
 8004104:	3001      	adds	r0, #1
 8004106:	f43f aefc 	beq.w	8003f02 <_printf_float+0xae>
 800410a:	f108 0801 	add.w	r8, r8, #1
 800410e:	e7ee      	b.n	80040ee <_printf_float+0x29a>
 8004110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004114:	429a      	cmp	r2, r3
 8004116:	bfa8      	it	ge
 8004118:	461a      	movge	r2, r3
 800411a:	2a00      	cmp	r2, #0
 800411c:	4690      	mov	r8, r2
 800411e:	dd07      	ble.n	8004130 <_printf_float+0x2dc>
 8004120:	4613      	mov	r3, r2
 8004122:	4659      	mov	r1, fp
 8004124:	463a      	mov	r2, r7
 8004126:	4628      	mov	r0, r5
 8004128:	47b0      	blx	r6
 800412a:	3001      	adds	r0, #1
 800412c:	f43f aee9 	beq.w	8003f02 <_printf_float+0xae>
 8004130:	f104 031a 	add.w	r3, r4, #26
 8004134:	f04f 0a00 	mov.w	sl, #0
 8004138:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800413c:	930b      	str	r3, [sp, #44]	; 0x2c
 800413e:	e015      	b.n	800416c <_printf_float+0x318>
 8004140:	7fefffff 	.word	0x7fefffff
 8004144:	08006a44 	.word	0x08006a44
 8004148:	08006a40 	.word	0x08006a40
 800414c:	08006a4c 	.word	0x08006a4c
 8004150:	08006a48 	.word	0x08006a48
 8004154:	08006a50 	.word	0x08006a50
 8004158:	2301      	movs	r3, #1
 800415a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800415c:	4659      	mov	r1, fp
 800415e:	4628      	mov	r0, r5
 8004160:	47b0      	blx	r6
 8004162:	3001      	adds	r0, #1
 8004164:	f43f aecd 	beq.w	8003f02 <_printf_float+0xae>
 8004168:	f10a 0a01 	add.w	sl, sl, #1
 800416c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004170:	eba9 0308 	sub.w	r3, r9, r8
 8004174:	4553      	cmp	r3, sl
 8004176:	dcef      	bgt.n	8004158 <_printf_float+0x304>
 8004178:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800417c:	429a      	cmp	r2, r3
 800417e:	444f      	add	r7, r9
 8004180:	db14      	blt.n	80041ac <_printf_float+0x358>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	07da      	lsls	r2, r3, #31
 8004186:	d411      	bmi.n	80041ac <_printf_float+0x358>
 8004188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800418a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800418c:	eba3 0209 	sub.w	r2, r3, r9
 8004190:	eba3 0901 	sub.w	r9, r3, r1
 8004194:	4591      	cmp	r9, r2
 8004196:	bfa8      	it	ge
 8004198:	4691      	movge	r9, r2
 800419a:	f1b9 0f00 	cmp.w	r9, #0
 800419e:	dc0d      	bgt.n	80041bc <_printf_float+0x368>
 80041a0:	2700      	movs	r7, #0
 80041a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a6:	f104 081a 	add.w	r8, r4, #26
 80041aa:	e018      	b.n	80041de <_printf_float+0x38a>
 80041ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041b0:	4659      	mov	r1, fp
 80041b2:	4628      	mov	r0, r5
 80041b4:	47b0      	blx	r6
 80041b6:	3001      	adds	r0, #1
 80041b8:	d1e6      	bne.n	8004188 <_printf_float+0x334>
 80041ba:	e6a2      	b.n	8003f02 <_printf_float+0xae>
 80041bc:	464b      	mov	r3, r9
 80041be:	463a      	mov	r2, r7
 80041c0:	4659      	mov	r1, fp
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b0      	blx	r6
 80041c6:	3001      	adds	r0, #1
 80041c8:	d1ea      	bne.n	80041a0 <_printf_float+0x34c>
 80041ca:	e69a      	b.n	8003f02 <_printf_float+0xae>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4642      	mov	r2, r8
 80041d0:	4659      	mov	r1, fp
 80041d2:	4628      	mov	r0, r5
 80041d4:	47b0      	blx	r6
 80041d6:	3001      	adds	r0, #1
 80041d8:	f43f ae93 	beq.w	8003f02 <_printf_float+0xae>
 80041dc:	3701      	adds	r7, #1
 80041de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	eba3 0309 	sub.w	r3, r3, r9
 80041e8:	42bb      	cmp	r3, r7
 80041ea:	dcef      	bgt.n	80041cc <_printf_float+0x378>
 80041ec:	e74d      	b.n	800408a <_printf_float+0x236>
 80041ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041f0:	2a01      	cmp	r2, #1
 80041f2:	dc01      	bgt.n	80041f8 <_printf_float+0x3a4>
 80041f4:	07db      	lsls	r3, r3, #31
 80041f6:	d538      	bpl.n	800426a <_printf_float+0x416>
 80041f8:	2301      	movs	r3, #1
 80041fa:	463a      	mov	r2, r7
 80041fc:	4659      	mov	r1, fp
 80041fe:	4628      	mov	r0, r5
 8004200:	47b0      	blx	r6
 8004202:	3001      	adds	r0, #1
 8004204:	f43f ae7d 	beq.w	8003f02 <_printf_float+0xae>
 8004208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800420c:	4659      	mov	r1, fp
 800420e:	4628      	mov	r0, r5
 8004210:	47b0      	blx	r6
 8004212:	3001      	adds	r0, #1
 8004214:	f107 0701 	add.w	r7, r7, #1
 8004218:	f43f ae73 	beq.w	8003f02 <_printf_float+0xae>
 800421c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004222:	2200      	movs	r2, #0
 8004224:	f103 38ff 	add.w	r8, r3, #4294967295
 8004228:	2300      	movs	r3, #0
 800422a:	f7fc fbbd 	bl	80009a8 <__aeabi_dcmpeq>
 800422e:	b9c0      	cbnz	r0, 8004262 <_printf_float+0x40e>
 8004230:	4643      	mov	r3, r8
 8004232:	463a      	mov	r2, r7
 8004234:	4659      	mov	r1, fp
 8004236:	4628      	mov	r0, r5
 8004238:	47b0      	blx	r6
 800423a:	3001      	adds	r0, #1
 800423c:	d10d      	bne.n	800425a <_printf_float+0x406>
 800423e:	e660      	b.n	8003f02 <_printf_float+0xae>
 8004240:	2301      	movs	r3, #1
 8004242:	4642      	mov	r2, r8
 8004244:	4659      	mov	r1, fp
 8004246:	4628      	mov	r0, r5
 8004248:	47b0      	blx	r6
 800424a:	3001      	adds	r0, #1
 800424c:	f43f ae59 	beq.w	8003f02 <_printf_float+0xae>
 8004250:	3701      	adds	r7, #1
 8004252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004254:	3b01      	subs	r3, #1
 8004256:	42bb      	cmp	r3, r7
 8004258:	dcf2      	bgt.n	8004240 <_printf_float+0x3ec>
 800425a:	464b      	mov	r3, r9
 800425c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004260:	e6e4      	b.n	800402c <_printf_float+0x1d8>
 8004262:	2700      	movs	r7, #0
 8004264:	f104 081a 	add.w	r8, r4, #26
 8004268:	e7f3      	b.n	8004252 <_printf_float+0x3fe>
 800426a:	2301      	movs	r3, #1
 800426c:	e7e1      	b.n	8004232 <_printf_float+0x3de>
 800426e:	2301      	movs	r3, #1
 8004270:	4642      	mov	r2, r8
 8004272:	4659      	mov	r1, fp
 8004274:	4628      	mov	r0, r5
 8004276:	47b0      	blx	r6
 8004278:	3001      	adds	r0, #1
 800427a:	f43f ae42 	beq.w	8003f02 <_printf_float+0xae>
 800427e:	3701      	adds	r7, #1
 8004280:	68e3      	ldr	r3, [r4, #12]
 8004282:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	42bb      	cmp	r3, r7
 8004288:	dcf1      	bgt.n	800426e <_printf_float+0x41a>
 800428a:	e702      	b.n	8004092 <_printf_float+0x23e>
 800428c:	2700      	movs	r7, #0
 800428e:	f104 0819 	add.w	r8, r4, #25
 8004292:	e7f5      	b.n	8004280 <_printf_float+0x42c>
 8004294:	2b00      	cmp	r3, #0
 8004296:	f43f ae94 	beq.w	8003fc2 <_printf_float+0x16e>
 800429a:	f04f 0c00 	mov.w	ip, #0
 800429e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80042a2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80042a6:	6022      	str	r2, [r4, #0]
 80042a8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80042ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	463a      	mov	r2, r7
 80042b4:	464b      	mov	r3, r9
 80042b6:	4628      	mov	r0, r5
 80042b8:	f7ff fd3b 	bl	8003d32 <__cvt>
 80042bc:	4607      	mov	r7, r0
 80042be:	e64f      	b.n	8003f60 <_printf_float+0x10c>

080042c0 <_printf_common>:
 80042c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	4691      	mov	r9, r2
 80042c6:	461f      	mov	r7, r3
 80042c8:	688a      	ldr	r2, [r1, #8]
 80042ca:	690b      	ldr	r3, [r1, #16]
 80042cc:	4606      	mov	r6, r0
 80042ce:	4293      	cmp	r3, r2
 80042d0:	bfb8      	it	lt
 80042d2:	4613      	movlt	r3, r2
 80042d4:	f8c9 3000 	str.w	r3, [r9]
 80042d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042dc:	460c      	mov	r4, r1
 80042de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e2:	b112      	cbz	r2, 80042ea <_printf_common+0x2a>
 80042e4:	3301      	adds	r3, #1
 80042e6:	f8c9 3000 	str.w	r3, [r9]
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	0699      	lsls	r1, r3, #26
 80042ee:	bf42      	ittt	mi
 80042f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042f4:	3302      	addmi	r3, #2
 80042f6:	f8c9 3000 	strmi.w	r3, [r9]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d107      	bne.n	8004312 <_printf_common+0x52>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	f8d9 2000 	ldr.w	r2, [r9]
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	42ab      	cmp	r3, r5
 8004310:	dc29      	bgt.n	8004366 <_printf_common+0xa6>
 8004312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	3300      	adds	r3, #0
 800431a:	bf18      	it	ne
 800431c:	2301      	movne	r3, #1
 800431e:	0692      	lsls	r2, r2, #26
 8004320:	d42e      	bmi.n	8004380 <_printf_common+0xc0>
 8004322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004326:	4639      	mov	r1, r7
 8004328:	4630      	mov	r0, r6
 800432a:	47c0      	blx	r8
 800432c:	3001      	adds	r0, #1
 800432e:	d021      	beq.n	8004374 <_printf_common+0xb4>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	68e5      	ldr	r5, [r4, #12]
 8004334:	f003 0306 	and.w	r3, r3, #6
 8004338:	2b04      	cmp	r3, #4
 800433a:	bf18      	it	ne
 800433c:	2500      	movne	r5, #0
 800433e:	f8d9 2000 	ldr.w	r2, [r9]
 8004342:	f04f 0900 	mov.w	r9, #0
 8004346:	bf08      	it	eq
 8004348:	1aad      	subeq	r5, r5, r2
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	6922      	ldr	r2, [r4, #16]
 800434e:	bf08      	it	eq
 8004350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004354:	4293      	cmp	r3, r2
 8004356:	bfc4      	itt	gt
 8004358:	1a9b      	subgt	r3, r3, r2
 800435a:	18ed      	addgt	r5, r5, r3
 800435c:	341a      	adds	r4, #26
 800435e:	454d      	cmp	r5, r9
 8004360:	d11a      	bne.n	8004398 <_printf_common+0xd8>
 8004362:	2000      	movs	r0, #0
 8004364:	e008      	b.n	8004378 <_printf_common+0xb8>
 8004366:	2301      	movs	r3, #1
 8004368:	4652      	mov	r2, sl
 800436a:	4639      	mov	r1, r7
 800436c:	4630      	mov	r0, r6
 800436e:	47c0      	blx	r8
 8004370:	3001      	adds	r0, #1
 8004372:	d103      	bne.n	800437c <_printf_common+0xbc>
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437c:	3501      	adds	r5, #1
 800437e:	e7c2      	b.n	8004306 <_printf_common+0x46>
 8004380:	2030      	movs	r0, #48	; 0x30
 8004382:	18e1      	adds	r1, r4, r3
 8004384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800438e:	4422      	add	r2, r4
 8004390:	3302      	adds	r3, #2
 8004392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004396:	e7c4      	b.n	8004322 <_printf_common+0x62>
 8004398:	2301      	movs	r3, #1
 800439a:	4622      	mov	r2, r4
 800439c:	4639      	mov	r1, r7
 800439e:	4630      	mov	r0, r6
 80043a0:	47c0      	blx	r8
 80043a2:	3001      	adds	r0, #1
 80043a4:	d0e6      	beq.n	8004374 <_printf_common+0xb4>
 80043a6:	f109 0901 	add.w	r9, r9, #1
 80043aa:	e7d8      	b.n	800435e <_printf_common+0x9e>

080043ac <_printf_i>:
 80043ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043b4:	460c      	mov	r4, r1
 80043b6:	7e09      	ldrb	r1, [r1, #24]
 80043b8:	b085      	sub	sp, #20
 80043ba:	296e      	cmp	r1, #110	; 0x6e
 80043bc:	4617      	mov	r7, r2
 80043be:	4606      	mov	r6, r0
 80043c0:	4698      	mov	r8, r3
 80043c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043c4:	f000 80b3 	beq.w	800452e <_printf_i+0x182>
 80043c8:	d822      	bhi.n	8004410 <_printf_i+0x64>
 80043ca:	2963      	cmp	r1, #99	; 0x63
 80043cc:	d036      	beq.n	800443c <_printf_i+0x90>
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x3a>
 80043d0:	2900      	cmp	r1, #0
 80043d2:	f000 80b9 	beq.w	8004548 <_printf_i+0x19c>
 80043d6:	2958      	cmp	r1, #88	; 0x58
 80043d8:	f000 8083 	beq.w	80044e2 <_printf_i+0x136>
 80043dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80043e4:	e032      	b.n	800444c <_printf_i+0xa0>
 80043e6:	2964      	cmp	r1, #100	; 0x64
 80043e8:	d001      	beq.n	80043ee <_printf_i+0x42>
 80043ea:	2969      	cmp	r1, #105	; 0x69
 80043ec:	d1f6      	bne.n	80043dc <_printf_i+0x30>
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	0605      	lsls	r5, r0, #24
 80043f4:	f103 0104 	add.w	r1, r3, #4
 80043f8:	d52a      	bpl.n	8004450 <_printf_i+0xa4>
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6011      	str	r1, [r2, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	da03      	bge.n	800440a <_printf_i+0x5e>
 8004402:	222d      	movs	r2, #45	; 0x2d
 8004404:	425b      	negs	r3, r3
 8004406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800440a:	486f      	ldr	r0, [pc, #444]	; (80045c8 <_printf_i+0x21c>)
 800440c:	220a      	movs	r2, #10
 800440e:	e039      	b.n	8004484 <_printf_i+0xd8>
 8004410:	2973      	cmp	r1, #115	; 0x73
 8004412:	f000 809d 	beq.w	8004550 <_printf_i+0x1a4>
 8004416:	d808      	bhi.n	800442a <_printf_i+0x7e>
 8004418:	296f      	cmp	r1, #111	; 0x6f
 800441a:	d020      	beq.n	800445e <_printf_i+0xb2>
 800441c:	2970      	cmp	r1, #112	; 0x70
 800441e:	d1dd      	bne.n	80043dc <_printf_i+0x30>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	f043 0320 	orr.w	r3, r3, #32
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	e003      	b.n	8004432 <_printf_i+0x86>
 800442a:	2975      	cmp	r1, #117	; 0x75
 800442c:	d017      	beq.n	800445e <_printf_i+0xb2>
 800442e:	2978      	cmp	r1, #120	; 0x78
 8004430:	d1d4      	bne.n	80043dc <_printf_i+0x30>
 8004432:	2378      	movs	r3, #120	; 0x78
 8004434:	4865      	ldr	r0, [pc, #404]	; (80045cc <_printf_i+0x220>)
 8004436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800443a:	e055      	b.n	80044e8 <_printf_i+0x13c>
 800443c:	6813      	ldr	r3, [r2, #0]
 800443e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004442:	1d19      	adds	r1, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6011      	str	r1, [r2, #0]
 8004448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800444c:	2301      	movs	r3, #1
 800444e:	e08c      	b.n	800456a <_printf_i+0x1be>
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004456:	6011      	str	r1, [r2, #0]
 8004458:	bf18      	it	ne
 800445a:	b21b      	sxthne	r3, r3
 800445c:	e7cf      	b.n	80043fe <_printf_i+0x52>
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	6825      	ldr	r5, [r4, #0]
 8004462:	1d18      	adds	r0, r3, #4
 8004464:	6010      	str	r0, [r2, #0]
 8004466:	0628      	lsls	r0, r5, #24
 8004468:	d501      	bpl.n	800446e <_printf_i+0xc2>
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	e002      	b.n	8004474 <_printf_i+0xc8>
 800446e:	0668      	lsls	r0, r5, #25
 8004470:	d5fb      	bpl.n	800446a <_printf_i+0xbe>
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	296f      	cmp	r1, #111	; 0x6f
 8004476:	bf14      	ite	ne
 8004478:	220a      	movne	r2, #10
 800447a:	2208      	moveq	r2, #8
 800447c:	4852      	ldr	r0, [pc, #328]	; (80045c8 <_printf_i+0x21c>)
 800447e:	2100      	movs	r1, #0
 8004480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004484:	6865      	ldr	r5, [r4, #4]
 8004486:	2d00      	cmp	r5, #0
 8004488:	60a5      	str	r5, [r4, #8]
 800448a:	f2c0 8095 	blt.w	80045b8 <_printf_i+0x20c>
 800448e:	6821      	ldr	r1, [r4, #0]
 8004490:	f021 0104 	bic.w	r1, r1, #4
 8004494:	6021      	str	r1, [r4, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13d      	bne.n	8004516 <_printf_i+0x16a>
 800449a:	2d00      	cmp	r5, #0
 800449c:	f040 808e 	bne.w	80045bc <_printf_i+0x210>
 80044a0:	4665      	mov	r5, ip
 80044a2:	2a08      	cmp	r2, #8
 80044a4:	d10b      	bne.n	80044be <_printf_i+0x112>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	07db      	lsls	r3, r3, #31
 80044aa:	d508      	bpl.n	80044be <_printf_i+0x112>
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	bfde      	ittt	le
 80044b4:	2330      	movle	r3, #48	; 0x30
 80044b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044be:	ebac 0305 	sub.w	r3, ip, r5
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	f8cd 8000 	str.w	r8, [sp]
 80044c8:	463b      	mov	r3, r7
 80044ca:	aa03      	add	r2, sp, #12
 80044cc:	4621      	mov	r1, r4
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff fef6 	bl	80042c0 <_printf_common>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d14d      	bne.n	8004574 <_printf_i+0x1c8>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	b005      	add	sp, #20
 80044de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044e2:	4839      	ldr	r0, [pc, #228]	; (80045c8 <_printf_i+0x21c>)
 80044e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044e8:	6813      	ldr	r3, [r2, #0]
 80044ea:	6821      	ldr	r1, [r4, #0]
 80044ec:	1d1d      	adds	r5, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6015      	str	r5, [r2, #0]
 80044f2:	060a      	lsls	r2, r1, #24
 80044f4:	d50b      	bpl.n	800450e <_printf_i+0x162>
 80044f6:	07ca      	lsls	r2, r1, #31
 80044f8:	bf44      	itt	mi
 80044fa:	f041 0120 	orrmi.w	r1, r1, #32
 80044fe:	6021      	strmi	r1, [r4, #0]
 8004500:	b91b      	cbnz	r3, 800450a <_printf_i+0x15e>
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	f022 0220 	bic.w	r2, r2, #32
 8004508:	6022      	str	r2, [r4, #0]
 800450a:	2210      	movs	r2, #16
 800450c:	e7b7      	b.n	800447e <_printf_i+0xd2>
 800450e:	064d      	lsls	r5, r1, #25
 8004510:	bf48      	it	mi
 8004512:	b29b      	uxthmi	r3, r3
 8004514:	e7ef      	b.n	80044f6 <_printf_i+0x14a>
 8004516:	4665      	mov	r5, ip
 8004518:	fbb3 f1f2 	udiv	r1, r3, r2
 800451c:	fb02 3311 	mls	r3, r2, r1, r3
 8004520:	5cc3      	ldrb	r3, [r0, r3]
 8004522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004526:	460b      	mov	r3, r1
 8004528:	2900      	cmp	r1, #0
 800452a:	d1f5      	bne.n	8004518 <_printf_i+0x16c>
 800452c:	e7b9      	b.n	80044a2 <_printf_i+0xf6>
 800452e:	6813      	ldr	r3, [r2, #0]
 8004530:	6825      	ldr	r5, [r4, #0]
 8004532:	1d18      	adds	r0, r3, #4
 8004534:	6961      	ldr	r1, [r4, #20]
 8004536:	6010      	str	r0, [r2, #0]
 8004538:	0628      	lsls	r0, r5, #24
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	d501      	bpl.n	8004542 <_printf_i+0x196>
 800453e:	6019      	str	r1, [r3, #0]
 8004540:	e002      	b.n	8004548 <_printf_i+0x19c>
 8004542:	066a      	lsls	r2, r5, #25
 8004544:	d5fb      	bpl.n	800453e <_printf_i+0x192>
 8004546:	8019      	strh	r1, [r3, #0]
 8004548:	2300      	movs	r3, #0
 800454a:	4665      	mov	r5, ip
 800454c:	6123      	str	r3, [r4, #16]
 800454e:	e7b9      	b.n	80044c4 <_printf_i+0x118>
 8004550:	6813      	ldr	r3, [r2, #0]
 8004552:	1d19      	adds	r1, r3, #4
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	681d      	ldr	r5, [r3, #0]
 8004558:	6862      	ldr	r2, [r4, #4]
 800455a:	2100      	movs	r1, #0
 800455c:	4628      	mov	r0, r5
 800455e:	f000 feb1 	bl	80052c4 <memchr>
 8004562:	b108      	cbz	r0, 8004568 <_printf_i+0x1bc>
 8004564:	1b40      	subs	r0, r0, r5
 8004566:	6060      	str	r0, [r4, #4]
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	6123      	str	r3, [r4, #16]
 800456c:	2300      	movs	r3, #0
 800456e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004572:	e7a7      	b.n	80044c4 <_printf_i+0x118>
 8004574:	6923      	ldr	r3, [r4, #16]
 8004576:	462a      	mov	r2, r5
 8004578:	4639      	mov	r1, r7
 800457a:	4630      	mov	r0, r6
 800457c:	47c0      	blx	r8
 800457e:	3001      	adds	r0, #1
 8004580:	d0aa      	beq.n	80044d8 <_printf_i+0x12c>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	079b      	lsls	r3, r3, #30
 8004586:	d413      	bmi.n	80045b0 <_printf_i+0x204>
 8004588:	68e0      	ldr	r0, [r4, #12]
 800458a:	9b03      	ldr	r3, [sp, #12]
 800458c:	4298      	cmp	r0, r3
 800458e:	bfb8      	it	lt
 8004590:	4618      	movlt	r0, r3
 8004592:	e7a3      	b.n	80044dc <_printf_i+0x130>
 8004594:	2301      	movs	r3, #1
 8004596:	464a      	mov	r2, r9
 8004598:	4639      	mov	r1, r7
 800459a:	4630      	mov	r0, r6
 800459c:	47c0      	blx	r8
 800459e:	3001      	adds	r0, #1
 80045a0:	d09a      	beq.n	80044d8 <_printf_i+0x12c>
 80045a2:	3501      	adds	r5, #1
 80045a4:	68e3      	ldr	r3, [r4, #12]
 80045a6:	9a03      	ldr	r2, [sp, #12]
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	42ab      	cmp	r3, r5
 80045ac:	dcf2      	bgt.n	8004594 <_printf_i+0x1e8>
 80045ae:	e7eb      	b.n	8004588 <_printf_i+0x1dc>
 80045b0:	2500      	movs	r5, #0
 80045b2:	f104 0919 	add.w	r9, r4, #25
 80045b6:	e7f5      	b.n	80045a4 <_printf_i+0x1f8>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ac      	bne.n	8004516 <_printf_i+0x16a>
 80045bc:	7803      	ldrb	r3, [r0, #0]
 80045be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045c6:	e76c      	b.n	80044a2 <_printf_i+0xf6>
 80045c8:	08006a52 	.word	0x08006a52
 80045cc:	08006a63 	.word	0x08006a63

080045d0 <siprintf>:
 80045d0:	b40e      	push	{r1, r2, r3}
 80045d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045d6:	b500      	push	{lr}
 80045d8:	b09c      	sub	sp, #112	; 0x70
 80045da:	ab1d      	add	r3, sp, #116	; 0x74
 80045dc:	9002      	str	r0, [sp, #8]
 80045de:	9006      	str	r0, [sp, #24]
 80045e0:	9107      	str	r1, [sp, #28]
 80045e2:	9104      	str	r1, [sp, #16]
 80045e4:	4808      	ldr	r0, [pc, #32]	; (8004608 <siprintf+0x38>)
 80045e6:	4909      	ldr	r1, [pc, #36]	; (800460c <siprintf+0x3c>)
 80045e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ec:	9105      	str	r1, [sp, #20]
 80045ee:	6800      	ldr	r0, [r0, #0]
 80045f0:	a902      	add	r1, sp, #8
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	f001 fa5e 	bl	8005ab4 <_svfiprintf_r>
 80045f8:	2200      	movs	r2, #0
 80045fa:	9b02      	ldr	r3, [sp, #8]
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	b01c      	add	sp, #112	; 0x70
 8004600:	f85d eb04 	ldr.w	lr, [sp], #4
 8004604:	b003      	add	sp, #12
 8004606:	4770      	bx	lr
 8004608:	2000000c 	.word	0x2000000c
 800460c:	ffff0208 	.word	0xffff0208

08004610 <quorem>:
 8004610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	6903      	ldr	r3, [r0, #16]
 8004616:	690c      	ldr	r4, [r1, #16]
 8004618:	4680      	mov	r8, r0
 800461a:	42a3      	cmp	r3, r4
 800461c:	f2c0 8084 	blt.w	8004728 <quorem+0x118>
 8004620:	3c01      	subs	r4, #1
 8004622:	f101 0714 	add.w	r7, r1, #20
 8004626:	f100 0614 	add.w	r6, r0, #20
 800462a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800462e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004632:	3501      	adds	r5, #1
 8004634:	fbb0 f5f5 	udiv	r5, r0, r5
 8004638:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800463c:	eb06 030c 	add.w	r3, r6, ip
 8004640:	eb07 090c 	add.w	r9, r7, ip
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	b39d      	cbz	r5, 80046b0 <quorem+0xa0>
 8004648:	f04f 0a00 	mov.w	sl, #0
 800464c:	4638      	mov	r0, r7
 800464e:	46b6      	mov	lr, r6
 8004650:	46d3      	mov	fp, sl
 8004652:	f850 2b04 	ldr.w	r2, [r0], #4
 8004656:	b293      	uxth	r3, r2
 8004658:	fb05 a303 	mla	r3, r5, r3, sl
 800465c:	0c12      	lsrs	r2, r2, #16
 800465e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004662:	fb05 a202 	mla	r2, r5, r2, sl
 8004666:	b29b      	uxth	r3, r3
 8004668:	ebab 0303 	sub.w	r3, fp, r3
 800466c:	f8de b000 	ldr.w	fp, [lr]
 8004670:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004674:	fa1f fb8b 	uxth.w	fp, fp
 8004678:	445b      	add	r3, fp
 800467a:	fa1f fb82 	uxth.w	fp, r2
 800467e:	f8de 2000 	ldr.w	r2, [lr]
 8004682:	4581      	cmp	r9, r0
 8004684:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800468c:	b29b      	uxth	r3, r3
 800468e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004692:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004696:	f84e 3b04 	str.w	r3, [lr], #4
 800469a:	d2da      	bcs.n	8004652 <quorem+0x42>
 800469c:	f856 300c 	ldr.w	r3, [r6, ip]
 80046a0:	b933      	cbnz	r3, 80046b0 <quorem+0xa0>
 80046a2:	9b01      	ldr	r3, [sp, #4]
 80046a4:	3b04      	subs	r3, #4
 80046a6:	429e      	cmp	r6, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	d331      	bcc.n	8004710 <quorem+0x100>
 80046ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80046b0:	4640      	mov	r0, r8
 80046b2:	f001 f829 	bl	8005708 <__mcmp>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	db26      	blt.n	8004708 <quorem+0xf8>
 80046ba:	4630      	mov	r0, r6
 80046bc:	f04f 0c00 	mov.w	ip, #0
 80046c0:	3501      	adds	r5, #1
 80046c2:	f857 1b04 	ldr.w	r1, [r7], #4
 80046c6:	f8d0 e000 	ldr.w	lr, [r0]
 80046ca:	b28b      	uxth	r3, r1
 80046cc:	ebac 0303 	sub.w	r3, ip, r3
 80046d0:	fa1f f28e 	uxth.w	r2, lr
 80046d4:	4413      	add	r3, r2
 80046d6:	0c0a      	lsrs	r2, r1, #16
 80046d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80046dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046e6:	45b9      	cmp	r9, r7
 80046e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80046ec:	f840 3b04 	str.w	r3, [r0], #4
 80046f0:	d2e7      	bcs.n	80046c2 <quorem+0xb2>
 80046f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80046f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80046fa:	b92a      	cbnz	r2, 8004708 <quorem+0xf8>
 80046fc:	3b04      	subs	r3, #4
 80046fe:	429e      	cmp	r6, r3
 8004700:	461a      	mov	r2, r3
 8004702:	d30b      	bcc.n	800471c <quorem+0x10c>
 8004704:	f8c8 4010 	str.w	r4, [r8, #16]
 8004708:	4628      	mov	r0, r5
 800470a:	b003      	add	sp, #12
 800470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	3b04      	subs	r3, #4
 8004714:	2a00      	cmp	r2, #0
 8004716:	d1c9      	bne.n	80046ac <quorem+0x9c>
 8004718:	3c01      	subs	r4, #1
 800471a:	e7c4      	b.n	80046a6 <quorem+0x96>
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	3b04      	subs	r3, #4
 8004720:	2a00      	cmp	r2, #0
 8004722:	d1ef      	bne.n	8004704 <quorem+0xf4>
 8004724:	3c01      	subs	r4, #1
 8004726:	e7ea      	b.n	80046fe <quorem+0xee>
 8004728:	2000      	movs	r0, #0
 800472a:	e7ee      	b.n	800470a <quorem+0xfa>
 800472c:	0000      	movs	r0, r0
	...

08004730 <_dtoa_r>:
 8004730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	4616      	mov	r6, r2
 8004736:	461f      	mov	r7, r3
 8004738:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800473a:	b095      	sub	sp, #84	; 0x54
 800473c:	4604      	mov	r4, r0
 800473e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004742:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004746:	b93d      	cbnz	r5, 8004758 <_dtoa_r+0x28>
 8004748:	2010      	movs	r0, #16
 800474a:	f000 fdb3 	bl	80052b4 <malloc>
 800474e:	6260      	str	r0, [r4, #36]	; 0x24
 8004750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004754:	6005      	str	r5, [r0, #0]
 8004756:	60c5      	str	r5, [r0, #12]
 8004758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800475a:	6819      	ldr	r1, [r3, #0]
 800475c:	b151      	cbz	r1, 8004774 <_dtoa_r+0x44>
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	2301      	movs	r3, #1
 8004762:	4093      	lsls	r3, r2
 8004764:	604a      	str	r2, [r1, #4]
 8004766:	608b      	str	r3, [r1, #8]
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fded 	bl	8005348 <_Bfree>
 800476e:	2200      	movs	r2, #0
 8004770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	1e3b      	subs	r3, r7, #0
 8004776:	bfaf      	iteee	ge
 8004778:	2300      	movge	r3, #0
 800477a:	2201      	movlt	r2, #1
 800477c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004780:	9303      	strlt	r3, [sp, #12]
 8004782:	bfac      	ite	ge
 8004784:	f8c8 3000 	strge.w	r3, [r8]
 8004788:	f8c8 2000 	strlt.w	r2, [r8]
 800478c:	4bae      	ldr	r3, [pc, #696]	; (8004a48 <_dtoa_r+0x318>)
 800478e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004792:	ea33 0308 	bics.w	r3, r3, r8
 8004796:	d11b      	bne.n	80047d0 <_dtoa_r+0xa0>
 8004798:	f242 730f 	movw	r3, #9999	; 0x270f
 800479c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	9b02      	ldr	r3, [sp, #8]
 80047a2:	b923      	cbnz	r3, 80047ae <_dtoa_r+0x7e>
 80047a4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80047a8:	2800      	cmp	r0, #0
 80047aa:	f000 8545 	beq.w	8005238 <_dtoa_r+0xb08>
 80047ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047b0:	b953      	cbnz	r3, 80047c8 <_dtoa_r+0x98>
 80047b2:	4ba6      	ldr	r3, [pc, #664]	; (8004a4c <_dtoa_r+0x31c>)
 80047b4:	e021      	b.n	80047fa <_dtoa_r+0xca>
 80047b6:	4ba6      	ldr	r3, [pc, #664]	; (8004a50 <_dtoa_r+0x320>)
 80047b8:	9306      	str	r3, [sp, #24]
 80047ba:	3308      	adds	r3, #8
 80047bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	9806      	ldr	r0, [sp, #24]
 80047c2:	b015      	add	sp, #84	; 0x54
 80047c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c8:	4ba0      	ldr	r3, [pc, #640]	; (8004a4c <_dtoa_r+0x31c>)
 80047ca:	9306      	str	r3, [sp, #24]
 80047cc:	3303      	adds	r3, #3
 80047ce:	e7f5      	b.n	80047bc <_dtoa_r+0x8c>
 80047d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2300      	movs	r3, #0
 80047d8:	4630      	mov	r0, r6
 80047da:	4639      	mov	r1, r7
 80047dc:	f7fc f8e4 	bl	80009a8 <__aeabi_dcmpeq>
 80047e0:	4682      	mov	sl, r0
 80047e2:	b160      	cbz	r0, 80047fe <_dtoa_r+0xce>
 80047e4:	2301      	movs	r3, #1
 80047e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8520 	beq.w	8005232 <_dtoa_r+0xb02>
 80047f2:	4b98      	ldr	r3, [pc, #608]	; (8004a54 <_dtoa_r+0x324>)
 80047f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	9306      	str	r3, [sp, #24]
 80047fc:	e7e0      	b.n	80047c0 <_dtoa_r+0x90>
 80047fe:	ab12      	add	r3, sp, #72	; 0x48
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	ab13      	add	r3, sp, #76	; 0x4c
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4632      	mov	r2, r6
 8004808:	463b      	mov	r3, r7
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fff4 	bl	80057f8 <__d2b>
 8004810:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004814:	4683      	mov	fp, r0
 8004816:	2d00      	cmp	r5, #0
 8004818:	d07d      	beq.n	8004916 <_dtoa_r+0x1e6>
 800481a:	46b0      	mov	r8, r6
 800481c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004820:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004824:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004828:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800482c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004830:	2200      	movs	r2, #0
 8004832:	4b89      	ldr	r3, [pc, #548]	; (8004a58 <_dtoa_r+0x328>)
 8004834:	4640      	mov	r0, r8
 8004836:	4649      	mov	r1, r9
 8004838:	f7fb fc96 	bl	8000168 <__aeabi_dsub>
 800483c:	a37c      	add	r3, pc, #496	; (adr r3, 8004a30 <_dtoa_r+0x300>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fb fe49 	bl	80004d8 <__aeabi_dmul>
 8004846:	a37c      	add	r3, pc, #496	; (adr r3, 8004a38 <_dtoa_r+0x308>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb fc8e 	bl	800016c <__adddf3>
 8004850:	4606      	mov	r6, r0
 8004852:	4628      	mov	r0, r5
 8004854:	460f      	mov	r7, r1
 8004856:	f7fb fdd5 	bl	8000404 <__aeabi_i2d>
 800485a:	a379      	add	r3, pc, #484	; (adr r3, 8004a40 <_dtoa_r+0x310>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fe3a 	bl	80004d8 <__aeabi_dmul>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4630      	mov	r0, r6
 800486a:	4639      	mov	r1, r7
 800486c:	f7fb fc7e 	bl	800016c <__adddf3>
 8004870:	4606      	mov	r6, r0
 8004872:	460f      	mov	r7, r1
 8004874:	f7fc f8e0 	bl	8000a38 <__aeabi_d2iz>
 8004878:	2200      	movs	r2, #0
 800487a:	4682      	mov	sl, r0
 800487c:	2300      	movs	r3, #0
 800487e:	4630      	mov	r0, r6
 8004880:	4639      	mov	r1, r7
 8004882:	f7fc f89b 	bl	80009bc <__aeabi_dcmplt>
 8004886:	b148      	cbz	r0, 800489c <_dtoa_r+0x16c>
 8004888:	4650      	mov	r0, sl
 800488a:	f7fb fdbb 	bl	8000404 <__aeabi_i2d>
 800488e:	4632      	mov	r2, r6
 8004890:	463b      	mov	r3, r7
 8004892:	f7fc f889 	bl	80009a8 <__aeabi_dcmpeq>
 8004896:	b908      	cbnz	r0, 800489c <_dtoa_r+0x16c>
 8004898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800489c:	f1ba 0f16 	cmp.w	sl, #22
 80048a0:	d85a      	bhi.n	8004958 <_dtoa_r+0x228>
 80048a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048a6:	496d      	ldr	r1, [pc, #436]	; (8004a5c <_dtoa_r+0x32c>)
 80048a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80048ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b0:	f7fc f8a2 	bl	80009f8 <__aeabi_dcmpgt>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d051      	beq.n	800495c <_dtoa_r+0x22c>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048be:	930d      	str	r3, [sp, #52]	; 0x34
 80048c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048c2:	1b5d      	subs	r5, r3, r5
 80048c4:	1e6b      	subs	r3, r5, #1
 80048c6:	9307      	str	r3, [sp, #28]
 80048c8:	bf43      	ittte	mi
 80048ca:	2300      	movmi	r3, #0
 80048cc:	f1c5 0901 	rsbmi	r9, r5, #1
 80048d0:	9307      	strmi	r3, [sp, #28]
 80048d2:	f04f 0900 	movpl.w	r9, #0
 80048d6:	f1ba 0f00 	cmp.w	sl, #0
 80048da:	db41      	blt.n	8004960 <_dtoa_r+0x230>
 80048dc:	9b07      	ldr	r3, [sp, #28]
 80048de:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80048e2:	4453      	add	r3, sl
 80048e4:	9307      	str	r3, [sp, #28]
 80048e6:	2300      	movs	r3, #0
 80048e8:	9308      	str	r3, [sp, #32]
 80048ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	f200 808f 	bhi.w	8004a10 <_dtoa_r+0x2e0>
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	bfc4      	itt	gt
 80048f6:	3b04      	subgt	r3, #4
 80048f8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80048fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80048fc:	bfc8      	it	gt
 80048fe:	2500      	movgt	r5, #0
 8004900:	f1a3 0302 	sub.w	r3, r3, #2
 8004904:	bfd8      	it	le
 8004906:	2501      	movle	r5, #1
 8004908:	2b03      	cmp	r3, #3
 800490a:	f200 808d 	bhi.w	8004a28 <_dtoa_r+0x2f8>
 800490e:	e8df f003 	tbb	[pc, r3]
 8004912:	7d7b      	.short	0x7d7b
 8004914:	6f2f      	.short	0x6f2f
 8004916:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800491a:	441d      	add	r5, r3
 800491c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004920:	2820      	cmp	r0, #32
 8004922:	dd13      	ble.n	800494c <_dtoa_r+0x21c>
 8004924:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004928:	9b02      	ldr	r3, [sp, #8]
 800492a:	fa08 f800 	lsl.w	r8, r8, r0
 800492e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004932:	fa23 f000 	lsr.w	r0, r3, r0
 8004936:	ea48 0000 	orr.w	r0, r8, r0
 800493a:	f7fb fd53 	bl	80003e4 <__aeabi_ui2d>
 800493e:	2301      	movs	r3, #1
 8004940:	4680      	mov	r8, r0
 8004942:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004946:	3d01      	subs	r5, #1
 8004948:	9310      	str	r3, [sp, #64]	; 0x40
 800494a:	e771      	b.n	8004830 <_dtoa_r+0x100>
 800494c:	9b02      	ldr	r3, [sp, #8]
 800494e:	f1c0 0020 	rsb	r0, r0, #32
 8004952:	fa03 f000 	lsl.w	r0, r3, r0
 8004956:	e7f0      	b.n	800493a <_dtoa_r+0x20a>
 8004958:	2301      	movs	r3, #1
 800495a:	e7b0      	b.n	80048be <_dtoa_r+0x18e>
 800495c:	900d      	str	r0, [sp, #52]	; 0x34
 800495e:	e7af      	b.n	80048c0 <_dtoa_r+0x190>
 8004960:	f1ca 0300 	rsb	r3, sl, #0
 8004964:	9308      	str	r3, [sp, #32]
 8004966:	2300      	movs	r3, #0
 8004968:	eba9 090a 	sub.w	r9, r9, sl
 800496c:	930c      	str	r3, [sp, #48]	; 0x30
 800496e:	e7bc      	b.n	80048ea <_dtoa_r+0x1ba>
 8004970:	2301      	movs	r3, #1
 8004972:	9309      	str	r3, [sp, #36]	; 0x24
 8004974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004976:	2b00      	cmp	r3, #0
 8004978:	dd74      	ble.n	8004a64 <_dtoa_r+0x334>
 800497a:	4698      	mov	r8, r3
 800497c:	9304      	str	r3, [sp, #16]
 800497e:	2200      	movs	r2, #0
 8004980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004982:	6072      	str	r2, [r6, #4]
 8004984:	2204      	movs	r2, #4
 8004986:	f102 0014 	add.w	r0, r2, #20
 800498a:	4298      	cmp	r0, r3
 800498c:	6871      	ldr	r1, [r6, #4]
 800498e:	d96e      	bls.n	8004a6e <_dtoa_r+0x33e>
 8004990:	4620      	mov	r0, r4
 8004992:	f000 fca5 	bl	80052e0 <_Balloc>
 8004996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004998:	6030      	str	r0, [r6, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b8 0f0e 	cmp.w	r8, #14
 80049a0:	9306      	str	r3, [sp, #24]
 80049a2:	f200 80ed 	bhi.w	8004b80 <_dtoa_r+0x450>
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	f000 80ea 	beq.w	8004b80 <_dtoa_r+0x450>
 80049ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049b0:	f1ba 0f00 	cmp.w	sl, #0
 80049b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80049b8:	dd77      	ble.n	8004aaa <_dtoa_r+0x37a>
 80049ba:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <_dtoa_r+0x32c>)
 80049bc:	f00a 030f 	and.w	r3, sl, #15
 80049c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80049c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049c8:	06f0      	lsls	r0, r6, #27
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80049d2:	d568      	bpl.n	8004aa6 <_dtoa_r+0x376>
 80049d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <_dtoa_r+0x330>)
 80049da:	2503      	movs	r5, #3
 80049dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049e0:	f7fb fea4 	bl	800072c <__aeabi_ddiv>
 80049e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049e8:	f006 060f 	and.w	r6, r6, #15
 80049ec:	4f1c      	ldr	r7, [pc, #112]	; (8004a60 <_dtoa_r+0x330>)
 80049ee:	e04f      	b.n	8004a90 <_dtoa_r+0x360>
 80049f0:	2301      	movs	r3, #1
 80049f2:	9309      	str	r3, [sp, #36]	; 0x24
 80049f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80049f6:	4453      	add	r3, sl
 80049f8:	f103 0801 	add.w	r8, r3, #1
 80049fc:	9304      	str	r3, [sp, #16]
 80049fe:	4643      	mov	r3, r8
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bfb8      	it	lt
 8004a04:	2301      	movlt	r3, #1
 8004a06:	e7ba      	b.n	800497e <_dtoa_r+0x24e>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e7b2      	b.n	8004972 <_dtoa_r+0x242>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e7f0      	b.n	80049f2 <_dtoa_r+0x2c2>
 8004a10:	2501      	movs	r5, #1
 8004a12:	2300      	movs	r3, #0
 8004a14:	9509      	str	r5, [sp, #36]	; 0x24
 8004a16:	931e      	str	r3, [sp, #120]	; 0x78
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	9304      	str	r3, [sp, #16]
 8004a20:	4698      	mov	r8, r3
 8004a22:	2312      	movs	r3, #18
 8004a24:	921f      	str	r2, [sp, #124]	; 0x7c
 8004a26:	e7aa      	b.n	800497e <_dtoa_r+0x24e>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2c:	e7f4      	b.n	8004a18 <_dtoa_r+0x2e8>
 8004a2e:	bf00      	nop
 8004a30:	636f4361 	.word	0x636f4361
 8004a34:	3fd287a7 	.word	0x3fd287a7
 8004a38:	8b60c8b3 	.word	0x8b60c8b3
 8004a3c:	3fc68a28 	.word	0x3fc68a28
 8004a40:	509f79fb 	.word	0x509f79fb
 8004a44:	3fd34413 	.word	0x3fd34413
 8004a48:	7ff00000 	.word	0x7ff00000
 8004a4c:	08006a7d 	.word	0x08006a7d
 8004a50:	08006a74 	.word	0x08006a74
 8004a54:	08006a51 	.word	0x08006a51
 8004a58:	3ff80000 	.word	0x3ff80000
 8004a5c:	08006ab0 	.word	0x08006ab0
 8004a60:	08006a88 	.word	0x08006a88
 8004a64:	2301      	movs	r3, #1
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	4698      	mov	r8, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	e7da      	b.n	8004a24 <_dtoa_r+0x2f4>
 8004a6e:	3101      	adds	r1, #1
 8004a70:	6071      	str	r1, [r6, #4]
 8004a72:	0052      	lsls	r2, r2, #1
 8004a74:	e787      	b.n	8004986 <_dtoa_r+0x256>
 8004a76:	07f1      	lsls	r1, r6, #31
 8004a78:	d508      	bpl.n	8004a8c <_dtoa_r+0x35c>
 8004a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a82:	f7fb fd29 	bl	80004d8 <__aeabi_dmul>
 8004a86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a8a:	3501      	adds	r5, #1
 8004a8c:	1076      	asrs	r6, r6, #1
 8004a8e:	3708      	adds	r7, #8
 8004a90:	2e00      	cmp	r6, #0
 8004a92:	d1f0      	bne.n	8004a76 <_dtoa_r+0x346>
 8004a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a9c:	f7fb fe46 	bl	800072c <__aeabi_ddiv>
 8004aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa4:	e01b      	b.n	8004ade <_dtoa_r+0x3ae>
 8004aa6:	2502      	movs	r5, #2
 8004aa8:	e7a0      	b.n	80049ec <_dtoa_r+0x2bc>
 8004aaa:	f000 80a4 	beq.w	8004bf6 <_dtoa_r+0x4c6>
 8004aae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ab2:	f1ca 0600 	rsb	r6, sl, #0
 8004ab6:	4ba0      	ldr	r3, [pc, #640]	; (8004d38 <_dtoa_r+0x608>)
 8004ab8:	f006 020f 	and.w	r2, r6, #15
 8004abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fd08 	bl	80004d8 <__aeabi_dmul>
 8004ac8:	2502      	movs	r5, #2
 8004aca:	2300      	movs	r3, #0
 8004acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ad0:	4f9a      	ldr	r7, [pc, #616]	; (8004d3c <_dtoa_r+0x60c>)
 8004ad2:	1136      	asrs	r6, r6, #4
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	f040 8083 	bne.w	8004be0 <_dtoa_r+0x4b0>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e0      	bne.n	8004aa0 <_dtoa_r+0x370>
 8004ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 808a 	beq.w	8004bfa <_dtoa_r+0x4ca>
 8004ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004aea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004af2:	2200      	movs	r2, #0
 8004af4:	4b92      	ldr	r3, [pc, #584]	; (8004d40 <_dtoa_r+0x610>)
 8004af6:	f7fb ff61 	bl	80009bc <__aeabi_dcmplt>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d07d      	beq.n	8004bfa <_dtoa_r+0x4ca>
 8004afe:	f1b8 0f00 	cmp.w	r8, #0
 8004b02:	d07a      	beq.n	8004bfa <_dtoa_r+0x4ca>
 8004b04:	9b04      	ldr	r3, [sp, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	dd36      	ble.n	8004b78 <_dtoa_r+0x448>
 8004b0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4b8c      	ldr	r3, [pc, #560]	; (8004d44 <_dtoa_r+0x614>)
 8004b12:	f7fb fce1 	bl	80004d8 <__aeabi_dmul>
 8004b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b1a:	9e04      	ldr	r6, [sp, #16]
 8004b1c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004b20:	3501      	adds	r5, #1
 8004b22:	4628      	mov	r0, r5
 8004b24:	f7fb fc6e 	bl	8000404 <__aeabi_i2d>
 8004b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b2c:	f7fb fcd4 	bl	80004d8 <__aeabi_dmul>
 8004b30:	2200      	movs	r2, #0
 8004b32:	4b85      	ldr	r3, [pc, #532]	; (8004d48 <_dtoa_r+0x618>)
 8004b34:	f7fb fb1a 	bl	800016c <__adddf3>
 8004b38:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004b3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b40:	950b      	str	r5, [sp, #44]	; 0x2c
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	d15c      	bne.n	8004c00 <_dtoa_r+0x4d0>
 8004b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4b7f      	ldr	r3, [pc, #508]	; (8004d4c <_dtoa_r+0x61c>)
 8004b4e:	f7fb fb0b 	bl	8000168 <__aeabi_dsub>
 8004b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b54:	462b      	mov	r3, r5
 8004b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b5a:	f7fb ff4d 	bl	80009f8 <__aeabi_dcmpgt>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	f040 8281 	bne.w	8005066 <_dtoa_r+0x936>
 8004b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b6a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004b6e:	f7fb ff25 	bl	80009bc <__aeabi_dcmplt>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f040 8275 	bne.w	8005062 <_dtoa_r+0x932>
 8004b78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f2c0 814b 	blt.w	8004e1e <_dtoa_r+0x6ee>
 8004b88:	f1ba 0f0e 	cmp.w	sl, #14
 8004b8c:	f300 8147 	bgt.w	8004e1e <_dtoa_r+0x6ee>
 8004b90:	4b69      	ldr	r3, [pc, #420]	; (8004d38 <_dtoa_r+0x608>)
 8004b92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f280 80d7 	bge.w	8004d54 <_dtoa_r+0x624>
 8004ba6:	f1b8 0f00 	cmp.w	r8, #0
 8004baa:	f300 80d3 	bgt.w	8004d54 <_dtoa_r+0x624>
 8004bae:	f040 8257 	bne.w	8005060 <_dtoa_r+0x930>
 8004bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4b64      	ldr	r3, [pc, #400]	; (8004d4c <_dtoa_r+0x61c>)
 8004bba:	f7fb fc8d 	bl	80004d8 <__aeabi_dmul>
 8004bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bc2:	f7fb ff0f 	bl	80009e4 <__aeabi_dcmpge>
 8004bc6:	4646      	mov	r6, r8
 8004bc8:	4647      	mov	r7, r8
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	f040 822d 	bne.w	800502a <_dtoa_r+0x8fa>
 8004bd0:	9b06      	ldr	r3, [sp, #24]
 8004bd2:	9a06      	ldr	r2, [sp, #24]
 8004bd4:	1c5d      	adds	r5, r3, #1
 8004bd6:	2331      	movs	r3, #49	; 0x31
 8004bd8:	f10a 0a01 	add.w	sl, sl, #1
 8004bdc:	7013      	strb	r3, [r2, #0]
 8004bde:	e228      	b.n	8005032 <_dtoa_r+0x902>
 8004be0:	07f2      	lsls	r2, r6, #31
 8004be2:	d505      	bpl.n	8004bf0 <_dtoa_r+0x4c0>
 8004be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be8:	f7fb fc76 	bl	80004d8 <__aeabi_dmul>
 8004bec:	2301      	movs	r3, #1
 8004bee:	3501      	adds	r5, #1
 8004bf0:	1076      	asrs	r6, r6, #1
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	e76e      	b.n	8004ad4 <_dtoa_r+0x3a4>
 8004bf6:	2502      	movs	r5, #2
 8004bf8:	e771      	b.n	8004ade <_dtoa_r+0x3ae>
 8004bfa:	4657      	mov	r7, sl
 8004bfc:	4646      	mov	r6, r8
 8004bfe:	e790      	b.n	8004b22 <_dtoa_r+0x3f2>
 8004c00:	4b4d      	ldr	r3, [pc, #308]	; (8004d38 <_dtoa_r+0x608>)
 8004c02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c06:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d048      	beq.n	8004ca2 <_dtoa_r+0x572>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	2000      	movs	r0, #0
 8004c16:	494e      	ldr	r1, [pc, #312]	; (8004d50 <_dtoa_r+0x620>)
 8004c18:	f7fb fd88 	bl	800072c <__aeabi_ddiv>
 8004c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c20:	f7fb faa2 	bl	8000168 <__aeabi_dsub>
 8004c24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c28:	9d06      	ldr	r5, [sp, #24]
 8004c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c2e:	f7fb ff03 	bl	8000a38 <__aeabi_d2iz>
 8004c32:	9011      	str	r0, [sp, #68]	; 0x44
 8004c34:	f7fb fbe6 	bl	8000404 <__aeabi_i2d>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c40:	f7fb fa92 	bl	8000168 <__aeabi_dsub>
 8004c44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c4a:	3330      	adds	r3, #48	; 0x30
 8004c4c:	f805 3b01 	strb.w	r3, [r5], #1
 8004c50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c54:	f7fb feb2 	bl	80009bc <__aeabi_dcmplt>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d163      	bne.n	8004d24 <_dtoa_r+0x5f4>
 8004c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c60:	2000      	movs	r0, #0
 8004c62:	4937      	ldr	r1, [pc, #220]	; (8004d40 <_dtoa_r+0x610>)
 8004c64:	f7fb fa80 	bl	8000168 <__aeabi_dsub>
 8004c68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c6c:	f7fb fea6 	bl	80009bc <__aeabi_dcmplt>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	f040 80b5 	bne.w	8004de0 <_dtoa_r+0x6b0>
 8004c76:	9b06      	ldr	r3, [sp, #24]
 8004c78:	1aeb      	subs	r3, r5, r3
 8004c7a:	429e      	cmp	r6, r3
 8004c7c:	f77f af7c 	ble.w	8004b78 <_dtoa_r+0x448>
 8004c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c84:	2200      	movs	r2, #0
 8004c86:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <_dtoa_r+0x614>)
 8004c88:	f7fb fc26 	bl	80004d8 <__aeabi_dmul>
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <_dtoa_r+0x614>)
 8004c98:	f7fb fc1e 	bl	80004d8 <__aeabi_dmul>
 8004c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ca0:	e7c3      	b.n	8004c2a <_dtoa_r+0x4fa>
 8004ca2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ca6:	f7fb fc17 	bl	80004d8 <__aeabi_dmul>
 8004caa:	9b06      	ldr	r3, [sp, #24]
 8004cac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004cb0:	199d      	adds	r5, r3, r6
 8004cb2:	461e      	mov	r6, r3
 8004cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cb8:	f7fb febe 	bl	8000a38 <__aeabi_d2iz>
 8004cbc:	9011      	str	r0, [sp, #68]	; 0x44
 8004cbe:	f7fb fba1 	bl	8000404 <__aeabi_i2d>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cca:	f7fb fa4d 	bl	8000168 <__aeabi_dsub>
 8004cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cd4:	3330      	adds	r3, #48	; 0x30
 8004cd6:	f806 3b01 	strb.w	r3, [r6], #1
 8004cda:	42ae      	cmp	r6, r5
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	d124      	bne.n	8004d2c <_dtoa_r+0x5fc>
 8004ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <_dtoa_r+0x620>)
 8004ce8:	f7fb fa40 	bl	800016c <__adddf3>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf4:	f7fb fe80 	bl	80009f8 <__aeabi_dcmpgt>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d171      	bne.n	8004de0 <_dtoa_r+0x6b0>
 8004cfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d00:	2000      	movs	r0, #0
 8004d02:	4913      	ldr	r1, [pc, #76]	; (8004d50 <_dtoa_r+0x620>)
 8004d04:	f7fb fa30 	bl	8000168 <__aeabi_dsub>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d10:	f7fb fe54 	bl	80009bc <__aeabi_dcmplt>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	f43f af2f 	beq.w	8004b78 <_dtoa_r+0x448>
 8004d1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d1e:	1e6a      	subs	r2, r5, #1
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d001      	beq.n	8004d28 <_dtoa_r+0x5f8>
 8004d24:	46ba      	mov	sl, r7
 8004d26:	e04a      	b.n	8004dbe <_dtoa_r+0x68e>
 8004d28:	4615      	mov	r5, r2
 8004d2a:	e7f6      	b.n	8004d1a <_dtoa_r+0x5ea>
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <_dtoa_r+0x614>)
 8004d2e:	f7fb fbd3 	bl	80004d8 <__aeabi_dmul>
 8004d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d36:	e7bd      	b.n	8004cb4 <_dtoa_r+0x584>
 8004d38:	08006ab0 	.word	0x08006ab0
 8004d3c:	08006a88 	.word	0x08006a88
 8004d40:	3ff00000 	.word	0x3ff00000
 8004d44:	40240000 	.word	0x40240000
 8004d48:	401c0000 	.word	0x401c0000
 8004d4c:	40140000 	.word	0x40140000
 8004d50:	3fe00000 	.word	0x3fe00000
 8004d54:	9d06      	ldr	r5, [sp, #24]
 8004d56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d5e:	4630      	mov	r0, r6
 8004d60:	4639      	mov	r1, r7
 8004d62:	f7fb fce3 	bl	800072c <__aeabi_ddiv>
 8004d66:	f7fb fe67 	bl	8000a38 <__aeabi_d2iz>
 8004d6a:	4681      	mov	r9, r0
 8004d6c:	f7fb fb4a 	bl	8000404 <__aeabi_i2d>
 8004d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d74:	f7fb fbb0 	bl	80004d8 <__aeabi_dmul>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	4639      	mov	r1, r7
 8004d80:	f7fb f9f2 	bl	8000168 <__aeabi_dsub>
 8004d84:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004d88:	f805 6b01 	strb.w	r6, [r5], #1
 8004d8c:	9e06      	ldr	r6, [sp, #24]
 8004d8e:	4602      	mov	r2, r0
 8004d90:	1bae      	subs	r6, r5, r6
 8004d92:	45b0      	cmp	r8, r6
 8004d94:	460b      	mov	r3, r1
 8004d96:	d135      	bne.n	8004e04 <_dtoa_r+0x6d4>
 8004d98:	f7fb f9e8 	bl	800016c <__adddf3>
 8004d9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004da0:	4606      	mov	r6, r0
 8004da2:	460f      	mov	r7, r1
 8004da4:	f7fb fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8004da8:	b9c8      	cbnz	r0, 8004dde <_dtoa_r+0x6ae>
 8004daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dae:	4630      	mov	r0, r6
 8004db0:	4639      	mov	r1, r7
 8004db2:	f7fb fdf9 	bl	80009a8 <__aeabi_dcmpeq>
 8004db6:	b110      	cbz	r0, 8004dbe <_dtoa_r+0x68e>
 8004db8:	f019 0f01 	tst.w	r9, #1
 8004dbc:	d10f      	bne.n	8004dde <_dtoa_r+0x6ae>
 8004dbe:	4659      	mov	r1, fp
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 fac1 	bl	8005348 <_Bfree>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dca:	702b      	strb	r3, [r5, #0]
 8004dcc:	f10a 0301 	add.w	r3, sl, #1
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f43f acf3 	beq.w	80047c0 <_dtoa_r+0x90>
 8004dda:	601d      	str	r5, [r3, #0]
 8004ddc:	e4f0      	b.n	80047c0 <_dtoa_r+0x90>
 8004dde:	4657      	mov	r7, sl
 8004de0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004de4:	1e6b      	subs	r3, r5, #1
 8004de6:	2a39      	cmp	r2, #57	; 0x39
 8004de8:	d106      	bne.n	8004df8 <_dtoa_r+0x6c8>
 8004dea:	9a06      	ldr	r2, [sp, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d107      	bne.n	8004e00 <_dtoa_r+0x6d0>
 8004df0:	2330      	movs	r3, #48	; 0x30
 8004df2:	7013      	strb	r3, [r2, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	3701      	adds	r7, #1
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	3201      	adds	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e791      	b.n	8004d24 <_dtoa_r+0x5f4>
 8004e00:	461d      	mov	r5, r3
 8004e02:	e7ed      	b.n	8004de0 <_dtoa_r+0x6b0>
 8004e04:	2200      	movs	r2, #0
 8004e06:	4b99      	ldr	r3, [pc, #612]	; (800506c <_dtoa_r+0x93c>)
 8004e08:	f7fb fb66 	bl	80004d8 <__aeabi_dmul>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2300      	movs	r3, #0
 8004e10:	4606      	mov	r6, r0
 8004e12:	460f      	mov	r7, r1
 8004e14:	f7fb fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d09e      	beq.n	8004d5a <_dtoa_r+0x62a>
 8004e1c:	e7cf      	b.n	8004dbe <_dtoa_r+0x68e>
 8004e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	f000 8088 	beq.w	8004f36 <_dtoa_r+0x806>
 8004e26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e28:	2a01      	cmp	r2, #1
 8004e2a:	dc6d      	bgt.n	8004f08 <_dtoa_r+0x7d8>
 8004e2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e2e:	2a00      	cmp	r2, #0
 8004e30:	d066      	beq.n	8004f00 <_dtoa_r+0x7d0>
 8004e32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e36:	464d      	mov	r5, r9
 8004e38:	9e08      	ldr	r6, [sp, #32]
 8004e3a:	9a07      	ldr	r2, [sp, #28]
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	441a      	add	r2, r3
 8004e40:	4620      	mov	r0, r4
 8004e42:	4499      	add	r9, r3
 8004e44:	9207      	str	r2, [sp, #28]
 8004e46:	f000 fb1f 	bl	8005488 <__i2b>
 8004e4a:	4607      	mov	r7, r0
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	dd0b      	ble.n	8004e68 <_dtoa_r+0x738>
 8004e50:	9b07      	ldr	r3, [sp, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dd08      	ble.n	8004e68 <_dtoa_r+0x738>
 8004e56:	42ab      	cmp	r3, r5
 8004e58:	bfa8      	it	ge
 8004e5a:	462b      	movge	r3, r5
 8004e5c:	9a07      	ldr	r2, [sp, #28]
 8004e5e:	eba9 0903 	sub.w	r9, r9, r3
 8004e62:	1aed      	subs	r5, r5, r3
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	9307      	str	r3, [sp, #28]
 8004e68:	9b08      	ldr	r3, [sp, #32]
 8004e6a:	b1eb      	cbz	r3, 8004ea8 <_dtoa_r+0x778>
 8004e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d065      	beq.n	8004f3e <_dtoa_r+0x80e>
 8004e72:	b18e      	cbz	r6, 8004e98 <_dtoa_r+0x768>
 8004e74:	4639      	mov	r1, r7
 8004e76:	4632      	mov	r2, r6
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f000 fba3 	bl	80055c4 <__pow5mult>
 8004e7e:	465a      	mov	r2, fp
 8004e80:	4601      	mov	r1, r0
 8004e82:	4607      	mov	r7, r0
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 fb08 	bl	800549a <__multiply>
 8004e8a:	4659      	mov	r1, fp
 8004e8c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 fa5a 	bl	8005348 <_Bfree>
 8004e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e96:	469b      	mov	fp, r3
 8004e98:	9b08      	ldr	r3, [sp, #32]
 8004e9a:	1b9a      	subs	r2, r3, r6
 8004e9c:	d004      	beq.n	8004ea8 <_dtoa_r+0x778>
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 fb8f 	bl	80055c4 <__pow5mult>
 8004ea6:	4683      	mov	fp, r0
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 faec 	bl	8005488 <__i2b>
 8004eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 81c6 	beq.w	8005246 <_dtoa_r+0xb16>
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4601      	mov	r1, r0
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 fb80 	bl	80055c4 <__pow5mult>
 8004ec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	dc3e      	bgt.n	8004f4a <_dtoa_r+0x81a>
 8004ecc:	9b02      	ldr	r3, [sp, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d137      	bne.n	8004f42 <_dtoa_r+0x812>
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d134      	bne.n	8004f46 <_dtoa_r+0x816>
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ee2:	0d1b      	lsrs	r3, r3, #20
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	b12b      	cbz	r3, 8004ef4 <_dtoa_r+0x7c4>
 8004ee8:	9b07      	ldr	r3, [sp, #28]
 8004eea:	f109 0901 	add.w	r9, r9, #1
 8004eee:	3301      	adds	r3, #1
 8004ef0:	9307      	str	r3, [sp, #28]
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	9308      	str	r3, [sp, #32]
 8004ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d128      	bne.n	8004f4e <_dtoa_r+0x81e>
 8004efc:	2001      	movs	r0, #1
 8004efe:	e02e      	b.n	8004f5e <_dtoa_r+0x82e>
 8004f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f06:	e796      	b.n	8004e36 <_dtoa_r+0x706>
 8004f08:	9b08      	ldr	r3, [sp, #32]
 8004f0a:	f108 36ff 	add.w	r6, r8, #4294967295
 8004f0e:	42b3      	cmp	r3, r6
 8004f10:	bfb7      	itett	lt
 8004f12:	9b08      	ldrlt	r3, [sp, #32]
 8004f14:	1b9e      	subge	r6, r3, r6
 8004f16:	1af2      	sublt	r2, r6, r3
 8004f18:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004f1a:	bfbf      	itttt	lt
 8004f1c:	9608      	strlt	r6, [sp, #32]
 8004f1e:	189b      	addlt	r3, r3, r2
 8004f20:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004f22:	2600      	movlt	r6, #0
 8004f24:	f1b8 0f00 	cmp.w	r8, #0
 8004f28:	bfb9      	ittee	lt
 8004f2a:	eba9 0508 	sublt.w	r5, r9, r8
 8004f2e:	2300      	movlt	r3, #0
 8004f30:	464d      	movge	r5, r9
 8004f32:	4643      	movge	r3, r8
 8004f34:	e781      	b.n	8004e3a <_dtoa_r+0x70a>
 8004f36:	9e08      	ldr	r6, [sp, #32]
 8004f38:	464d      	mov	r5, r9
 8004f3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004f3c:	e786      	b.n	8004e4c <_dtoa_r+0x71c>
 8004f3e:	9a08      	ldr	r2, [sp, #32]
 8004f40:	e7ad      	b.n	8004e9e <_dtoa_r+0x76e>
 8004f42:	2300      	movs	r3, #0
 8004f44:	e7d6      	b.n	8004ef4 <_dtoa_r+0x7c4>
 8004f46:	9b02      	ldr	r3, [sp, #8]
 8004f48:	e7d4      	b.n	8004ef4 <_dtoa_r+0x7c4>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9308      	str	r3, [sp, #32]
 8004f4e:	6933      	ldr	r3, [r6, #16]
 8004f50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f54:	6918      	ldr	r0, [r3, #16]
 8004f56:	f000 fa49 	bl	80053ec <__hi0bits>
 8004f5a:	f1c0 0020 	rsb	r0, r0, #32
 8004f5e:	9b07      	ldr	r3, [sp, #28]
 8004f60:	4418      	add	r0, r3
 8004f62:	f010 001f 	ands.w	r0, r0, #31
 8004f66:	d047      	beq.n	8004ff8 <_dtoa_r+0x8c8>
 8004f68:	f1c0 0320 	rsb	r3, r0, #32
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	dd3b      	ble.n	8004fe8 <_dtoa_r+0x8b8>
 8004f70:	9b07      	ldr	r3, [sp, #28]
 8004f72:	f1c0 001c 	rsb	r0, r0, #28
 8004f76:	4481      	add	r9, r0
 8004f78:	4405      	add	r5, r0
 8004f7a:	4403      	add	r3, r0
 8004f7c:	9307      	str	r3, [sp, #28]
 8004f7e:	f1b9 0f00 	cmp.w	r9, #0
 8004f82:	dd05      	ble.n	8004f90 <_dtoa_r+0x860>
 8004f84:	4659      	mov	r1, fp
 8004f86:	464a      	mov	r2, r9
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 fb69 	bl	8005660 <__lshift>
 8004f8e:	4683      	mov	fp, r0
 8004f90:	9b07      	ldr	r3, [sp, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dd05      	ble.n	8004fa2 <_dtoa_r+0x872>
 8004f96:	4631      	mov	r1, r6
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 fb60 	bl	8005660 <__lshift>
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fa4:	b353      	cbz	r3, 8004ffc <_dtoa_r+0x8cc>
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f000 fbad 	bl	8005708 <__mcmp>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	da24      	bge.n	8004ffc <_dtoa_r+0x8cc>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 f9dc 	bl	8005376 <__multadd>
 8004fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fc4:	4683      	mov	fp, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8144 	beq.w	8005254 <_dtoa_r+0xb24>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4639      	mov	r1, r7
 8004fd0:	220a      	movs	r2, #10
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 f9cf 	bl	8005376 <__multadd>
 8004fd8:	9b04      	ldr	r3, [sp, #16]
 8004fda:	4607      	mov	r7, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dc4d      	bgt.n	800507c <_dtoa_r+0x94c>
 8004fe0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	dd4a      	ble.n	800507c <_dtoa_r+0x94c>
 8004fe6:	e011      	b.n	800500c <_dtoa_r+0x8dc>
 8004fe8:	d0c9      	beq.n	8004f7e <_dtoa_r+0x84e>
 8004fea:	9a07      	ldr	r2, [sp, #28]
 8004fec:	331c      	adds	r3, #28
 8004fee:	441a      	add	r2, r3
 8004ff0:	4499      	add	r9, r3
 8004ff2:	441d      	add	r5, r3
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	e7c1      	b.n	8004f7c <_dtoa_r+0x84c>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	e7f6      	b.n	8004fea <_dtoa_r+0x8ba>
 8004ffc:	f1b8 0f00 	cmp.w	r8, #0
 8005000:	dc36      	bgt.n	8005070 <_dtoa_r+0x940>
 8005002:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005004:	2b02      	cmp	r3, #2
 8005006:	dd33      	ble.n	8005070 <_dtoa_r+0x940>
 8005008:	f8cd 8010 	str.w	r8, [sp, #16]
 800500c:	9b04      	ldr	r3, [sp, #16]
 800500e:	b963      	cbnz	r3, 800502a <_dtoa_r+0x8fa>
 8005010:	4631      	mov	r1, r6
 8005012:	2205      	movs	r2, #5
 8005014:	4620      	mov	r0, r4
 8005016:	f000 f9ae 	bl	8005376 <__multadd>
 800501a:	4601      	mov	r1, r0
 800501c:	4606      	mov	r6, r0
 800501e:	4658      	mov	r0, fp
 8005020:	f000 fb72 	bl	8005708 <__mcmp>
 8005024:	2800      	cmp	r0, #0
 8005026:	f73f add3 	bgt.w	8004bd0 <_dtoa_r+0x4a0>
 800502a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800502c:	9d06      	ldr	r5, [sp, #24]
 800502e:	ea6f 0a03 	mvn.w	sl, r3
 8005032:	f04f 0900 	mov.w	r9, #0
 8005036:	4631      	mov	r1, r6
 8005038:	4620      	mov	r0, r4
 800503a:	f000 f985 	bl	8005348 <_Bfree>
 800503e:	2f00      	cmp	r7, #0
 8005040:	f43f aebd 	beq.w	8004dbe <_dtoa_r+0x68e>
 8005044:	f1b9 0f00 	cmp.w	r9, #0
 8005048:	d005      	beq.n	8005056 <_dtoa_r+0x926>
 800504a:	45b9      	cmp	r9, r7
 800504c:	d003      	beq.n	8005056 <_dtoa_r+0x926>
 800504e:	4649      	mov	r1, r9
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f979 	bl	8005348 <_Bfree>
 8005056:	4639      	mov	r1, r7
 8005058:	4620      	mov	r0, r4
 800505a:	f000 f975 	bl	8005348 <_Bfree>
 800505e:	e6ae      	b.n	8004dbe <_dtoa_r+0x68e>
 8005060:	2600      	movs	r6, #0
 8005062:	4637      	mov	r7, r6
 8005064:	e7e1      	b.n	800502a <_dtoa_r+0x8fa>
 8005066:	46ba      	mov	sl, r7
 8005068:	4637      	mov	r7, r6
 800506a:	e5b1      	b.n	8004bd0 <_dtoa_r+0x4a0>
 800506c:	40240000 	.word	0x40240000
 8005070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005072:	f8cd 8010 	str.w	r8, [sp, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80f3 	beq.w	8005262 <_dtoa_r+0xb32>
 800507c:	2d00      	cmp	r5, #0
 800507e:	dd05      	ble.n	800508c <_dtoa_r+0x95c>
 8005080:	4639      	mov	r1, r7
 8005082:	462a      	mov	r2, r5
 8005084:	4620      	mov	r0, r4
 8005086:	f000 faeb 	bl	8005660 <__lshift>
 800508a:	4607      	mov	r7, r0
 800508c:	9b08      	ldr	r3, [sp, #32]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04c      	beq.n	800512c <_dtoa_r+0x9fc>
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4620      	mov	r0, r4
 8005096:	f000 f923 	bl	80052e0 <_Balloc>
 800509a:	4605      	mov	r5, r0
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	f107 010c 	add.w	r1, r7, #12
 80050a2:	3202      	adds	r2, #2
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	300c      	adds	r0, #12
 80050a8:	f7fe fe30 	bl	8003d0c <memcpy>
 80050ac:	2201      	movs	r2, #1
 80050ae:	4629      	mov	r1, r5
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 fad5 	bl	8005660 <__lshift>
 80050b6:	46b9      	mov	r9, r7
 80050b8:	4607      	mov	r7, r0
 80050ba:	9b06      	ldr	r3, [sp, #24]
 80050bc:	9307      	str	r3, [sp, #28]
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	9308      	str	r3, [sp, #32]
 80050c6:	4631      	mov	r1, r6
 80050c8:	4658      	mov	r0, fp
 80050ca:	f7ff faa1 	bl	8004610 <quorem>
 80050ce:	4649      	mov	r1, r9
 80050d0:	4605      	mov	r5, r0
 80050d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80050d6:	4658      	mov	r0, fp
 80050d8:	f000 fb16 	bl	8005708 <__mcmp>
 80050dc:	463a      	mov	r2, r7
 80050de:	9002      	str	r0, [sp, #8]
 80050e0:	4631      	mov	r1, r6
 80050e2:	4620      	mov	r0, r4
 80050e4:	f000 fb2a 	bl	800573c <__mdiff>
 80050e8:	68c3      	ldr	r3, [r0, #12]
 80050ea:	4602      	mov	r2, r0
 80050ec:	bb03      	cbnz	r3, 8005130 <_dtoa_r+0xa00>
 80050ee:	4601      	mov	r1, r0
 80050f0:	9009      	str	r0, [sp, #36]	; 0x24
 80050f2:	4658      	mov	r0, fp
 80050f4:	f000 fb08 	bl	8005708 <__mcmp>
 80050f8:	4603      	mov	r3, r0
 80050fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050fc:	4611      	mov	r1, r2
 80050fe:	4620      	mov	r0, r4
 8005100:	9309      	str	r3, [sp, #36]	; 0x24
 8005102:	f000 f921 	bl	8005348 <_Bfree>
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	b9a3      	cbnz	r3, 8005134 <_dtoa_r+0xa04>
 800510a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800510c:	b992      	cbnz	r2, 8005134 <_dtoa_r+0xa04>
 800510e:	9a08      	ldr	r2, [sp, #32]
 8005110:	b982      	cbnz	r2, 8005134 <_dtoa_r+0xa04>
 8005112:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005116:	d029      	beq.n	800516c <_dtoa_r+0xa3c>
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	dd01      	ble.n	8005122 <_dtoa_r+0x9f2>
 800511e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005122:	9b07      	ldr	r3, [sp, #28]
 8005124:	1c5d      	adds	r5, r3, #1
 8005126:	f883 8000 	strb.w	r8, [r3]
 800512a:	e784      	b.n	8005036 <_dtoa_r+0x906>
 800512c:	4638      	mov	r0, r7
 800512e:	e7c2      	b.n	80050b6 <_dtoa_r+0x986>
 8005130:	2301      	movs	r3, #1
 8005132:	e7e3      	b.n	80050fc <_dtoa_r+0x9cc>
 8005134:	9a02      	ldr	r2, [sp, #8]
 8005136:	2a00      	cmp	r2, #0
 8005138:	db04      	blt.n	8005144 <_dtoa_r+0xa14>
 800513a:	d123      	bne.n	8005184 <_dtoa_r+0xa54>
 800513c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800513e:	bb0a      	cbnz	r2, 8005184 <_dtoa_r+0xa54>
 8005140:	9a08      	ldr	r2, [sp, #32]
 8005142:	b9fa      	cbnz	r2, 8005184 <_dtoa_r+0xa54>
 8005144:	2b00      	cmp	r3, #0
 8005146:	ddec      	ble.n	8005122 <_dtoa_r+0x9f2>
 8005148:	4659      	mov	r1, fp
 800514a:	2201      	movs	r2, #1
 800514c:	4620      	mov	r0, r4
 800514e:	f000 fa87 	bl	8005660 <__lshift>
 8005152:	4631      	mov	r1, r6
 8005154:	4683      	mov	fp, r0
 8005156:	f000 fad7 	bl	8005708 <__mcmp>
 800515a:	2800      	cmp	r0, #0
 800515c:	dc03      	bgt.n	8005166 <_dtoa_r+0xa36>
 800515e:	d1e0      	bne.n	8005122 <_dtoa_r+0x9f2>
 8005160:	f018 0f01 	tst.w	r8, #1
 8005164:	d0dd      	beq.n	8005122 <_dtoa_r+0x9f2>
 8005166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800516a:	d1d8      	bne.n	800511e <_dtoa_r+0x9ee>
 800516c:	9b07      	ldr	r3, [sp, #28]
 800516e:	9a07      	ldr	r2, [sp, #28]
 8005170:	1c5d      	adds	r5, r3, #1
 8005172:	2339      	movs	r3, #57	; 0x39
 8005174:	7013      	strb	r3, [r2, #0]
 8005176:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800517a:	1e6a      	subs	r2, r5, #1
 800517c:	2b39      	cmp	r3, #57	; 0x39
 800517e:	d04d      	beq.n	800521c <_dtoa_r+0xaec>
 8005180:	3301      	adds	r3, #1
 8005182:	e052      	b.n	800522a <_dtoa_r+0xafa>
 8005184:	9a07      	ldr	r2, [sp, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f102 0501 	add.w	r5, r2, #1
 800518c:	dd06      	ble.n	800519c <_dtoa_r+0xa6c>
 800518e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005192:	d0eb      	beq.n	800516c <_dtoa_r+0xa3c>
 8005194:	f108 0801 	add.w	r8, r8, #1
 8005198:	9b07      	ldr	r3, [sp, #28]
 800519a:	e7c4      	b.n	8005126 <_dtoa_r+0x9f6>
 800519c:	9b06      	ldr	r3, [sp, #24]
 800519e:	9a04      	ldr	r2, [sp, #16]
 80051a0:	1aeb      	subs	r3, r5, r3
 80051a2:	4293      	cmp	r3, r2
 80051a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80051a8:	d021      	beq.n	80051ee <_dtoa_r+0xabe>
 80051aa:	4659      	mov	r1, fp
 80051ac:	2300      	movs	r3, #0
 80051ae:	220a      	movs	r2, #10
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 f8e0 	bl	8005376 <__multadd>
 80051b6:	45b9      	cmp	r9, r7
 80051b8:	4683      	mov	fp, r0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 020a 	mov.w	r2, #10
 80051c2:	4649      	mov	r1, r9
 80051c4:	4620      	mov	r0, r4
 80051c6:	d105      	bne.n	80051d4 <_dtoa_r+0xaa4>
 80051c8:	f000 f8d5 	bl	8005376 <__multadd>
 80051cc:	4681      	mov	r9, r0
 80051ce:	4607      	mov	r7, r0
 80051d0:	9507      	str	r5, [sp, #28]
 80051d2:	e778      	b.n	80050c6 <_dtoa_r+0x996>
 80051d4:	f000 f8cf 	bl	8005376 <__multadd>
 80051d8:	4639      	mov	r1, r7
 80051da:	4681      	mov	r9, r0
 80051dc:	2300      	movs	r3, #0
 80051de:	220a      	movs	r2, #10
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 f8c8 	bl	8005376 <__multadd>
 80051e6:	4607      	mov	r7, r0
 80051e8:	e7f2      	b.n	80051d0 <_dtoa_r+0xaa0>
 80051ea:	f04f 0900 	mov.w	r9, #0
 80051ee:	4659      	mov	r1, fp
 80051f0:	2201      	movs	r2, #1
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 fa34 	bl	8005660 <__lshift>
 80051f8:	4631      	mov	r1, r6
 80051fa:	4683      	mov	fp, r0
 80051fc:	f000 fa84 	bl	8005708 <__mcmp>
 8005200:	2800      	cmp	r0, #0
 8005202:	dcb8      	bgt.n	8005176 <_dtoa_r+0xa46>
 8005204:	d102      	bne.n	800520c <_dtoa_r+0xadc>
 8005206:	f018 0f01 	tst.w	r8, #1
 800520a:	d1b4      	bne.n	8005176 <_dtoa_r+0xa46>
 800520c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005210:	1e6a      	subs	r2, r5, #1
 8005212:	2b30      	cmp	r3, #48	; 0x30
 8005214:	f47f af0f 	bne.w	8005036 <_dtoa_r+0x906>
 8005218:	4615      	mov	r5, r2
 800521a:	e7f7      	b.n	800520c <_dtoa_r+0xadc>
 800521c:	9b06      	ldr	r3, [sp, #24]
 800521e:	4293      	cmp	r3, r2
 8005220:	d105      	bne.n	800522e <_dtoa_r+0xafe>
 8005222:	2331      	movs	r3, #49	; 0x31
 8005224:	9a06      	ldr	r2, [sp, #24]
 8005226:	f10a 0a01 	add.w	sl, sl, #1
 800522a:	7013      	strb	r3, [r2, #0]
 800522c:	e703      	b.n	8005036 <_dtoa_r+0x906>
 800522e:	4615      	mov	r5, r2
 8005230:	e7a1      	b.n	8005176 <_dtoa_r+0xa46>
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <_dtoa_r+0xb60>)
 8005234:	f7ff bae1 	b.w	80047fa <_dtoa_r+0xca>
 8005238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800523a:	2b00      	cmp	r3, #0
 800523c:	f47f aabb 	bne.w	80047b6 <_dtoa_r+0x86>
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <_dtoa_r+0xb64>)
 8005242:	f7ff bada 	b.w	80047fa <_dtoa_r+0xca>
 8005246:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005248:	2b01      	cmp	r3, #1
 800524a:	f77f ae3f 	ble.w	8004ecc <_dtoa_r+0x79c>
 800524e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005250:	9308      	str	r3, [sp, #32]
 8005252:	e653      	b.n	8004efc <_dtoa_r+0x7cc>
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	dc03      	bgt.n	8005262 <_dtoa_r+0xb32>
 800525a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800525c:	2b02      	cmp	r3, #2
 800525e:	f73f aed5 	bgt.w	800500c <_dtoa_r+0x8dc>
 8005262:	9d06      	ldr	r5, [sp, #24]
 8005264:	4631      	mov	r1, r6
 8005266:	4658      	mov	r0, fp
 8005268:	f7ff f9d2 	bl	8004610 <quorem>
 800526c:	9b06      	ldr	r3, [sp, #24]
 800526e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005272:	f805 8b01 	strb.w	r8, [r5], #1
 8005276:	9a04      	ldr	r2, [sp, #16]
 8005278:	1aeb      	subs	r3, r5, r3
 800527a:	429a      	cmp	r2, r3
 800527c:	ddb5      	ble.n	80051ea <_dtoa_r+0xaba>
 800527e:	4659      	mov	r1, fp
 8005280:	2300      	movs	r3, #0
 8005282:	220a      	movs	r2, #10
 8005284:	4620      	mov	r0, r4
 8005286:	f000 f876 	bl	8005376 <__multadd>
 800528a:	4683      	mov	fp, r0
 800528c:	e7ea      	b.n	8005264 <_dtoa_r+0xb34>
 800528e:	bf00      	nop
 8005290:	08006a50 	.word	0x08006a50
 8005294:	08006a74 	.word	0x08006a74

08005298 <_localeconv_r>:
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <_localeconv_r+0x14>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a18      	ldr	r0, [r3, #32]
 800529e:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <_localeconv_r+0x18>)
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bf08      	it	eq
 80052a4:	4618      	moveq	r0, r3
 80052a6:	30f0      	adds	r0, #240	; 0xf0
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	2000000c 	.word	0x2000000c
 80052b0:	20000070 	.word	0x20000070

080052b4 <malloc>:
 80052b4:	4b02      	ldr	r3, [pc, #8]	; (80052c0 <malloc+0xc>)
 80052b6:	4601      	mov	r1, r0
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	f000 bb47 	b.w	800594c <_malloc_r>
 80052be:	bf00      	nop
 80052c0:	2000000c 	.word	0x2000000c

080052c4 <memchr>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	b2c9      	uxtb	r1, r1
 80052c8:	4402      	add	r2, r0
 80052ca:	4290      	cmp	r0, r2
 80052cc:	4603      	mov	r3, r0
 80052ce:	d101      	bne.n	80052d4 <memchr+0x10>
 80052d0:	2300      	movs	r3, #0
 80052d2:	e003      	b.n	80052dc <memchr+0x18>
 80052d4:	781c      	ldrb	r4, [r3, #0]
 80052d6:	3001      	adds	r0, #1
 80052d8:	428c      	cmp	r4, r1
 80052da:	d1f6      	bne.n	80052ca <memchr+0x6>
 80052dc:	4618      	mov	r0, r3
 80052de:	bd10      	pop	{r4, pc}

080052e0 <_Balloc>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052e4:	4604      	mov	r4, r0
 80052e6:	460e      	mov	r6, r1
 80052e8:	b93d      	cbnz	r5, 80052fa <_Balloc+0x1a>
 80052ea:	2010      	movs	r0, #16
 80052ec:	f7ff ffe2 	bl	80052b4 <malloc>
 80052f0:	6260      	str	r0, [r4, #36]	; 0x24
 80052f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052f6:	6005      	str	r5, [r0, #0]
 80052f8:	60c5      	str	r5, [r0, #12]
 80052fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80052fc:	68eb      	ldr	r3, [r5, #12]
 80052fe:	b183      	cbz	r3, 8005322 <_Balloc+0x42>
 8005300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005308:	b9b8      	cbnz	r0, 800533a <_Balloc+0x5a>
 800530a:	2101      	movs	r1, #1
 800530c:	fa01 f506 	lsl.w	r5, r1, r6
 8005310:	1d6a      	adds	r2, r5, #5
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	4620      	mov	r0, r4
 8005316:	f000 fabe 	bl	8005896 <_calloc_r>
 800531a:	b160      	cbz	r0, 8005336 <_Balloc+0x56>
 800531c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005320:	e00e      	b.n	8005340 <_Balloc+0x60>
 8005322:	2221      	movs	r2, #33	; 0x21
 8005324:	2104      	movs	r1, #4
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fab5 	bl	8005896 <_calloc_r>
 800532c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800532e:	60e8      	str	r0, [r5, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e4      	bne.n	8005300 <_Balloc+0x20>
 8005336:	2000      	movs	r0, #0
 8005338:	bd70      	pop	{r4, r5, r6, pc}
 800533a:	6802      	ldr	r2, [r0, #0]
 800533c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005340:	2300      	movs	r3, #0
 8005342:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005346:	e7f7      	b.n	8005338 <_Balloc+0x58>

08005348 <_Bfree>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800534c:	4606      	mov	r6, r0
 800534e:	460d      	mov	r5, r1
 8005350:	b93c      	cbnz	r4, 8005362 <_Bfree+0x1a>
 8005352:	2010      	movs	r0, #16
 8005354:	f7ff ffae 	bl	80052b4 <malloc>
 8005358:	6270      	str	r0, [r6, #36]	; 0x24
 800535a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800535e:	6004      	str	r4, [r0, #0]
 8005360:	60c4      	str	r4, [r0, #12]
 8005362:	b13d      	cbz	r5, 8005374 <_Bfree+0x2c>
 8005364:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005366:	686a      	ldr	r2, [r5, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800536e:	6029      	str	r1, [r5, #0]
 8005370:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005374:	bd70      	pop	{r4, r5, r6, pc}

08005376 <__multadd>:
 8005376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	461f      	mov	r7, r3
 800537c:	4606      	mov	r6, r0
 800537e:	460c      	mov	r4, r1
 8005380:	2300      	movs	r3, #0
 8005382:	690d      	ldr	r5, [r1, #16]
 8005384:	f101 0c14 	add.w	ip, r1, #20
 8005388:	f8dc 0000 	ldr.w	r0, [ip]
 800538c:	3301      	adds	r3, #1
 800538e:	b281      	uxth	r1, r0
 8005390:	fb02 7101 	mla	r1, r2, r1, r7
 8005394:	0c00      	lsrs	r0, r0, #16
 8005396:	0c0f      	lsrs	r7, r1, #16
 8005398:	fb02 7000 	mla	r0, r2, r0, r7
 800539c:	b289      	uxth	r1, r1
 800539e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80053a2:	429d      	cmp	r5, r3
 80053a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80053a8:	f84c 1b04 	str.w	r1, [ip], #4
 80053ac:	dcec      	bgt.n	8005388 <__multadd+0x12>
 80053ae:	b1d7      	cbz	r7, 80053e6 <__multadd+0x70>
 80053b0:	68a3      	ldr	r3, [r4, #8]
 80053b2:	42ab      	cmp	r3, r5
 80053b4:	dc12      	bgt.n	80053dc <__multadd+0x66>
 80053b6:	6861      	ldr	r1, [r4, #4]
 80053b8:	4630      	mov	r0, r6
 80053ba:	3101      	adds	r1, #1
 80053bc:	f7ff ff90 	bl	80052e0 <_Balloc>
 80053c0:	4680      	mov	r8, r0
 80053c2:	6922      	ldr	r2, [r4, #16]
 80053c4:	f104 010c 	add.w	r1, r4, #12
 80053c8:	3202      	adds	r2, #2
 80053ca:	0092      	lsls	r2, r2, #2
 80053cc:	300c      	adds	r0, #12
 80053ce:	f7fe fc9d 	bl	8003d0c <memcpy>
 80053d2:	4621      	mov	r1, r4
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff ffb7 	bl	8005348 <_Bfree>
 80053da:	4644      	mov	r4, r8
 80053dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053e0:	3501      	adds	r5, #1
 80053e2:	615f      	str	r7, [r3, #20]
 80053e4:	6125      	str	r5, [r4, #16]
 80053e6:	4620      	mov	r0, r4
 80053e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053ec <__hi0bits>:
 80053ec:	0c02      	lsrs	r2, r0, #16
 80053ee:	0412      	lsls	r2, r2, #16
 80053f0:	4603      	mov	r3, r0
 80053f2:	b9b2      	cbnz	r2, 8005422 <__hi0bits+0x36>
 80053f4:	0403      	lsls	r3, r0, #16
 80053f6:	2010      	movs	r0, #16
 80053f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80053fc:	bf04      	itt	eq
 80053fe:	021b      	lsleq	r3, r3, #8
 8005400:	3008      	addeq	r0, #8
 8005402:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005406:	bf04      	itt	eq
 8005408:	011b      	lsleq	r3, r3, #4
 800540a:	3004      	addeq	r0, #4
 800540c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005410:	bf04      	itt	eq
 8005412:	009b      	lsleq	r3, r3, #2
 8005414:	3002      	addeq	r0, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	db06      	blt.n	8005428 <__hi0bits+0x3c>
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	d503      	bpl.n	8005426 <__hi0bits+0x3a>
 800541e:	3001      	adds	r0, #1
 8005420:	4770      	bx	lr
 8005422:	2000      	movs	r0, #0
 8005424:	e7e8      	b.n	80053f8 <__hi0bits+0xc>
 8005426:	2020      	movs	r0, #32
 8005428:	4770      	bx	lr

0800542a <__lo0bits>:
 800542a:	6803      	ldr	r3, [r0, #0]
 800542c:	4601      	mov	r1, r0
 800542e:	f013 0207 	ands.w	r2, r3, #7
 8005432:	d00b      	beq.n	800544c <__lo0bits+0x22>
 8005434:	07da      	lsls	r2, r3, #31
 8005436:	d423      	bmi.n	8005480 <__lo0bits+0x56>
 8005438:	0798      	lsls	r0, r3, #30
 800543a:	bf49      	itett	mi
 800543c:	085b      	lsrmi	r3, r3, #1
 800543e:	089b      	lsrpl	r3, r3, #2
 8005440:	2001      	movmi	r0, #1
 8005442:	600b      	strmi	r3, [r1, #0]
 8005444:	bf5c      	itt	pl
 8005446:	600b      	strpl	r3, [r1, #0]
 8005448:	2002      	movpl	r0, #2
 800544a:	4770      	bx	lr
 800544c:	b298      	uxth	r0, r3
 800544e:	b9a8      	cbnz	r0, 800547c <__lo0bits+0x52>
 8005450:	2010      	movs	r0, #16
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005458:	bf04      	itt	eq
 800545a:	0a1b      	lsreq	r3, r3, #8
 800545c:	3008      	addeq	r0, #8
 800545e:	071a      	lsls	r2, r3, #28
 8005460:	bf04      	itt	eq
 8005462:	091b      	lsreq	r3, r3, #4
 8005464:	3004      	addeq	r0, #4
 8005466:	079a      	lsls	r2, r3, #30
 8005468:	bf04      	itt	eq
 800546a:	089b      	lsreq	r3, r3, #2
 800546c:	3002      	addeq	r0, #2
 800546e:	07da      	lsls	r2, r3, #31
 8005470:	d402      	bmi.n	8005478 <__lo0bits+0x4e>
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	d006      	beq.n	8005484 <__lo0bits+0x5a>
 8005476:	3001      	adds	r0, #1
 8005478:	600b      	str	r3, [r1, #0]
 800547a:	4770      	bx	lr
 800547c:	4610      	mov	r0, r2
 800547e:	e7e9      	b.n	8005454 <__lo0bits+0x2a>
 8005480:	2000      	movs	r0, #0
 8005482:	4770      	bx	lr
 8005484:	2020      	movs	r0, #32
 8005486:	4770      	bx	lr

08005488 <__i2b>:
 8005488:	b510      	push	{r4, lr}
 800548a:	460c      	mov	r4, r1
 800548c:	2101      	movs	r1, #1
 800548e:	f7ff ff27 	bl	80052e0 <_Balloc>
 8005492:	2201      	movs	r2, #1
 8005494:	6144      	str	r4, [r0, #20]
 8005496:	6102      	str	r2, [r0, #16]
 8005498:	bd10      	pop	{r4, pc}

0800549a <__multiply>:
 800549a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549e:	4614      	mov	r4, r2
 80054a0:	690a      	ldr	r2, [r1, #16]
 80054a2:	6923      	ldr	r3, [r4, #16]
 80054a4:	4688      	mov	r8, r1
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bfbe      	ittt	lt
 80054aa:	460b      	movlt	r3, r1
 80054ac:	46a0      	movlt	r8, r4
 80054ae:	461c      	movlt	r4, r3
 80054b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80054b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80054b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80054bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80054c0:	eb07 0609 	add.w	r6, r7, r9
 80054c4:	42b3      	cmp	r3, r6
 80054c6:	bfb8      	it	lt
 80054c8:	3101      	addlt	r1, #1
 80054ca:	f7ff ff09 	bl	80052e0 <_Balloc>
 80054ce:	f100 0514 	add.w	r5, r0, #20
 80054d2:	462b      	mov	r3, r5
 80054d4:	2200      	movs	r2, #0
 80054d6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80054da:	4573      	cmp	r3, lr
 80054dc:	d316      	bcc.n	800550c <__multiply+0x72>
 80054de:	f104 0214 	add.w	r2, r4, #20
 80054e2:	f108 0114 	add.w	r1, r8, #20
 80054e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80054ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	9b00      	ldr	r3, [sp, #0]
 80054f2:	9201      	str	r2, [sp, #4]
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d80c      	bhi.n	8005512 <__multiply+0x78>
 80054f8:	2e00      	cmp	r6, #0
 80054fa:	dd03      	ble.n	8005504 <__multiply+0x6a>
 80054fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05d      	beq.n	80055c0 <__multiply+0x126>
 8005504:	6106      	str	r6, [r0, #16]
 8005506:	b003      	add	sp, #12
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550c:	f843 2b04 	str.w	r2, [r3], #4
 8005510:	e7e3      	b.n	80054da <__multiply+0x40>
 8005512:	f8b2 b000 	ldrh.w	fp, [r2]
 8005516:	f1bb 0f00 	cmp.w	fp, #0
 800551a:	d023      	beq.n	8005564 <__multiply+0xca>
 800551c:	4689      	mov	r9, r1
 800551e:	46ac      	mov	ip, r5
 8005520:	f04f 0800 	mov.w	r8, #0
 8005524:	f859 4b04 	ldr.w	r4, [r9], #4
 8005528:	f8dc a000 	ldr.w	sl, [ip]
 800552c:	b2a3      	uxth	r3, r4
 800552e:	fa1f fa8a 	uxth.w	sl, sl
 8005532:	fb0b a303 	mla	r3, fp, r3, sl
 8005536:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800553a:	f8dc 4000 	ldr.w	r4, [ip]
 800553e:	4443      	add	r3, r8
 8005540:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005544:	fb0b 840a 	mla	r4, fp, sl, r8
 8005548:	46e2      	mov	sl, ip
 800554a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800554e:	b29b      	uxth	r3, r3
 8005550:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005554:	454f      	cmp	r7, r9
 8005556:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800555a:	f84a 3b04 	str.w	r3, [sl], #4
 800555e:	d82b      	bhi.n	80055b8 <__multiply+0x11e>
 8005560:	f8cc 8004 	str.w	r8, [ip, #4]
 8005564:	9b01      	ldr	r3, [sp, #4]
 8005566:	3204      	adds	r2, #4
 8005568:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800556c:	f1ba 0f00 	cmp.w	sl, #0
 8005570:	d020      	beq.n	80055b4 <__multiply+0x11a>
 8005572:	4689      	mov	r9, r1
 8005574:	46a8      	mov	r8, r5
 8005576:	f04f 0b00 	mov.w	fp, #0
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005580:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005584:	b29b      	uxth	r3, r3
 8005586:	fb0a 440c 	mla	r4, sl, ip, r4
 800558a:	46c4      	mov	ip, r8
 800558c:	445c      	add	r4, fp
 800558e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005592:	f84c 3b04 	str.w	r3, [ip], #4
 8005596:	f859 3b04 	ldr.w	r3, [r9], #4
 800559a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800559e:	0c1b      	lsrs	r3, r3, #16
 80055a0:	fb0a b303 	mla	r3, sl, r3, fp
 80055a4:	454f      	cmp	r7, r9
 80055a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80055aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80055ae:	d805      	bhi.n	80055bc <__multiply+0x122>
 80055b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80055b4:	3504      	adds	r5, #4
 80055b6:	e79b      	b.n	80054f0 <__multiply+0x56>
 80055b8:	46d4      	mov	ip, sl
 80055ba:	e7b3      	b.n	8005524 <__multiply+0x8a>
 80055bc:	46e0      	mov	r8, ip
 80055be:	e7dd      	b.n	800557c <__multiply+0xe2>
 80055c0:	3e01      	subs	r6, #1
 80055c2:	e799      	b.n	80054f8 <__multiply+0x5e>

080055c4 <__pow5mult>:
 80055c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c8:	4615      	mov	r5, r2
 80055ca:	f012 0203 	ands.w	r2, r2, #3
 80055ce:	4606      	mov	r6, r0
 80055d0:	460f      	mov	r7, r1
 80055d2:	d007      	beq.n	80055e4 <__pow5mult+0x20>
 80055d4:	4c21      	ldr	r4, [pc, #132]	; (800565c <__pow5mult+0x98>)
 80055d6:	3a01      	subs	r2, #1
 80055d8:	2300      	movs	r3, #0
 80055da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055de:	f7ff feca 	bl	8005376 <__multadd>
 80055e2:	4607      	mov	r7, r0
 80055e4:	10ad      	asrs	r5, r5, #2
 80055e6:	d035      	beq.n	8005654 <__pow5mult+0x90>
 80055e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80055ea:	b93c      	cbnz	r4, 80055fc <__pow5mult+0x38>
 80055ec:	2010      	movs	r0, #16
 80055ee:	f7ff fe61 	bl	80052b4 <malloc>
 80055f2:	6270      	str	r0, [r6, #36]	; 0x24
 80055f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055f8:	6004      	str	r4, [r0, #0]
 80055fa:	60c4      	str	r4, [r0, #12]
 80055fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005604:	b94c      	cbnz	r4, 800561a <__pow5mult+0x56>
 8005606:	f240 2171 	movw	r1, #625	; 0x271
 800560a:	4630      	mov	r0, r6
 800560c:	f7ff ff3c 	bl	8005488 <__i2b>
 8005610:	2300      	movs	r3, #0
 8005612:	4604      	mov	r4, r0
 8005614:	f8c8 0008 	str.w	r0, [r8, #8]
 8005618:	6003      	str	r3, [r0, #0]
 800561a:	f04f 0800 	mov.w	r8, #0
 800561e:	07eb      	lsls	r3, r5, #31
 8005620:	d50a      	bpl.n	8005638 <__pow5mult+0x74>
 8005622:	4639      	mov	r1, r7
 8005624:	4622      	mov	r2, r4
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ff37 	bl	800549a <__multiply>
 800562c:	4681      	mov	r9, r0
 800562e:	4639      	mov	r1, r7
 8005630:	4630      	mov	r0, r6
 8005632:	f7ff fe89 	bl	8005348 <_Bfree>
 8005636:	464f      	mov	r7, r9
 8005638:	106d      	asrs	r5, r5, #1
 800563a:	d00b      	beq.n	8005654 <__pow5mult+0x90>
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	b938      	cbnz	r0, 8005650 <__pow5mult+0x8c>
 8005640:	4622      	mov	r2, r4
 8005642:	4621      	mov	r1, r4
 8005644:	4630      	mov	r0, r6
 8005646:	f7ff ff28 	bl	800549a <__multiply>
 800564a:	6020      	str	r0, [r4, #0]
 800564c:	f8c0 8000 	str.w	r8, [r0]
 8005650:	4604      	mov	r4, r0
 8005652:	e7e4      	b.n	800561e <__pow5mult+0x5a>
 8005654:	4638      	mov	r0, r7
 8005656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800565a:	bf00      	nop
 800565c:	08006b78 	.word	0x08006b78

08005660 <__lshift>:
 8005660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	460c      	mov	r4, r1
 8005666:	4607      	mov	r7, r0
 8005668:	4616      	mov	r6, r2
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005670:	eb0a 0903 	add.w	r9, sl, r3
 8005674:	6849      	ldr	r1, [r1, #4]
 8005676:	68a3      	ldr	r3, [r4, #8]
 8005678:	f109 0501 	add.w	r5, r9, #1
 800567c:	42ab      	cmp	r3, r5
 800567e:	db32      	blt.n	80056e6 <__lshift+0x86>
 8005680:	4638      	mov	r0, r7
 8005682:	f7ff fe2d 	bl	80052e0 <_Balloc>
 8005686:	2300      	movs	r3, #0
 8005688:	4680      	mov	r8, r0
 800568a:	461a      	mov	r2, r3
 800568c:	f100 0114 	add.w	r1, r0, #20
 8005690:	4553      	cmp	r3, sl
 8005692:	db2b      	blt.n	80056ec <__lshift+0x8c>
 8005694:	6920      	ldr	r0, [r4, #16]
 8005696:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800569a:	f104 0314 	add.w	r3, r4, #20
 800569e:	f016 021f 	ands.w	r2, r6, #31
 80056a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056aa:	d025      	beq.n	80056f8 <__lshift+0x98>
 80056ac:	2000      	movs	r0, #0
 80056ae:	f1c2 0e20 	rsb	lr, r2, #32
 80056b2:	468a      	mov	sl, r1
 80056b4:	681e      	ldr	r6, [r3, #0]
 80056b6:	4096      	lsls	r6, r2
 80056b8:	4330      	orrs	r0, r6
 80056ba:	f84a 0b04 	str.w	r0, [sl], #4
 80056be:	f853 0b04 	ldr.w	r0, [r3], #4
 80056c2:	459c      	cmp	ip, r3
 80056c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80056c8:	d814      	bhi.n	80056f4 <__lshift+0x94>
 80056ca:	6048      	str	r0, [r1, #4]
 80056cc:	b108      	cbz	r0, 80056d2 <__lshift+0x72>
 80056ce:	f109 0502 	add.w	r5, r9, #2
 80056d2:	3d01      	subs	r5, #1
 80056d4:	4638      	mov	r0, r7
 80056d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80056da:	4621      	mov	r1, r4
 80056dc:	f7ff fe34 	bl	8005348 <_Bfree>
 80056e0:	4640      	mov	r0, r8
 80056e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e6:	3101      	adds	r1, #1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	e7c7      	b.n	800567c <__lshift+0x1c>
 80056ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80056f0:	3301      	adds	r3, #1
 80056f2:	e7cd      	b.n	8005690 <__lshift+0x30>
 80056f4:	4651      	mov	r1, sl
 80056f6:	e7dc      	b.n	80056b2 <__lshift+0x52>
 80056f8:	3904      	subs	r1, #4
 80056fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80056fe:	459c      	cmp	ip, r3
 8005700:	f841 2f04 	str.w	r2, [r1, #4]!
 8005704:	d8f9      	bhi.n	80056fa <__lshift+0x9a>
 8005706:	e7e4      	b.n	80056d2 <__lshift+0x72>

08005708 <__mcmp>:
 8005708:	6903      	ldr	r3, [r0, #16]
 800570a:	690a      	ldr	r2, [r1, #16]
 800570c:	b530      	push	{r4, r5, lr}
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	d10c      	bne.n	800572c <__mcmp+0x24>
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	3014      	adds	r0, #20
 8005716:	3114      	adds	r1, #20
 8005718:	1884      	adds	r4, r0, r2
 800571a:	4411      	add	r1, r2
 800571c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005724:	4295      	cmp	r5, r2
 8005726:	d003      	beq.n	8005730 <__mcmp+0x28>
 8005728:	d305      	bcc.n	8005736 <__mcmp+0x2e>
 800572a:	2301      	movs	r3, #1
 800572c:	4618      	mov	r0, r3
 800572e:	bd30      	pop	{r4, r5, pc}
 8005730:	42a0      	cmp	r0, r4
 8005732:	d3f3      	bcc.n	800571c <__mcmp+0x14>
 8005734:	e7fa      	b.n	800572c <__mcmp+0x24>
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	e7f7      	b.n	800572c <__mcmp+0x24>

0800573c <__mdiff>:
 800573c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	460d      	mov	r5, r1
 8005742:	4607      	mov	r7, r0
 8005744:	4611      	mov	r1, r2
 8005746:	4628      	mov	r0, r5
 8005748:	4614      	mov	r4, r2
 800574a:	f7ff ffdd 	bl	8005708 <__mcmp>
 800574e:	1e06      	subs	r6, r0, #0
 8005750:	d108      	bne.n	8005764 <__mdiff+0x28>
 8005752:	4631      	mov	r1, r6
 8005754:	4638      	mov	r0, r7
 8005756:	f7ff fdc3 	bl	80052e0 <_Balloc>
 800575a:	2301      	movs	r3, #1
 800575c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005764:	bfa4      	itt	ge
 8005766:	4623      	movge	r3, r4
 8005768:	462c      	movge	r4, r5
 800576a:	4638      	mov	r0, r7
 800576c:	6861      	ldr	r1, [r4, #4]
 800576e:	bfa6      	itte	ge
 8005770:	461d      	movge	r5, r3
 8005772:	2600      	movge	r6, #0
 8005774:	2601      	movlt	r6, #1
 8005776:	f7ff fdb3 	bl	80052e0 <_Balloc>
 800577a:	f04f 0e00 	mov.w	lr, #0
 800577e:	60c6      	str	r6, [r0, #12]
 8005780:	692b      	ldr	r3, [r5, #16]
 8005782:	6926      	ldr	r6, [r4, #16]
 8005784:	f104 0214 	add.w	r2, r4, #20
 8005788:	f105 0914 	add.w	r9, r5, #20
 800578c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005790:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005794:	f100 0114 	add.w	r1, r0, #20
 8005798:	f852 ab04 	ldr.w	sl, [r2], #4
 800579c:	f859 5b04 	ldr.w	r5, [r9], #4
 80057a0:	fa1f f38a 	uxth.w	r3, sl
 80057a4:	4473      	add	r3, lr
 80057a6:	b2ac      	uxth	r4, r5
 80057a8:	1b1b      	subs	r3, r3, r4
 80057aa:	0c2c      	lsrs	r4, r5, #16
 80057ac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80057b0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80057ba:	45c8      	cmp	r8, r9
 80057bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80057c0:	4694      	mov	ip, r2
 80057c2:	f841 4b04 	str.w	r4, [r1], #4
 80057c6:	d8e7      	bhi.n	8005798 <__mdiff+0x5c>
 80057c8:	45bc      	cmp	ip, r7
 80057ca:	d304      	bcc.n	80057d6 <__mdiff+0x9a>
 80057cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80057d0:	b183      	cbz	r3, 80057f4 <__mdiff+0xb8>
 80057d2:	6106      	str	r6, [r0, #16]
 80057d4:	e7c4      	b.n	8005760 <__mdiff+0x24>
 80057d6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80057da:	b2a2      	uxth	r2, r4
 80057dc:	4472      	add	r2, lr
 80057de:	1413      	asrs	r3, r2, #16
 80057e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80057e4:	b292      	uxth	r2, r2
 80057e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80057ea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80057ee:	f841 2b04 	str.w	r2, [r1], #4
 80057f2:	e7e9      	b.n	80057c8 <__mdiff+0x8c>
 80057f4:	3e01      	subs	r6, #1
 80057f6:	e7e9      	b.n	80057cc <__mdiff+0x90>

080057f8 <__d2b>:
 80057f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80057fc:	461c      	mov	r4, r3
 80057fe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005802:	2101      	movs	r1, #1
 8005804:	4690      	mov	r8, r2
 8005806:	f7ff fd6b 	bl	80052e0 <_Balloc>
 800580a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800580e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005812:	4607      	mov	r7, r0
 8005814:	bb34      	cbnz	r4, 8005864 <__d2b+0x6c>
 8005816:	9201      	str	r2, [sp, #4]
 8005818:	f1b8 0200 	subs.w	r2, r8, #0
 800581c:	d027      	beq.n	800586e <__d2b+0x76>
 800581e:	a802      	add	r0, sp, #8
 8005820:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005824:	f7ff fe01 	bl	800542a <__lo0bits>
 8005828:	9900      	ldr	r1, [sp, #0]
 800582a:	b1f0      	cbz	r0, 800586a <__d2b+0x72>
 800582c:	9a01      	ldr	r2, [sp, #4]
 800582e:	f1c0 0320 	rsb	r3, r0, #32
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	430b      	orrs	r3, r1
 8005838:	40c2      	lsrs	r2, r0
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	9201      	str	r2, [sp, #4]
 800583e:	9b01      	ldr	r3, [sp, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf14      	ite	ne
 8005844:	2102      	movne	r1, #2
 8005846:	2101      	moveq	r1, #1
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	6139      	str	r1, [r7, #16]
 800584c:	b1c4      	cbz	r4, 8005880 <__d2b+0x88>
 800584e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005852:	4404      	add	r4, r0
 8005854:	6034      	str	r4, [r6, #0]
 8005856:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800585a:	6028      	str	r0, [r5, #0]
 800585c:	4638      	mov	r0, r7
 800585e:	b002      	add	sp, #8
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005864:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005868:	e7d5      	b.n	8005816 <__d2b+0x1e>
 800586a:	6179      	str	r1, [r7, #20]
 800586c:	e7e7      	b.n	800583e <__d2b+0x46>
 800586e:	a801      	add	r0, sp, #4
 8005870:	f7ff fddb 	bl	800542a <__lo0bits>
 8005874:	2101      	movs	r1, #1
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	6139      	str	r1, [r7, #16]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	3020      	adds	r0, #32
 800587e:	e7e5      	b.n	800584c <__d2b+0x54>
 8005880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005884:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005888:	6030      	str	r0, [r6, #0]
 800588a:	6918      	ldr	r0, [r3, #16]
 800588c:	f7ff fdae 	bl	80053ec <__hi0bits>
 8005890:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005894:	e7e1      	b.n	800585a <__d2b+0x62>

08005896 <_calloc_r>:
 8005896:	b538      	push	{r3, r4, r5, lr}
 8005898:	fb02 f401 	mul.w	r4, r2, r1
 800589c:	4621      	mov	r1, r4
 800589e:	f000 f855 	bl	800594c <_malloc_r>
 80058a2:	4605      	mov	r5, r0
 80058a4:	b118      	cbz	r0, 80058ae <_calloc_r+0x18>
 80058a6:	4622      	mov	r2, r4
 80058a8:	2100      	movs	r1, #0
 80058aa:	f7fe fa3a 	bl	8003d22 <memset>
 80058ae:	4628      	mov	r0, r5
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080058b4 <_free_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4605      	mov	r5, r0
 80058b8:	2900      	cmp	r1, #0
 80058ba:	d043      	beq.n	8005944 <_free_r+0x90>
 80058bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c0:	1f0c      	subs	r4, r1, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfb8      	it	lt
 80058c6:	18e4      	addlt	r4, r4, r3
 80058c8:	f000 fa27 	bl	8005d1a <__malloc_lock>
 80058cc:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <_free_r+0x94>)
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	4610      	mov	r0, r2
 80058d2:	b933      	cbnz	r3, 80058e2 <_free_r+0x2e>
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	6014      	str	r4, [r2, #0]
 80058d8:	4628      	mov	r0, r5
 80058da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058de:	f000 ba1d 	b.w	8005d1c <__malloc_unlock>
 80058e2:	42a3      	cmp	r3, r4
 80058e4:	d90b      	bls.n	80058fe <_free_r+0x4a>
 80058e6:	6821      	ldr	r1, [r4, #0]
 80058e8:	1862      	adds	r2, r4, r1
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bf01      	itttt	eq
 80058ee:	681a      	ldreq	r2, [r3, #0]
 80058f0:	685b      	ldreq	r3, [r3, #4]
 80058f2:	1852      	addeq	r2, r2, r1
 80058f4:	6022      	streq	r2, [r4, #0]
 80058f6:	6063      	str	r3, [r4, #4]
 80058f8:	6004      	str	r4, [r0, #0]
 80058fa:	e7ed      	b.n	80058d8 <_free_r+0x24>
 80058fc:	4613      	mov	r3, r2
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	b10a      	cbz	r2, 8005906 <_free_r+0x52>
 8005902:	42a2      	cmp	r2, r4
 8005904:	d9fa      	bls.n	80058fc <_free_r+0x48>
 8005906:	6819      	ldr	r1, [r3, #0]
 8005908:	1858      	adds	r0, r3, r1
 800590a:	42a0      	cmp	r0, r4
 800590c:	d10b      	bne.n	8005926 <_free_r+0x72>
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	4401      	add	r1, r0
 8005912:	1858      	adds	r0, r3, r1
 8005914:	4282      	cmp	r2, r0
 8005916:	6019      	str	r1, [r3, #0]
 8005918:	d1de      	bne.n	80058d8 <_free_r+0x24>
 800591a:	6810      	ldr	r0, [r2, #0]
 800591c:	6852      	ldr	r2, [r2, #4]
 800591e:	4401      	add	r1, r0
 8005920:	6019      	str	r1, [r3, #0]
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	e7d8      	b.n	80058d8 <_free_r+0x24>
 8005926:	d902      	bls.n	800592e <_free_r+0x7a>
 8005928:	230c      	movs	r3, #12
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	e7d4      	b.n	80058d8 <_free_r+0x24>
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	1821      	adds	r1, r4, r0
 8005932:	428a      	cmp	r2, r1
 8005934:	bf01      	itttt	eq
 8005936:	6811      	ldreq	r1, [r2, #0]
 8005938:	6852      	ldreq	r2, [r2, #4]
 800593a:	1809      	addeq	r1, r1, r0
 800593c:	6021      	streq	r1, [r4, #0]
 800593e:	6062      	str	r2, [r4, #4]
 8005940:	605c      	str	r4, [r3, #4]
 8005942:	e7c9      	b.n	80058d8 <_free_r+0x24>
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	20000208 	.word	0x20000208

0800594c <_malloc_r>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	1ccd      	adds	r5, r1, #3
 8005950:	f025 0503 	bic.w	r5, r5, #3
 8005954:	3508      	adds	r5, #8
 8005956:	2d0c      	cmp	r5, #12
 8005958:	bf38      	it	cc
 800595a:	250c      	movcc	r5, #12
 800595c:	2d00      	cmp	r5, #0
 800595e:	4606      	mov	r6, r0
 8005960:	db01      	blt.n	8005966 <_malloc_r+0x1a>
 8005962:	42a9      	cmp	r1, r5
 8005964:	d903      	bls.n	800596e <_malloc_r+0x22>
 8005966:	230c      	movs	r3, #12
 8005968:	6033      	str	r3, [r6, #0]
 800596a:	2000      	movs	r0, #0
 800596c:	bd70      	pop	{r4, r5, r6, pc}
 800596e:	f000 f9d4 	bl	8005d1a <__malloc_lock>
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <_malloc_r+0xac>)
 8005974:	6814      	ldr	r4, [r2, #0]
 8005976:	4621      	mov	r1, r4
 8005978:	b991      	cbnz	r1, 80059a0 <_malloc_r+0x54>
 800597a:	4c20      	ldr	r4, [pc, #128]	; (80059fc <_malloc_r+0xb0>)
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	b91b      	cbnz	r3, 8005988 <_malloc_r+0x3c>
 8005980:	4630      	mov	r0, r6
 8005982:	f000 f98f 	bl	8005ca4 <_sbrk_r>
 8005986:	6020      	str	r0, [r4, #0]
 8005988:	4629      	mov	r1, r5
 800598a:	4630      	mov	r0, r6
 800598c:	f000 f98a 	bl	8005ca4 <_sbrk_r>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d124      	bne.n	80059de <_malloc_r+0x92>
 8005994:	230c      	movs	r3, #12
 8005996:	4630      	mov	r0, r6
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	f000 f9bf 	bl	8005d1c <__malloc_unlock>
 800599e:	e7e4      	b.n	800596a <_malloc_r+0x1e>
 80059a0:	680b      	ldr	r3, [r1, #0]
 80059a2:	1b5b      	subs	r3, r3, r5
 80059a4:	d418      	bmi.n	80059d8 <_malloc_r+0x8c>
 80059a6:	2b0b      	cmp	r3, #11
 80059a8:	d90f      	bls.n	80059ca <_malloc_r+0x7e>
 80059aa:	600b      	str	r3, [r1, #0]
 80059ac:	18cc      	adds	r4, r1, r3
 80059ae:	50cd      	str	r5, [r1, r3]
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f9b3 	bl	8005d1c <__malloc_unlock>
 80059b6:	f104 000b 	add.w	r0, r4, #11
 80059ba:	1d23      	adds	r3, r4, #4
 80059bc:	f020 0007 	bic.w	r0, r0, #7
 80059c0:	1ac3      	subs	r3, r0, r3
 80059c2:	d0d3      	beq.n	800596c <_malloc_r+0x20>
 80059c4:	425a      	negs	r2, r3
 80059c6:	50e2      	str	r2, [r4, r3]
 80059c8:	e7d0      	b.n	800596c <_malloc_r+0x20>
 80059ca:	684b      	ldr	r3, [r1, #4]
 80059cc:	428c      	cmp	r4, r1
 80059ce:	bf16      	itet	ne
 80059d0:	6063      	strne	r3, [r4, #4]
 80059d2:	6013      	streq	r3, [r2, #0]
 80059d4:	460c      	movne	r4, r1
 80059d6:	e7eb      	b.n	80059b0 <_malloc_r+0x64>
 80059d8:	460c      	mov	r4, r1
 80059da:	6849      	ldr	r1, [r1, #4]
 80059dc:	e7cc      	b.n	8005978 <_malloc_r+0x2c>
 80059de:	1cc4      	adds	r4, r0, #3
 80059e0:	f024 0403 	bic.w	r4, r4, #3
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d005      	beq.n	80059f4 <_malloc_r+0xa8>
 80059e8:	1a21      	subs	r1, r4, r0
 80059ea:	4630      	mov	r0, r6
 80059ec:	f000 f95a 	bl	8005ca4 <_sbrk_r>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d0cf      	beq.n	8005994 <_malloc_r+0x48>
 80059f4:	6025      	str	r5, [r4, #0]
 80059f6:	e7db      	b.n	80059b0 <_malloc_r+0x64>
 80059f8:	20000208 	.word	0x20000208
 80059fc:	2000020c 	.word	0x2000020c

08005a00 <__ssputs_r>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	688e      	ldr	r6, [r1, #8]
 8005a06:	4682      	mov	sl, r0
 8005a08:	429e      	cmp	r6, r3
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	4690      	mov	r8, r2
 8005a0e:	4699      	mov	r9, r3
 8005a10:	d837      	bhi.n	8005a82 <__ssputs_r+0x82>
 8005a12:	898a      	ldrh	r2, [r1, #12]
 8005a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a18:	d031      	beq.n	8005a7e <__ssputs_r+0x7e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	6825      	ldr	r5, [r4, #0]
 8005a1e:	6909      	ldr	r1, [r1, #16]
 8005a20:	1a6f      	subs	r7, r5, r1
 8005a22:	6965      	ldr	r5, [r4, #20]
 8005a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a28:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a2c:	f109 0301 	add.w	r3, r9, #1
 8005a30:	443b      	add	r3, r7
 8005a32:	429d      	cmp	r5, r3
 8005a34:	bf38      	it	cc
 8005a36:	461d      	movcc	r5, r3
 8005a38:	0553      	lsls	r3, r2, #21
 8005a3a:	d530      	bpl.n	8005a9e <__ssputs_r+0x9e>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7ff ff85 	bl	800594c <_malloc_r>
 8005a42:	4606      	mov	r6, r0
 8005a44:	b950      	cbnz	r0, 8005a5c <__ssputs_r+0x5c>
 8005a46:	230c      	movs	r3, #12
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4c:	f8ca 3000 	str.w	r3, [sl]
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5c:	463a      	mov	r2, r7
 8005a5e:	6921      	ldr	r1, [r4, #16]
 8005a60:	f7fe f954 	bl	8003d0c <memcpy>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	81a3      	strh	r3, [r4, #12]
 8005a70:	6126      	str	r6, [r4, #16]
 8005a72:	443e      	add	r6, r7
 8005a74:	6026      	str	r6, [r4, #0]
 8005a76:	464e      	mov	r6, r9
 8005a78:	6165      	str	r5, [r4, #20]
 8005a7a:	1bed      	subs	r5, r5, r7
 8005a7c:	60a5      	str	r5, [r4, #8]
 8005a7e:	454e      	cmp	r6, r9
 8005a80:	d900      	bls.n	8005a84 <__ssputs_r+0x84>
 8005a82:	464e      	mov	r6, r9
 8005a84:	4632      	mov	r2, r6
 8005a86:	4641      	mov	r1, r8
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	f000 f92d 	bl	8005ce8 <memmove>
 8005a8e:	68a3      	ldr	r3, [r4, #8]
 8005a90:	2000      	movs	r0, #0
 8005a92:	1b9b      	subs	r3, r3, r6
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	441e      	add	r6, r3
 8005a9a:	6026      	str	r6, [r4, #0]
 8005a9c:	e7dc      	b.n	8005a58 <__ssputs_r+0x58>
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	f000 f93d 	bl	8005d1e <_realloc_r>
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d1e2      	bne.n	8005a70 <__ssputs_r+0x70>
 8005aaa:	6921      	ldr	r1, [r4, #16]
 8005aac:	4650      	mov	r0, sl
 8005aae:	f7ff ff01 	bl	80058b4 <_free_r>
 8005ab2:	e7c8      	b.n	8005a46 <__ssputs_r+0x46>

08005ab4 <_svfiprintf_r>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	461d      	mov	r5, r3
 8005aba:	898b      	ldrh	r3, [r1, #12]
 8005abc:	b09d      	sub	sp, #116	; 0x74
 8005abe:	061f      	lsls	r7, r3, #24
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	d50f      	bpl.n	8005ae8 <_svfiprintf_r+0x34>
 8005ac8:	690b      	ldr	r3, [r1, #16]
 8005aca:	b96b      	cbnz	r3, 8005ae8 <_svfiprintf_r+0x34>
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	f7ff ff3d 	bl	800594c <_malloc_r>
 8005ad2:	6020      	str	r0, [r4, #0]
 8005ad4:	6120      	str	r0, [r4, #16]
 8005ad6:	b928      	cbnz	r0, 8005ae4 <_svfiprintf_r+0x30>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	f8c8 3000 	str.w	r3, [r8]
 8005ade:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae2:	e0c8      	b.n	8005c76 <_svfiprintf_r+0x1c2>
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	6163      	str	r3, [r4, #20]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	2320      	movs	r3, #32
 8005aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af2:	2330      	movs	r3, #48	; 0x30
 8005af4:	f04f 0b01 	mov.w	fp, #1
 8005af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005afc:	9503      	str	r5, [sp, #12]
 8005afe:	4637      	mov	r7, r6
 8005b00:	463d      	mov	r5, r7
 8005b02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b06:	b10b      	cbz	r3, 8005b0c <_svfiprintf_r+0x58>
 8005b08:	2b25      	cmp	r3, #37	; 0x25
 8005b0a:	d13e      	bne.n	8005b8a <_svfiprintf_r+0xd6>
 8005b0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b10:	d00b      	beq.n	8005b2a <_svfiprintf_r+0x76>
 8005b12:	4653      	mov	r3, sl
 8005b14:	4632      	mov	r2, r6
 8005b16:	4621      	mov	r1, r4
 8005b18:	4640      	mov	r0, r8
 8005b1a:	f7ff ff71 	bl	8005a00 <__ssputs_r>
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f000 80a4 	beq.w	8005c6c <_svfiprintf_r+0x1b8>
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	4453      	add	r3, sl
 8005b28:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2a:	783b      	ldrb	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 809d 	beq.w	8005c6c <_svfiprintf_r+0x1b8>
 8005b32:	2300      	movs	r3, #0
 8005b34:	f04f 32ff 	mov.w	r2, #4294967295
 8005b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b3c:	9304      	str	r3, [sp, #16]
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b44:	931a      	str	r3, [sp, #104]	; 0x68
 8005b46:	462f      	mov	r7, r5
 8005b48:	2205      	movs	r2, #5
 8005b4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005b4e:	4850      	ldr	r0, [pc, #320]	; (8005c90 <_svfiprintf_r+0x1dc>)
 8005b50:	f7ff fbb8 	bl	80052c4 <memchr>
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	b9d0      	cbnz	r0, 8005b8e <_svfiprintf_r+0xda>
 8005b58:	06d9      	lsls	r1, r3, #27
 8005b5a:	bf44      	itt	mi
 8005b5c:	2220      	movmi	r2, #32
 8005b5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b62:	071a      	lsls	r2, r3, #28
 8005b64:	bf44      	itt	mi
 8005b66:	222b      	movmi	r2, #43	; 0x2b
 8005b68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b6c:	782a      	ldrb	r2, [r5, #0]
 8005b6e:	2a2a      	cmp	r2, #42	; 0x2a
 8005b70:	d015      	beq.n	8005b9e <_svfiprintf_r+0xea>
 8005b72:	462f      	mov	r7, r5
 8005b74:	2000      	movs	r0, #0
 8005b76:	250a      	movs	r5, #10
 8005b78:	9a07      	ldr	r2, [sp, #28]
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b80:	3b30      	subs	r3, #48	; 0x30
 8005b82:	2b09      	cmp	r3, #9
 8005b84:	d94d      	bls.n	8005c22 <_svfiprintf_r+0x16e>
 8005b86:	b1b8      	cbz	r0, 8005bb8 <_svfiprintf_r+0x104>
 8005b88:	e00f      	b.n	8005baa <_svfiprintf_r+0xf6>
 8005b8a:	462f      	mov	r7, r5
 8005b8c:	e7b8      	b.n	8005b00 <_svfiprintf_r+0x4c>
 8005b8e:	4a40      	ldr	r2, [pc, #256]	; (8005c90 <_svfiprintf_r+0x1dc>)
 8005b90:	463d      	mov	r5, r7
 8005b92:	1a80      	subs	r0, r0, r2
 8005b94:	fa0b f000 	lsl.w	r0, fp, r0
 8005b98:	4318      	orrs	r0, r3
 8005b9a:	9004      	str	r0, [sp, #16]
 8005b9c:	e7d3      	b.n	8005b46 <_svfiprintf_r+0x92>
 8005b9e:	9a03      	ldr	r2, [sp, #12]
 8005ba0:	1d11      	adds	r1, r2, #4
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	9103      	str	r1, [sp, #12]
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	db01      	blt.n	8005bae <_svfiprintf_r+0xfa>
 8005baa:	9207      	str	r2, [sp, #28]
 8005bac:	e004      	b.n	8005bb8 <_svfiprintf_r+0x104>
 8005bae:	4252      	negs	r2, r2
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	9207      	str	r2, [sp, #28]
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	783b      	ldrb	r3, [r7, #0]
 8005bba:	2b2e      	cmp	r3, #46	; 0x2e
 8005bbc:	d10c      	bne.n	8005bd8 <_svfiprintf_r+0x124>
 8005bbe:	787b      	ldrb	r3, [r7, #1]
 8005bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc2:	d133      	bne.n	8005c2c <_svfiprintf_r+0x178>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	3702      	adds	r7, #2
 8005bc8:	1d1a      	adds	r2, r3, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	9203      	str	r2, [sp, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfb8      	it	lt
 8005bd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bd6:	9305      	str	r3, [sp, #20]
 8005bd8:	4d2e      	ldr	r5, [pc, #184]	; (8005c94 <_svfiprintf_r+0x1e0>)
 8005bda:	2203      	movs	r2, #3
 8005bdc:	7839      	ldrb	r1, [r7, #0]
 8005bde:	4628      	mov	r0, r5
 8005be0:	f7ff fb70 	bl	80052c4 <memchr>
 8005be4:	b138      	cbz	r0, 8005bf6 <_svfiprintf_r+0x142>
 8005be6:	2340      	movs	r3, #64	; 0x40
 8005be8:	1b40      	subs	r0, r0, r5
 8005bea:	fa03 f000 	lsl.w	r0, r3, r0
 8005bee:	9b04      	ldr	r3, [sp, #16]
 8005bf0:	3701      	adds	r7, #1
 8005bf2:	4303      	orrs	r3, r0
 8005bf4:	9304      	str	r3, [sp, #16]
 8005bf6:	7839      	ldrb	r1, [r7, #0]
 8005bf8:	2206      	movs	r2, #6
 8005bfa:	4827      	ldr	r0, [pc, #156]	; (8005c98 <_svfiprintf_r+0x1e4>)
 8005bfc:	1c7e      	adds	r6, r7, #1
 8005bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c02:	f7ff fb5f 	bl	80052c4 <memchr>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d038      	beq.n	8005c7c <_svfiprintf_r+0x1c8>
 8005c0a:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <_svfiprintf_r+0x1e8>)
 8005c0c:	bb13      	cbnz	r3, 8005c54 <_svfiprintf_r+0x1a0>
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	3307      	adds	r3, #7
 8005c12:	f023 0307 	bic.w	r3, r3, #7
 8005c16:	3308      	adds	r3, #8
 8005c18:	9303      	str	r3, [sp, #12]
 8005c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1c:	444b      	add	r3, r9
 8005c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c20:	e76d      	b.n	8005afe <_svfiprintf_r+0x4a>
 8005c22:	fb05 3202 	mla	r2, r5, r2, r3
 8005c26:	2001      	movs	r0, #1
 8005c28:	460f      	mov	r7, r1
 8005c2a:	e7a6      	b.n	8005b7a <_svfiprintf_r+0xc6>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	250a      	movs	r5, #10
 8005c30:	4619      	mov	r1, r3
 8005c32:	3701      	adds	r7, #1
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	4638      	mov	r0, r7
 8005c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c3c:	3a30      	subs	r2, #48	; 0x30
 8005c3e:	2a09      	cmp	r2, #9
 8005c40:	d903      	bls.n	8005c4a <_svfiprintf_r+0x196>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0c8      	beq.n	8005bd8 <_svfiprintf_r+0x124>
 8005c46:	9105      	str	r1, [sp, #20]
 8005c48:	e7c6      	b.n	8005bd8 <_svfiprintf_r+0x124>
 8005c4a:	fb05 2101 	mla	r1, r5, r1, r2
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4607      	mov	r7, r0
 8005c52:	e7f0      	b.n	8005c36 <_svfiprintf_r+0x182>
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <_svfiprintf_r+0x1ec>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f7fe f8f8 	bl	8003e54 <_printf_float>
 8005c64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c68:	4681      	mov	r9, r0
 8005c6a:	d1d6      	bne.n	8005c1a <_svfiprintf_r+0x166>
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	065b      	lsls	r3, r3, #25
 8005c70:	f53f af35 	bmi.w	8005ade <_svfiprintf_r+0x2a>
 8005c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c76:	b01d      	add	sp, #116	; 0x74
 8005c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7c:	ab03      	add	r3, sp, #12
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	4622      	mov	r2, r4
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <_svfiprintf_r+0x1ec>)
 8005c84:	a904      	add	r1, sp, #16
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7fe fb90 	bl	80043ac <_printf_i>
 8005c8c:	e7ea      	b.n	8005c64 <_svfiprintf_r+0x1b0>
 8005c8e:	bf00      	nop
 8005c90:	08006b84 	.word	0x08006b84
 8005c94:	08006b8a 	.word	0x08006b8a
 8005c98:	08006b8e 	.word	0x08006b8e
 8005c9c:	08003e55 	.word	0x08003e55
 8005ca0:	08005a01 	.word	0x08005a01

08005ca4 <_sbrk_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4c05      	ldr	r4, [pc, #20]	; (8005cc0 <_sbrk_r+0x1c>)
 8005caa:	4605      	mov	r5, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	f7fc f994 	bl	8001fdc <_sbrk>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_sbrk_r+0x1a>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_sbrk_r+0x1a>
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	20000eb0 	.word	0x20000eb0

08005cc4 <__ascii_mbtowc>:
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	b901      	cbnz	r1, 8005cca <__ascii_mbtowc+0x6>
 8005cc8:	a901      	add	r1, sp, #4
 8005cca:	b142      	cbz	r2, 8005cde <__ascii_mbtowc+0x1a>
 8005ccc:	b14b      	cbz	r3, 8005ce2 <__ascii_mbtowc+0x1e>
 8005cce:	7813      	ldrb	r3, [r2, #0]
 8005cd0:	600b      	str	r3, [r1, #0]
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	1c10      	adds	r0, r2, #0
 8005cd6:	bf18      	it	ne
 8005cd8:	2001      	movne	r0, #1
 8005cda:	b002      	add	sp, #8
 8005cdc:	4770      	bx	lr
 8005cde:	4610      	mov	r0, r2
 8005ce0:	e7fb      	b.n	8005cda <__ascii_mbtowc+0x16>
 8005ce2:	f06f 0001 	mvn.w	r0, #1
 8005ce6:	e7f8      	b.n	8005cda <__ascii_mbtowc+0x16>

08005ce8 <memmove>:
 8005ce8:	4288      	cmp	r0, r1
 8005cea:	b510      	push	{r4, lr}
 8005cec:	eb01 0302 	add.w	r3, r1, r2
 8005cf0:	d807      	bhi.n	8005d02 <memmove+0x1a>
 8005cf2:	1e42      	subs	r2, r0, #1
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	d00a      	beq.n	8005d0e <memmove+0x26>
 8005cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cfc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d00:	e7f8      	b.n	8005cf4 <memmove+0xc>
 8005d02:	4283      	cmp	r3, r0
 8005d04:	d9f5      	bls.n	8005cf2 <memmove+0xa>
 8005d06:	1881      	adds	r1, r0, r2
 8005d08:	1ad2      	subs	r2, r2, r3
 8005d0a:	42d3      	cmn	r3, r2
 8005d0c:	d100      	bne.n	8005d10 <memmove+0x28>
 8005d0e:	bd10      	pop	{r4, pc}
 8005d10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d18:	e7f7      	b.n	8005d0a <memmove+0x22>

08005d1a <__malloc_lock>:
 8005d1a:	4770      	bx	lr

08005d1c <__malloc_unlock>:
 8005d1c:	4770      	bx	lr

08005d1e <_realloc_r>:
 8005d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d20:	4607      	mov	r7, r0
 8005d22:	4614      	mov	r4, r2
 8005d24:	460e      	mov	r6, r1
 8005d26:	b921      	cbnz	r1, 8005d32 <_realloc_r+0x14>
 8005d28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	f7ff be0d 	b.w	800594c <_malloc_r>
 8005d32:	b922      	cbnz	r2, 8005d3e <_realloc_r+0x20>
 8005d34:	f7ff fdbe 	bl	80058b4 <_free_r>
 8005d38:	4625      	mov	r5, r4
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d3e:	f000 f821 	bl	8005d84 <_malloc_usable_size_r>
 8005d42:	42a0      	cmp	r0, r4
 8005d44:	d20f      	bcs.n	8005d66 <_realloc_r+0x48>
 8005d46:	4621      	mov	r1, r4
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f7ff fdff 	bl	800594c <_malloc_r>
 8005d4e:	4605      	mov	r5, r0
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d0f2      	beq.n	8005d3a <_realloc_r+0x1c>
 8005d54:	4631      	mov	r1, r6
 8005d56:	4622      	mov	r2, r4
 8005d58:	f7fd ffd8 	bl	8003d0c <memcpy>
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f7ff fda8 	bl	80058b4 <_free_r>
 8005d64:	e7e9      	b.n	8005d3a <_realloc_r+0x1c>
 8005d66:	4635      	mov	r5, r6
 8005d68:	e7e7      	b.n	8005d3a <_realloc_r+0x1c>

08005d6a <__ascii_wctomb>:
 8005d6a:	b149      	cbz	r1, 8005d80 <__ascii_wctomb+0x16>
 8005d6c:	2aff      	cmp	r2, #255	; 0xff
 8005d6e:	bf8b      	itete	hi
 8005d70:	238a      	movhi	r3, #138	; 0x8a
 8005d72:	700a      	strbls	r2, [r1, #0]
 8005d74:	6003      	strhi	r3, [r0, #0]
 8005d76:	2001      	movls	r0, #1
 8005d78:	bf88      	it	hi
 8005d7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8005d7e:	4770      	bx	lr
 8005d80:	4608      	mov	r0, r1
 8005d82:	4770      	bx	lr

08005d84 <_malloc_usable_size_r>:
 8005d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d88:	1f18      	subs	r0, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfbc      	itt	lt
 8005d8e:	580b      	ldrlt	r3, [r1, r0]
 8005d90:	18c0      	addlt	r0, r0, r3
 8005d92:	4770      	bx	lr

08005d94 <_init>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr

08005da0 <_fini>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr
