
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b20  08003b20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b20  08003b20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b20  08003b20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  20000070  08003b98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  08003b98  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008049  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001643  00000000  00000000  000280e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000638  00000000  00000000  00029728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  00029d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d59  00000000  00000000  0002a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006099  00000000  00000000  0003e039  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ae27  00000000  00000000  000440d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aeef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001af8  00000000  00000000  000aef74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e8c 	.word	0x08002e8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002e8c 	.word	0x08002e8c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	f5ad 5dcf 	sub.w	sp, sp, #6624	; 0x19e0
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fef7 	bl	8000f48 <HAL_Init>

  /* USER CODE BEGIN Init */
  static_strings_init();
 800015a:	f001 ffbb 	bl	80020d4 <static_strings_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015e:	f000 fd23 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000162:	f000 fd91 	bl	8000c88 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000166:	f000 fd65 	bl	8000c34 <MX_USART1_UART_Init>

  //test 1

  uint8_t very_long_string[700];
  uint16_t i;
  for(i = 0; i < 699; i++){
 800016a:	2300      	movs	r3, #0
 800016c:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000170:	f102 020e 	add.w	r2, r2, #14
 8000174:	8013      	strh	r3, [r2, #0]
 8000176:	e013      	b.n	80001a0 <main+0x54>
	  very_long_string[i] = 'a';
 8000178:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800017c:	f103 030e 	add.w	r3, r3, #14
 8000180:	881b      	ldrh	r3, [r3, #0]
 8000182:	f507 52b9 	add.w	r2, r7, #5920	; 0x1720
 8000186:	2161      	movs	r1, #97	; 0x61
 8000188:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 699; i++){
 800018a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800018e:	f103 030e 	add.w	r3, r3, #14
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	3301      	adds	r3, #1
 8000196:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 800019a:	f102 020e 	add.w	r2, r2, #14
 800019e:	8013      	strh	r3, [r2, #0]
 80001a0:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80001a4:	f103 030e 	add.w	r3, r3, #14
 80001a8:	881b      	ldrh	r3, [r3, #0]
 80001aa:	f240 22ba 	movw	r2, #698	; 0x2ba
 80001ae:	4293      	cmp	r3, r2
 80001b0:	d9e2      	bls.n	8000178 <main+0x2c>
  }
  very_long_string[699] = '\0';
 80001b2:	f507 53b9 	add.w	r3, r7, #5920	; 0x1720
 80001b6:	2200      	movs	r2, #0
 80001b8:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
  static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 80001bc:	f507 53b9 	add.w	r3, r7, #5920	; 0x1720
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 f8fb 	bl	80023bc <static_strings_save>
 80001c6:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80001ca:	f103 0304 	add.w	r3, r3, #4
 80001ce:	6018      	str	r0, [r3, #0]
  char length[6];
  sprintf(length,"%04d",very_long_string_descriptor->length);
 80001d0:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80001d4:	f103 0304 	add.w	r3, r3, #4
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	889b      	ldrh	r3, [r3, #4]
 80001dc:	461a      	mov	r2, r3
 80001de:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80001e2:	f103 0318 	add.w	r3, r3, #24
 80001e6:	49cd      	ldr	r1, [pc, #820]	; (800051c <main+0x3d0>)
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 fa47 	bl	800267c <siprintf>
  length[4] = '\r';
 80001ee:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80001f2:	f103 0318 	add.w	r3, r3, #24
 80001f6:	220d      	movs	r2, #13
 80001f8:	711a      	strb	r2, [r3, #4]
  length[5] = '\n';
 80001fa:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80001fe:	f103 0318 	add.w	r3, r3, #24
 8000202:	220a      	movs	r2, #10
 8000204:	715a      	strb	r2, [r3, #5]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000206:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 800020a:	f101 0118 	add.w	r1, r1, #24
 800020e:	f04f 33ff 	mov.w	r3, #4294967295
 8000212:	2206      	movs	r2, #6
 8000214:	48c2      	ldr	r0, [pc, #776]	; (8000520 <main+0x3d4>)
 8000216:	f001 fda0 	bl	8001d5a <HAL_UART_Transmit>
  char type[3];
  type[0] = very_long_string_descriptor->type + 48;
 800021a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800021e:	f103 0304 	add.w	r3, r3, #4
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	799b      	ldrb	r3, [r3, #6]
 8000226:	3330      	adds	r3, #48	; 0x30
 8000228:	b2da      	uxtb	r2, r3
 800022a:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 800022e:	f103 0314 	add.w	r3, r3, #20
 8000232:	701a      	strb	r2, [r3, #0]
  type[1] = '\r';
 8000234:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000238:	f103 0314 	add.w	r3, r3, #20
 800023c:	220d      	movs	r2, #13
 800023e:	705a      	strb	r2, [r3, #1]
  type[2] = '\n';
 8000240:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000244:	f103 0314 	add.w	r3, r3, #20
 8000248:	220a      	movs	r2, #10
 800024a:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 800024c:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 8000250:	f101 0114 	add.w	r1, r1, #20
 8000254:	f04f 33ff 	mov.w	r3, #4294967295
 8000258:	2203      	movs	r2, #3
 800025a:	48b1      	ldr	r0, [pc, #708]	; (8000520 <main+0x3d4>)
 800025c:	f001 fd7d 	bl	8001d5a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000260:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000264:	f103 0304 	add.w	r3, r3, #4
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	6819      	ldr	r1, [r3, #0]
 800026c:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000270:	f103 0304 	add.w	r3, r3, #4
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	889a      	ldrh	r2, [r3, #4]
 8000278:	f04f 33ff 	mov.w	r3, #4294967295
 800027c:	48a8      	ldr	r0, [pc, #672]	; (8000520 <main+0x3d4>)
 800027e:	f001 fd6c 	bl	8001d5a <HAL_UART_Transmit>

  static_strings_deallocate(very_long_string_descriptor);
 8000282:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000286:	f103 0304 	add.w	r3, r3, #4
 800028a:	6818      	ldr	r0, [r3, #0]
 800028c:	f002 f8da 	bl	8002444 <static_strings_deallocate>

  uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000290:	f507 53a9 	add.w	r3, r7, #5408	; 0x1520
 8000294:	4aa3      	ldr	r2, [pc, #652]	; (8000524 <main+0x3d8>)
 8000296:	4618      	mov	r0, r3
 8000298:	4611      	mov	r1, r2
 800029a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800029e:	461a      	mov	r2, r3
 80002a0:	f002 f9d8 	bl	8002654 <memcpy>
  uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 80002a4:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80002a8:	f103 0308 	add.w	r3, r3, #8
 80002ac:	4a9e      	ldr	r2, [pc, #632]	; (8000528 <main+0x3dc>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	4611      	mov	r1, r2
 80002b2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80002b6:	461a      	mov	r2, r3
 80002b8:	f002 f9cc 	bl	8002654 <memcpy>
  uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 80002bc:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80002c0:	f103 0318 	add.w	r3, r3, #24
 80002c4:	4a99      	ldr	r2, [pc, #612]	; (800052c <main+0x3e0>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	4611      	mov	r1, r2
 80002ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002ce:	461a      	mov	r2, r3
 80002d0:	f002 f9c0 	bl	8002654 <memcpy>
  uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 80002d4:	f607 7444 	addw	r4, r7, #3908	; 0xf44
 80002d8:	4b95      	ldr	r3, [pc, #596]	; (8000530 <main+0x3e4>)
 80002da:	4620      	mov	r0, r4
 80002dc:	4619      	mov	r1, r3
 80002de:	f240 1361 	movw	r3, #353	; 0x161
 80002e2:	461a      	mov	r2, r3
 80002e4:	f002 f9b6 	bl	8002654 <memcpy>
 80002e8:	f204 1361 	addw	r3, r4, #353	; 0x161
 80002ec:	2293      	movs	r2, #147	; 0x93
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f002 f9ba 	bl	800266a <memset>
  uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 80002f6:	f607 345c 	addw	r4, r7, #2908	; 0xb5c
 80002fa:	4b8e      	ldr	r3, [pc, #568]	; (8000534 <main+0x3e8>)
 80002fc:	4620      	mov	r0, r4
 80002fe:	4619      	mov	r1, r3
 8000300:	f240 235b 	movw	r3, #603	; 0x25b
 8000304:	461a      	mov	r2, r3
 8000306:	f002 f9a5 	bl	8002654 <memcpy>
 800030a:	f204 235b 	addw	r3, r4, #603	; 0x25b
 800030e:	f240 128d 	movw	r2, #397	; 0x18d
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f002 f9a8 	bl	800266a <memset>

  static_strings_string_descriptor *string_descriptor;

  //test 2

  string_descriptor = static_strings_save(test_very_long_string);
 800031a:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 800031e:	4618      	mov	r0, r3
 8000320:	f002 f84c 	bl	80023bc <static_strings_save>
 8000324:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000328:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 800032a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	889b      	ldrh	r3, [r3, #4]
 8000332:	461a      	mov	r2, r3
 8000334:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000338:	f103 0318 	add.w	r3, r3, #24
 800033c:	4977      	ldr	r1, [pc, #476]	; (800051c <main+0x3d0>)
 800033e:	4618      	mov	r0, r3
 8000340:	f002 f99c 	bl	800267c <siprintf>
  length[4] = '\r';
 8000344:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000348:	f103 0318 	add.w	r3, r3, #24
 800034c:	220d      	movs	r2, #13
 800034e:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000350:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 8000354:	f101 0118 	add.w	r1, r1, #24
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	2206      	movs	r2, #6
 800035e:	4870      	ldr	r0, [pc, #448]	; (8000520 <main+0x3d4>)
 8000360:	f001 fcfb 	bl	8001d5a <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000364:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	799b      	ldrb	r3, [r3, #6]
 800036c:	3330      	adds	r3, #48	; 0x30
 800036e:	b2da      	uxtb	r2, r3
 8000370:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000374:	f103 0314 	add.w	r3, r3, #20
 8000378:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 800037a:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 800037e:	f101 0114 	add.w	r1, r1, #20
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	2203      	movs	r2, #3
 8000388:	4865      	ldr	r0, [pc, #404]	; (8000520 <main+0x3d4>)
 800038a:	f001 fce6 	bl	8001d5a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800038e:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6819      	ldr	r1, [r3, #0]
 8000396:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	889a      	ldrh	r2, [r3, #4]
 800039e:	f04f 33ff 	mov.w	r3, #4294967295
 80003a2:	485f      	ldr	r0, [pc, #380]	; (8000520 <main+0x3d4>)
 80003a4:	f001 fcd9 	bl	8001d5a <HAL_UART_Transmit>

  //test 3

  string_descriptor = static_strings_save(test_long_string);
 80003a8:	f607 7344 	addw	r3, r7, #3908	; 0xf44
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 f805 	bl	80023bc <static_strings_save>
 80003b2:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80003b6:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 80003b8:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	889b      	ldrh	r3, [r3, #4]
 80003c0:	461a      	mov	r2, r3
 80003c2:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80003c6:	f103 0318 	add.w	r3, r3, #24
 80003ca:	4954      	ldr	r1, [pc, #336]	; (800051c <main+0x3d0>)
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 f955 	bl	800267c <siprintf>
  length[4] = '\r';
 80003d2:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80003d6:	f103 0318 	add.w	r3, r3, #24
 80003da:	220d      	movs	r2, #13
 80003dc:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 80003de:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 80003e2:	f101 0118 	add.w	r1, r1, #24
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ea:	2206      	movs	r2, #6
 80003ec:	484c      	ldr	r0, [pc, #304]	; (8000520 <main+0x3d4>)
 80003ee:	f001 fcb4 	bl	8001d5a <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 80003f2:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	799b      	ldrb	r3, [r3, #6]
 80003fa:	3330      	adds	r3, #48	; 0x30
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000402:	f103 0314 	add.w	r3, r3, #20
 8000406:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000408:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 800040c:	f101 0114 	add.w	r1, r1, #20
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
 8000414:	2203      	movs	r2, #3
 8000416:	4842      	ldr	r0, [pc, #264]	; (8000520 <main+0x3d4>)
 8000418:	f001 fc9f 	bl	8001d5a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800041c:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	889a      	ldrh	r2, [r3, #4]
 800042c:	f04f 33ff 	mov.w	r3, #4294967295
 8000430:	483b      	ldr	r0, [pc, #236]	; (8000520 <main+0x3d4>)
 8000432:	f001 fc92 	bl	8001d5a <HAL_UART_Transmit>

  //test 4,5

  for(i = 0; i < 2; i++){
 8000436:	2300      	movs	r3, #0
 8000438:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 800043c:	f102 020e 	add.w	r2, r2, #14
 8000440:	8013      	strh	r3, [r2, #0]
 8000442:	e05c      	b.n	80004fe <main+0x3b2>
  	  string_descriptor = static_strings_save(test_medium_strings[i]);
 8000444:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000448:	f103 030e 	add.w	r3, r3, #14
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000452:	f102 0218 	add.w	r2, r2, #24
 8000456:	21c8      	movs	r1, #200	; 0xc8
 8000458:	fb01 f303 	mul.w	r3, r1, r3
 800045c:	4413      	add	r3, r2
 800045e:	4618      	mov	r0, r3
 8000460:	f001 ffac 	bl	80023bc <static_strings_save>
 8000464:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000468:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 800046a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	889b      	ldrh	r3, [r3, #4]
 8000472:	461a      	mov	r2, r3
 8000474:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000478:	f103 0318 	add.w	r3, r3, #24
 800047c:	4927      	ldr	r1, [pc, #156]	; (800051c <main+0x3d0>)
 800047e:	4618      	mov	r0, r3
 8000480:	f002 f8fc 	bl	800267c <siprintf>
  	  length[4] = '\r';
 8000484:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000488:	f103 0318 	add.w	r3, r3, #24
 800048c:	220d      	movs	r2, #13
 800048e:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000490:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 8000494:	f101 0118 	add.w	r1, r1, #24
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	2206      	movs	r2, #6
 800049e:	4820      	ldr	r0, [pc, #128]	; (8000520 <main+0x3d4>)
 80004a0:	f001 fc5b 	bl	8001d5a <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 80004a4:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	799b      	ldrb	r3, [r3, #6]
 80004ac:	3330      	adds	r3, #48	; 0x30
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80004b4:	f103 0314 	add.w	r3, r3, #20
 80004b8:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80004ba:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 80004be:	f101 0114 	add.w	r1, r1, #20
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	2203      	movs	r2, #3
 80004c8:	4815      	ldr	r0, [pc, #84]	; (8000520 <main+0x3d4>)
 80004ca:	f001 fc46 	bl	8001d5a <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80004ce:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	889a      	ldrh	r2, [r3, #4]
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	480f      	ldr	r0, [pc, #60]	; (8000520 <main+0x3d4>)
 80004e4:	f001 fc39 	bl	8001d5a <HAL_UART_Transmit>
  for(i = 0; i < 2; i++){
 80004e8:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80004ec:	f103 030e 	add.w	r3, r3, #14
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 80004f8:	f102 020e 	add.w	r2, r2, #14
 80004fc:	8013      	strh	r3, [r2, #0]
 80004fe:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000502:	f103 030e 	add.w	r3, r3, #14
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d99b      	bls.n	8000444 <main+0x2f8>
  }

  //test 6-11

  for(i = 0; i < 6; i++){
 800050c:	2300      	movs	r3, #0
 800050e:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000512:	f102 020e 	add.w	r2, r2, #14
 8000516:	8013      	strh	r3, [r2, #0]
 8000518:	e06b      	b.n	80005f2 <main+0x4a6>
 800051a:	bf00      	nop
 800051c:	08002ea4 	.word	0x08002ea4
 8000520:	20000b38 	.word	0x20000b38
 8000524:	08002ebc 	.word	0x08002ebc
 8000528:	080030b0 	.word	0x080030b0
 800052c:	08003308 	.word	0x08003308
 8000530:	08003498 	.word	0x08003498
 8000534:	0800368c 	.word	0x0800368c
  	  string_descriptor = static_strings_save(test_short_strings[i]);
 8000538:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800053c:	f103 030e 	add.w	r3, r3, #14
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8000546:	f102 0208 	add.w	r2, r2, #8
 800054a:	2164      	movs	r1, #100	; 0x64
 800054c:	fb01 f303 	mul.w	r3, r1, r3
 8000550:	4413      	add	r3, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f001 ff32 	bl	80023bc <static_strings_save>
 8000558:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800055c:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 800055e:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	889b      	ldrh	r3, [r3, #4]
 8000566:	461a      	mov	r2, r3
 8000568:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 800056c:	f103 0318 	add.w	r3, r3, #24
 8000570:	49cf      	ldr	r1, [pc, #828]	; (80008b0 <main+0x764>)
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f882 	bl	800267c <siprintf>
  	  length[4] = '\r';
 8000578:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 800057c:	f103 0318 	add.w	r3, r3, #24
 8000580:	220d      	movs	r2, #13
 8000582:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000584:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 8000588:	f101 0118 	add.w	r1, r1, #24
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2206      	movs	r2, #6
 8000592:	48c8      	ldr	r0, [pc, #800]	; (80008b4 <main+0x768>)
 8000594:	f001 fbe1 	bl	8001d5a <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000598:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	799b      	ldrb	r3, [r3, #6]
 80005a0:	3330      	adds	r3, #48	; 0x30
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80005a8:	f103 0314 	add.w	r3, r3, #20
 80005ac:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80005ae:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 80005b2:	f101 0114 	add.w	r1, r1, #20
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	2203      	movs	r2, #3
 80005bc:	48bd      	ldr	r0, [pc, #756]	; (80008b4 <main+0x768>)
 80005be:	f001 fbcc 	bl	8001d5a <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80005c2:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	889a      	ldrh	r2, [r3, #4]
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	48b7      	ldr	r0, [pc, #732]	; (80008b4 <main+0x768>)
 80005d8:	f001 fbbf 	bl	8001d5a <HAL_UART_Transmit>
  for(i = 0; i < 6; i++){
 80005dc:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80005e0:	f103 030e 	add.w	r3, r3, #14
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 80005ec:	f102 020e 	add.w	r2, r2, #14
 80005f0:	8013      	strh	r3, [r2, #0]
 80005f2:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80005f6:	f103 030e 	add.w	r3, r3, #14
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	d99b      	bls.n	8000538 <main+0x3ec>
  }

  //test 12-21

  static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000600:	2300      	movs	r3, #0
 8000602:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000606:	f102 0208 	add.w	r2, r2, #8
 800060a:	6013      	str	r3, [r2, #0]
  for(i = 0; i < 10; i++){
 800060c:	2300      	movs	r3, #0
 800060e:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000612:	f102 020e 	add.w	r2, r2, #14
 8000616:	8013      	strh	r3, [r2, #0]
 8000618:	e069      	b.n	80006ee <main+0x5a2>
	  string_descriptor = static_strings_save(test_very_short_strings[i]);
 800061a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800061e:	f103 030e 	add.w	r3, r3, #14
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	f507 52a9 	add.w	r2, r7, #5408	; 0x1520
 8000628:	2132      	movs	r1, #50	; 0x32
 800062a:	fb01 f303 	mul.w	r3, r1, r3
 800062e:	4413      	add	r3, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fec3 	bl	80023bc <static_strings_save>
 8000636:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800063a:	6018      	str	r0, [r3, #0]
	  if(i == 6){
 800063c:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000640:	f103 030e 	add.w	r3, r3, #14
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	2b06      	cmp	r3, #6
 8000648:	d107      	bne.n	800065a <main+0x50e>
		  string_descriptor_deallocate = string_descriptor;
 800064a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000654:	f102 0208 	add.w	r2, r2, #8
 8000658:	6013      	str	r3, [r2, #0]
	  }
	  sprintf(length,"%04d",string_descriptor->length);
 800065a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	889b      	ldrh	r3, [r3, #4]
 8000662:	461a      	mov	r2, r3
 8000664:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000668:	f103 0318 	add.w	r3, r3, #24
 800066c:	4990      	ldr	r1, [pc, #576]	; (80008b0 <main+0x764>)
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f804 	bl	800267c <siprintf>
	  length[4] = '\r';
 8000674:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000678:	f103 0318 	add.w	r3, r3, #24
 800067c:	220d      	movs	r2, #13
 800067e:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000680:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 8000684:	f101 0118 	add.w	r1, r1, #24
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	2206      	movs	r2, #6
 800068e:	4889      	ldr	r0, [pc, #548]	; (80008b4 <main+0x768>)
 8000690:	f001 fb63 	bl	8001d5a <HAL_UART_Transmit>
	  type[0] = string_descriptor->type + 48;
 8000694:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	799b      	ldrb	r3, [r3, #6]
 800069c:	3330      	adds	r3, #48	; 0x30
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 80006a4:	f103 0314 	add.w	r3, r3, #20
 80006a8:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80006aa:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 80006ae:	f101 0114 	add.w	r1, r1, #20
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2203      	movs	r2, #3
 80006b8:	487e      	ldr	r0, [pc, #504]	; (80008b4 <main+0x768>)
 80006ba:	f001 fb4e 	bl	8001d5a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80006be:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	889a      	ldrh	r2, [r3, #4]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	4878      	ldr	r0, [pc, #480]	; (80008b4 <main+0x768>)
 80006d4:	f001 fb41 	bl	8001d5a <HAL_UART_Transmit>
  for(i = 0; i < 10; i++){
 80006d8:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80006dc:	f103 030e 	add.w	r3, r3, #14
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 80006e8:	f102 020e 	add.w	r2, r2, #14
 80006ec:	8013      	strh	r3, [r2, #0]
 80006ee:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80006f2:	f103 030e 	add.w	r3, r3, #14
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	2b09      	cmp	r3, #9
 80006fa:	d98e      	bls.n	800061a <main+0x4ce>
  }

  //test 22

  static_strings_deallocate(string_descriptor_deallocate);
 80006fc:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000700:	f103 0308 	add.w	r3, r3, #8
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f001 fe9d 	bl	8002444 <static_strings_deallocate>
  uint8_t test_short_string[50] = "reallocate_test\r\n";
 800070a:	f607 3628 	addw	r6, r7, #2856	; 0xb28
 800070e:	4b6a      	ldr	r3, [pc, #424]	; (80008b8 <main+0x76c>)
 8000710:	4634      	mov	r4, r6
 8000712:	461d      	mov	r5, r3
 8000714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000718:	682b      	ldr	r3, [r5, #0]
 800071a:	8023      	strh	r3, [r4, #0]
 800071c:	f106 0312 	add.w	r3, r6, #18
 8000720:	2220      	movs	r2, #32
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f001 ffa0 	bl	800266a <memset>
  string_descriptor = static_strings_save(test_short_string);
 800072a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fe44 	bl	80023bc <static_strings_save>
 8000734:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000738:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 800073a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	889b      	ldrh	r3, [r3, #4]
 8000742:	461a      	mov	r2, r3
 8000744:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000748:	f103 0318 	add.w	r3, r3, #24
 800074c:	4958      	ldr	r1, [pc, #352]	; (80008b0 <main+0x764>)
 800074e:	4618      	mov	r0, r3
 8000750:	f001 ff94 	bl	800267c <siprintf>
  length[4] = '\r';
 8000754:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000758:	f103 0318 	add.w	r3, r3, #24
 800075c:	220d      	movs	r2, #13
 800075e:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000760:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 8000764:	f101 0118 	add.w	r1, r1, #24
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	2206      	movs	r2, #6
 800076e:	4851      	ldr	r0, [pc, #324]	; (80008b4 <main+0x768>)
 8000770:	f001 faf3 	bl	8001d5a <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000774:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	799b      	ldrb	r3, [r3, #6]
 800077c:	3330      	adds	r3, #48	; 0x30
 800077e:	b2da      	uxtb	r2, r3
 8000780:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000784:	f103 0314 	add.w	r3, r3, #20
 8000788:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 800078a:	f507 51b8 	add.w	r1, r7, #5888	; 0x1700
 800078e:	f101 0114 	add.w	r1, r1, #20
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2203      	movs	r2, #3
 8000798:	4846      	ldr	r0, [pc, #280]	; (80008b4 <main+0x768>)
 800079a:	f001 fade 	bl	8001d5a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800079e:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	889a      	ldrh	r2, [r3, #4]
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	4840      	ldr	r0, [pc, #256]	; (80008b4 <main+0x768>)
 80007b4:	f001 fad1 	bl	8001d5a <HAL_UART_Transmit>

  //test 23

  uint8_t pointer[12];
  sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 80007b8:	f607 331c 	addw	r3, r7, #2844	; 0xb1c
 80007bc:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 80007c0:	f102 0208 	add.w	r2, r2, #8
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	493d      	ldr	r1, [pc, #244]	; (80008bc <main+0x770>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 ff57 	bl	800267c <siprintf>
  pointer[10] = '\r';
 80007ce:	f607 331c 	addw	r3, r7, #2844	; 0xb1c
 80007d2:	220d      	movs	r2, #13
 80007d4:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 80007d6:	f607 331c 	addw	r3, r7, #2844	; 0xb1c
 80007da:	220a      	movs	r2, #10
 80007dc:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80007de:	f607 311c 	addw	r1, r7, #2844	; 0xb1c
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	220c      	movs	r2, #12
 80007e8:	4832      	ldr	r0, [pc, #200]	; (80008b4 <main+0x768>)
 80007ea:	f001 fab6 	bl	8001d5a <HAL_UART_Transmit>

  sprintf((char *)pointer,"%10p",string_descriptor);
 80007ee:	f607 331c 	addw	r3, r7, #2844	; 0xb1c
 80007f2:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	4930      	ldr	r1, [pc, #192]	; (80008bc <main+0x770>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 ff3e 	bl	800267c <siprintf>
  pointer[10] = '\r';
 8000800:	f607 331c 	addw	r3, r7, #2844	; 0xb1c
 8000804:	220d      	movs	r2, #13
 8000806:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 8000808:	f607 331c 	addw	r3, r7, #2844	; 0xb1c
 800080c:	220a      	movs	r2, #10
 800080e:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 8000810:	f607 311c 	addw	r1, r7, #2844	; 0xb1c
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	220c      	movs	r2, #12
 800081a:	4826      	ldr	r0, [pc, #152]	; (80008b4 <main+0x768>)
 800081c:	f001 fa9d 	bl	8001d5a <HAL_UART_Transmit>
  uint8_t error_code_char;

  //test 24

  uint8_t no_memory_string[800];
  for(i = 0; i < 798; i++){
 8000820:	2300      	movs	r3, #0
 8000822:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000826:	f102 020e 	add.w	r2, r2, #14
 800082a:	8013      	strh	r3, [r2, #0]
 800082c:	e014      	b.n	8000858 <main+0x70c>
	  no_memory_string[i] = 'a';
 800082e:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000832:	f103 030e 	add.w	r3, r3, #14
 8000836:	881a      	ldrh	r2, [r3, #0]
 8000838:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800083c:	3b18      	subs	r3, #24
 800083e:	2161      	movs	r1, #97	; 0x61
 8000840:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 798; i++){
 8000842:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000846:	f103 030e 	add.w	r3, r3, #14
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000852:	f102 020e 	add.w	r2, r2, #14
 8000856:	8013      	strh	r3, [r2, #0]
 8000858:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800085c:	f103 030e 	add.w	r3, r3, #14
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	f240 321d 	movw	r2, #797	; 0x31d
 8000866:	4293      	cmp	r3, r2
 8000868:	d9e1      	bls.n	800082e <main+0x6e2>
  }
  no_memory_string[798] = '\r';
 800086a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800086e:	3b18      	subs	r3, #24
 8000870:	220d      	movs	r2, #13
 8000872:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  no_memory_string[799] = '\n';
 8000876:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800087a:	3b18      	subs	r3, #24
 800087c:	220a      	movs	r2, #10
 800087e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  string_descriptor = static_strings_save(no_memory_string);
 8000882:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000886:	3b18      	subs	r3, #24
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fd97 	bl	80023bc <static_strings_save>
 800088e:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000892:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8000894:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d112      	bne.n	80008c4 <main+0x778>
	  error_code_char = static_strings_error_code + 48;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <main+0x774>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	3330      	adds	r3, #48	; 0x30
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e00e      	b.n	80008cc <main+0x780>
 80008ae:	bf00      	nop
 80008b0:	08002ea4 	.word	0x08002ea4
 80008b4:	20000b38 	.word	0x20000b38
 80008b8:	08003a74 	.word	0x08003a74
 80008bc:	08002eac 	.word	0x08002eac
 80008c0:	200004f8 	.word	0x200004f8
  }
  else{
	  error_code_char = '3';
 80008c4:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 80008c8:	2233      	movs	r2, #51	; 0x33
 80008ca:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80008cc:	f607 311b 	addw	r1, r7, #2843	; 0xb1b
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
 80008d4:	2201      	movs	r2, #1
 80008d6:	48ae      	ldr	r0, [pc, #696]	; (8000b90 <main+0xa44>)
 80008d8:	f001 fa3f 	bl	8001d5a <HAL_UART_Transmit>

  //test 25

  uint8_t unallocable_invalid_string[1200];
  for(i = 0; i < 1198; i++){
 80008dc:	2300      	movs	r3, #0
 80008de:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 80008e2:	f102 020e 	add.w	r2, r2, #14
 80008e6:	8013      	strh	r3, [r2, #0]
 80008e8:	e014      	b.n	8000914 <main+0x7c8>
	  unallocable_invalid_string[i] = 'a';
 80008ea:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80008ee:	f103 030e 	add.w	r3, r3, #14
 80008f2:	881a      	ldrh	r2, [r3, #0]
 80008f4:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80008f8:	3b08      	subs	r3, #8
 80008fa:	2161      	movs	r1, #97	; 0x61
 80008fc:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 1198; i++){
 80008fe:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000902:	f103 030e 	add.w	r3, r3, #14
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 800090e:	f102 020e 	add.w	r2, r2, #14
 8000912:	8013      	strh	r3, [r2, #0]
 8000914:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000918:	f103 030e 	add.w	r3, r3, #14
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	f240 42ad 	movw	r2, #1197	; 0x4ad
 8000922:	4293      	cmp	r3, r2
 8000924:	d9e1      	bls.n	80008ea <main+0x79e>
  }
  unallocable_invalid_string[1198] = '\r';
 8000926:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800092a:	3b08      	subs	r3, #8
 800092c:	220d      	movs	r2, #13
 800092e:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
  unallocable_invalid_string[1199] = '\n';
 8000932:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8000936:	3b08      	subs	r3, #8
 8000938:	220a      	movs	r2, #10
 800093a:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
  string_descriptor = static_strings_save(unallocable_invalid_string);
 800093e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8000942:	3b08      	subs	r3, #8
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fd39 	bl	80023bc <static_strings_save>
 800094a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800094e:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8000950:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d107      	bne.n	800096a <main+0x81e>
	  error_code_char = static_strings_error_code + 48;
 800095a:	4b8e      	ldr	r3, [pc, #568]	; (8000b94 <main+0xa48>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3330      	adds	r3, #48	; 0x30
 8000960:	b2da      	uxtb	r2, r3
 8000962:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e003      	b.n	8000972 <main+0x826>
  }
  else{
	  error_code_char = '4';
 800096a:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 800096e:	2234      	movs	r2, #52	; 0x34
 8000970:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8000972:	f607 311b 	addw	r1, r7, #2843	; 0xb1b
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	2201      	movs	r2, #1
 800097c:	4884      	ldr	r0, [pc, #528]	; (8000b90 <main+0xa44>)
 800097e:	f001 f9ec 	bl	8001d5a <HAL_UART_Transmit>

  //test 26

  uint8_t no_line_end_invalid_string[800];
  for(i = 0; i < 800; i++){
 8000982:	2300      	movs	r3, #0
 8000984:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000988:	f102 020e 	add.w	r2, r2, #14
 800098c:	8013      	strh	r3, [r2, #0]
 800098e:	e014      	b.n	80009ba <main+0x86e>
	  no_line_end_invalid_string[i] = 'a';
 8000990:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000994:	f103 030e 	add.w	r3, r3, #14
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800099e:	3b08      	subs	r3, #8
 80009a0:	2161      	movs	r1, #97	; 0x61
 80009a2:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 800; i++){
 80009a4:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80009a8:	f103 030e 	add.w	r3, r3, #14
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 80009b4:	f102 020e 	add.w	r2, r2, #14
 80009b8:	8013      	strh	r3, [r2, #0]
 80009ba:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80009be:	f103 030e 	add.w	r3, r3, #14
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80009c8:	d3e2      	bcc.n	8000990 <main+0x844>
  }
  string_descriptor = static_strings_save(no_line_end_invalid_string);
 80009ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ce:	3b08      	subs	r3, #8
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fcf3 	bl	80023bc <static_strings_save>
 80009d6:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80009da:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 80009dc:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d107      	bne.n	80009f6 <main+0x8aa>
	  error_code_char = static_strings_error_code + 48;
 80009e6:	4b6b      	ldr	r3, [pc, #428]	; (8000b94 <main+0xa48>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3330      	adds	r3, #48	; 0x30
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	e003      	b.n	80009fe <main+0x8b2>
  }
  else{
	  error_code_char = '5';
 80009f6:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 80009fa:	2235      	movs	r2, #53	; 0x35
 80009fc:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80009fe:	f607 311b 	addw	r1, r7, #2843	; 0xb1b
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	2201      	movs	r2, #1
 8000a08:	4861      	ldr	r0, [pc, #388]	; (8000b90 <main+0xa44>)
 8000a0a:	f001 f9a6 	bl	8001d5a <HAL_UART_Transmit>

  //test 27

  string_descriptor = static_strings_allocate(1200);
 8000a0e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000a12:	f001 fc19 	bl	8002248 <static_strings_allocate>
 8000a16:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000a1a:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8000a1c:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d107      	bne.n	8000a36 <main+0x8ea>
  	  error_code_char = static_strings_error_code + 48;
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <main+0xa48>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3330      	adds	r3, #48	; 0x30
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	e003      	b.n	8000a3e <main+0x8f2>
  }
  else{
  	  error_code_char = '6';
 8000a36:	f607 331b 	addw	r3, r7, #2843	; 0xb1b
 8000a3a:	2236      	movs	r2, #54	; 0x36
 8000a3c:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8000a3e:	f607 311b 	addw	r1, r7, #2843	; 0xb1b
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	2201      	movs	r2, #1
 8000a48:	4851      	ldr	r0, [pc, #324]	; (8000b90 <main+0xa44>)
 8000a4a:	f001 f986 	bl	8001d5a <HAL_UART_Transmit>

  //test 28

  uint8_t custom[10] = "123,56,89\0";
 8000a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a52:	3b14      	subs	r3, #20
 8000a54:	4a50      	ldr	r2, [pc, #320]	; (8000b98 <main+0xa4c>)
 8000a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a58:	c303      	stmia	r3!, {r0, r1}
 8000a5a:	801a      	strh	r2, [r3, #0]
  static_strings_string_descriptor custom_string_descriptor;
  string_descriptor = &custom_string_descriptor;
 8000a5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a60:	3b1c      	subs	r3, #28
 8000a62:	f507 52cf 	add.w	r2, r7, #6624	; 0x19e0
 8000a66:	6013      	str	r3, [r2, #0]
  static_strings_create_custom_string(string_descriptor,custom);
 8000a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6c:	3b14      	subs	r3, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f001 fcc8 	bl	800240a <static_strings_create_custom_string>
  HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000a7a:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6819      	ldr	r1, [r3, #0]
 8000a82:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	889a      	ldrh	r2, [r3, #4]
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	4840      	ldr	r0, [pc, #256]	; (8000b90 <main+0xa44>)
 8000a90:	f001 f963 	bl	8001d5a <HAL_UART_Transmit>

  // test 29

  if(static_strings_is_line(string_descriptor)){
 8000a94:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	f001 fce3 	bl	8002464 <static_strings_is_line>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d007      	beq.n	8000ab4 <main+0x968>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	493c      	ldr	r1, [pc, #240]	; (8000b9c <main+0xa50>)
 8000aac:	4838      	ldr	r0, [pc, #224]	; (8000b90 <main+0xa44>)
 8000aae:	f001 f954 	bl	8001d5a <HAL_UART_Transmit>
 8000ab2:	e006      	b.n	8000ac2 <main+0x976>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4939      	ldr	r1, [pc, #228]	; (8000ba0 <main+0xa54>)
 8000abc:	4834      	ldr	r0, [pc, #208]	; (8000b90 <main+0xa44>)
 8000abe:	f001 f94c 	bl	8001d5a <HAL_UART_Transmit>
  }

  // test 30

  uint8_t custom_line[10] = "123,56,8\r\n";
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	4a36      	ldr	r2, [pc, #216]	; (8000ba4 <main+0xa58>)
 8000aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000acc:	c303      	stmia	r3!, {r0, r1}
 8000ace:	801a      	strh	r2, [r3, #0]
  static_strings_create_custom_string(string_descriptor,custom_line);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	3b08      	subs	r3, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	f001 fc94 	bl	800240a <static_strings_create_custom_string>

  if(static_strings_is_line(string_descriptor)){
 8000ae2:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	f001 fcbc 	bl	8002464 <static_strings_is_line>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <main+0x9b6>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	2203      	movs	r2, #3
 8000af8:	4928      	ldr	r1, [pc, #160]	; (8000b9c <main+0xa50>)
 8000afa:	4825      	ldr	r0, [pc, #148]	; (8000b90 <main+0xa44>)
 8000afc:	f001 f92d 	bl	8001d5a <HAL_UART_Transmit>
 8000b00:	e006      	b.n	8000b10 <main+0x9c4>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	2203      	movs	r2, #3
 8000b08:	4925      	ldr	r1, [pc, #148]	; (8000ba0 <main+0xa54>)
 8000b0a:	4821      	ldr	r0, [pc, #132]	; (8000b90 <main+0xa44>)
 8000b0c:	f001 f925 	bl	8001d5a <HAL_UART_Transmit>
  }

  // test 31-33

  static_strings_string_descriptor token;
  static_strings_string_splitter_set_parameters(string_descriptor,',');
 8000b10:	212c      	movs	r1, #44	; 0x2c
 8000b12:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	f001 fd02 	bl	8002520 <static_strings_string_splitter_set_parameters>
  while(static_strings_string_splitter_get_next_token(&token)){
 8000b1c:	e00c      	b.n	8000b38 <main+0x9ec>
	  HAL_UART_Transmit(&huart1,token.string,token.length,HAL_MAX_DELAY);
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	3b10      	subs	r3, #16
 8000b24:	6819      	ldr	r1, [r3, #0]
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	3b10      	subs	r3, #16
 8000b2c:	889a      	ldrh	r2, [r3, #4]
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	4817      	ldr	r0, [pc, #92]	; (8000b90 <main+0xa44>)
 8000b34:	f001 f911 	bl	8001d5a <HAL_UART_Transmit>
  while(static_strings_string_splitter_get_next_token(&token)){
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	3b10      	subs	r3, #16
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fd06 	bl	8002550 <static_strings_string_splitter_get_next_token>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1e9      	bne.n	8000b1e <main+0x9d2>
  }

  // test 34

  int next_token_result = static_strings_string_splitter_get_next_token(&token);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	3b10      	subs	r3, #16
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fcfd 	bl	8002550 <static_strings_string_splitter_get_next_token>
 8000b56:	f507 53ce 	add.w	r3, r7, #6592	; 0x19c0
 8000b5a:	f103 031c 	add.w	r3, r3, #28
 8000b5e:	6018      	str	r0, [r3, #0]
  if(next_token_result){
 8000b60:	f507 53ce 	add.w	r3, r7, #6592	; 0x19c0
 8000b64:	f103 031c 	add.w	r3, r3, #28
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d007      	beq.n	8000b7e <main+0xa32>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	2203      	movs	r2, #3
 8000b74:	4909      	ldr	r1, [pc, #36]	; (8000b9c <main+0xa50>)
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <main+0xa44>)
 8000b78:	f001 f8ef 	bl	8001d5a <HAL_UART_Transmit>
 8000b7c:	e006      	b.n	8000b8c <main+0xa40>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	2203      	movs	r2, #3
 8000b84:	4906      	ldr	r1, [pc, #24]	; (8000ba0 <main+0xa54>)
 8000b86:	4802      	ldr	r0, [pc, #8]	; (8000b90 <main+0xa44>)
 8000b88:	f001 f8e7 	bl	8001d5a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <main+0xa40>
 8000b8e:	bf00      	nop
 8000b90:	20000b38 	.word	0x20000b38
 8000b94:	200004f8 	.word	0x200004f8
 8000b98:	08003aa8 	.word	0x08003aa8
 8000b9c:	08002eb4 	.word	0x08002eb4
 8000ba0:	08002eb8 	.word	0x08002eb8
 8000ba4:	08003ab4 	.word	0x08003ab4

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	; 0x40
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	2228      	movs	r2, #40	; 0x28
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fd57 	bl	800266a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fc49 	bl	8001488 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f866 	bl	8000ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 feb4 	bl	8001988 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c26:	f000 f851 	bl	8000ccc <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3740      	adds	r7, #64	; 0x40
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_USART1_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	f001 f828 	bl	8001cc0 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f829 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000b38 	.word	0x20000b38
 8000c84:	40013800 	.word	0x40013800

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_GPIO_Init+0x40>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <MX_GPIO_Init+0x40>)
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_GPIO_Init+0x40>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_GPIO_Init+0x40>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <MX_GPIO_Init+0x40>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <MX_GPIO_Init+0x40>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x60>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_MspInit+0x60>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <HAL_UART_MspInit+0x8c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d131      	bne.n	8000dc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000da2:	f000 fa17 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000dbc:	f000 fa0a 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40013800 	.word	0x40013800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <HardFault_Handler+0x4>

08000de6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <BusFault_Handler+0x4>

08000df2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <UsageFault_Handler+0x4>

08000df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f8d8 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f001 fbd2 	bl	8002600 <__errno>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	230c      	movs	r3, #12
 8000e60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20005000 	.word	0x20005000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	2000008c 	.word	0x2000008c
 8000e90:	20000d48 	.word	0x20000d48

08000e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <SystemInit+0x5c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <SystemInit+0x5c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <SystemInit+0x5c>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4911      	ldr	r1, [pc, #68]	; (8000ef0 <SystemInit+0x5c>)
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <SystemInit+0x60>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <SystemInit+0x5c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <SystemInit+0x5c>)
 8000eb6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <SystemInit+0x5c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SystemInit+0x5c>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <SystemInit+0x5c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <SystemInit+0x5c>)
 8000ed2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ed6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SystemInit+0x5c>)
 8000eda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ede:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SystemInit+0x64>)
 8000ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ee6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	f8ff0000 	.word	0xf8ff0000
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000efc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000efe:	e003      	b.n	8000f08 <LoopCopyDataInit>

08000f00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f06:	3104      	adds	r1, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f10:	d3f6      	bcc.n	8000f00 <CopyDataInit>
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f14:	e002      	b.n	8000f1c <LoopFillZerobss>

08000f16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f18:	f842 3b04 	str.w	r3, [r2], #4

08000f1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f20:	d3f9      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f22:	f7ff ffb7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f001 fb71 	bl	800260c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f2a:	f7ff f90f 	bl	800014c <main>
  bx lr
 8000f2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f30:	08003b28 	.word	0x08003b28
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f38:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000f3c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000f40:	20000d48 	.word	0x20000d48

08000f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x28>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f907 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff feb8 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f911 	bl	80011ba <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f8e7 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000d40 	.word	0x20000d40

08000ff8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_GetTick+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20000d40 	.word	0x20000d40

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff90 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff49 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff5e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb0 	bl	8001128 <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	; 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e127      	b.n	8001438 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e8:	2201      	movs	r2, #1
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 8116 	bne.w	8001432 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b12      	cmp	r3, #18
 800120c:	d034      	beq.n	8001278 <HAL_GPIO_Init+0xa4>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d80d      	bhi.n	800122e <HAL_GPIO_Init+0x5a>
 8001212:	2b02      	cmp	r3, #2
 8001214:	d02b      	beq.n	800126e <HAL_GPIO_Init+0x9a>
 8001216:	2b02      	cmp	r3, #2
 8001218:	d804      	bhi.n	8001224 <HAL_GPIO_Init+0x50>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d031      	beq.n	8001282 <HAL_GPIO_Init+0xae>
 800121e:	2b01      	cmp	r3, #1
 8001220:	d01c      	beq.n	800125c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001222:	e048      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001224:	2b03      	cmp	r3, #3
 8001226:	d043      	beq.n	80012b0 <HAL_GPIO_Init+0xdc>
 8001228:	2b11      	cmp	r3, #17
 800122a:	d01b      	beq.n	8001264 <HAL_GPIO_Init+0x90>
          break;
 800122c:	e043      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800122e:	4a89      	ldr	r2, [pc, #548]	; (8001454 <HAL_GPIO_Init+0x280>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d026      	beq.n	8001282 <HAL_GPIO_Init+0xae>
 8001234:	4a87      	ldr	r2, [pc, #540]	; (8001454 <HAL_GPIO_Init+0x280>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d806      	bhi.n	8001248 <HAL_GPIO_Init+0x74>
 800123a:	4a87      	ldr	r2, [pc, #540]	; (8001458 <HAL_GPIO_Init+0x284>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d020      	beq.n	8001282 <HAL_GPIO_Init+0xae>
 8001240:	4a86      	ldr	r2, [pc, #536]	; (800145c <HAL_GPIO_Init+0x288>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01d      	beq.n	8001282 <HAL_GPIO_Init+0xae>
          break;
 8001246:	e036      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001248:	4a85      	ldr	r2, [pc, #532]	; (8001460 <HAL_GPIO_Init+0x28c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0xae>
 800124e:	4a85      	ldr	r2, [pc, #532]	; (8001464 <HAL_GPIO_Init+0x290>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d016      	beq.n	8001282 <HAL_GPIO_Init+0xae>
 8001254:	4a84      	ldr	r2, [pc, #528]	; (8001468 <HAL_GPIO_Init+0x294>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0xae>
          break;
 800125a:	e02c      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e028      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	3304      	adds	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e023      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	3308      	adds	r3, #8
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e01e      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	330c      	adds	r3, #12
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e019      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128a:	2304      	movs	r3, #4
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e012      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d105      	bne.n	80012a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001298:	2308      	movs	r3, #8
 800129a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	611a      	str	r2, [r3, #16]
          break;
 80012a2:	e008      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a4:	2308      	movs	r3, #8
 80012a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	615a      	str	r2, [r3, #20]
          break;
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2bff      	cmp	r3, #255	; 0xff
 80012ba:	d801      	bhi.n	80012c0 <HAL_GPIO_Init+0xec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	e001      	b.n	80012c4 <HAL_GPIO_Init+0xf0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3304      	adds	r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2bff      	cmp	r3, #255	; 0xff
 80012ca:	d802      	bhi.n	80012d2 <HAL_GPIO_Init+0xfe>
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x104>
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	3b08      	subs	r3, #8
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	210f      	movs	r1, #15
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	401a      	ands	r2, r3
 80012ea:	6a39      	ldr	r1, [r7, #32]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	431a      	orrs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8096 	beq.w	8001432 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_GPIO_Init+0x298>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a58      	ldr	r2, [pc, #352]	; (800146c <HAL_GPIO_Init+0x298>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_GPIO_Init+0x298>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800131e:	4a54      	ldr	r2, [pc, #336]	; (8001470 <HAL_GPIO_Init+0x29c>)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_GPIO_Init+0x2a0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x19e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <HAL_GPIO_Init+0x2a4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x19a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <HAL_GPIO_Init+0x2a8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x196>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x2ac>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x192>
 8001362:	2303      	movs	r3, #3
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x1a0>
 8001366:	2304      	movs	r3, #4
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x1a0>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x1a0>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x1a0>
 8001372:	2300      	movs	r3, #0
 8001374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001376:	f002 0203 	and.w	r2, r2, #3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001384:	493a      	ldr	r1, [pc, #232]	; (8001470 <HAL_GPIO_Init+0x29c>)
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4938      	ldr	r1, [pc, #224]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
 80013aa:	e006      	b.n	80013ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4933      	ldr	r1, [pc, #204]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	492e      	ldr	r1, [pc, #184]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
 80013d2:	e006      	b.n	80013e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4929      	ldr	r1, [pc, #164]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013de:	4013      	ands	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	4924      	ldr	r1, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fc:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	43db      	mvns	r3, r3
 8001404:	491f      	ldr	r1, [pc, #124]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 8001406:	4013      	ands	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	491a      	ldr	r1, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	60cb      	str	r3, [r1, #12]
 8001422:	e006      	b.n	8001432 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	43db      	mvns	r3, r3
 800142c:	4915      	ldr	r1, [pc, #84]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 800142e:	4013      	ands	r3, r2
 8001430:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	3301      	adds	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	fa22 f303 	lsr.w	r3, r2, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	f47f aed0 	bne.w	80011e8 <HAL_GPIO_Init+0x14>
  }
}
 8001448:	bf00      	nop
 800144a:	372c      	adds	r7, #44	; 0x2c
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	10210000 	.word	0x10210000
 8001458:	10110000 	.word	0x10110000
 800145c:	10120000 	.word	0x10120000
 8001460:	10310000 	.word	0x10310000
 8001464:	10320000 	.word	0x10320000
 8001468:	10220000 	.word	0x10220000
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	40010800 	.word	0x40010800
 8001478:	40010c00 	.word	0x40010c00
 800147c:	40011000 	.word	0x40011000
 8001480:	40011400 	.word	0x40011400
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e26c      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8087 	beq.w	80015b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a8:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d00c      	beq.n	80014ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014b4:	4b8f      	ldr	r3, [pc, #572]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d112      	bne.n	80014e6 <HAL_RCC_OscConfig+0x5e>
 80014c0:	4b8c      	ldr	r3, [pc, #560]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ce:	4b89      	ldr	r3, [pc, #548]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d06c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x12c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d168      	bne.n	80015b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e246      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x76>
 80014f0:	4b80      	ldr	r3, [pc, #512]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a7f      	ldr	r2, [pc, #508]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e02e      	b.n	800155c <HAL_RCC_OscConfig+0xd4>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x98>
 8001506:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a7a      	ldr	r2, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a77      	ldr	r2, [pc, #476]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01d      	b.n	800155c <HAL_RCC_OscConfig+0xd4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0xbc>
 800152a:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a71      	ldr	r2, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0xd4>
 8001544:	4b6b      	ldr	r3, [pc, #428]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 800154a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a67      	ldr	r2, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fd48 	bl	8000ff8 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fd44 	bl	8000ff8 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1fa      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0xe4>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fd34 	bl	8000ff8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fd30 	bl	8000ff8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1e6      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x10c>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d063      	beq.n	800168a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c2:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d11c      	bne.n	8001614 <HAL_RCC_OscConfig+0x18c>
 80015da:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d116      	bne.n	8001614 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_RCC_OscConfig+0x176>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e1ba      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4939      	ldr	r1, [pc, #228]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	e03a      	b.n	800168a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff fce9 	bl	8000ff8 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fce5 	bl	8000ff8 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e19b      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4927      	ldr	r1, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_OscConfig+0x270>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fcc8 	bl	8000ff8 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fcc4 	bl	8000ff8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e17a      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d03a      	beq.n	800170c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d019      	beq.n	80016d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_RCC_OscConfig+0x274>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fca8 	bl	8000ff8 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fca4 	bl	8000ff8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e15a      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f000 fada 	bl	8001c84 <RCC_Delay>
 80016d0:	e01c      	b.n	800170c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_OscConfig+0x274>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fc8e 	bl	8000ff8 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016de:	e00f      	b.n	8001700 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff fc8a 	bl	8000ff8 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d908      	bls.n	8001700 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e140      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	42420000 	.word	0x42420000
 80016fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b9e      	ldr	r3, [pc, #632]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e9      	bne.n	80016e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80a6 	beq.w	8001866 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b97      	ldr	r3, [pc, #604]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10d      	bne.n	8001746 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b94      	ldr	r3, [pc, #592]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a93      	ldr	r2, [pc, #588]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x4f8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a8a      	ldr	r2, [pc, #552]	; (8001980 <HAL_RCC_OscConfig+0x4f8>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff fc4b 	bl	8000ff8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fc47 	bl	8000ff8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b64      	cmp	r3, #100	; 0x64
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0fd      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b81      	ldr	r3, [pc, #516]	; (8001980 <HAL_RCC_OscConfig+0x4f8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x312>
 800178c:	4b7b      	ldr	r3, [pc, #492]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a7a      	ldr	r2, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	e02d      	b.n	80017f6 <HAL_RCC_OscConfig+0x36e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x334>
 80017a2:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a75      	ldr	r2, [pc, #468]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	6213      	str	r3, [r2, #32]
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a72      	ldr	r2, [pc, #456]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	6213      	str	r3, [r2, #32]
 80017ba:	e01c      	b.n	80017f6 <HAL_RCC_OscConfig+0x36e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x356>
 80017c4:	4b6d      	ldr	r3, [pc, #436]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a6c      	ldr	r2, [pc, #432]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	4b6a      	ldr	r3, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a69      	ldr	r2, [pc, #420]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	e00b      	b.n	80017f6 <HAL_RCC_OscConfig+0x36e>
 80017de:	4b67      	ldr	r3, [pc, #412]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4a66      	ldr	r2, [pc, #408]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6213      	str	r3, [r2, #32]
 80017ea:	4b64      	ldr	r3, [pc, #400]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a63      	ldr	r2, [pc, #396]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d015      	beq.n	800182a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fbfb 	bl	8000ff8 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fbf7 	bl	8000ff8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0ab      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	4b57      	ldr	r3, [pc, #348]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ee      	beq.n	8001806 <HAL_RCC_OscConfig+0x37e>
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fbe5 	bl	8000ff8 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fbe1 	bl	8000ff8 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e095      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ee      	bne.n	8001832 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8081 	beq.w	8001972 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001870:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	d061      	beq.n	8001940 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d146      	bne.n	8001912 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_RCC_OscConfig+0x4fc>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fbb5 	bl	8000ff8 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fbb1 	bl	8000ff8 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e067      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d108      	bne.n	80018cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	492d      	ldr	r1, [pc, #180]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a19      	ldr	r1, [r3, #32]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	430b      	orrs	r3, r1
 80018de:	4927      	ldr	r1, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x4fc>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb85 	bl	8000ff8 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff fb81 	bl	8000ff8 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e037      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x46a>
 8001910:	e02f      	b.n	8001972 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_RCC_OscConfig+0x4fc>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fb6e 	bl	8000ff8 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fb6a 	bl	8000ff8 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e020      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x498>
 800193e:	e018      	b.n	8001972 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e013      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x4f4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	429a      	cmp	r2, r3
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	40007000 	.word	0x40007000
 8001984:	42420060 	.word	0x42420060

08001988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0d0      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d910      	bls.n	80019cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 0207 	bic.w	r2, r3, #7
 80019b2:	4965      	ldr	r1, [pc, #404]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	494d      	ldr	r1, [pc, #308]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d040      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d115      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e073      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e06b      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f023 0203 	bic.w	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4936      	ldr	r1, [pc, #216]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff fabe 	bl	8000ff8 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff faba 	bl	8000ff8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e053      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d210      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0207 	bic.w	r2, r3, #7
 8001abe:	4922      	ldr	r1, [pc, #136]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e032      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4916      	ldr	r1, [pc, #88]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490e      	ldr	r1, [pc, #56]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f821 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1cc>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1d0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fa1c 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08003ad4 	.word	0x08003ad4
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b490      	push	{r4, r7}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b64:	1d3c      	adds	r4, r7, #4
 8001b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x40>
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x46>
 8001b9a:	e02d      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b9e:	623b      	str	r3, [r7, #32]
      break;
 8001ba0:	e02d      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bae:	4413      	add	r3, r2
 8001bb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0c5b      	lsrs	r3, r3, #17
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bce:	4413      	add	r3, r2
 8001bd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bda:	fb02 f203 	mul.w	r2, r2, r3
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	e004      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	623b      	str	r3, [r7, #32]
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bfa:	623b      	str	r3, [r7, #32]
      break;
 8001bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc90      	pop	{r4, r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	08003ac0 	.word	0x08003ac0
 8001c10:	08003ad0 	.word	0x08003ad0
 8001c14:	40021000 	.word	0x40021000
 8001c18:	007a1200 	.word	0x007a1200
 8001c1c:	003d0900 	.word	0x003d0900

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff2 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08003ae4 	.word	0x08003ae4

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c64:	4601      	mov	r1, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0adb      	lsrs	r3, r3, #11
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08003ae4 	.word	0x08003ae4

08001c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <RCC_Delay+0x34>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <RCC_Delay+0x38>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0a5b      	lsrs	r3, r3, #9
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca0:	bf00      	nop
  }
  while (Delay --);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	60fa      	str	r2, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f9      	bne.n	8001ca0 <RCC_Delay+0x1c>
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	10624dd3 	.word	0x10624dd3

08001cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e03f      	b.n	8001d52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff f828 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	; 0x24
 8001cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f90b 	bl	8001f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b088      	sub	sp, #32
 8001d5e:	af02      	add	r7, sp, #8
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	f040 8083 	bne.w	8001e82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_UART_Transmit+0x2e>
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e07b      	b.n	8001e84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_UART_Transmit+0x40>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e074      	b.n	8001e84 <HAL_UART_Transmit+0x12a>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2221      	movs	r2, #33	; 0x21
 8001dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001db0:	f7ff f922 	bl	8000ff8 <HAL_GetTick>
 8001db4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dc2:	e042      	b.n	8001e4a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dda:	d122      	bne.n	8001e22 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f850 	bl	8001e8c <UART_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e046      	b.n	8001e84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3302      	adds	r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	e017      	b.n	8001e4a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	e013      	b.n	8001e4a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f82d 	bl	8001e8c <UART_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e023      	b.n	8001e84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	781a      	ldrb	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1b7      	bne.n	8001dc4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2140      	movs	r1, #64	; 0x40
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f814 	bl	8001e8c <UART_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e00a      	b.n	8001e84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
  }
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e9c:	e02c      	b.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d028      	beq.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8001eac:	f7ff f8a4 	bl	8000ff8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d21d      	bcs.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001eca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e00f      	b.n	8001f18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4013      	ands	r3, r2
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d0c3      	beq.n	8001e9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f5a:	f023 030c 	bic.w	r3, r3, #12
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	68f9      	ldr	r1, [r7, #12]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a52      	ldr	r2, [pc, #328]	; (80020cc <UART_SetConfig+0x1ac>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d14e      	bne.n	8002026 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f88:	f7ff fe68 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 8001f8c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	009a      	lsls	r2, r3, #2
 8001f98:	441a      	add	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	0119      	lsls	r1, r3, #4
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc4:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2064      	movs	r0, #100	; 0x64
 8001fce:	fb00 f303 	mul.w	r3, r0, r3
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	3332      	adds	r3, #50	; 0x32
 8001fd8:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	4419      	add	r1, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	009a      	lsls	r2, r3, #2
 8001ff0:	441a      	add	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	fb00 f303 	mul.w	r3, r0, r3
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	3332      	adds	r3, #50	; 0x32
 8002010:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	f003 020f 	and.w	r2, r3, #15
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	440a      	add	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002024:	e04d      	b.n	80020c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002026:	f7ff fe05 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 800202a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009a      	lsls	r2, r3, #2
 8002036:	441a      	add	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	0119      	lsls	r1, r3, #4
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	009a      	lsls	r2, r3, #2
 8002056:	441a      	add	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002064:	fba3 0302 	umull	r0, r3, r3, r2
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	2064      	movs	r0, #100	; 0x64
 800206c:	fb00 f303 	mul.w	r3, r0, r3
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	3332      	adds	r3, #50	; 0x32
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	095b      	lsrs	r3, r3, #5
 800207e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002082:	4419      	add	r1, r3
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	009a      	lsls	r2, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	fbb2 f2f3 	udiv	r2, r2, r3
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <UART_SetConfig+0x1b0>)
 800209c:	fba3 0302 	umull	r0, r3, r3, r2
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	2064      	movs	r0, #100	; 0x64
 80020a4:	fb00 f303 	mul.w	r3, r0, r3
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	3332      	adds	r3, #50	; 0x32
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <UART_SetConfig+0x1b0>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	f003 020f 	and.w	r2, r3, #15
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	440a      	add	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40013800 	.word	0x40013800
 80020d0:	51eb851f 	.word	0x51eb851f

080020d4 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	e018      	b.n	8002112 <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2232      	movs	r2, #50	; 0x32
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <static_strings_init+0x14c>)
 80020ea:	441a      	add	r2, r3
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <static_strings_init+0x150>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 80020f4:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <static_strings_init+0x150>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	2200      	movs	r2, #0
 80020fe:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <static_strings_init+0x150>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	2200      	movs	r2, #0
 800210a:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3301      	adds	r3, #1
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b09      	cmp	r3, #9
 8002116:	dde3      	ble.n	80020e0 <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8002118:	2300      	movs	r3, #0
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	e018      	b.n	8002150 <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2264      	movs	r2, #100	; 0x64
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <static_strings_init+0x154>)
 8002128:	441a      	add	r2, r3
 800212a:	4940      	ldr	r1, [pc, #256]	; (800222c <static_strings_init+0x158>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 8002132:	4a3e      	ldr	r2, [pc, #248]	; (800222c <static_strings_init+0x158>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	2201      	movs	r2, #1
 800213c:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <static_strings_init+0x158>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	2200      	movs	r2, #0
 8002148:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3301      	adds	r3, #1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b05      	cmp	r3, #5
 8002154:	dde3      	ble.n	800211e <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	e018      	b.n	800218e <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	22c8      	movs	r2, #200	; 0xc8
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	4a32      	ldr	r2, [pc, #200]	; (8002230 <static_strings_init+0x15c>)
 8002166:	441a      	add	r2, r3
 8002168:	4932      	ldr	r1, [pc, #200]	; (8002234 <static_strings_init+0x160>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <static_strings_init+0x160>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	2202      	movs	r2, #2
 800217a:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 800217c:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <static_strings_init+0x160>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	2200      	movs	r2, #0
 8002186:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b01      	cmp	r3, #1
 8002192:	dde3      	ble.n	800215c <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e019      	b.n	80021ce <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <static_strings_init+0x164>)
 80021a6:	441a      	add	r2, r3
 80021a8:	4924      	ldr	r1, [pc, #144]	; (800223c <static_strings_init+0x168>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 80021b0:	4a22      	ldr	r2, [pc, #136]	; (800223c <static_strings_init+0x168>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	2203      	movs	r2, #3
 80021ba:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <static_strings_init+0x168>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	dde2      	ble.n	800219a <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	e019      	b.n	800220e <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <static_strings_init+0x16c>)
 80021e6:	441a      	add	r2, r3
 80021e8:	4916      	ldr	r1, [pc, #88]	; (8002244 <static_strings_init+0x170>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <static_strings_init+0x170>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	2204      	movs	r2, #4
 80021fa:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <static_strings_init+0x170>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	2200      	movs	r2, #0
 8002206:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3301      	adds	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	dde2      	ble.n	80021da <static_strings_init+0x106>
	}
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000304 	.word	0x20000304
 8002224:	200008f4 	.word	0x200008f4
 8002228:	200000ac 	.word	0x200000ac
 800222c:	20000d08 	.word	0x20000d08
 8002230:	20000b78 	.word	0x20000b78
 8002234:	200008e4 	.word	0x200008e4
 8002238:	20000944 	.word	0x20000944
 800223c:	20000d38 	.word	0x20000d38
 8002240:	200004fc 	.word	0x200004fc
 8002244:	200000a4 	.word	0x200000a4

08002248 <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	2b32      	cmp	r3, #50	; 0x32
 8002256:	d81a      	bhi.n	800228e <static_strings_allocate+0x46>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e014      	b.n	8002288 <static_strings_allocate+0x40>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800225e:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <static_strings_allocate+0x15c>)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	79db      	ldrb	r3, [r3, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <static_strings_allocate+0x3a>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 800226c:	4a4d      	ldr	r2, [pc, #308]	; (80023a4 <static_strings_allocate+0x15c>)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	2201      	movs	r2, #1
 8002276:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_short_strings_descriptors[i];
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <static_strings_allocate+0x15c>)
 800227e:	4413      	add	r3, r2
 8002280:	e08b      	b.n	800239a <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b09      	cmp	r3, #9
 800228c:	dde7      	ble.n	800225e <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d81a      	bhi.n	80022ca <static_strings_allocate+0x82>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e014      	b.n	80022c4 <static_strings_allocate+0x7c>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800229a:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <static_strings_allocate+0x160>)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	79db      	ldrb	r3, [r3, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <static_strings_allocate+0x76>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80022a8:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <static_strings_allocate+0x160>)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	2201      	movs	r2, #1
 80022b2:	71da      	strb	r2, [r3, #7]
				return &static_strings_short_strings_descriptors[i];
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <static_strings_allocate+0x160>)
 80022ba:	4413      	add	r3, r2
 80022bc:	e06d      	b.n	800239a <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	dde7      	ble.n	800229a <static_strings_allocate+0x52>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	2bc8      	cmp	r3, #200	; 0xc8
 80022ce:	d81a      	bhi.n	8002306 <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e014      	b.n	8002300 <static_strings_allocate+0xb8>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <static_strings_allocate+0x164>)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	79db      	ldrb	r3, [r3, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <static_strings_allocate+0xb2>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80022e4:	4a31      	ldr	r2, [pc, #196]	; (80023ac <static_strings_allocate+0x164>)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	2201      	movs	r2, #1
 80022ee:	71da      	strb	r2, [r3, #7]
				return &static_strings_medium_strings_descriptors[i];
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <static_strings_allocate+0x164>)
 80022f6:	4413      	add	r3, r2
 80022f8:	e04f      	b.n	800239a <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	dde7      	ble.n	80022d6 <static_strings_allocate+0x8e>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800230c:	d81a      	bhi.n	8002344 <static_strings_allocate+0xfc>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e014      	b.n	800233e <static_strings_allocate+0xf6>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <static_strings_allocate+0x168>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	79db      	ldrb	r3, [r3, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10a      	bne.n	8002338 <static_strings_allocate+0xf0>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002322:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <static_strings_allocate+0x168>)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	2201      	movs	r2, #1
 800232c:	71da      	strb	r2, [r3, #7]
				return &static_strings_long_strings_descriptors[i];
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <static_strings_allocate+0x168>)
 8002334:	4413      	add	r3, r2
 8002336:	e030      	b.n	800239a <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	dde7      	ble.n	8002314 <static_strings_allocate+0xcc>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800234a:	d81a      	bhi.n	8002382 <static_strings_allocate+0x13a>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e014      	b.n	800237c <static_strings_allocate+0x134>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <static_strings_allocate+0x16c>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	79db      	ldrb	r3, [r3, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <static_strings_allocate+0x12e>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <static_strings_allocate+0x16c>)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	2201      	movs	r2, #1
 800236a:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_long_strings_descriptors[i];
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <static_strings_allocate+0x16c>)
 8002372:	4413      	add	r3, r2
 8002374:	e011      	b.n	800239a <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	dde7      	ble.n	8002352 <static_strings_allocate+0x10a>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002388:	d803      	bhi.n	8002392 <static_strings_allocate+0x14a>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <static_strings_allocate+0x170>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e002      	b.n	8002398 <static_strings_allocate+0x150>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <static_strings_allocate+0x170>)
 8002394:	2202      	movs	r2, #2
 8002396:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	200008f4 	.word	0x200008f4
 80023a8:	20000d08 	.word	0x20000d08
 80023ac:	200008e4 	.word	0x200008e4
 80023b0:	20000d38 	.word	0x20000d38
 80023b4:	200000a4 	.word	0x200000a4
 80023b8:	200004f8 	.word	0x200004f8

080023bc <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f86b 	bl	80024a0 <static_strings_strlen>
 80023ca:	4603      	mov	r3, r0
 80023cc:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e014      	b.n	8002402 <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 80023d8:	89fb      	ldrh	r3, [r7, #14]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff34 	bl	8002248 <static_strings_allocate>
 80023e0:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <static_strings_save+0x30>
		return descriptor;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	e00a      	b.n	8002402 <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	89fa      	ldrh	r2, [r7, #14]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f92d 	bl	8002654 <memcpy>
	descriptor->length = string_length;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	89fa      	ldrh	r2, [r7, #14]
 80023fe:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8002400:	68bb      	ldr	r3, [r7, #8]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2205      	movs	r2, #5
 8002418:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f838 	bl	80024a0 <static_strings_strlen>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	889b      	ldrh	r3, [r3, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(string_descriptor->type != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	799b      	ldrb	r3, [r3, #6]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d002      	beq.n	800245a <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	71da      	strb	r2, [r3, #7]
	}
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	889b      	ldrh	r3, [r3, #4]
 8002474:	3b02      	subs	r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b0d      	cmp	r3, #13
 800247c:	d008      	beq.n	8002490 <static_strings_is_line+0x2c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	889b      	ldrh	r3, [r3, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b0a      	cmp	r3, #10
 800248e:	d101      	bne.n	8002494 <static_strings_is_line+0x30>
		return 1;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <static_strings_is_line+0x32>
	}
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 80024a8:	2300      	movs	r3, #0
 80024aa:	81fb      	strh	r3, [r7, #14]
 80024ac:	e010      	b.n	80024d0 <static_strings_strlen+0x30>
		if( *(string + length) == '\r'){
 80024ae:	89fb      	ldrh	r3, [r7, #14]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b0d      	cmp	r3, #13
 80024b8:	d00f      	beq.n	80024da <static_strings_strlen+0x3a>
			break;
		}
		if( *(string + length) == '\0'){
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <static_strings_strlen+0x2a>
			return length;
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	e022      	b.n	8002510 <static_strings_strlen+0x70>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 80024ca:	89fb      	ldrh	r3, [r7, #14]
 80024cc:	3301      	adds	r3, #1
 80024ce:	81fb      	strh	r3, [r7, #14]
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d6:	d3ea      	bcc.n	80024ae <static_strings_strlen+0xe>
 80024d8:	e000      	b.n	80024dc <static_strings_strlen+0x3c>
			break;
 80024da:	bf00      	nop
		}
	}
	if(length >= 999){
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	f240 32e6 	movw	r2, #998	; 0x3e6
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d904      	bls.n	80024f0 <static_strings_strlen+0x50>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_INVALID_STRING;
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <static_strings_strlen+0x7c>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
		return 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e00f      	b.n	8002510 <static_strings_strlen+0x70>
	}
	else{
		if(*(string + length + 1) != '\n'){
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	3301      	adds	r3, #1
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b0a      	cmp	r3, #10
 80024fc:	d005      	beq.n	800250a <static_strings_strlen+0x6a>
			*(string + length + 1) = '\n';
 80024fe:	89fb      	ldrh	r3, [r7, #14]
 8002500:	3301      	adds	r3, #1
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	220a      	movs	r2, #10
 8002508:	701a      	strb	r2, [r3, #0]
		}
		return length + 2;
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	3302      	adds	r3, #2
 800250e:	b29b      	uxth	r3, r3
	}
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	200004f8 	.word	0x200004f8

08002520 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <static_strings_string_splitter_set_parameters+0x2c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <static_strings_string_splitter_set_parameters+0x2c>)
 8002538:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <static_strings_string_splitter_set_parameters+0x2c>)
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	7213      	strb	r3, [r2, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000090 	.word	0x20000090

08002550 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor *string_descriptor){
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4926      	ldr	r1, [pc, #152]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 8002564:	6809      	ldr	r1, [r1, #0]
 8002566:	8889      	ldrh	r1, [r1, #4]
 8002568:	440b      	add	r3, r1
 800256a:	429a      	cmp	r2, r3
 800256c:	d101      	bne.n	8002572 <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 800256e:	2300      	movs	r3, #0
 8002570:	e03e      	b.n	80025f0 <static_strings_string_splitter_get_next_token+0xa0>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 8002578:	bf00      	nop
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	60fa      	str	r2, [r7, #12]
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 8002584:	7a1b      	ldrb	r3, [r3, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	d009      	beq.n	800259e <static_strings_string_splitter_get_next_token+0x4e>
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	8892      	ldrh	r2, [r2, #4]
 8002596:	4413      	add	r3, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	429a      	cmp	r2, r3
 800259c:	d3ed      	bcc.n	800257a <static_strings_string_splitter_get_next_token+0x2a>
	string_descriptor->string = static_strings_string_splitter.next_token_start;
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	601a      	str	r2, [r3, #0]
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	8892      	ldrh	r2, [r2, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d107      	bne.n	80025ca <static_strings_string_splitter_get_next_token+0x7a>
		string_descriptor->length = current_position - static_strings_string_splitter.next_token_start;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 80025be:	6852      	ldr	r2, [r2, #4]
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	809a      	strh	r2, [r3, #4]
 80025c8:	e008      	b.n	80025dc <static_strings_string_splitter_get_next_token+0x8c>
	}
	else{
		string_descriptor->length = current_position - static_strings_string_splitter.next_token_start - 1;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 80025ce:	6852      	ldr	r2, [r2, #4]
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	809a      	strh	r2, [r3, #4]
	}
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2205      	movs	r2, #5
 80025e0:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	71da      	strb	r2, [r3, #7]
	static_strings_string_splitter.next_token_start = current_position;
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <static_strings_string_splitter_get_next_token+0xac>)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6053      	str	r3, [r2, #4]
	return 1;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000090 	.word	0x20000090

08002600 <__errno>:
 8002600:	4b01      	ldr	r3, [pc, #4]	; (8002608 <__errno+0x8>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	2000000c 	.word	0x2000000c

0800260c <__libc_init_array>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	2500      	movs	r5, #0
 8002610:	4e0c      	ldr	r6, [pc, #48]	; (8002644 <__libc_init_array+0x38>)
 8002612:	4c0d      	ldr	r4, [pc, #52]	; (8002648 <__libc_init_array+0x3c>)
 8002614:	1ba4      	subs	r4, r4, r6
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	42a5      	cmp	r5, r4
 800261a:	d109      	bne.n	8002630 <__libc_init_array+0x24>
 800261c:	f000 fc36 	bl	8002e8c <_init>
 8002620:	2500      	movs	r5, #0
 8002622:	4e0a      	ldr	r6, [pc, #40]	; (800264c <__libc_init_array+0x40>)
 8002624:	4c0a      	ldr	r4, [pc, #40]	; (8002650 <__libc_init_array+0x44>)
 8002626:	1ba4      	subs	r4, r4, r6
 8002628:	10a4      	asrs	r4, r4, #2
 800262a:	42a5      	cmp	r5, r4
 800262c:	d105      	bne.n	800263a <__libc_init_array+0x2e>
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002634:	4798      	blx	r3
 8002636:	3501      	adds	r5, #1
 8002638:	e7ee      	b.n	8002618 <__libc_init_array+0xc>
 800263a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800263e:	4798      	blx	r3
 8002640:	3501      	adds	r5, #1
 8002642:	e7f2      	b.n	800262a <__libc_init_array+0x1e>
 8002644:	08003b20 	.word	0x08003b20
 8002648:	08003b20 	.word	0x08003b20
 800264c:	08003b20 	.word	0x08003b20
 8002650:	08003b24 	.word	0x08003b24

08002654 <memcpy>:
 8002654:	b510      	push	{r4, lr}
 8002656:	1e43      	subs	r3, r0, #1
 8002658:	440a      	add	r2, r1
 800265a:	4291      	cmp	r1, r2
 800265c:	d100      	bne.n	8002660 <memcpy+0xc>
 800265e:	bd10      	pop	{r4, pc}
 8002660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002668:	e7f7      	b.n	800265a <memcpy+0x6>

0800266a <memset>:
 800266a:	4603      	mov	r3, r0
 800266c:	4402      	add	r2, r0
 800266e:	4293      	cmp	r3, r2
 8002670:	d100      	bne.n	8002674 <memset+0xa>
 8002672:	4770      	bx	lr
 8002674:	f803 1b01 	strb.w	r1, [r3], #1
 8002678:	e7f9      	b.n	800266e <memset+0x4>
	...

0800267c <siprintf>:
 800267c:	b40e      	push	{r1, r2, r3}
 800267e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002682:	b500      	push	{lr}
 8002684:	b09c      	sub	sp, #112	; 0x70
 8002686:	ab1d      	add	r3, sp, #116	; 0x74
 8002688:	9002      	str	r0, [sp, #8]
 800268a:	9006      	str	r0, [sp, #24]
 800268c:	9107      	str	r1, [sp, #28]
 800268e:	9104      	str	r1, [sp, #16]
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <siprintf+0x38>)
 8002692:	4909      	ldr	r1, [pc, #36]	; (80026b8 <siprintf+0x3c>)
 8002694:	f853 2b04 	ldr.w	r2, [r3], #4
 8002698:	9105      	str	r1, [sp, #20]
 800269a:	6800      	ldr	r0, [r0, #0]
 800269c:	a902      	add	r1, sp, #8
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f000 f866 	bl	8002770 <_svfiprintf_r>
 80026a4:	2200      	movs	r2, #0
 80026a6:	9b02      	ldr	r3, [sp, #8]
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	b01c      	add	sp, #112	; 0x70
 80026ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80026b0:	b003      	add	sp, #12
 80026b2:	4770      	bx	lr
 80026b4:	2000000c 	.word	0x2000000c
 80026b8:	ffff0208 	.word	0xffff0208

080026bc <__ssputs_r>:
 80026bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026c0:	688e      	ldr	r6, [r1, #8]
 80026c2:	4682      	mov	sl, r0
 80026c4:	429e      	cmp	r6, r3
 80026c6:	460c      	mov	r4, r1
 80026c8:	4690      	mov	r8, r2
 80026ca:	4699      	mov	r9, r3
 80026cc:	d837      	bhi.n	800273e <__ssputs_r+0x82>
 80026ce:	898a      	ldrh	r2, [r1, #12]
 80026d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026d4:	d031      	beq.n	800273a <__ssputs_r+0x7e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	6825      	ldr	r5, [r4, #0]
 80026da:	6909      	ldr	r1, [r1, #16]
 80026dc:	1a6f      	subs	r7, r5, r1
 80026de:	6965      	ldr	r5, [r4, #20]
 80026e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80026e8:	f109 0301 	add.w	r3, r9, #1
 80026ec:	443b      	add	r3, r7
 80026ee:	429d      	cmp	r5, r3
 80026f0:	bf38      	it	cc
 80026f2:	461d      	movcc	r5, r3
 80026f4:	0553      	lsls	r3, r2, #21
 80026f6:	d530      	bpl.n	800275a <__ssputs_r+0x9e>
 80026f8:	4629      	mov	r1, r5
 80026fa:	f000 fb2d 	bl	8002d58 <_malloc_r>
 80026fe:	4606      	mov	r6, r0
 8002700:	b950      	cbnz	r0, 8002718 <__ssputs_r+0x5c>
 8002702:	230c      	movs	r3, #12
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f8ca 3000 	str.w	r3, [sl]
 800270c:	89a3      	ldrh	r3, [r4, #12]
 800270e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002718:	463a      	mov	r2, r7
 800271a:	6921      	ldr	r1, [r4, #16]
 800271c:	f7ff ff9a 	bl	8002654 <memcpy>
 8002720:	89a3      	ldrh	r3, [r4, #12]
 8002722:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272a:	81a3      	strh	r3, [r4, #12]
 800272c:	6126      	str	r6, [r4, #16]
 800272e:	443e      	add	r6, r7
 8002730:	6026      	str	r6, [r4, #0]
 8002732:	464e      	mov	r6, r9
 8002734:	6165      	str	r5, [r4, #20]
 8002736:	1bed      	subs	r5, r5, r7
 8002738:	60a5      	str	r5, [r4, #8]
 800273a:	454e      	cmp	r6, r9
 800273c:	d900      	bls.n	8002740 <__ssputs_r+0x84>
 800273e:	464e      	mov	r6, r9
 8002740:	4632      	mov	r2, r6
 8002742:	4641      	mov	r1, r8
 8002744:	6820      	ldr	r0, [r4, #0]
 8002746:	f000 faa1 	bl	8002c8c <memmove>
 800274a:	68a3      	ldr	r3, [r4, #8]
 800274c:	2000      	movs	r0, #0
 800274e:	1b9b      	subs	r3, r3, r6
 8002750:	60a3      	str	r3, [r4, #8]
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	441e      	add	r6, r3
 8002756:	6026      	str	r6, [r4, #0]
 8002758:	e7dc      	b.n	8002714 <__ssputs_r+0x58>
 800275a:	462a      	mov	r2, r5
 800275c:	f000 fb56 	bl	8002e0c <_realloc_r>
 8002760:	4606      	mov	r6, r0
 8002762:	2800      	cmp	r0, #0
 8002764:	d1e2      	bne.n	800272c <__ssputs_r+0x70>
 8002766:	6921      	ldr	r1, [r4, #16]
 8002768:	4650      	mov	r0, sl
 800276a:	f000 faa9 	bl	8002cc0 <_free_r>
 800276e:	e7c8      	b.n	8002702 <__ssputs_r+0x46>

08002770 <_svfiprintf_r>:
 8002770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002774:	461d      	mov	r5, r3
 8002776:	898b      	ldrh	r3, [r1, #12]
 8002778:	b09d      	sub	sp, #116	; 0x74
 800277a:	061f      	lsls	r7, r3, #24
 800277c:	4680      	mov	r8, r0
 800277e:	460c      	mov	r4, r1
 8002780:	4616      	mov	r6, r2
 8002782:	d50f      	bpl.n	80027a4 <_svfiprintf_r+0x34>
 8002784:	690b      	ldr	r3, [r1, #16]
 8002786:	b96b      	cbnz	r3, 80027a4 <_svfiprintf_r+0x34>
 8002788:	2140      	movs	r1, #64	; 0x40
 800278a:	f000 fae5 	bl	8002d58 <_malloc_r>
 800278e:	6020      	str	r0, [r4, #0]
 8002790:	6120      	str	r0, [r4, #16]
 8002792:	b928      	cbnz	r0, 80027a0 <_svfiprintf_r+0x30>
 8002794:	230c      	movs	r3, #12
 8002796:	f8c8 3000 	str.w	r3, [r8]
 800279a:	f04f 30ff 	mov.w	r0, #4294967295
 800279e:	e0c8      	b.n	8002932 <_svfiprintf_r+0x1c2>
 80027a0:	2340      	movs	r3, #64	; 0x40
 80027a2:	6163      	str	r3, [r4, #20]
 80027a4:	2300      	movs	r3, #0
 80027a6:	9309      	str	r3, [sp, #36]	; 0x24
 80027a8:	2320      	movs	r3, #32
 80027aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027ae:	2330      	movs	r3, #48	; 0x30
 80027b0:	f04f 0b01 	mov.w	fp, #1
 80027b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027b8:	9503      	str	r5, [sp, #12]
 80027ba:	4637      	mov	r7, r6
 80027bc:	463d      	mov	r5, r7
 80027be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027c2:	b10b      	cbz	r3, 80027c8 <_svfiprintf_r+0x58>
 80027c4:	2b25      	cmp	r3, #37	; 0x25
 80027c6:	d13e      	bne.n	8002846 <_svfiprintf_r+0xd6>
 80027c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80027cc:	d00b      	beq.n	80027e6 <_svfiprintf_r+0x76>
 80027ce:	4653      	mov	r3, sl
 80027d0:	4632      	mov	r2, r6
 80027d2:	4621      	mov	r1, r4
 80027d4:	4640      	mov	r0, r8
 80027d6:	f7ff ff71 	bl	80026bc <__ssputs_r>
 80027da:	3001      	adds	r0, #1
 80027dc:	f000 80a4 	beq.w	8002928 <_svfiprintf_r+0x1b8>
 80027e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027e2:	4453      	add	r3, sl
 80027e4:	9309      	str	r3, [sp, #36]	; 0x24
 80027e6:	783b      	ldrb	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 809d 	beq.w	8002928 <_svfiprintf_r+0x1b8>
 80027ee:	2300      	movs	r3, #0
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295
 80027f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027f8:	9304      	str	r3, [sp, #16]
 80027fa:	9307      	str	r3, [sp, #28]
 80027fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002800:	931a      	str	r3, [sp, #104]	; 0x68
 8002802:	462f      	mov	r7, r5
 8002804:	2205      	movs	r2, #5
 8002806:	f817 1b01 	ldrb.w	r1, [r7], #1
 800280a:	4850      	ldr	r0, [pc, #320]	; (800294c <_svfiprintf_r+0x1dc>)
 800280c:	f000 fa30 	bl	8002c70 <memchr>
 8002810:	9b04      	ldr	r3, [sp, #16]
 8002812:	b9d0      	cbnz	r0, 800284a <_svfiprintf_r+0xda>
 8002814:	06d9      	lsls	r1, r3, #27
 8002816:	bf44      	itt	mi
 8002818:	2220      	movmi	r2, #32
 800281a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800281e:	071a      	lsls	r2, r3, #28
 8002820:	bf44      	itt	mi
 8002822:	222b      	movmi	r2, #43	; 0x2b
 8002824:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002828:	782a      	ldrb	r2, [r5, #0]
 800282a:	2a2a      	cmp	r2, #42	; 0x2a
 800282c:	d015      	beq.n	800285a <_svfiprintf_r+0xea>
 800282e:	462f      	mov	r7, r5
 8002830:	2000      	movs	r0, #0
 8002832:	250a      	movs	r5, #10
 8002834:	9a07      	ldr	r2, [sp, #28]
 8002836:	4639      	mov	r1, r7
 8002838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800283c:	3b30      	subs	r3, #48	; 0x30
 800283e:	2b09      	cmp	r3, #9
 8002840:	d94d      	bls.n	80028de <_svfiprintf_r+0x16e>
 8002842:	b1b8      	cbz	r0, 8002874 <_svfiprintf_r+0x104>
 8002844:	e00f      	b.n	8002866 <_svfiprintf_r+0xf6>
 8002846:	462f      	mov	r7, r5
 8002848:	e7b8      	b.n	80027bc <_svfiprintf_r+0x4c>
 800284a:	4a40      	ldr	r2, [pc, #256]	; (800294c <_svfiprintf_r+0x1dc>)
 800284c:	463d      	mov	r5, r7
 800284e:	1a80      	subs	r0, r0, r2
 8002850:	fa0b f000 	lsl.w	r0, fp, r0
 8002854:	4318      	orrs	r0, r3
 8002856:	9004      	str	r0, [sp, #16]
 8002858:	e7d3      	b.n	8002802 <_svfiprintf_r+0x92>
 800285a:	9a03      	ldr	r2, [sp, #12]
 800285c:	1d11      	adds	r1, r2, #4
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	9103      	str	r1, [sp, #12]
 8002862:	2a00      	cmp	r2, #0
 8002864:	db01      	blt.n	800286a <_svfiprintf_r+0xfa>
 8002866:	9207      	str	r2, [sp, #28]
 8002868:	e004      	b.n	8002874 <_svfiprintf_r+0x104>
 800286a:	4252      	negs	r2, r2
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	9207      	str	r2, [sp, #28]
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	783b      	ldrb	r3, [r7, #0]
 8002876:	2b2e      	cmp	r3, #46	; 0x2e
 8002878:	d10c      	bne.n	8002894 <_svfiprintf_r+0x124>
 800287a:	787b      	ldrb	r3, [r7, #1]
 800287c:	2b2a      	cmp	r3, #42	; 0x2a
 800287e:	d133      	bne.n	80028e8 <_svfiprintf_r+0x178>
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	3702      	adds	r7, #2
 8002884:	1d1a      	adds	r2, r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	9203      	str	r2, [sp, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	bfb8      	it	lt
 800288e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002892:	9305      	str	r3, [sp, #20]
 8002894:	4d2e      	ldr	r5, [pc, #184]	; (8002950 <_svfiprintf_r+0x1e0>)
 8002896:	2203      	movs	r2, #3
 8002898:	7839      	ldrb	r1, [r7, #0]
 800289a:	4628      	mov	r0, r5
 800289c:	f000 f9e8 	bl	8002c70 <memchr>
 80028a0:	b138      	cbz	r0, 80028b2 <_svfiprintf_r+0x142>
 80028a2:	2340      	movs	r3, #64	; 0x40
 80028a4:	1b40      	subs	r0, r0, r5
 80028a6:	fa03 f000 	lsl.w	r0, r3, r0
 80028aa:	9b04      	ldr	r3, [sp, #16]
 80028ac:	3701      	adds	r7, #1
 80028ae:	4303      	orrs	r3, r0
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	7839      	ldrb	r1, [r7, #0]
 80028b4:	2206      	movs	r2, #6
 80028b6:	4827      	ldr	r0, [pc, #156]	; (8002954 <_svfiprintf_r+0x1e4>)
 80028b8:	1c7e      	adds	r6, r7, #1
 80028ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028be:	f000 f9d7 	bl	8002c70 <memchr>
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d038      	beq.n	8002938 <_svfiprintf_r+0x1c8>
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <_svfiprintf_r+0x1e8>)
 80028c8:	bb13      	cbnz	r3, 8002910 <_svfiprintf_r+0x1a0>
 80028ca:	9b03      	ldr	r3, [sp, #12]
 80028cc:	3307      	adds	r3, #7
 80028ce:	f023 0307 	bic.w	r3, r3, #7
 80028d2:	3308      	adds	r3, #8
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028d8:	444b      	add	r3, r9
 80028da:	9309      	str	r3, [sp, #36]	; 0x24
 80028dc:	e76d      	b.n	80027ba <_svfiprintf_r+0x4a>
 80028de:	fb05 3202 	mla	r2, r5, r2, r3
 80028e2:	2001      	movs	r0, #1
 80028e4:	460f      	mov	r7, r1
 80028e6:	e7a6      	b.n	8002836 <_svfiprintf_r+0xc6>
 80028e8:	2300      	movs	r3, #0
 80028ea:	250a      	movs	r5, #10
 80028ec:	4619      	mov	r1, r3
 80028ee:	3701      	adds	r7, #1
 80028f0:	9305      	str	r3, [sp, #20]
 80028f2:	4638      	mov	r0, r7
 80028f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028f8:	3a30      	subs	r2, #48	; 0x30
 80028fa:	2a09      	cmp	r2, #9
 80028fc:	d903      	bls.n	8002906 <_svfiprintf_r+0x196>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0c8      	beq.n	8002894 <_svfiprintf_r+0x124>
 8002902:	9105      	str	r1, [sp, #20]
 8002904:	e7c6      	b.n	8002894 <_svfiprintf_r+0x124>
 8002906:	fb05 2101 	mla	r1, r5, r1, r2
 800290a:	2301      	movs	r3, #1
 800290c:	4607      	mov	r7, r0
 800290e:	e7f0      	b.n	80028f2 <_svfiprintf_r+0x182>
 8002910:	ab03      	add	r3, sp, #12
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4622      	mov	r2, r4
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <_svfiprintf_r+0x1ec>)
 8002918:	a904      	add	r1, sp, #16
 800291a:	4640      	mov	r0, r8
 800291c:	f3af 8000 	nop.w
 8002920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002924:	4681      	mov	r9, r0
 8002926:	d1d6      	bne.n	80028d6 <_svfiprintf_r+0x166>
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	065b      	lsls	r3, r3, #25
 800292c:	f53f af35 	bmi.w	800279a <_svfiprintf_r+0x2a>
 8002930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002932:	b01d      	add	sp, #116	; 0x74
 8002934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002938:	ab03      	add	r3, sp, #12
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4622      	mov	r2, r4
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <_svfiprintf_r+0x1ec>)
 8002940:	a904      	add	r1, sp, #16
 8002942:	4640      	mov	r0, r8
 8002944:	f000 f882 	bl	8002a4c <_printf_i>
 8002948:	e7ea      	b.n	8002920 <_svfiprintf_r+0x1b0>
 800294a:	bf00      	nop
 800294c:	08003aec 	.word	0x08003aec
 8002950:	08003af2 	.word	0x08003af2
 8002954:	08003af6 	.word	0x08003af6
 8002958:	00000000 	.word	0x00000000
 800295c:	080026bd 	.word	0x080026bd

08002960 <_printf_common>:
 8002960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002964:	4691      	mov	r9, r2
 8002966:	461f      	mov	r7, r3
 8002968:	688a      	ldr	r2, [r1, #8]
 800296a:	690b      	ldr	r3, [r1, #16]
 800296c:	4606      	mov	r6, r0
 800296e:	4293      	cmp	r3, r2
 8002970:	bfb8      	it	lt
 8002972:	4613      	movlt	r3, r2
 8002974:	f8c9 3000 	str.w	r3, [r9]
 8002978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800297c:	460c      	mov	r4, r1
 800297e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002982:	b112      	cbz	r2, 800298a <_printf_common+0x2a>
 8002984:	3301      	adds	r3, #1
 8002986:	f8c9 3000 	str.w	r3, [r9]
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	0699      	lsls	r1, r3, #26
 800298e:	bf42      	ittt	mi
 8002990:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002994:	3302      	addmi	r3, #2
 8002996:	f8c9 3000 	strmi.w	r3, [r9]
 800299a:	6825      	ldr	r5, [r4, #0]
 800299c:	f015 0506 	ands.w	r5, r5, #6
 80029a0:	d107      	bne.n	80029b2 <_printf_common+0x52>
 80029a2:	f104 0a19 	add.w	sl, r4, #25
 80029a6:	68e3      	ldr	r3, [r4, #12]
 80029a8:	f8d9 2000 	ldr.w	r2, [r9]
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	42ab      	cmp	r3, r5
 80029b0:	dc29      	bgt.n	8002a06 <_printf_common+0xa6>
 80029b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	3300      	adds	r3, #0
 80029ba:	bf18      	it	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	0692      	lsls	r2, r2, #26
 80029c0:	d42e      	bmi.n	8002a20 <_printf_common+0xc0>
 80029c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029c6:	4639      	mov	r1, r7
 80029c8:	4630      	mov	r0, r6
 80029ca:	47c0      	blx	r8
 80029cc:	3001      	adds	r0, #1
 80029ce:	d021      	beq.n	8002a14 <_printf_common+0xb4>
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	68e5      	ldr	r5, [r4, #12]
 80029d4:	f003 0306 	and.w	r3, r3, #6
 80029d8:	2b04      	cmp	r3, #4
 80029da:	bf18      	it	ne
 80029dc:	2500      	movne	r5, #0
 80029de:	f8d9 2000 	ldr.w	r2, [r9]
 80029e2:	f04f 0900 	mov.w	r9, #0
 80029e6:	bf08      	it	eq
 80029e8:	1aad      	subeq	r5, r5, r2
 80029ea:	68a3      	ldr	r3, [r4, #8]
 80029ec:	6922      	ldr	r2, [r4, #16]
 80029ee:	bf08      	it	eq
 80029f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bfc4      	itt	gt
 80029f8:	1a9b      	subgt	r3, r3, r2
 80029fa:	18ed      	addgt	r5, r5, r3
 80029fc:	341a      	adds	r4, #26
 80029fe:	454d      	cmp	r5, r9
 8002a00:	d11a      	bne.n	8002a38 <_printf_common+0xd8>
 8002a02:	2000      	movs	r0, #0
 8002a04:	e008      	b.n	8002a18 <_printf_common+0xb8>
 8002a06:	2301      	movs	r3, #1
 8002a08:	4652      	mov	r2, sl
 8002a0a:	4639      	mov	r1, r7
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	47c0      	blx	r8
 8002a10:	3001      	adds	r0, #1
 8002a12:	d103      	bne.n	8002a1c <_printf_common+0xbc>
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1c:	3501      	adds	r5, #1
 8002a1e:	e7c2      	b.n	80029a6 <_printf_common+0x46>
 8002a20:	2030      	movs	r0, #48	; 0x30
 8002a22:	18e1      	adds	r1, r4, r3
 8002a24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a2e:	4422      	add	r2, r4
 8002a30:	3302      	adds	r3, #2
 8002a32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a36:	e7c4      	b.n	80029c2 <_printf_common+0x62>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	4639      	mov	r1, r7
 8002a3e:	4630      	mov	r0, r6
 8002a40:	47c0      	blx	r8
 8002a42:	3001      	adds	r0, #1
 8002a44:	d0e6      	beq.n	8002a14 <_printf_common+0xb4>
 8002a46:	f109 0901 	add.w	r9, r9, #1
 8002a4a:	e7d8      	b.n	80029fe <_printf_common+0x9e>

08002a4c <_printf_i>:
 8002a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a54:	460c      	mov	r4, r1
 8002a56:	7e09      	ldrb	r1, [r1, #24]
 8002a58:	b085      	sub	sp, #20
 8002a5a:	296e      	cmp	r1, #110	; 0x6e
 8002a5c:	4617      	mov	r7, r2
 8002a5e:	4606      	mov	r6, r0
 8002a60:	4698      	mov	r8, r3
 8002a62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a64:	f000 80b3 	beq.w	8002bce <_printf_i+0x182>
 8002a68:	d822      	bhi.n	8002ab0 <_printf_i+0x64>
 8002a6a:	2963      	cmp	r1, #99	; 0x63
 8002a6c:	d036      	beq.n	8002adc <_printf_i+0x90>
 8002a6e:	d80a      	bhi.n	8002a86 <_printf_i+0x3a>
 8002a70:	2900      	cmp	r1, #0
 8002a72:	f000 80b9 	beq.w	8002be8 <_printf_i+0x19c>
 8002a76:	2958      	cmp	r1, #88	; 0x58
 8002a78:	f000 8083 	beq.w	8002b82 <_printf_i+0x136>
 8002a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a84:	e032      	b.n	8002aec <_printf_i+0xa0>
 8002a86:	2964      	cmp	r1, #100	; 0x64
 8002a88:	d001      	beq.n	8002a8e <_printf_i+0x42>
 8002a8a:	2969      	cmp	r1, #105	; 0x69
 8002a8c:	d1f6      	bne.n	8002a7c <_printf_i+0x30>
 8002a8e:	6820      	ldr	r0, [r4, #0]
 8002a90:	6813      	ldr	r3, [r2, #0]
 8002a92:	0605      	lsls	r5, r0, #24
 8002a94:	f103 0104 	add.w	r1, r3, #4
 8002a98:	d52a      	bpl.n	8002af0 <_printf_i+0xa4>
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6011      	str	r1, [r2, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da03      	bge.n	8002aaa <_printf_i+0x5e>
 8002aa2:	222d      	movs	r2, #45	; 0x2d
 8002aa4:	425b      	negs	r3, r3
 8002aa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002aaa:	486f      	ldr	r0, [pc, #444]	; (8002c68 <_printf_i+0x21c>)
 8002aac:	220a      	movs	r2, #10
 8002aae:	e039      	b.n	8002b24 <_printf_i+0xd8>
 8002ab0:	2973      	cmp	r1, #115	; 0x73
 8002ab2:	f000 809d 	beq.w	8002bf0 <_printf_i+0x1a4>
 8002ab6:	d808      	bhi.n	8002aca <_printf_i+0x7e>
 8002ab8:	296f      	cmp	r1, #111	; 0x6f
 8002aba:	d020      	beq.n	8002afe <_printf_i+0xb2>
 8002abc:	2970      	cmp	r1, #112	; 0x70
 8002abe:	d1dd      	bne.n	8002a7c <_printf_i+0x30>
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	f043 0320 	orr.w	r3, r3, #32
 8002ac6:	6023      	str	r3, [r4, #0]
 8002ac8:	e003      	b.n	8002ad2 <_printf_i+0x86>
 8002aca:	2975      	cmp	r1, #117	; 0x75
 8002acc:	d017      	beq.n	8002afe <_printf_i+0xb2>
 8002ace:	2978      	cmp	r1, #120	; 0x78
 8002ad0:	d1d4      	bne.n	8002a7c <_printf_i+0x30>
 8002ad2:	2378      	movs	r3, #120	; 0x78
 8002ad4:	4865      	ldr	r0, [pc, #404]	; (8002c6c <_printf_i+0x220>)
 8002ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ada:	e055      	b.n	8002b88 <_printf_i+0x13c>
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae2:	1d19      	adds	r1, r3, #4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6011      	str	r1, [r2, #0]
 8002ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aec:	2301      	movs	r3, #1
 8002aee:	e08c      	b.n	8002c0a <_printf_i+0x1be>
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002af6:	6011      	str	r1, [r2, #0]
 8002af8:	bf18      	it	ne
 8002afa:	b21b      	sxthne	r3, r3
 8002afc:	e7cf      	b.n	8002a9e <_printf_i+0x52>
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	6825      	ldr	r5, [r4, #0]
 8002b02:	1d18      	adds	r0, r3, #4
 8002b04:	6010      	str	r0, [r2, #0]
 8002b06:	0628      	lsls	r0, r5, #24
 8002b08:	d501      	bpl.n	8002b0e <_printf_i+0xc2>
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	e002      	b.n	8002b14 <_printf_i+0xc8>
 8002b0e:	0668      	lsls	r0, r5, #25
 8002b10:	d5fb      	bpl.n	8002b0a <_printf_i+0xbe>
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	296f      	cmp	r1, #111	; 0x6f
 8002b16:	bf14      	ite	ne
 8002b18:	220a      	movne	r2, #10
 8002b1a:	2208      	moveq	r2, #8
 8002b1c:	4852      	ldr	r0, [pc, #328]	; (8002c68 <_printf_i+0x21c>)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b24:	6865      	ldr	r5, [r4, #4]
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	60a5      	str	r5, [r4, #8]
 8002b2a:	f2c0 8095 	blt.w	8002c58 <_printf_i+0x20c>
 8002b2e:	6821      	ldr	r1, [r4, #0]
 8002b30:	f021 0104 	bic.w	r1, r1, #4
 8002b34:	6021      	str	r1, [r4, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d13d      	bne.n	8002bb6 <_printf_i+0x16a>
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	f040 808e 	bne.w	8002c5c <_printf_i+0x210>
 8002b40:	4665      	mov	r5, ip
 8002b42:	2a08      	cmp	r2, #8
 8002b44:	d10b      	bne.n	8002b5e <_printf_i+0x112>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	07db      	lsls	r3, r3, #31
 8002b4a:	d508      	bpl.n	8002b5e <_printf_i+0x112>
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	6862      	ldr	r2, [r4, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	bfde      	ittt	le
 8002b54:	2330      	movle	r3, #48	; 0x30
 8002b56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b5e:	ebac 0305 	sub.w	r3, ip, r5
 8002b62:	6123      	str	r3, [r4, #16]
 8002b64:	f8cd 8000 	str.w	r8, [sp]
 8002b68:	463b      	mov	r3, r7
 8002b6a:	aa03      	add	r2, sp, #12
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f7ff fef6 	bl	8002960 <_printf_common>
 8002b74:	3001      	adds	r0, #1
 8002b76:	d14d      	bne.n	8002c14 <_printf_i+0x1c8>
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	b005      	add	sp, #20
 8002b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b82:	4839      	ldr	r0, [pc, #228]	; (8002c68 <_printf_i+0x21c>)
 8002b84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b88:	6813      	ldr	r3, [r2, #0]
 8002b8a:	6821      	ldr	r1, [r4, #0]
 8002b8c:	1d1d      	adds	r5, r3, #4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6015      	str	r5, [r2, #0]
 8002b92:	060a      	lsls	r2, r1, #24
 8002b94:	d50b      	bpl.n	8002bae <_printf_i+0x162>
 8002b96:	07ca      	lsls	r2, r1, #31
 8002b98:	bf44      	itt	mi
 8002b9a:	f041 0120 	orrmi.w	r1, r1, #32
 8002b9e:	6021      	strmi	r1, [r4, #0]
 8002ba0:	b91b      	cbnz	r3, 8002baa <_printf_i+0x15e>
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	f022 0220 	bic.w	r2, r2, #32
 8002ba8:	6022      	str	r2, [r4, #0]
 8002baa:	2210      	movs	r2, #16
 8002bac:	e7b7      	b.n	8002b1e <_printf_i+0xd2>
 8002bae:	064d      	lsls	r5, r1, #25
 8002bb0:	bf48      	it	mi
 8002bb2:	b29b      	uxthmi	r3, r3
 8002bb4:	e7ef      	b.n	8002b96 <_printf_i+0x14a>
 8002bb6:	4665      	mov	r5, ip
 8002bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bbc:	fb02 3311 	mls	r3, r2, r1, r3
 8002bc0:	5cc3      	ldrb	r3, [r0, r3]
 8002bc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	2900      	cmp	r1, #0
 8002bca:	d1f5      	bne.n	8002bb8 <_printf_i+0x16c>
 8002bcc:	e7b9      	b.n	8002b42 <_printf_i+0xf6>
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	6825      	ldr	r5, [r4, #0]
 8002bd2:	1d18      	adds	r0, r3, #4
 8002bd4:	6961      	ldr	r1, [r4, #20]
 8002bd6:	6010      	str	r0, [r2, #0]
 8002bd8:	0628      	lsls	r0, r5, #24
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	d501      	bpl.n	8002be2 <_printf_i+0x196>
 8002bde:	6019      	str	r1, [r3, #0]
 8002be0:	e002      	b.n	8002be8 <_printf_i+0x19c>
 8002be2:	066a      	lsls	r2, r5, #25
 8002be4:	d5fb      	bpl.n	8002bde <_printf_i+0x192>
 8002be6:	8019      	strh	r1, [r3, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	4665      	mov	r5, ip
 8002bec:	6123      	str	r3, [r4, #16]
 8002bee:	e7b9      	b.n	8002b64 <_printf_i+0x118>
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	1d19      	adds	r1, r3, #4
 8002bf4:	6011      	str	r1, [r2, #0]
 8002bf6:	681d      	ldr	r5, [r3, #0]
 8002bf8:	6862      	ldr	r2, [r4, #4]
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 f837 	bl	8002c70 <memchr>
 8002c02:	b108      	cbz	r0, 8002c08 <_printf_i+0x1bc>
 8002c04:	1b40      	subs	r0, r0, r5
 8002c06:	6060      	str	r0, [r4, #4]
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	6123      	str	r3, [r4, #16]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c12:	e7a7      	b.n	8002b64 <_printf_i+0x118>
 8002c14:	6923      	ldr	r3, [r4, #16]
 8002c16:	462a      	mov	r2, r5
 8002c18:	4639      	mov	r1, r7
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	47c0      	blx	r8
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d0aa      	beq.n	8002b78 <_printf_i+0x12c>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	079b      	lsls	r3, r3, #30
 8002c26:	d413      	bmi.n	8002c50 <_printf_i+0x204>
 8002c28:	68e0      	ldr	r0, [r4, #12]
 8002c2a:	9b03      	ldr	r3, [sp, #12]
 8002c2c:	4298      	cmp	r0, r3
 8002c2e:	bfb8      	it	lt
 8002c30:	4618      	movlt	r0, r3
 8002c32:	e7a3      	b.n	8002b7c <_printf_i+0x130>
 8002c34:	2301      	movs	r3, #1
 8002c36:	464a      	mov	r2, r9
 8002c38:	4639      	mov	r1, r7
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	47c0      	blx	r8
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d09a      	beq.n	8002b78 <_printf_i+0x12c>
 8002c42:	3501      	adds	r5, #1
 8002c44:	68e3      	ldr	r3, [r4, #12]
 8002c46:	9a03      	ldr	r2, [sp, #12]
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	42ab      	cmp	r3, r5
 8002c4c:	dcf2      	bgt.n	8002c34 <_printf_i+0x1e8>
 8002c4e:	e7eb      	b.n	8002c28 <_printf_i+0x1dc>
 8002c50:	2500      	movs	r5, #0
 8002c52:	f104 0919 	add.w	r9, r4, #25
 8002c56:	e7f5      	b.n	8002c44 <_printf_i+0x1f8>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ac      	bne.n	8002bb6 <_printf_i+0x16a>
 8002c5c:	7803      	ldrb	r3, [r0, #0]
 8002c5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c66:	e76c      	b.n	8002b42 <_printf_i+0xf6>
 8002c68:	08003afd 	.word	0x08003afd
 8002c6c:	08003b0e 	.word	0x08003b0e

08002c70 <memchr>:
 8002c70:	b510      	push	{r4, lr}
 8002c72:	b2c9      	uxtb	r1, r1
 8002c74:	4402      	add	r2, r0
 8002c76:	4290      	cmp	r0, r2
 8002c78:	4603      	mov	r3, r0
 8002c7a:	d101      	bne.n	8002c80 <memchr+0x10>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e003      	b.n	8002c88 <memchr+0x18>
 8002c80:	781c      	ldrb	r4, [r3, #0]
 8002c82:	3001      	adds	r0, #1
 8002c84:	428c      	cmp	r4, r1
 8002c86:	d1f6      	bne.n	8002c76 <memchr+0x6>
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <memmove>:
 8002c8c:	4288      	cmp	r0, r1
 8002c8e:	b510      	push	{r4, lr}
 8002c90:	eb01 0302 	add.w	r3, r1, r2
 8002c94:	d807      	bhi.n	8002ca6 <memmove+0x1a>
 8002c96:	1e42      	subs	r2, r0, #1
 8002c98:	4299      	cmp	r1, r3
 8002c9a:	d00a      	beq.n	8002cb2 <memmove+0x26>
 8002c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ca0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002ca4:	e7f8      	b.n	8002c98 <memmove+0xc>
 8002ca6:	4283      	cmp	r3, r0
 8002ca8:	d9f5      	bls.n	8002c96 <memmove+0xa>
 8002caa:	1881      	adds	r1, r0, r2
 8002cac:	1ad2      	subs	r2, r2, r3
 8002cae:	42d3      	cmn	r3, r2
 8002cb0:	d100      	bne.n	8002cb4 <memmove+0x28>
 8002cb2:	bd10      	pop	{r4, pc}
 8002cb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002cbc:	e7f7      	b.n	8002cae <memmove+0x22>
	...

08002cc0 <_free_r>:
 8002cc0:	b538      	push	{r3, r4, r5, lr}
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	2900      	cmp	r1, #0
 8002cc6:	d043      	beq.n	8002d50 <_free_r+0x90>
 8002cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ccc:	1f0c      	subs	r4, r1, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bfb8      	it	lt
 8002cd2:	18e4      	addlt	r4, r4, r3
 8002cd4:	f000 f8d0 	bl	8002e78 <__malloc_lock>
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <_free_r+0x94>)
 8002cda:	6813      	ldr	r3, [r2, #0]
 8002cdc:	4610      	mov	r0, r2
 8002cde:	b933      	cbnz	r3, 8002cee <_free_r+0x2e>
 8002ce0:	6063      	str	r3, [r4, #4]
 8002ce2:	6014      	str	r4, [r2, #0]
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cea:	f000 b8c6 	b.w	8002e7a <__malloc_unlock>
 8002cee:	42a3      	cmp	r3, r4
 8002cf0:	d90b      	bls.n	8002d0a <_free_r+0x4a>
 8002cf2:	6821      	ldr	r1, [r4, #0]
 8002cf4:	1862      	adds	r2, r4, r1
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	bf01      	itttt	eq
 8002cfa:	681a      	ldreq	r2, [r3, #0]
 8002cfc:	685b      	ldreq	r3, [r3, #4]
 8002cfe:	1852      	addeq	r2, r2, r1
 8002d00:	6022      	streq	r2, [r4, #0]
 8002d02:	6063      	str	r3, [r4, #4]
 8002d04:	6004      	str	r4, [r0, #0]
 8002d06:	e7ed      	b.n	8002ce4 <_free_r+0x24>
 8002d08:	4613      	mov	r3, r2
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	b10a      	cbz	r2, 8002d12 <_free_r+0x52>
 8002d0e:	42a2      	cmp	r2, r4
 8002d10:	d9fa      	bls.n	8002d08 <_free_r+0x48>
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	1858      	adds	r0, r3, r1
 8002d16:	42a0      	cmp	r0, r4
 8002d18:	d10b      	bne.n	8002d32 <_free_r+0x72>
 8002d1a:	6820      	ldr	r0, [r4, #0]
 8002d1c:	4401      	add	r1, r0
 8002d1e:	1858      	adds	r0, r3, r1
 8002d20:	4282      	cmp	r2, r0
 8002d22:	6019      	str	r1, [r3, #0]
 8002d24:	d1de      	bne.n	8002ce4 <_free_r+0x24>
 8002d26:	6810      	ldr	r0, [r2, #0]
 8002d28:	6852      	ldr	r2, [r2, #4]
 8002d2a:	4401      	add	r1, r0
 8002d2c:	6019      	str	r1, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	e7d8      	b.n	8002ce4 <_free_r+0x24>
 8002d32:	d902      	bls.n	8002d3a <_free_r+0x7a>
 8002d34:	230c      	movs	r3, #12
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	e7d4      	b.n	8002ce4 <_free_r+0x24>
 8002d3a:	6820      	ldr	r0, [r4, #0]
 8002d3c:	1821      	adds	r1, r4, r0
 8002d3e:	428a      	cmp	r2, r1
 8002d40:	bf01      	itttt	eq
 8002d42:	6811      	ldreq	r1, [r2, #0]
 8002d44:	6852      	ldreq	r2, [r2, #4]
 8002d46:	1809      	addeq	r1, r1, r0
 8002d48:	6021      	streq	r1, [r4, #0]
 8002d4a:	6062      	str	r2, [r4, #4]
 8002d4c:	605c      	str	r4, [r3, #4]
 8002d4e:	e7c9      	b.n	8002ce4 <_free_r+0x24>
 8002d50:	bd38      	pop	{r3, r4, r5, pc}
 8002d52:	bf00      	nop
 8002d54:	2000009c 	.word	0x2000009c

08002d58 <_malloc_r>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	1ccd      	adds	r5, r1, #3
 8002d5c:	f025 0503 	bic.w	r5, r5, #3
 8002d60:	3508      	adds	r5, #8
 8002d62:	2d0c      	cmp	r5, #12
 8002d64:	bf38      	it	cc
 8002d66:	250c      	movcc	r5, #12
 8002d68:	2d00      	cmp	r5, #0
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	db01      	blt.n	8002d72 <_malloc_r+0x1a>
 8002d6e:	42a9      	cmp	r1, r5
 8002d70:	d903      	bls.n	8002d7a <_malloc_r+0x22>
 8002d72:	230c      	movs	r3, #12
 8002d74:	6033      	str	r3, [r6, #0]
 8002d76:	2000      	movs	r0, #0
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
 8002d7a:	f000 f87d 	bl	8002e78 <__malloc_lock>
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <_malloc_r+0xac>)
 8002d80:	6814      	ldr	r4, [r2, #0]
 8002d82:	4621      	mov	r1, r4
 8002d84:	b991      	cbnz	r1, 8002dac <_malloc_r+0x54>
 8002d86:	4c20      	ldr	r4, [pc, #128]	; (8002e08 <_malloc_r+0xb0>)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	b91b      	cbnz	r3, 8002d94 <_malloc_r+0x3c>
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	f000 f863 	bl	8002e58 <_sbrk_r>
 8002d92:	6020      	str	r0, [r4, #0]
 8002d94:	4629      	mov	r1, r5
 8002d96:	4630      	mov	r0, r6
 8002d98:	f000 f85e 	bl	8002e58 <_sbrk_r>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d124      	bne.n	8002dea <_malloc_r+0x92>
 8002da0:	230c      	movs	r3, #12
 8002da2:	4630      	mov	r0, r6
 8002da4:	6033      	str	r3, [r6, #0]
 8002da6:	f000 f868 	bl	8002e7a <__malloc_unlock>
 8002daa:	e7e4      	b.n	8002d76 <_malloc_r+0x1e>
 8002dac:	680b      	ldr	r3, [r1, #0]
 8002dae:	1b5b      	subs	r3, r3, r5
 8002db0:	d418      	bmi.n	8002de4 <_malloc_r+0x8c>
 8002db2:	2b0b      	cmp	r3, #11
 8002db4:	d90f      	bls.n	8002dd6 <_malloc_r+0x7e>
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	18cc      	adds	r4, r1, r3
 8002dba:	50cd      	str	r5, [r1, r3]
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f000 f85c 	bl	8002e7a <__malloc_unlock>
 8002dc2:	f104 000b 	add.w	r0, r4, #11
 8002dc6:	1d23      	adds	r3, r4, #4
 8002dc8:	f020 0007 	bic.w	r0, r0, #7
 8002dcc:	1ac3      	subs	r3, r0, r3
 8002dce:	d0d3      	beq.n	8002d78 <_malloc_r+0x20>
 8002dd0:	425a      	negs	r2, r3
 8002dd2:	50e2      	str	r2, [r4, r3]
 8002dd4:	e7d0      	b.n	8002d78 <_malloc_r+0x20>
 8002dd6:	684b      	ldr	r3, [r1, #4]
 8002dd8:	428c      	cmp	r4, r1
 8002dda:	bf16      	itet	ne
 8002ddc:	6063      	strne	r3, [r4, #4]
 8002dde:	6013      	streq	r3, [r2, #0]
 8002de0:	460c      	movne	r4, r1
 8002de2:	e7eb      	b.n	8002dbc <_malloc_r+0x64>
 8002de4:	460c      	mov	r4, r1
 8002de6:	6849      	ldr	r1, [r1, #4]
 8002de8:	e7cc      	b.n	8002d84 <_malloc_r+0x2c>
 8002dea:	1cc4      	adds	r4, r0, #3
 8002dec:	f024 0403 	bic.w	r4, r4, #3
 8002df0:	42a0      	cmp	r0, r4
 8002df2:	d005      	beq.n	8002e00 <_malloc_r+0xa8>
 8002df4:	1a21      	subs	r1, r4, r0
 8002df6:	4630      	mov	r0, r6
 8002df8:	f000 f82e 	bl	8002e58 <_sbrk_r>
 8002dfc:	3001      	adds	r0, #1
 8002dfe:	d0cf      	beq.n	8002da0 <_malloc_r+0x48>
 8002e00:	6025      	str	r5, [r4, #0]
 8002e02:	e7db      	b.n	8002dbc <_malloc_r+0x64>
 8002e04:	2000009c 	.word	0x2000009c
 8002e08:	200000a0 	.word	0x200000a0

08002e0c <_realloc_r>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	4607      	mov	r7, r0
 8002e10:	4614      	mov	r4, r2
 8002e12:	460e      	mov	r6, r1
 8002e14:	b921      	cbnz	r1, 8002e20 <_realloc_r+0x14>
 8002e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	f7ff bf9c 	b.w	8002d58 <_malloc_r>
 8002e20:	b922      	cbnz	r2, 8002e2c <_realloc_r+0x20>
 8002e22:	f7ff ff4d 	bl	8002cc0 <_free_r>
 8002e26:	4625      	mov	r5, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e2c:	f000 f826 	bl	8002e7c <_malloc_usable_size_r>
 8002e30:	42a0      	cmp	r0, r4
 8002e32:	d20f      	bcs.n	8002e54 <_realloc_r+0x48>
 8002e34:	4621      	mov	r1, r4
 8002e36:	4638      	mov	r0, r7
 8002e38:	f7ff ff8e 	bl	8002d58 <_malloc_r>
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d0f2      	beq.n	8002e28 <_realloc_r+0x1c>
 8002e42:	4631      	mov	r1, r6
 8002e44:	4622      	mov	r2, r4
 8002e46:	f7ff fc05 	bl	8002654 <memcpy>
 8002e4a:	4631      	mov	r1, r6
 8002e4c:	4638      	mov	r0, r7
 8002e4e:	f7ff ff37 	bl	8002cc0 <_free_r>
 8002e52:	e7e9      	b.n	8002e28 <_realloc_r+0x1c>
 8002e54:	4635      	mov	r5, r6
 8002e56:	e7e7      	b.n	8002e28 <_realloc_r+0x1c>

08002e58 <_sbrk_r>:
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4c05      	ldr	r4, [pc, #20]	; (8002e74 <_sbrk_r+0x1c>)
 8002e5e:	4605      	mov	r5, r0
 8002e60:	4608      	mov	r0, r1
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	f7fd ffe0 	bl	8000e28 <_sbrk>
 8002e68:	1c43      	adds	r3, r0, #1
 8002e6a:	d102      	bne.n	8002e72 <_sbrk_r+0x1a>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	b103      	cbz	r3, 8002e72 <_sbrk_r+0x1a>
 8002e70:	602b      	str	r3, [r5, #0]
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
 8002e74:	20000d44 	.word	0x20000d44

08002e78 <__malloc_lock>:
 8002e78:	4770      	bx	lr

08002e7a <__malloc_unlock>:
 8002e7a:	4770      	bx	lr

08002e7c <_malloc_usable_size_r>:
 8002e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e80:	1f18      	subs	r0, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfbc      	itt	lt
 8002e86:	580b      	ldrlt	r3, [r1, r0]
 8002e88:	18c0      	addlt	r0, r0, r3
 8002e8a:	4770      	bx	lr

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
