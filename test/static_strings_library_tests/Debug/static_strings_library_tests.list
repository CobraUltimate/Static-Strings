
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004270  08004270  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004270  08004270  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004270  08004270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  20000070  080042e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  080042e8  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008319  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001687  00000000  00000000  000283b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000660  00000000  00000000  00029a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  0002a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d83  00000000  00000000  0002a648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000618b  00000000  00000000  0003e3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b087  00000000  00000000  00044556  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af5dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bb0  00000000  00000000  000af658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035b4 	.word	0x080035b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035b4 	.word	0x080035b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	f5ad 5dd2 	sub.w	sp, sp, #6720	; 0x1a40
 8000152:	b087      	sub	sp, #28
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f001 f98f 	bl	8001478 <HAL_Init>

  /* USER CODE BEGIN Init */
  static_strings_init();
 800015a:	f002 fa53 	bl	8002604 <static_strings_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015e:	f000 ffbb 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000162:	f001 f829 	bl	80011b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000166:	f000 fffd 	bl	8001164 <MX_USART1_UART_Init>

  //test 1

  uint8_t very_long_string[700];
  uint16_t i;
  for(i = 0; i < 699; i++){
 800016a:	2300      	movs	r3, #0
 800016c:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000170:	f102 0216 	add.w	r2, r2, #22
 8000174:	8013      	strh	r3, [r2, #0]
 8000176:	e013      	b.n	80001a0 <main+0x54>
	  very_long_string[i] = 'a';
 8000178:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800017c:	f103 0316 	add.w	r3, r3, #22
 8000180:	881b      	ldrh	r3, [r3, #0]
 8000182:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8000186:	2161      	movs	r1, #97	; 0x61
 8000188:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 699; i++){
 800018a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800018e:	f103 0316 	add.w	r3, r3, #22
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	3301      	adds	r3, #1
 8000196:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 800019a:	f102 0216 	add.w	r2, r2, #22
 800019e:	8013      	strh	r3, [r2, #0]
 80001a0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80001a4:	f103 0316 	add.w	r3, r3, #22
 80001a8:	881b      	ldrh	r3, [r3, #0]
 80001aa:	f240 22ba 	movw	r2, #698	; 0x2ba
 80001ae:	4293      	cmp	r3, r2
 80001b0:	d9e2      	bls.n	8000178 <main+0x2c>
  }
  very_long_string[699] = '\0';
 80001b2:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 80001b6:	2200      	movs	r2, #0
 80001b8:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
  static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 80001bc:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 fb93 	bl	80028ec <static_strings_save>
 80001c6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80001ca:	f103 030c 	add.w	r3, r3, #12
 80001ce:	6018      	str	r0, [r3, #0]
  char length[6];
  sprintf(length,"%04d",very_long_string_descriptor->length);
 80001d0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80001d4:	f103 030c 	add.w	r3, r3, #12
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	889b      	ldrh	r3, [r3, #4]
 80001dc:	461a      	mov	r2, r3
 80001de:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80001e2:	f103 0318 	add.w	r3, r3, #24
 80001e6:	49dc      	ldr	r1, [pc, #880]	; (8000558 <main+0x40c>)
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 fddb 	bl	8002da4 <siprintf>
  length[4] = '\r';
 80001ee:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80001f2:	f103 0318 	add.w	r3, r3, #24
 80001f6:	220d      	movs	r2, #13
 80001f8:	711a      	strb	r2, [r3, #4]
  length[5] = '\n';
 80001fa:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80001fe:	f103 0318 	add.w	r3, r3, #24
 8000202:	220a      	movs	r2, #10
 8000204:	715a      	strb	r2, [r3, #5]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000206:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 800020a:	f101 0118 	add.w	r1, r1, #24
 800020e:	f04f 33ff 	mov.w	r3, #4294967295
 8000212:	2206      	movs	r2, #6
 8000214:	48d1      	ldr	r0, [pc, #836]	; (800055c <main+0x410>)
 8000216:	f002 f838 	bl	800228a <HAL_UART_Transmit>
  char type[3];
  type[0] = very_long_string_descriptor->type + 48;
 800021a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800021e:	f103 030c 	add.w	r3, r3, #12
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	799b      	ldrb	r3, [r3, #6]
 8000226:	3330      	adds	r3, #48	; 0x30
 8000228:	b2da      	uxtb	r2, r3
 800022a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800022e:	f103 0314 	add.w	r3, r3, #20
 8000232:	701a      	strb	r2, [r3, #0]
  type[1] = '\r';
 8000234:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000238:	f103 0314 	add.w	r3, r3, #20
 800023c:	220d      	movs	r2, #13
 800023e:	705a      	strb	r2, [r3, #1]
  type[2] = '\n';
 8000240:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000244:	f103 0314 	add.w	r3, r3, #20
 8000248:	220a      	movs	r2, #10
 800024a:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 800024c:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000250:	f101 0114 	add.w	r1, r1, #20
 8000254:	f04f 33ff 	mov.w	r3, #4294967295
 8000258:	2203      	movs	r2, #3
 800025a:	48c0      	ldr	r0, [pc, #768]	; (800055c <main+0x410>)
 800025c:	f002 f815 	bl	800228a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000260:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000264:	f103 030c 	add.w	r3, r3, #12
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	6819      	ldr	r1, [r3, #0]
 800026c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000270:	f103 030c 	add.w	r3, r3, #12
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	889a      	ldrh	r2, [r3, #4]
 8000278:	f04f 33ff 	mov.w	r3, #4294967295
 800027c:	48b7      	ldr	r0, [pc, #732]	; (800055c <main+0x410>)
 800027e:	f002 f804 	bl	800228a <HAL_UART_Transmit>

  static_strings_deallocate(very_long_string_descriptor);
 8000282:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000286:	f103 030c 	add.w	r3, r3, #12
 800028a:	6818      	ldr	r0, [r3, #0]
 800028c:	f002 fb72 	bl	8002974 <static_strings_deallocate>

  uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000290:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000294:	4ab2      	ldr	r2, [pc, #712]	; (8000560 <main+0x414>)
 8000296:	4618      	mov	r0, r3
 8000298:	4611      	mov	r1, r2
 800029a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800029e:	461a      	mov	r2, r3
 80002a0:	f002 fd6c 	bl	8002d7c <memcpy>
  uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 80002a4:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80002a8:	f103 0308 	add.w	r3, r3, #8
 80002ac:	4aad      	ldr	r2, [pc, #692]	; (8000564 <main+0x418>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	4611      	mov	r1, r2
 80002b2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80002b6:	461a      	mov	r2, r3
 80002b8:	f002 fd60 	bl	8002d7c <memcpy>
  uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 80002bc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80002c0:	f103 0318 	add.w	r3, r3, #24
 80002c4:	4aa8      	ldr	r2, [pc, #672]	; (8000568 <main+0x41c>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	4611      	mov	r1, r2
 80002ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80002ce:	461a      	mov	r2, r3
 80002d0:	f002 fd54 	bl	8002d7c <memcpy>
  uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 80002d4:	f607 74a4 	addw	r4, r7, #4004	; 0xfa4
 80002d8:	4ba4      	ldr	r3, [pc, #656]	; (800056c <main+0x420>)
 80002da:	4620      	mov	r0, r4
 80002dc:	4619      	mov	r1, r3
 80002de:	f240 1361 	movw	r3, #353	; 0x161
 80002e2:	461a      	mov	r2, r3
 80002e4:	f002 fd4a 	bl	8002d7c <memcpy>
 80002e8:	f204 1361 	addw	r3, r4, #353	; 0x161
 80002ec:	2293      	movs	r2, #147	; 0x93
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f002 fd4e 	bl	8002d92 <memset>
  uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 80002f6:	f607 34bc 	addw	r4, r7, #3004	; 0xbbc
 80002fa:	4b9d      	ldr	r3, [pc, #628]	; (8000570 <main+0x424>)
 80002fc:	4620      	mov	r0, r4
 80002fe:	4619      	mov	r1, r3
 8000300:	f240 235b 	movw	r3, #603	; 0x25b
 8000304:	461a      	mov	r2, r3
 8000306:	f002 fd39 	bl	8002d7c <memcpy>
 800030a:	f204 235b 	addw	r3, r4, #603	; 0x25b
 800030e:	f240 128d 	movw	r2, #397	; 0x18d
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f002 fd3c 	bl	8002d92 <memset>

  static_strings_string_descriptor *string_descriptor;

  //test 2

  string_descriptor = static_strings_save(test_very_long_string);
 800031a:	f607 33bc 	addw	r3, r7, #3004	; 0xbbc
 800031e:	4618      	mov	r0, r3
 8000320:	f002 fae4 	bl	80028ec <static_strings_save>
 8000324:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000328:	f103 0308 	add.w	r3, r3, #8
 800032c:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 800032e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000332:	f103 0308 	add.w	r3, r3, #8
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	889b      	ldrh	r3, [r3, #4]
 800033a:	461a      	mov	r2, r3
 800033c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000340:	f103 0318 	add.w	r3, r3, #24
 8000344:	4984      	ldr	r1, [pc, #528]	; (8000558 <main+0x40c>)
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fd2c 	bl	8002da4 <siprintf>
  length[4] = '\r';
 800034c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000350:	f103 0318 	add.w	r3, r3, #24
 8000354:	220d      	movs	r2, #13
 8000356:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000358:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 800035c:	f101 0118 	add.w	r1, r1, #24
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	2206      	movs	r2, #6
 8000366:	487d      	ldr	r0, [pc, #500]	; (800055c <main+0x410>)
 8000368:	f001 ff8f 	bl	800228a <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 800036c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000370:	f103 0308 	add.w	r3, r3, #8
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	799b      	ldrb	r3, [r3, #6]
 8000378:	3330      	adds	r3, #48	; 0x30
 800037a:	b2da      	uxtb	r2, r3
 800037c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000380:	f103 0314 	add.w	r3, r3, #20
 8000384:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000386:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 800038a:	f101 0114 	add.w	r1, r1, #20
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	2203      	movs	r2, #3
 8000394:	4871      	ldr	r0, [pc, #452]	; (800055c <main+0x410>)
 8000396:	f001 ff78 	bl	800228a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800039a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800039e:	f103 0308 	add.w	r3, r3, #8
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	6819      	ldr	r1, [r3, #0]
 80003a6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80003aa:	f103 0308 	add.w	r3, r3, #8
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	889a      	ldrh	r2, [r3, #4]
 80003b2:	f04f 33ff 	mov.w	r3, #4294967295
 80003b6:	4869      	ldr	r0, [pc, #420]	; (800055c <main+0x410>)
 80003b8:	f001 ff67 	bl	800228a <HAL_UART_Transmit>

  //test 3

  string_descriptor = static_strings_save(test_long_string);
 80003bc:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 fa93 	bl	80028ec <static_strings_save>
 80003c6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80003ca:	f103 0308 	add.w	r3, r3, #8
 80003ce:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 80003d0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80003d4:	f103 0308 	add.w	r3, r3, #8
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	889b      	ldrh	r3, [r3, #4]
 80003dc:	461a      	mov	r2, r3
 80003de:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80003e2:	f103 0318 	add.w	r3, r3, #24
 80003e6:	495c      	ldr	r1, [pc, #368]	; (8000558 <main+0x40c>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 fcdb 	bl	8002da4 <siprintf>
  length[4] = '\r';
 80003ee:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80003f2:	f103 0318 	add.w	r3, r3, #24
 80003f6:	220d      	movs	r2, #13
 80003f8:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 80003fa:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80003fe:	f101 0118 	add.w	r1, r1, #24
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
 8000406:	2206      	movs	r2, #6
 8000408:	4854      	ldr	r0, [pc, #336]	; (800055c <main+0x410>)
 800040a:	f001 ff3e 	bl	800228a <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 800040e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000412:	f103 0308 	add.w	r3, r3, #8
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	799b      	ldrb	r3, [r3, #6]
 800041a:	3330      	adds	r3, #48	; 0x30
 800041c:	b2da      	uxtb	r2, r3
 800041e:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000422:	f103 0314 	add.w	r3, r3, #20
 8000426:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000428:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 800042c:	f101 0114 	add.w	r1, r1, #20
 8000430:	f04f 33ff 	mov.w	r3, #4294967295
 8000434:	2203      	movs	r2, #3
 8000436:	4849      	ldr	r0, [pc, #292]	; (800055c <main+0x410>)
 8000438:	f001 ff27 	bl	800228a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800043c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000440:	f103 0308 	add.w	r3, r3, #8
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6819      	ldr	r1, [r3, #0]
 8000448:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800044c:	f103 0308 	add.w	r3, r3, #8
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	889a      	ldrh	r2, [r3, #4]
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
 8000458:	4840      	ldr	r0, [pc, #256]	; (800055c <main+0x410>)
 800045a:	f001 ff16 	bl	800228a <HAL_UART_Transmit>

  //test 4,5

  for(i = 0; i < 2; i++){
 800045e:	2300      	movs	r3, #0
 8000460:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000464:	f102 0216 	add.w	r2, r2, #22
 8000468:	8013      	strh	r3, [r2, #0]
 800046a:	e066      	b.n	800053a <main+0x3ee>
  	  string_descriptor = static_strings_save(test_medium_strings[i]);
 800046c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000470:	f103 0316 	add.w	r3, r3, #22
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800047a:	f102 0218 	add.w	r2, r2, #24
 800047e:	21c8      	movs	r1, #200	; 0xc8
 8000480:	fb01 f303 	mul.w	r3, r1, r3
 8000484:	4413      	add	r3, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f002 fa30 	bl	80028ec <static_strings_save>
 800048c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000490:	f103 0308 	add.w	r3, r3, #8
 8000494:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000496:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800049a:	f103 0308 	add.w	r3, r3, #8
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	889b      	ldrh	r3, [r3, #4]
 80004a2:	461a      	mov	r2, r3
 80004a4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80004a8:	f103 0318 	add.w	r3, r3, #24
 80004ac:	492a      	ldr	r1, [pc, #168]	; (8000558 <main+0x40c>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fc78 	bl	8002da4 <siprintf>
  	  length[4] = '\r';
 80004b4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80004b8:	f103 0318 	add.w	r3, r3, #24
 80004bc:	220d      	movs	r2, #13
 80004be:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 80004c0:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80004c4:	f101 0118 	add.w	r1, r1, #24
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	2206      	movs	r2, #6
 80004ce:	4823      	ldr	r0, [pc, #140]	; (800055c <main+0x410>)
 80004d0:	f001 fedb 	bl	800228a <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 80004d4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80004d8:	f103 0308 	add.w	r3, r3, #8
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	799b      	ldrb	r3, [r3, #6]
 80004e0:	3330      	adds	r3, #48	; 0x30
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80004e8:	f103 0314 	add.w	r3, r3, #20
 80004ec:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80004ee:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80004f2:	f101 0114 	add.w	r1, r1, #20
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	2203      	movs	r2, #3
 80004fc:	4817      	ldr	r0, [pc, #92]	; (800055c <main+0x410>)
 80004fe:	f001 fec4 	bl	800228a <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000502:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000506:	f103 0308 	add.w	r3, r3, #8
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6819      	ldr	r1, [r3, #0]
 800050e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000512:	f103 0308 	add.w	r3, r3, #8
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	889a      	ldrh	r2, [r3, #4]
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	480f      	ldr	r0, [pc, #60]	; (800055c <main+0x410>)
 8000520:	f001 feb3 	bl	800228a <HAL_UART_Transmit>
  for(i = 0; i < 2; i++){
 8000524:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000528:	f103 0316 	add.w	r3, r3, #22
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	3301      	adds	r3, #1
 8000530:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000534:	f102 0216 	add.w	r2, r2, #22
 8000538:	8013      	strh	r3, [r2, #0]
 800053a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800053e:	f103 0316 	add.w	r3, r3, #22
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d991      	bls.n	800046c <main+0x320>
  }

  //test 6-11

  for(i = 0; i < 6; i++){
 8000548:	2300      	movs	r3, #0
 800054a:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 800054e:	f102 0216 	add.w	r2, r2, #22
 8000552:	8013      	strh	r3, [r2, #0]
 8000554:	e075      	b.n	8000642 <main+0x4f6>
 8000556:	bf00      	nop
 8000558:	080035cc 	.word	0x080035cc
 800055c:	20000b38 	.word	0x20000b38
 8000560:	080035e4 	.word	0x080035e4
 8000564:	080037d8 	.word	0x080037d8
 8000568:	08003a30 	.word	0x08003a30
 800056c:	08003bc0 	.word	0x08003bc0
 8000570:	08003db4 	.word	0x08003db4
  	  string_descriptor = static_strings_save(test_short_strings[i]);
 8000574:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000578:	f103 0316 	add.w	r3, r3, #22
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8000582:	f102 0208 	add.w	r2, r2, #8
 8000586:	2164      	movs	r1, #100	; 0x64
 8000588:	fb01 f303 	mul.w	r3, r1, r3
 800058c:	4413      	add	r3, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f9ac 	bl	80028ec <static_strings_save>
 8000594:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000598:	f103 0308 	add.w	r3, r3, #8
 800059c:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 800059e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80005a2:	f103 0308 	add.w	r3, r3, #8
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	889b      	ldrh	r3, [r3, #4]
 80005aa:	461a      	mov	r2, r3
 80005ac:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80005b0:	f103 0318 	add.w	r3, r3, #24
 80005b4:	49be      	ldr	r1, [pc, #760]	; (80008b0 <main+0x764>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fbf4 	bl	8002da4 <siprintf>
  	  length[4] = '\r';
 80005bc:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80005c0:	f103 0318 	add.w	r3, r3, #24
 80005c4:	220d      	movs	r2, #13
 80005c6:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 80005c8:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80005cc:	f101 0118 	add.w	r1, r1, #24
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2206      	movs	r2, #6
 80005d6:	48b7      	ldr	r0, [pc, #732]	; (80008b4 <main+0x768>)
 80005d8:	f001 fe57 	bl	800228a <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 80005dc:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80005e0:	f103 0308 	add.w	r3, r3, #8
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	3330      	adds	r3, #48	; 0x30
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80005f0:	f103 0314 	add.w	r3, r3, #20
 80005f4:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80005f6:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80005fa:	f101 0114 	add.w	r1, r1, #20
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2203      	movs	r2, #3
 8000604:	48ab      	ldr	r0, [pc, #684]	; (80008b4 <main+0x768>)
 8000606:	f001 fe40 	bl	800228a <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800060a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800060e:	f103 0308 	add.w	r3, r3, #8
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6819      	ldr	r1, [r3, #0]
 8000616:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800061a:	f103 0308 	add.w	r3, r3, #8
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	889a      	ldrh	r2, [r3, #4]
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	48a3      	ldr	r0, [pc, #652]	; (80008b4 <main+0x768>)
 8000628:	f001 fe2f 	bl	800228a <HAL_UART_Transmit>
  for(i = 0; i < 6; i++){
 800062c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000630:	f103 0316 	add.w	r3, r3, #22
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 800063c:	f102 0216 	add.w	r2, r2, #22
 8000640:	8013      	strh	r3, [r2, #0]
 8000642:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000646:	f103 0316 	add.w	r3, r3, #22
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	2b05      	cmp	r3, #5
 800064e:	d991      	bls.n	8000574 <main+0x428>
  }

  //test 12-21

  static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000650:	2300      	movs	r3, #0
 8000652:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000656:	f102 0210 	add.w	r2, r2, #16
 800065a:	6013      	str	r3, [r2, #0]
  for(i = 0; i < 10; i++){
 800065c:	2300      	movs	r3, #0
 800065e:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000662:	f102 0216 	add.w	r2, r2, #22
 8000666:	8013      	strh	r3, [r2, #0]
 8000668:	e075      	b.n	8000756 <main+0x60a>
	  string_descriptor = static_strings_save(test_very_short_strings[i]);
 800066a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800066e:	f103 0316 	add.w	r3, r3, #22
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	f507 52ac 	add.w	r2, r7, #5504	; 0x1580
 8000678:	2132      	movs	r1, #50	; 0x32
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	4413      	add	r3, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f933 	bl	80028ec <static_strings_save>
 8000686:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800068a:	f103 0308 	add.w	r3, r3, #8
 800068e:	6018      	str	r0, [r3, #0]
	  if(i == 6){
 8000690:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000694:	f103 0316 	add.w	r3, r3, #22
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	2b06      	cmp	r3, #6
 800069c:	d109      	bne.n	80006b2 <main+0x566>
		  string_descriptor_deallocate = string_descriptor;
 800069e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80006a2:	f103 0308 	add.w	r3, r3, #8
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 80006ac:	f102 0210 	add.w	r2, r2, #16
 80006b0:	6013      	str	r3, [r2, #0]
	  }
	  sprintf(length,"%04d",string_descriptor->length);
 80006b2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80006b6:	f103 0308 	add.w	r3, r3, #8
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	889b      	ldrh	r3, [r3, #4]
 80006be:	461a      	mov	r2, r3
 80006c0:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80006c4:	f103 0318 	add.w	r3, r3, #24
 80006c8:	4979      	ldr	r1, [pc, #484]	; (80008b0 <main+0x764>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fb6a 	bl	8002da4 <siprintf>
	  length[4] = '\r';
 80006d0:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80006d4:	f103 0318 	add.w	r3, r3, #24
 80006d8:	220d      	movs	r2, #13
 80006da:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 80006dc:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80006e0:	f101 0118 	add.w	r1, r1, #24
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	2206      	movs	r2, #6
 80006ea:	4872      	ldr	r0, [pc, #456]	; (80008b4 <main+0x768>)
 80006ec:	f001 fdcd 	bl	800228a <HAL_UART_Transmit>
	  type[0] = string_descriptor->type + 48;
 80006f0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80006f4:	f103 0308 	add.w	r3, r3, #8
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	799b      	ldrb	r3, [r3, #6]
 80006fc:	3330      	adds	r3, #48	; 0x30
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000704:	f103 0314 	add.w	r3, r3, #20
 8000708:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 800070a:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 800070e:	f101 0114 	add.w	r1, r1, #20
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2203      	movs	r2, #3
 8000718:	4866      	ldr	r0, [pc, #408]	; (80008b4 <main+0x768>)
 800071a:	f001 fdb6 	bl	800228a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800071e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000722:	f103 0308 	add.w	r3, r3, #8
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800072e:	f103 0308 	add.w	r3, r3, #8
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	889a      	ldrh	r2, [r3, #4]
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	485e      	ldr	r0, [pc, #376]	; (80008b4 <main+0x768>)
 800073c:	f001 fda5 	bl	800228a <HAL_UART_Transmit>
  for(i = 0; i < 10; i++){
 8000740:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000744:	f103 0316 	add.w	r3, r3, #22
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000750:	f102 0216 	add.w	r2, r2, #22
 8000754:	8013      	strh	r3, [r2, #0]
 8000756:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800075a:	f103 0316 	add.w	r3, r3, #22
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	2b09      	cmp	r3, #9
 8000762:	d982      	bls.n	800066a <main+0x51e>
  }

  //test 22

  static_strings_deallocate(string_descriptor_deallocate);
 8000764:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000768:	f103 0310 	add.w	r3, r3, #16
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	f002 f901 	bl	8002974 <static_strings_deallocate>
  uint8_t test_short_string[50] = "reallocate_test\r\n";
 8000772:	f607 3688 	addw	r6, r7, #2952	; 0xb88
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <main+0x76c>)
 8000778:	4634      	mov	r4, r6
 800077a:	461d      	mov	r5, r3
 800077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000780:	682b      	ldr	r3, [r5, #0]
 8000782:	8023      	strh	r3, [r4, #0]
 8000784:	f106 0312 	add.w	r3, r6, #18
 8000788:	2220      	movs	r2, #32
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fb00 	bl	8002d92 <memset>
  string_descriptor = static_strings_save(test_short_string);
 8000792:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000796:	4618      	mov	r0, r3
 8000798:	f002 f8a8 	bl	80028ec <static_strings_save>
 800079c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80007a0:	f103 0308 	add.w	r3, r3, #8
 80007a4:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 80007a6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80007aa:	f103 0308 	add.w	r3, r3, #8
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	889b      	ldrh	r3, [r3, #4]
 80007b2:	461a      	mov	r2, r3
 80007b4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80007b8:	f103 0318 	add.w	r3, r3, #24
 80007bc:	493c      	ldr	r1, [pc, #240]	; (80008b0 <main+0x764>)
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 faf0 	bl	8002da4 <siprintf>
  length[4] = '\r';
 80007c4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80007c8:	f103 0318 	add.w	r3, r3, #24
 80007cc:	220d      	movs	r2, #13
 80007ce:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 80007d0:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80007d4:	f101 0118 	add.w	r1, r1, #24
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	2206      	movs	r2, #6
 80007de:	4835      	ldr	r0, [pc, #212]	; (80008b4 <main+0x768>)
 80007e0:	f001 fd53 	bl	800228a <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 80007e4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80007e8:	f103 0308 	add.w	r3, r3, #8
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	799b      	ldrb	r3, [r3, #6]
 80007f0:	3330      	adds	r3, #48	; 0x30
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80007f8:	f103 0314 	add.w	r3, r3, #20
 80007fc:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80007fe:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000802:	f101 0114 	add.w	r1, r1, #20
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	2203      	movs	r2, #3
 800080c:	4829      	ldr	r0, [pc, #164]	; (80008b4 <main+0x768>)
 800080e:	f001 fd3c 	bl	800228a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000812:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000816:	f103 0308 	add.w	r3, r3, #8
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6819      	ldr	r1, [r3, #0]
 800081e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000822:	f103 0308 	add.w	r3, r3, #8
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	889a      	ldrh	r2, [r3, #4]
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4821      	ldr	r0, [pc, #132]	; (80008b4 <main+0x768>)
 8000830:	f001 fd2b 	bl	800228a <HAL_UART_Transmit>

  //test 23

  uint8_t pointer[12];
  sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 8000834:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 8000838:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 800083c:	f102 0210 	add.w	r2, r2, #16
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	491e      	ldr	r1, [pc, #120]	; (80008bc <main+0x770>)
 8000844:	4618      	mov	r0, r3
 8000846:	f002 faad 	bl	8002da4 <siprintf>
  pointer[10] = '\r';
 800084a:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 800084e:	220d      	movs	r2, #13
 8000850:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 8000852:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 8000856:	220a      	movs	r2, #10
 8000858:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 800085a:	f607 317c 	addw	r1, r7, #2940	; 0xb7c
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	220c      	movs	r2, #12
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <main+0x768>)
 8000866:	f001 fd10 	bl	800228a <HAL_UART_Transmit>

  sprintf((char *)pointer,"%10p",string_descriptor);
 800086a:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 800086e:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000872:	f102 0208 	add.w	r2, r2, #8
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	4910      	ldr	r1, [pc, #64]	; (80008bc <main+0x770>)
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fa92 	bl	8002da4 <siprintf>
  pointer[10] = '\r';
 8000880:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 8000884:	220d      	movs	r2, #13
 8000886:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 8000888:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 800088c:	220a      	movs	r2, #10
 800088e:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 8000890:	f607 317c 	addw	r1, r7, #2940	; 0xb7c
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	220c      	movs	r2, #12
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <main+0x768>)
 800089c:	f001 fcf5 	bl	800228a <HAL_UART_Transmit>
  uint8_t error_code_char;

  //test 24

  uint8_t no_memory_string[800];
  for(i = 0; i < 798; i++){
 80008a0:	2300      	movs	r3, #0
 80008a2:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 80008a6:	f102 0216 	add.w	r2, r2, #22
 80008aa:	8013      	strh	r3, [r2, #0]
 80008ac:	e01c      	b.n	80008e8 <main+0x79c>
 80008ae:	bf00      	nop
 80008b0:	080035cc 	.word	0x080035cc
 80008b4:	20000b38 	.word	0x20000b38
 80008b8:	0800419c 	.word	0x0800419c
 80008bc:	080035d4 	.word	0x080035d4
	  no_memory_string[i] = 'a';
 80008c0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80008c4:	f103 0316 	add.w	r3, r3, #22
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	f607 0258 	addw	r2, r7, #2136	; 0x858
 80008ce:	2161      	movs	r1, #97	; 0x61
 80008d0:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 798; i++){
 80008d2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80008d6:	f103 0316 	add.w	r3, r3, #22
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 80008e2:	f102 0216 	add.w	r2, r2, #22
 80008e6:	8013      	strh	r3, [r2, #0]
 80008e8:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80008ec:	f103 0316 	add.w	r3, r3, #22
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	f240 321d 	movw	r2, #797	; 0x31d
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d9e2      	bls.n	80008c0 <main+0x774>
  }
  no_memory_string[798] = '\r';
 80008fa:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80008fe:	220d      	movs	r2, #13
 8000900:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  no_memory_string[799] = '\n';
 8000904:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8000908:	220a      	movs	r2, #10
 800090a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  string_descriptor = static_strings_save(no_memory_string);
 800090e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8000912:	4618      	mov	r0, r3
 8000914:	f001 ffea 	bl	80028ec <static_strings_save>
 8000918:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800091c:	f103 0308 	add.w	r3, r3, #8
 8000920:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8000922:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000926:	f103 0308 	add.w	r3, r3, #8
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d107      	bne.n	8000940 <main+0x7f4>
	  error_code_char = static_strings_error_code + 48;
 8000930:	4bc5      	ldr	r3, [pc, #788]	; (8000c48 <main+0xafc>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3330      	adds	r3, #48	; 0x30
 8000936:	b2da      	uxtb	r2, r3
 8000938:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e003      	b.n	8000948 <main+0x7fc>
  }
  else{
	  error_code_char = '3';
 8000940:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8000944:	2233      	movs	r2, #51	; 0x33
 8000946:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8000948:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	2201      	movs	r2, #1
 8000952:	48be      	ldr	r0, [pc, #760]	; (8000c4c <main+0xb00>)
 8000954:	f001 fc99 	bl	800228a <HAL_UART_Transmit>

  //test 25

  uint8_t unallocable_invalid_string[1200];
  for(i = 0; i < 1198; i++){
 8000958:	2300      	movs	r3, #0
 800095a:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 800095e:	f102 0216 	add.w	r2, r2, #22
 8000962:	8013      	strh	r3, [r2, #0]
 8000964:	e014      	b.n	8000990 <main+0x844>
	  unallocable_invalid_string[i] = 'a';
 8000966:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800096a:	f103 0316 	add.w	r3, r3, #22
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000974:	3b10      	subs	r3, #16
 8000976:	2161      	movs	r1, #97	; 0x61
 8000978:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 1198; i++){
 800097a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800097e:	f103 0316 	add.w	r3, r3, #22
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 800098a:	f102 0216 	add.w	r2, r2, #22
 800098e:	8013      	strh	r3, [r2, #0]
 8000990:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000994:	f103 0316 	add.w	r3, r3, #22
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	f240 42ad 	movw	r2, #1197	; 0x4ad
 800099e:	4293      	cmp	r3, r2
 80009a0:	d9e1      	bls.n	8000966 <main+0x81a>
  }
  unallocable_invalid_string[1198] = '\r';
 80009a2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80009a6:	3b10      	subs	r3, #16
 80009a8:	220d      	movs	r2, #13
 80009aa:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
  unallocable_invalid_string[1199] = '\n';
 80009ae:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80009b2:	3b10      	subs	r3, #16
 80009b4:	220a      	movs	r2, #10
 80009b6:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
  string_descriptor = static_strings_save(unallocable_invalid_string);
 80009ba:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80009be:	3b10      	subs	r3, #16
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 ff93 	bl	80028ec <static_strings_save>
 80009c6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80009ca:	f103 0308 	add.w	r3, r3, #8
 80009ce:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 80009d0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80009d4:	f103 0308 	add.w	r3, r3, #8
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d107      	bne.n	80009ee <main+0x8a2>
	  error_code_char = static_strings_error_code + 48;
 80009de:	4b9a      	ldr	r3, [pc, #616]	; (8000c48 <main+0xafc>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	3330      	adds	r3, #48	; 0x30
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e003      	b.n	80009f6 <main+0x8aa>
  }
  else{
	  error_code_char = '4';
 80009ee:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 80009f2:	2234      	movs	r2, #52	; 0x34
 80009f4:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80009f6:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	2201      	movs	r2, #1
 8000a00:	4892      	ldr	r0, [pc, #584]	; (8000c4c <main+0xb00>)
 8000a02:	f001 fc42 	bl	800228a <HAL_UART_Transmit>

  //test 26

  uint8_t no_line_end_invalid_string[800];
  for(i = 0; i < 800; i++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000a0c:	f102 0216 	add.w	r2, r2, #22
 8000a10:	8013      	strh	r3, [r2, #0]
 8000a12:	e014      	b.n	8000a3e <main+0x8f2>
	  no_line_end_invalid_string[i] = 'a';
 8000a14:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000a18:	f103 0316 	add.w	r3, r3, #22
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a22:	3b10      	subs	r3, #16
 8000a24:	2161      	movs	r1, #97	; 0x61
 8000a26:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 800; i++){
 8000a28:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000a2c:	f103 0316 	add.w	r3, r3, #22
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000a38:	f102 0216 	add.w	r2, r2, #22
 8000a3c:	8013      	strh	r3, [r2, #0]
 8000a3e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000a42:	f103 0316 	add.w	r3, r3, #22
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000a4c:	d3e2      	bcc.n	8000a14 <main+0x8c8>
  }
  string_descriptor = static_strings_save(no_line_end_invalid_string);
 8000a4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a52:	3b10      	subs	r3, #16
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 ff49 	bl	80028ec <static_strings_save>
 8000a5a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000a5e:	f103 0308 	add.w	r3, r3, #8
 8000a62:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8000a64:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000a68:	f103 0308 	add.w	r3, r3, #8
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d107      	bne.n	8000a82 <main+0x936>
	  error_code_char = static_strings_error_code + 48;
 8000a72:	4b75      	ldr	r3, [pc, #468]	; (8000c48 <main+0xafc>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	3330      	adds	r3, #48	; 0x30
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e003      	b.n	8000a8a <main+0x93e>
  }
  else{
	  error_code_char = '5';
 8000a82:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8000a86:	2235      	movs	r2, #53	; 0x35
 8000a88:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8000a8a:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	2201      	movs	r2, #1
 8000a94:	486d      	ldr	r0, [pc, #436]	; (8000c4c <main+0xb00>)
 8000a96:	f001 fbf8 	bl	800228a <HAL_UART_Transmit>

  //test 27

  string_descriptor = static_strings_allocate(1200);
 8000a9a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000a9e:	f001 fe6b 	bl	8002778 <static_strings_allocate>
 8000aa2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000aa6:	f103 0308 	add.w	r3, r3, #8
 8000aaa:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8000aac:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000ab0:	f103 0308 	add.w	r3, r3, #8
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d107      	bne.n	8000aca <main+0x97e>
  	  error_code_char = static_strings_error_code + 48;
 8000aba:	4b63      	ldr	r3, [pc, #396]	; (8000c48 <main+0xafc>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3330      	adds	r3, #48	; 0x30
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e003      	b.n	8000ad2 <main+0x986>
  }
  else{
  	  error_code_char = '6';
 8000aca:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8000ace:	2236      	movs	r2, #54	; 0x36
 8000ad0:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8000ad2:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	2201      	movs	r2, #1
 8000adc:	485b      	ldr	r0, [pc, #364]	; (8000c4c <main+0xb00>)
 8000ade:	f001 fbd4 	bl	800228a <HAL_UART_Transmit>

  //test 28

  uint8_t custom[10] = "123,56,89\0";
 8000ae2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ae6:	3b1c      	subs	r3, #28
 8000ae8:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <main+0xb04>)
 8000aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aec:	c303      	stmia	r3!, {r0, r1}
 8000aee:	801a      	strh	r2, [r3, #0]
  static_strings_string_descriptor custom_string_descriptor;
  string_descriptor = &custom_string_descriptor;
 8000af0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000af4:	3b04      	subs	r3, #4
 8000af6:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8000afa:	f102 0208 	add.w	r2, r2, #8
 8000afe:	6013      	str	r3, [r2, #0]
  static_strings_create_custom_string(string_descriptor,custom);
 8000b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b04:	3b1c      	subs	r3, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000b0c:	f103 0308 	add.w	r3, r3, #8
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	f001 ff12 	bl	800293a <static_strings_create_custom_string>
  HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000b16:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000b1a:	f103 0308 	add.w	r3, r3, #8
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6819      	ldr	r1, [r3, #0]
 8000b22:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000b26:	f103 0308 	add.w	r3, r3, #8
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	889a      	ldrh	r2, [r3, #4]
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	4846      	ldr	r0, [pc, #280]	; (8000c4c <main+0xb00>)
 8000b34:	f001 fba9 	bl	800228a <HAL_UART_Transmit>

  // test 29

  if(static_strings_is_line(string_descriptor)){
 8000b38:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000b3c:	f103 0308 	add.w	r3, r3, #8
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	f001 ff27 	bl	8002994 <static_strings_is_line>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d007      	beq.n	8000b5c <main+0xa10>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	2203      	movs	r2, #3
 8000b52:	4940      	ldr	r1, [pc, #256]	; (8000c54 <main+0xb08>)
 8000b54:	483d      	ldr	r0, [pc, #244]	; (8000c4c <main+0xb00>)
 8000b56:	f001 fb98 	bl	800228a <HAL_UART_Transmit>
 8000b5a:	e006      	b.n	8000b6a <main+0xa1e>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	2203      	movs	r2, #3
 8000b62:	493d      	ldr	r1, [pc, #244]	; (8000c58 <main+0xb0c>)
 8000b64:	4839      	ldr	r0, [pc, #228]	; (8000c4c <main+0xb00>)
 8000b66:	f001 fb90 	bl	800228a <HAL_UART_Transmit>
  }

  // test 30

  uint8_t custom_line[10] = "123,56,8\r\n";
 8000b6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b6e:	3b10      	subs	r3, #16
 8000b70:	4a3a      	ldr	r2, [pc, #232]	; (8000c5c <main+0xb10>)
 8000b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b74:	c303      	stmia	r3!, {r0, r1}
 8000b76:	801a      	strh	r2, [r3, #0]
  static_strings_create_custom_string(string_descriptor,custom_line);
 8000b78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b7c:	3b10      	subs	r3, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000b84:	f103 0308 	add.w	r3, r3, #8
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	f001 fed6 	bl	800293a <static_strings_create_custom_string>

  if(static_strings_is_line(string_descriptor)){
 8000b8e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000b92:	f103 0308 	add.w	r3, r3, #8
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	f001 fefc 	bl	8002994 <static_strings_is_line>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d007      	beq.n	8000bb2 <main+0xa66>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	492a      	ldr	r1, [pc, #168]	; (8000c54 <main+0xb08>)
 8000baa:	4828      	ldr	r0, [pc, #160]	; (8000c4c <main+0xb00>)
 8000bac:	f001 fb6d 	bl	800228a <HAL_UART_Transmit>
 8000bb0:	e006      	b.n	8000bc0 <main+0xa74>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	4927      	ldr	r1, [pc, #156]	; (8000c58 <main+0xb0c>)
 8000bba:	4824      	ldr	r0, [pc, #144]	; (8000c4c <main+0xb00>)
 8000bbc:	f001 fb65 	bl	800228a <HAL_UART_Transmit>
  }

  // reset all descriptors
  static_strings_init();
 8000bc0:	f001 fd20 	bl	8002604 <static_strings_init>

  // test 31-33

  static_strings_string_descriptor *token;
  static_strings_string_splitter_set_parameters(string_descriptor,',');
 8000bc4:	212c      	movs	r1, #44	; 0x2c
 8000bc6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000bca:	f103 0308 	add.w	r3, r3, #8
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	f001 ff3e 	bl	8002a50 <static_strings_string_splitter_set_parameters>
  while(static_strings_string_splitter_get_next_token(&token)){
 8000bd4:	e015      	b.n	8000c02 <main+0xab6>
	  HAL_UART_Transmit(&huart1,token->string,token->length,HAL_MAX_DELAY);
 8000bd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000bda:	3b14      	subs	r3, #20
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6819      	ldr	r1, [r3, #0]
 8000be0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000be4:	3b14      	subs	r3, #20
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	889a      	ldrh	r2, [r3, #4]
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	4817      	ldr	r0, [pc, #92]	; (8000c4c <main+0xb00>)
 8000bf0:	f001 fb4b 	bl	800228a <HAL_UART_Transmit>
	  static_strings_deallocate(token);
 8000bf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000bf8:	3b14      	subs	r3, #20
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 feb9 	bl	8002974 <static_strings_deallocate>
  while(static_strings_string_splitter_get_next_token(&token)){
 8000c02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c06:	3b14      	subs	r3, #20
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 ff39 	bl	8002a80 <static_strings_string_splitter_get_next_token>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1e0      	bne.n	8000bd6 <main+0xa8a>
  }

  // test 34

  int next_token_result = static_strings_string_splitter_get_next_token(&token);
 8000c14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c18:	3b14      	subs	r3, #20
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 ff30 	bl	8002a80 <static_strings_string_splitter_get_next_token>
 8000c20:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000c24:	f103 0304 	add.w	r3, r3, #4
 8000c28:	6018      	str	r0, [r3, #0]
  if(next_token_result){
 8000c2a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000c2e:	f103 0304 	add.w	r3, r3, #4
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <main+0xb14>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4905      	ldr	r1, [pc, #20]	; (8000c54 <main+0xb08>)
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <main+0xb00>)
 8000c42:	f001 fb22 	bl	800228a <HAL_UART_Transmit>
 8000c46:	e012      	b.n	8000c6e <main+0xb22>
 8000c48:	200004f8 	.word	0x200004f8
 8000c4c:	20000b38 	.word	0x20000b38
 8000c50:	080041d0 	.word	0x080041d0
 8000c54:	080035dc 	.word	0x080035dc
 8000c58:	080035e0 	.word	0x080035e0
 8000c5c:	080041dc 	.word	0x080041dc
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	2203      	movs	r2, #3
 8000c66:	49c7      	ldr	r1, [pc, #796]	; (8000f84 <main+0xe38>)
 8000c68:	48c7      	ldr	r0, [pc, #796]	; (8000f88 <main+0xe3c>)
 8000c6a:	f001 fb0e 	bl	800228a <HAL_UART_Transmit>
  }

  // test 35

  static_strings_create_custom_string(string_descriptor,custom);
 8000c6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c72:	3b1c      	subs	r3, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000c7a:	f103 0308 	add.w	r3, r3, #8
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	f001 fe5b 	bl	800293a <static_strings_create_custom_string>
  static_strings_string_descriptor *substring = static_strings_substring(string_descriptor,2,8);
 8000c84:	2208      	movs	r2, #8
 8000c86:	2102      	movs	r1, #2
 8000c88:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000c8c:	f103 0308 	add.w	r3, r3, #8
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	f001 ff53 	bl	8002b3c <static_strings_substring>
 8000c96:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000c9a:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 8000c9c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d011      	beq.n	8000cca <main+0xb7e>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 8000ca6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6819      	ldr	r1, [r3, #0]
 8000cae:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	889a      	ldrh	r2, [r3, #4]
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	48b3      	ldr	r0, [pc, #716]	; (8000f88 <main+0xe3c>)
 8000cbc:	f001 fae5 	bl	800228a <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8000cc0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	f001 fe55 	bl	8002974 <static_strings_deallocate>
  }

  // test 36

  substring = static_strings_substring(string_descriptor,0,string_descriptor->length);
 8000cca:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000cce:	f103 0308 	add.w	r3, r3, #8
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	889b      	ldrh	r3, [r3, #4]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000cde:	f103 0308 	add.w	r3, r3, #8
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	f001 ff2a 	bl	8002b3c <static_strings_substring>
 8000ce8:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000cec:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 8000cee:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d011      	beq.n	8000d1c <main+0xbd0>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 8000cf8:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	889a      	ldrh	r2, [r3, #4]
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	489e      	ldr	r0, [pc, #632]	; (8000f88 <main+0xe3c>)
 8000d0e:	f001 fabc 	bl	800228a <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8000d12:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	f001 fe2c 	bl	8002974 <static_strings_deallocate>
  }

  // test 37

  substring = static_strings_substring(string_descriptor,0,12);
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d24:	f103 0308 	add.w	r3, r3, #8
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f001 ff07 	bl	8002b3c <static_strings_substring>
 8000d2e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d32:	6018      	str	r0, [r3, #0]
  if (substring != NULL) {
 8000d34:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00c      	beq.n	8000d58 <main+0xc0c>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	2203      	movs	r2, #3
 8000d44:	4991      	ldr	r1, [pc, #580]	; (8000f8c <main+0xe40>)
 8000d46:	4890      	ldr	r0, [pc, #576]	; (8000f88 <main+0xe3c>)
 8000d48:	f001 fa9f 	bl	800228a <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8000d4c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	f001 fe0f 	bl	8002974 <static_strings_deallocate>
 8000d56:	e006      	b.n	8000d66 <main+0xc1a>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4989      	ldr	r1, [pc, #548]	; (8000f84 <main+0xe38>)
 8000d60:	4889      	ldr	r0, [pc, #548]	; (8000f88 <main+0xe3c>)
 8000d62:	f001 fa92 	bl	800228a <HAL_UART_Transmit>
  }

  // test 38

  substring = static_strings_substring(string_descriptor,-2,5);
 8000d66:	2205      	movs	r2, #5
 8000d68:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000d6c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d70:	f103 0308 	add.w	r3, r3, #8
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	f001 fee1 	bl	8002b3c <static_strings_substring>
 8000d7a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d7e:	6018      	str	r0, [r3, #0]
  if (substring != NULL){
 8000d80:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00c      	beq.n	8000da4 <main+0xc58>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	2203      	movs	r2, #3
 8000d90:	497e      	ldr	r1, [pc, #504]	; (8000f8c <main+0xe40>)
 8000d92:	487d      	ldr	r0, [pc, #500]	; (8000f88 <main+0xe3c>)
 8000d94:	f001 fa79 	bl	800228a <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8000d98:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f001 fde9 	bl	8002974 <static_strings_deallocate>
 8000da2:	e006      	b.n	8000db2 <main+0xc66>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	2203      	movs	r2, #3
 8000daa:	4976      	ldr	r1, [pc, #472]	; (8000f84 <main+0xe38>)
 8000dac:	4876      	ldr	r0, [pc, #472]	; (8000f88 <main+0xe3c>)
 8000dae:	f001 fa6c 	bl	800228a <HAL_UART_Transmit>
  }

  // test 39

  uint8_t concatenate_at_memory[] = "Hello \0";
 8000db2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000db6:	3b1c      	subs	r3, #28
 8000db8:	4a75      	ldr	r2, [pc, #468]	; (8000f90 <main+0xe44>)
 8000dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dbe:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate_at;
  static_strings_create_custom_string(&concatenate_at,concatenate_at_memory);
 8000dc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000dc6:	3a1c      	subs	r2, #28
 8000dc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dcc:	3b04      	subs	r3, #4
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fdb2 	bl	800293a <static_strings_create_custom_string>
  uint8_t concatenate_memory[] = "World\r\n";
 8000dd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dda:	3b0c      	subs	r3, #12
 8000ddc:	4a6d      	ldr	r2, [pc, #436]	; (8000f94 <main+0xe48>)
 8000dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de2:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate;
  static_strings_create_custom_string(&concatenate,concatenate_memory);
 8000de6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000dea:	3a0c      	subs	r2, #12
 8000dec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000df0:	3b14      	subs	r3, #20
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fda0 	bl	800293a <static_strings_create_custom_string>
  static_strings_string_descriptor *concatenated;
  concatenated = static_strings_concatenate(&concatenate_at,&concatenate);
 8000dfa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000dfe:	3a14      	subs	r2, #20
 8000e00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e04:	3b04      	subs	r3, #4
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fed9 	bl	8002bc0 <static_strings_concatenate>
 8000e0e:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000e12:	f103 031c 	add.w	r3, r3, #28
 8000e16:	6018      	str	r0, [r3, #0]
  if (concatenated != NULL) {
 8000e18:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000e1c:	f103 031c 	add.w	r3, r3, #28
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d017      	beq.n	8000e56 <main+0xd0a>
  	  HAL_UART_Transmit(&huart1,concatenated->string,concatenated->length,HAL_MAX_DELAY);
 8000e26:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000e2a:	f103 031c 	add.w	r3, r3, #28
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000e36:	f103 031c 	add.w	r3, r3, #28
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	889a      	ldrh	r2, [r3, #4]
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	4851      	ldr	r0, [pc, #324]	; (8000f88 <main+0xe3c>)
 8000e44:	f001 fa21 	bl	800228a <HAL_UART_Transmit>
  	  static_strings_deallocate(concatenated);
 8000e48:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000e4c:	f103 031c 	add.w	r3, r3, #28
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	f001 fd8f 	bl	8002974 <static_strings_deallocate>
  }

  // test 40

  if(static_strings_contains_string(concatenated,&concatenate_at)){
 8000e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000e62:	f103 031c 	add.w	r3, r3, #28
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	f001 fedf 	bl	8002c2a <static_strings_contains_string>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <main+0xd36>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	2203      	movs	r2, #3
 8000e78:	4944      	ldr	r1, [pc, #272]	; (8000f8c <main+0xe40>)
 8000e7a:	4843      	ldr	r0, [pc, #268]	; (8000f88 <main+0xe3c>)
 8000e7c:	f001 fa05 	bl	800228a <HAL_UART_Transmit>
 8000e80:	e006      	b.n	8000e90 <main+0xd44>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	2203      	movs	r2, #3
 8000e88:	493e      	ldr	r1, [pc, #248]	; (8000f84 <main+0xe38>)
 8000e8a:	483f      	ldr	r0, [pc, #252]	; (8000f88 <main+0xe3c>)
 8000e8c:	f001 f9fd 	bl	800228a <HAL_UART_Transmit>
  }

  // test 41

  if(static_strings_contains_string(concatenated,&concatenate)){
 8000e90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e94:	3b14      	subs	r3, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000e9c:	f103 031c 	add.w	r3, r3, #28
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	f001 fec2 	bl	8002c2a <static_strings_contains_string>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <main+0xd70>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4936      	ldr	r1, [pc, #216]	; (8000f8c <main+0xe40>)
 8000eb4:	4834      	ldr	r0, [pc, #208]	; (8000f88 <main+0xe3c>)
 8000eb6:	f001 f9e8 	bl	800228a <HAL_UART_Transmit>
 8000eba:	e006      	b.n	8000eca <main+0xd7e>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4930      	ldr	r1, [pc, #192]	; (8000f84 <main+0xe38>)
 8000ec4:	4830      	ldr	r0, [pc, #192]	; (8000f88 <main+0xe3c>)
 8000ec6:	f001 f9e0 	bl	800228a <HAL_UART_Transmit>
  }

  // test 42

  uint8_t non_contained_memory[] = "Hill\0";
 8000eca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ece:	3b1c      	subs	r3, #28
 8000ed0:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <main+0xe4c>)
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	6018      	str	r0, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor non_contained;
  static_strings_create_custom_string(&non_contained,non_contained_memory);
 8000edc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ee0:	3a1c      	subs	r2, #28
 8000ee2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fd25 	bl	800293a <static_strings_create_custom_string>
  if(static_strings_contains_string(concatenated,&non_contained)){
 8000ef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef4:	3b04      	subs	r3, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000efc:	f103 031c 	add.w	r3, r3, #28
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	f001 fe92 	bl	8002c2a <static_strings_contains_string>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <main+0xdd0>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	2203      	movs	r2, #3
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <main+0xe40>)
 8000f14:	481c      	ldr	r0, [pc, #112]	; (8000f88 <main+0xe3c>)
 8000f16:	f001 f9b8 	bl	800228a <HAL_UART_Transmit>
 8000f1a:	e006      	b.n	8000f2a <main+0xdde>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	2203      	movs	r2, #3
 8000f22:	4918      	ldr	r1, [pc, #96]	; (8000f84 <main+0xe38>)
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <main+0xe3c>)
 8000f26:	f001 f9b0 	bl	800228a <HAL_UART_Transmit>
  }

  // test 43

  if(static_strings_contains_char(concatenated,'W')){
 8000f2a:	2157      	movs	r1, #87	; 0x57
 8000f2c:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000f30:	f103 031c 	add.w	r3, r3, #28
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	f001 febf 	bl	8002cb8 <static_strings_contains_char>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <main+0xe04>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	2203      	movs	r2, #3
 8000f46:	4911      	ldr	r1, [pc, #68]	; (8000f8c <main+0xe40>)
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <main+0xe3c>)
 8000f4a:	f001 f99e 	bl	800228a <HAL_UART_Transmit>
 8000f4e:	e006      	b.n	8000f5e <main+0xe12>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	2203      	movs	r2, #3
 8000f56:	490b      	ldr	r1, [pc, #44]	; (8000f84 <main+0xe38>)
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <main+0xe3c>)
 8000f5a:	f001 f996 	bl	800228a <HAL_UART_Transmit>
  }

  // test 44

  if(static_strings_contains_char(concatenated,'e')){
 8000f5e:	2165      	movs	r1, #101	; 0x65
 8000f60:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000f64:	f103 031c 	add.w	r3, r3, #28
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	f001 fea5 	bl	8002cb8 <static_strings_contains_char>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <main+0xe50>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	2203      	movs	r2, #3
 8000f7a:	4904      	ldr	r1, [pc, #16]	; (8000f8c <main+0xe40>)
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <main+0xe3c>)
 8000f7e:	f001 f984 	bl	800228a <HAL_UART_Transmit>
 8000f82:	e012      	b.n	8000faa <main+0xe5e>
 8000f84:	080035e0 	.word	0x080035e0
 8000f88:	20000b38 	.word	0x20000b38
 8000f8c:	080035dc 	.word	0x080035dc
 8000f90:	080041e8 	.word	0x080041e8
 8000f94:	080041f0 	.word	0x080041f0
 8000f98:	080041f8 	.word	0x080041f8
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4948      	ldr	r1, [pc, #288]	; (80010c4 <main+0xf78>)
 8000fa4:	4848      	ldr	r0, [pc, #288]	; (80010c8 <main+0xf7c>)
 8000fa6:	f001 f970 	bl	800228a <HAL_UART_Transmit>
  }

  // test 45

  if(static_strings_contains_char(concatenated,'m')){
 8000faa:	216d      	movs	r1, #109	; 0x6d
 8000fac:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8000fb0:	f103 031c 	add.w	r3, r3, #28
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f001 fe7f 	bl	8002cb8 <static_strings_contains_char>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d007      	beq.n	8000fd0 <main+0xe84>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	4941      	ldr	r1, [pc, #260]	; (80010cc <main+0xf80>)
 8000fc8:	483f      	ldr	r0, [pc, #252]	; (80010c8 <main+0xf7c>)
 8000fca:	f001 f95e 	bl	800228a <HAL_UART_Transmit>
 8000fce:	e006      	b.n	8000fde <main+0xe92>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	493b      	ldr	r1, [pc, #236]	; (80010c4 <main+0xf78>)
 8000fd8:	483b      	ldr	r0, [pc, #236]	; (80010c8 <main+0xf7c>)
 8000fda:	f001 f956 	bl	800228a <HAL_UART_Transmit>
  }

  // test 46

  uint8_t equal_a_memory[] = "Hall\0";
 8000fde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fe2:	3b0c      	subs	r3, #12
 8000fe4:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <main+0xf84>)
 8000fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fea:	6018      	str	r0, [r3, #0]
 8000fec:	3304      	adds	r3, #4
 8000fee:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_a;
  uint8_t equal_b_memory[] = "Hall\0";
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	3b1c      	subs	r3, #28
 8000ff6:	4a36      	ldr	r2, [pc, #216]	; (80010d0 <main+0xf84>)
 8000ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffc:	6018      	str	r0, [r3, #0]
 8000ffe:	3304      	adds	r3, #4
 8001000:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_b;
  uint8_t non_equal_memory[] = "oil\0";
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	3b0c      	subs	r3, #12
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <main+0xf88>)
 800100a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100e:	6018      	str	r0, [r3, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	7019      	strb	r1, [r3, #0]
  static_strings_string_descriptor non_equal;
  static_strings_create_custom_string(&equal_a,equal_a_memory);
 8001014:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001018:	3a0c      	subs	r2, #12
 800101a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101e:	3b14      	subs	r3, #20
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fc89 	bl	800293a <static_strings_create_custom_string>
  static_strings_create_custom_string(&equal_b,equal_b_memory);
 8001028:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800102c:	3a1c      	subs	r2, #28
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	3b04      	subs	r3, #4
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fc7f 	bl	800293a <static_strings_create_custom_string>
  static_strings_create_custom_string(&non_equal,non_equal_memory);
 800103c:	f107 0218 	add.w	r2, r7, #24
 8001040:	3a0c      	subs	r2, #12
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	3b14      	subs	r3, #20
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fc75 	bl	800293a <static_strings_create_custom_string>

  if(static_strings_compare(&equal_a,&equal_b)){
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	3a04      	subs	r2, #4
 8001056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105a:	3b14      	subs	r3, #20
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fe4c 	bl	8002cfc <static_strings_compare>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <main+0xf2e>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	2203      	movs	r2, #3
 8001070:	4916      	ldr	r1, [pc, #88]	; (80010cc <main+0xf80>)
 8001072:	4815      	ldr	r0, [pc, #84]	; (80010c8 <main+0xf7c>)
 8001074:	f001 f909 	bl	800228a <HAL_UART_Transmit>
 8001078:	e006      	b.n	8001088 <main+0xf3c>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	2203      	movs	r2, #3
 8001080:	4910      	ldr	r1, [pc, #64]	; (80010c4 <main+0xf78>)
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <main+0xf7c>)
 8001084:	f001 f901 	bl	800228a <HAL_UART_Transmit>
  }

  // test 47

  if(static_strings_compare(&equal_a,&non_equal)){
 8001088:	f107 0218 	add.w	r2, r7, #24
 800108c:	3a14      	subs	r2, #20
 800108e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001092:	3b14      	subs	r3, #20
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fe30 	bl	8002cfc <static_strings_compare>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <main+0xf66>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	2203      	movs	r2, #3
 80010a8:	4908      	ldr	r1, [pc, #32]	; (80010cc <main+0xf80>)
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <main+0xf7c>)
 80010ac:	f001 f8ed 	bl	800228a <HAL_UART_Transmit>
 80010b0:	e006      	b.n	80010c0 <main+0xf74>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	2203      	movs	r2, #3
 80010b8:	4902      	ldr	r1, [pc, #8]	; (80010c4 <main+0xf78>)
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <main+0xf7c>)
 80010bc:	f001 f8e5 	bl	800228a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <main+0xf74>
 80010c2:	bf00      	nop
 80010c4:	080035e0 	.word	0x080035e0
 80010c8:	20000b38 	.word	0x20000b38
 80010cc:	080035dc 	.word	0x080035dc
 80010d0:	08004200 	.word	0x08004200
 80010d4:	08004208 	.word	0x08004208

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2228      	movs	r2, #40	; 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fe53 	bl	8002d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001102:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001116:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fc49 	bl	80019b8 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800112c:	f000 f866 	bl	80011fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 feb4 	bl	8001eb8 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001156:	f000 f851 	bl	80011fc <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART1_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART1_UART_Init+0x4c>)
 800119c:	f001 f828 	bl	80021f0 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f829 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000b38 	.word	0x20000b38
 80011b4:	40013800 	.word	0x40013800

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_GPIO_Init+0x40>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <MX_GPIO_Init+0x40>)
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_GPIO_Init+0x40>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_GPIO_Init+0x40>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <MX_GPIO_Init+0x40>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <MX_GPIO_Init+0x40>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <HAL_MspInit+0x5c>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_MspInit+0x5c>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_MspInit+0x5c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_MspInit+0x5c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_MspInit+0x60>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_MspInit+0x60>)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <HAL_UART_MspInit+0x8c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d131      	bne.n	80012f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_UART_MspInit+0x90>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_UART_MspInit+0x90>)
 8001292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_UART_MspInit+0x90>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_UART_MspInit+0x90>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_UART_MspInit+0x90>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_UART_MspInit+0x90>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <HAL_UART_MspInit+0x94>)
 80012d2:	f000 fa17 	bl	8001704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0x94>)
 80012ec:	f000 fa0a 	bl	8001704 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010800 	.word	0x40010800

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <HardFault_Handler+0x4>

08001316 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <BusFault_Handler+0x4>

08001322 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <UsageFault_Handler+0x4>

08001328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 f8d8 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f001 fcce 	bl	8002d28 <__errno>
 800138c:	4602      	mov	r2, r0
 800138e:	230c      	movs	r3, #12
 8001390:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20005000 	.word	0x20005000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	2000008c 	.word	0x2000008c
 80013c0:	20000d48 	.word	0x20000d48

080013c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <SystemInit+0x5c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <SystemInit+0x5c>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <SystemInit+0x5c>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4911      	ldr	r1, [pc, #68]	; (8001420 <SystemInit+0x5c>)
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <SystemInit+0x60>)
 80013dc:	4013      	ands	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <SystemInit+0x5c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <SystemInit+0x5c>)
 80013e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <SystemInit+0x5c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SystemInit+0x5c>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SystemInit+0x5c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <SystemInit+0x5c>)
 8001402:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001406:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SystemInit+0x5c>)
 800140a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800140e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SystemInit+0x64>)
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	609a      	str	r2, [r3, #8]
#endif 
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	f8ff0000 	.word	0xf8ff0000
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800142c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800142e:	e003      	b.n	8001438 <LoopCopyDataInit>

08001430 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001432:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001434:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001436:	3104      	adds	r1, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800143c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800143e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001440:	d3f6      	bcc.n	8001430 <CopyDataInit>
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001444:	e002      	b.n	800144c <LoopFillZerobss>

08001446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001448:	f842 3b04 	str.w	r3, [r2], #4

0800144c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001450:	d3f9      	bcc.n	8001446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffb7 	bl	80013c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f001 fc6d 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7fe fe77 	bl	800014c <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r3, =_sidata
 8001460:	08004278 	.word	0x08004278
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001468:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800146c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001470:	20000d48 	.word	0x20000d48

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f907 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff feb8 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f911 	bl	80016ea <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f8e7 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000008 	.word	0x20000008
 8001524:	20000d40 	.word	0x20000d40

08001528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000d40 	.word	0x20000d40

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff90 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff49 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff5e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffb0 	bl	8001658 <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e127      	b.n	8001968 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001718:	2201      	movs	r2, #1
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8116 	bne.w	8001962 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b12      	cmp	r3, #18
 800173c:	d034      	beq.n	80017a8 <HAL_GPIO_Init+0xa4>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d80d      	bhi.n	800175e <HAL_GPIO_Init+0x5a>
 8001742:	2b02      	cmp	r3, #2
 8001744:	d02b      	beq.n	800179e <HAL_GPIO_Init+0x9a>
 8001746:	2b02      	cmp	r3, #2
 8001748:	d804      	bhi.n	8001754 <HAL_GPIO_Init+0x50>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d031      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 800174e:	2b01      	cmp	r3, #1
 8001750:	d01c      	beq.n	800178c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001752:	e048      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001754:	2b03      	cmp	r3, #3
 8001756:	d043      	beq.n	80017e0 <HAL_GPIO_Init+0xdc>
 8001758:	2b11      	cmp	r3, #17
 800175a:	d01b      	beq.n	8001794 <HAL_GPIO_Init+0x90>
          break;
 800175c:	e043      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800175e:	4a89      	ldr	r2, [pc, #548]	; (8001984 <HAL_GPIO_Init+0x280>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d026      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 8001764:	4a87      	ldr	r2, [pc, #540]	; (8001984 <HAL_GPIO_Init+0x280>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d806      	bhi.n	8001778 <HAL_GPIO_Init+0x74>
 800176a:	4a87      	ldr	r2, [pc, #540]	; (8001988 <HAL_GPIO_Init+0x284>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d020      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 8001770:	4a86      	ldr	r2, [pc, #536]	; (800198c <HAL_GPIO_Init+0x288>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01d      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
          break;
 8001776:	e036      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001778:	4a85      	ldr	r2, [pc, #532]	; (8001990 <HAL_GPIO_Init+0x28c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 800177e:	4a85      	ldr	r2, [pc, #532]	; (8001994 <HAL_GPIO_Init+0x290>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d016      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 8001784:	4a84      	ldr	r2, [pc, #528]	; (8001998 <HAL_GPIO_Init+0x294>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
          break;
 800178a:	e02c      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e028      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e023      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3308      	adds	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e01e      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	330c      	adds	r3, #12
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e019      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e012      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	611a      	str	r2, [r3, #16]
          break;
 80017d2:	e008      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	615a      	str	r2, [r3, #20]
          break;
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2bff      	cmp	r3, #255	; 0xff
 80017ea:	d801      	bhi.n	80017f0 <HAL_GPIO_Init+0xec>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	e001      	b.n	80017f4 <HAL_GPIO_Init+0xf0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3304      	adds	r3, #4
 80017f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2bff      	cmp	r3, #255	; 0xff
 80017fa:	d802      	bhi.n	8001802 <HAL_GPIO_Init+0xfe>
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x104>
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3b08      	subs	r3, #8
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	210f      	movs	r1, #15
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	6a39      	ldr	r1, [r7, #32]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	431a      	orrs	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8096 	beq.w	8001962 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001836:	4b59      	ldr	r3, [pc, #356]	; (800199c <HAL_GPIO_Init+0x298>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a58      	ldr	r2, [pc, #352]	; (800199c <HAL_GPIO_Init+0x298>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_GPIO_Init+0x298>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800184e:	4a54      	ldr	r2, [pc, #336]	; (80019a0 <HAL_GPIO_Init+0x29c>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_GPIO_Init+0x2a0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x19e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x19a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a49      	ldr	r2, [pc, #292]	; (80019ac <HAL_GPIO_Init+0x2a8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x196>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <HAL_GPIO_Init+0x2ac>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x192>
 8001892:	2303      	movs	r3, #3
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 8001896:	2304      	movs	r3, #4
 8001898:	e004      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 800189a:	2302      	movs	r3, #2
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 80018a2:	2300      	movs	r3, #0
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	f002 0203 	and.w	r2, r2, #3
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	4093      	lsls	r3, r2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b4:	493a      	ldr	r1, [pc, #232]	; (80019a0 <HAL_GPIO_Init+0x29c>)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4938      	ldr	r1, [pc, #224]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
 80018da:	e006      	b.n	80018ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4933      	ldr	r1, [pc, #204]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	492e      	ldr	r1, [pc, #184]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	4929      	ldr	r1, [pc, #164]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800190e:	4013      	ands	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
 800192a:	e006      	b.n	800193a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	43db      	mvns	r3, r3
 8001934:	491f      	ldr	r1, [pc, #124]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001936:	4013      	ands	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	491a      	ldr	r1, [pc, #104]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	4915      	ldr	r1, [pc, #84]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800195e:	4013      	ands	r3, r2
 8001960:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f aed0 	bne.w	8001718 <HAL_GPIO_Init+0x14>
  }
}
 8001978:	bf00      	nop
 800197a:	372c      	adds	r7, #44	; 0x2c
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	10210000 	.word	0x10210000
 8001988:	10110000 	.word	0x10110000
 800198c:	10120000 	.word	0x10120000
 8001990:	10310000 	.word	0x10310000
 8001994:	10320000 	.word	0x10320000
 8001998:	10220000 	.word	0x10220000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40011400 	.word	0x40011400
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e26c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8087 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d8:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d00c      	beq.n	80019fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e4:	4b8f      	ldr	r3, [pc, #572]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d112      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5e>
 80019f0:	4b8c      	ldr	r3, [pc, #560]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d10b      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d06c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x12c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d168      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e246      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x76>
 8001a20:	4b80      	ldr	r3, [pc, #512]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a7f      	ldr	r2, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e02e      	b.n	8001a8c <HAL_RCC_OscConfig+0xd4>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x98>
 8001a36:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7a      	ldr	r2, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b78      	ldr	r3, [pc, #480]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a77      	ldr	r2, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e01d      	b.n	8001a8c <HAL_RCC_OscConfig+0xd4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0xbc>
 8001a5a:	4b72      	ldr	r3, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a71      	ldr	r2, [pc, #452]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0xd4>
 8001a74:	4b6b      	ldr	r3, [pc, #428]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a6a      	ldr	r2, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a67      	ldr	r2, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fd48 	bl	8001528 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fd44 	bl	8001528 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1fa      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0xe4>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fd34 	bl	8001528 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fd30 	bl	8001528 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1e6      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x10c>
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d063      	beq.n	8001bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x18c>
 8001b0a:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x176>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e1ba      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4939      	ldr	r1, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fce9 	bl	8001528 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fce5 	bl	8001528 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e19b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4927      	ldr	r1, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fcc8 	bl	8001528 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fcc4 	bl	8001528 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e17a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03a      	beq.n	8001c3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d019      	beq.n	8001c02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fca8 	bl	8001528 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fca4 	bl	8001528 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e15a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f000 fada 	bl	80021b4 <RCC_Delay>
 8001c00:	e01c      	b.n	8001c3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7ff fc8e 	bl	8001528 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0e:	e00f      	b.n	8001c30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff fc8a 	bl	8001528 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d908      	bls.n	8001c30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e140      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	42420000 	.word	0x42420000
 8001c2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	4b9e      	ldr	r3, [pc, #632]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e9      	bne.n	8001c10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a6 	beq.w	8001d96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4e:	4b97      	ldr	r3, [pc, #604]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10d      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b94      	ldr	r3, [pc, #592]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a93      	ldr	r2, [pc, #588]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b91      	ldr	r3, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c72:	2301      	movs	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	4b8e      	ldr	r3, [pc, #568]	; (8001eb0 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c82:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a8a      	ldr	r2, [pc, #552]	; (8001eb0 <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fc4b 	bl	8001528 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7ff fc47 	bl	8001528 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b64      	cmp	r3, #100	; 0x64
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0fd      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <HAL_RCC_OscConfig+0x4f8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x312>
 8001cbc:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a7a      	ldr	r2, [pc, #488]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	e02d      	b.n	8001d26 <HAL_RCC_OscConfig+0x36e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x334>
 8001cd2:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a75      	ldr	r2, [pc, #468]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a72      	ldr	r2, [pc, #456]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	e01c      	b.n	8001d26 <HAL_RCC_OscConfig+0x36e>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d10c      	bne.n	8001d0e <HAL_RCC_OscConfig+0x356>
 8001cf4:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a6c      	ldr	r2, [pc, #432]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	4b6a      	ldr	r3, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a69      	ldr	r2, [pc, #420]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6213      	str	r3, [r2, #32]
 8001d0c:	e00b      	b.n	8001d26 <HAL_RCC_OscConfig+0x36e>
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a66      	ldr	r2, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	4b64      	ldr	r3, [pc, #400]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a63      	ldr	r2, [pc, #396]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d015      	beq.n	8001d5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fbfb 	bl	8001528 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff fbf7 	bl	8001528 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0ab      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	4b57      	ldr	r3, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ee      	beq.n	8001d36 <HAL_RCC_OscConfig+0x37e>
 8001d58:	e014      	b.n	8001d84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fbe5 	bl	8001528 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7ff fbe1 	bl	8001528 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e095      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ee      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d105      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8a:	4b48      	ldr	r3, [pc, #288]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a47      	ldr	r2, [pc, #284]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8081 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d061      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d146      	bne.n	8001e42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <HAL_RCC_OscConfig+0x4fc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fbb5 	bl	8001528 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff fbb1 	bl	8001528 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e067      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dea:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	492d      	ldr	r1, [pc, #180]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a19      	ldr	r1, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	4927      	ldr	r1, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x4fc>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fb85 	bl	8001528 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff fb81 	bl	8001528 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e037      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46a>
 8001e40:	e02f      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_RCC_OscConfig+0x4fc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fb6e 	bl	8001528 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff fb6a 	bl	8001528 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e020      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x498>
 8001e6e:	e018      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42420060 	.word	0x42420060

08001eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d0      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d910      	bls.n	8001efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 0207 	bic.w	r2, r3, #7
 8001ee2:	4965      	ldr	r1, [pc, #404]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b8      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f14:	4b59      	ldr	r3, [pc, #356]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f2c:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a52      	ldr	r2, [pc, #328]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	494d      	ldr	r1, [pc, #308]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d040      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e07f      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e073      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06b      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4936      	ldr	r1, [pc, #216]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff fabe 	bl	8001528 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff faba 	bl	8001528 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e053      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d210      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4922      	ldr	r1, [pc, #136]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e032      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4916      	ldr	r1, [pc, #88]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002046:	f000 f821 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800204a:	4601      	mov	r1, r0
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	fa21 f303 	lsr.w	r3, r1, r3
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <HAL_RCC_ClockConfig+0x1cc>)
 8002060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1d0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fa1c 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000
 800207c:	40021000 	.word	0x40021000
 8002080:	08004224 	.word	0x08004224
 8002084:	20000000 	.word	0x20000000
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b490      	push	{r4, r7}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002094:	1d3c      	adds	r4, r7, #4
 8002096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCC_GetSysClockFreq+0xb4>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x40>
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x46>
 80020ca:	e02d      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ce:	623b      	str	r3, [r7, #32]
      break;
 80020d0:	e02d      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020de:	4413      	add	r3, r2
 80020e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0c5b      	lsrs	r3, r3, #17
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020fe:	4413      	add	r3, r2
 8002100:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002104:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <HAL_RCC_GetSysClockFreq+0xbc>)
 800210a:	fb02 f203 	mul.w	r2, r2, r3
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	e004      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <HAL_RCC_GetSysClockFreq+0xc0>)
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	623b      	str	r3, [r7, #32]
      break;
 8002126:	e002      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCC_GetSysClockFreq+0xbc>)
 800212a:	623b      	str	r3, [r7, #32]
      break;
 800212c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212e:	6a3b      	ldr	r3, [r7, #32]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bc90      	pop	{r4, r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	08004210 	.word	0x08004210
 8002140:	08004220 	.word	0x08004220
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	003d0900 	.word	0x003d0900

08002150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <HAL_RCC_GetHCLKFreq+0x10>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000000 	.word	0x20000000

08002164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002168:	f7ff fff2 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 800216c:	4601      	mov	r1, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	08004234 	.word	0x08004234

0800218c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002190:	f7ff ffde 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002194:	4601      	mov	r1, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0adb      	lsrs	r3, r3, #11
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004234 	.word	0x08004234

080021b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <RCC_Delay+0x34>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <RCC_Delay+0x38>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0a5b      	lsrs	r3, r3, #9
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021d0:	bf00      	nop
  }
  while (Delay --);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1e5a      	subs	r2, r3, #1
 80021d6:	60fa      	str	r2, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <RCC_Delay+0x1c>
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000
 80021ec:	10624dd3 	.word	0x10624dd3

080021f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e03f      	b.n	8002282 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff f828 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	; 0x24
 8002220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f90b 	bl	8002450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b088      	sub	sp, #32
 800228e:	af02      	add	r7, sp, #8
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	f040 8083 	bne.w	80023b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_UART_Transmit+0x2e>
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e07b      	b.n	80023b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Transmit+0x40>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e074      	b.n	80023b4 <HAL_UART_Transmit+0x12a>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2221      	movs	r2, #33	; 0x21
 80022dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022e0:	f7ff f922 	bl	8001528 <HAL_GetTick>
 80022e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022f2:	e042      	b.n	800237a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230a:	d122      	bne.n	8002352 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2200      	movs	r2, #0
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f850 	bl	80023bc <UART_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e046      	b.n	80023b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002338:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3302      	adds	r3, #2
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	e017      	b.n	800237a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e013      	b.n	800237a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2200      	movs	r2, #0
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f82d 	bl	80023bc <UART_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e023      	b.n	80023b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	60ba      	str	r2, [r7, #8]
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1b7      	bne.n	80022f4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	2140      	movs	r1, #64	; 0x40
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f814 	bl	80023bc <UART_WaitOnFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e00a      	b.n	80023b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023cc:	e02c      	b.n	8002428 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d028      	beq.n	8002428 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <UART_WaitOnFlagUntilTimeout+0x30>
 80023dc:	f7ff f8a4 	bl	8001528 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d21d      	bcs.n	8002428 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e00f      	b.n	8002448 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4013      	ands	r3, r2
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	429a      	cmp	r2, r3
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	429a      	cmp	r2, r3
 8002444:	d0c3      	beq.n	80023ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800248a:	f023 030c 	bic.w	r3, r3, #12
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	430b      	orrs	r3, r1
 8002496:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a52      	ldr	r2, [pc, #328]	; (80025fc <UART_SetConfig+0x1ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d14e      	bne.n	8002556 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024b8:	f7ff fe68 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 80024bc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009a      	lsls	r2, r3, #2
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	4a4a      	ldr	r2, [pc, #296]	; (8002600 <UART_SetConfig+0x1b0>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	0119      	lsls	r1, r3, #4
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	009a      	lsls	r2, r3, #2
 80024e8:	441a      	add	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <UART_SetConfig+0x1b0>)
 80024f6:	fba3 0302 	umull	r0, r3, r3, r2
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2064      	movs	r0, #100	; 0x64
 80024fe:	fb00 f303 	mul.w	r3, r0, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	3332      	adds	r3, #50	; 0x32
 8002508:	4a3d      	ldr	r2, [pc, #244]	; (8002600 <UART_SetConfig+0x1b0>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002514:	4419      	add	r1, r3
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009a      	lsls	r2, r3, #2
 8002520:	441a      	add	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fbb2 f2f3 	udiv	r2, r2, r3
 800252c:	4b34      	ldr	r3, [pc, #208]	; (8002600 <UART_SetConfig+0x1b0>)
 800252e:	fba3 0302 	umull	r0, r3, r3, r2
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2064      	movs	r0, #100	; 0x64
 8002536:	fb00 f303 	mul.w	r3, r0, r3
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	3332      	adds	r3, #50	; 0x32
 8002540:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <UART_SetConfig+0x1b0>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	440a      	add	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002554:	e04d      	b.n	80025f2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002556:	f7ff fe05 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 800255a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	009a      	lsls	r2, r3, #2
 8002566:	441a      	add	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4a23      	ldr	r2, [pc, #140]	; (8002600 <UART_SetConfig+0x1b0>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	0119      	lsls	r1, r3, #4
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009a      	lsls	r2, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <UART_SetConfig+0x1b0>)
 8002594:	fba3 0302 	umull	r0, r3, r3, r2
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	2064      	movs	r0, #100	; 0x64
 800259c:	fb00 f303 	mul.w	r3, r0, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	3332      	adds	r3, #50	; 0x32
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <UART_SetConfig+0x1b0>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b2:	4419      	add	r1, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	009a      	lsls	r2, r3, #2
 80025be:	441a      	add	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <UART_SetConfig+0x1b0>)
 80025cc:	fba3 0302 	umull	r0, r3, r3, r2
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	2064      	movs	r0, #100	; 0x64
 80025d4:	fb00 f303 	mul.w	r3, r0, r3
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	3332      	adds	r3, #50	; 0x32
 80025de:	4a08      	ldr	r2, [pc, #32]	; (8002600 <UART_SetConfig+0x1b0>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	440a      	add	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40013800 	.word	0x40013800
 8002600:	51eb851f 	.word	0x51eb851f

08002604 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	e018      	b.n	8002642 <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2232      	movs	r2, #50	; 0x32
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <static_strings_init+0x14c>)
 800261a:	441a      	add	r2, r3
 800261c:	494d      	ldr	r1, [pc, #308]	; (8002754 <static_strings_init+0x150>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 8002624:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <static_strings_init+0x150>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	2200      	movs	r2, #0
 800262e:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <static_strings_init+0x150>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	2200      	movs	r2, #0
 800263a:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3301      	adds	r3, #1
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b09      	cmp	r3, #9
 8002646:	dde3      	ble.n	8002610 <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8002648:	2300      	movs	r3, #0
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	e018      	b.n	8002680 <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2264      	movs	r2, #100	; 0x64
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	4a40      	ldr	r2, [pc, #256]	; (8002758 <static_strings_init+0x154>)
 8002658:	441a      	add	r2, r3
 800265a:	4940      	ldr	r1, [pc, #256]	; (800275c <static_strings_init+0x158>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 8002662:	4a3e      	ldr	r2, [pc, #248]	; (800275c <static_strings_init+0x158>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	2201      	movs	r2, #1
 800266c:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 800266e:	4a3b      	ldr	r2, [pc, #236]	; (800275c <static_strings_init+0x158>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	2200      	movs	r2, #0
 8002678:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3301      	adds	r3, #1
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b05      	cmp	r3, #5
 8002684:	dde3      	ble.n	800264e <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	e018      	b.n	80026be <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	22c8      	movs	r2, #200	; 0xc8
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	4a32      	ldr	r2, [pc, #200]	; (8002760 <static_strings_init+0x15c>)
 8002696:	441a      	add	r2, r3
 8002698:	4932      	ldr	r1, [pc, #200]	; (8002764 <static_strings_init+0x160>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 80026a0:	4a30      	ldr	r2, [pc, #192]	; (8002764 <static_strings_init+0x160>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	2202      	movs	r2, #2
 80026aa:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80026ac:	4a2d      	ldr	r2, [pc, #180]	; (8002764 <static_strings_init+0x160>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3301      	adds	r3, #1
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	dde3      	ble.n	800268c <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	e019      	b.n	80026fe <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <static_strings_init+0x164>)
 80026d6:	441a      	add	r2, r3
 80026d8:	4924      	ldr	r1, [pc, #144]	; (800276c <static_strings_init+0x168>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <static_strings_init+0x168>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	2203      	movs	r2, #3
 80026ea:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <static_strings_init+0x168>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	2200      	movs	r2, #0
 80026f6:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	dde2      	ble.n	80026ca <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	e019      	b.n	800273e <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <static_strings_init+0x16c>)
 8002716:	441a      	add	r2, r3
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <static_strings_init+0x170>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <static_strings_init+0x170>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	2204      	movs	r2, #4
 800272a:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <static_strings_init+0x170>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	2200      	movs	r2, #0
 8002736:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	dde2      	ble.n	800270a <static_strings_init+0x106>
	}
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000304 	.word	0x20000304
 8002754:	200008f4 	.word	0x200008f4
 8002758:	200000ac 	.word	0x200000ac
 800275c:	20000d08 	.word	0x20000d08
 8002760:	20000b78 	.word	0x20000b78
 8002764:	200008e4 	.word	0x200008e4
 8002768:	20000944 	.word	0x20000944
 800276c:	20000d38 	.word	0x20000d38
 8002770:	200004fc 	.word	0x200004fc
 8002774:	200000a4 	.word	0x200000a4

08002778 <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b32      	cmp	r3, #50	; 0x32
 8002786:	d81a      	bhi.n	80027be <static_strings_allocate+0x46>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e014      	b.n	80027b8 <static_strings_allocate+0x40>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800278e:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <static_strings_allocate+0x15c>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	79db      	ldrb	r3, [r3, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <static_strings_allocate+0x3a>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 800279c:	4a4d      	ldr	r2, [pc, #308]	; (80028d4 <static_strings_allocate+0x15c>)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	2201      	movs	r2, #1
 80027a6:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_short_strings_descriptors[i];
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4a49      	ldr	r2, [pc, #292]	; (80028d4 <static_strings_allocate+0x15c>)
 80027ae:	4413      	add	r3, r2
 80027b0:	e08b      	b.n	80028ca <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b09      	cmp	r3, #9
 80027bc:	dde7      	ble.n	800278e <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d81a      	bhi.n	80027fa <static_strings_allocate+0x82>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e014      	b.n	80027f4 <static_strings_allocate+0x7c>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80027ca:	4a43      	ldr	r2, [pc, #268]	; (80028d8 <static_strings_allocate+0x160>)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	79db      	ldrb	r3, [r3, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <static_strings_allocate+0x76>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80027d8:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <static_strings_allocate+0x160>)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	2201      	movs	r2, #1
 80027e2:	71da      	strb	r2, [r3, #7]
				return &static_strings_short_strings_descriptors[i];
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <static_strings_allocate+0x160>)
 80027ea:	4413      	add	r3, r2
 80027ec:	e06d      	b.n	80028ca <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3301      	adds	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	dde7      	ble.n	80027ca <static_strings_allocate+0x52>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2bc8      	cmp	r3, #200	; 0xc8
 80027fe:	d81a      	bhi.n	8002836 <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e014      	b.n	8002830 <static_strings_allocate+0xb8>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002806:	4a35      	ldr	r2, [pc, #212]	; (80028dc <static_strings_allocate+0x164>)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	79db      	ldrb	r3, [r3, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <static_strings_allocate+0xb2>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002814:	4a31      	ldr	r2, [pc, #196]	; (80028dc <static_strings_allocate+0x164>)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	2201      	movs	r2, #1
 800281e:	71da      	strb	r2, [r3, #7]
				return &static_strings_medium_strings_descriptors[i];
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <static_strings_allocate+0x164>)
 8002826:	4413      	add	r3, r2
 8002828:	e04f      	b.n	80028ca <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	dde7      	ble.n	8002806 <static_strings_allocate+0x8e>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800283c:	d81a      	bhi.n	8002874 <static_strings_allocate+0xfc>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e014      	b.n	800286e <static_strings_allocate+0xf6>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <static_strings_allocate+0x168>)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	79db      	ldrb	r3, [r3, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <static_strings_allocate+0xf0>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <static_strings_allocate+0x168>)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	2201      	movs	r2, #1
 800285c:	71da      	strb	r2, [r3, #7]
				return &static_strings_long_strings_descriptors[i];
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <static_strings_allocate+0x168>)
 8002864:	4413      	add	r3, r2
 8002866:	e030      	b.n	80028ca <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3301      	adds	r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	dde7      	ble.n	8002844 <static_strings_allocate+0xcc>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800287a:	d81a      	bhi.n	80028b2 <static_strings_allocate+0x13a>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e014      	b.n	80028ac <static_strings_allocate+0x134>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <static_strings_allocate+0x16c>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	79db      	ldrb	r3, [r3, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <static_strings_allocate+0x12e>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <static_strings_allocate+0x16c>)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	2201      	movs	r2, #1
 800289a:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_long_strings_descriptors[i];
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <static_strings_allocate+0x16c>)
 80028a2:	4413      	add	r3, r2
 80028a4:	e011      	b.n	80028ca <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3301      	adds	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dde7      	ble.n	8002882 <static_strings_allocate+0x10a>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b8:	d803      	bhi.n	80028c2 <static_strings_allocate+0x14a>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <static_strings_allocate+0x170>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e002      	b.n	80028c8 <static_strings_allocate+0x150>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <static_strings_allocate+0x170>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	200008f4 	.word	0x200008f4
 80028d8:	20000d08 	.word	0x20000d08
 80028dc:	200008e4 	.word	0x200008e4
 80028e0:	20000d38 	.word	0x20000d38
 80028e4:	200000a4 	.word	0x200000a4
 80028e8:	200004f8 	.word	0x200004f8

080028ec <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f86b 	bl	80029d0 <static_strings_strlen>
 80028fa:	4603      	mov	r3, r0
 80028fc:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	e014      	b.n	8002932 <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff34 	bl	8002778 <static_strings_allocate>
 8002910:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <static_strings_save+0x30>
		return descriptor;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	e00a      	b.n	8002932 <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	89fa      	ldrh	r2, [r7, #14]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fa29 	bl	8002d7c <memcpy>
	descriptor->length = string_length;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	89fa      	ldrh	r2, [r7, #14]
 800292e:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8002930:	68bb      	ldr	r3, [r7, #8]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2205      	movs	r2, #5
 8002948:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f838 	bl	80029d0 <static_strings_strlen>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	889b      	ldrh	r3, [r3, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	if(string_descriptor->type != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	799b      	ldrb	r3, [r3, #6]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d002      	beq.n	800298a <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	71da      	strb	r2, [r3, #7]
	}
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	889b      	ldrh	r3, [r3, #4]
 80029a4:	3b02      	subs	r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b0d      	cmp	r3, #13
 80029ac:	d008      	beq.n	80029c0 <static_strings_is_line+0x2c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	889b      	ldrh	r3, [r3, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b0a      	cmp	r3, #10
 80029be:	d101      	bne.n	80029c4 <static_strings_is_line+0x30>
		return 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <static_strings_is_line+0x32>
	}
	return 0;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 80029d8:	2300      	movs	r3, #0
 80029da:	81fb      	strh	r3, [r7, #14]
 80029dc:	e010      	b.n	8002a00 <static_strings_strlen+0x30>
		if( *(string + length) == '\r'){
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b0d      	cmp	r3, #13
 80029e8:	d00f      	beq.n	8002a0a <static_strings_strlen+0x3a>
			break;
		}
		if( *(string + length) == '\0'){
 80029ea:	89fb      	ldrh	r3, [r7, #14]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <static_strings_strlen+0x2a>
			return length;
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	e022      	b.n	8002a40 <static_strings_strlen+0x70>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 80029fa:	89fb      	ldrh	r3, [r7, #14]
 80029fc:	3301      	adds	r3, #1
 80029fe:	81fb      	strh	r3, [r7, #14]
 8002a00:	89fb      	ldrh	r3, [r7, #14]
 8002a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a06:	d3ea      	bcc.n	80029de <static_strings_strlen+0xe>
 8002a08:	e000      	b.n	8002a0c <static_strings_strlen+0x3c>
			break;
 8002a0a:	bf00      	nop
		}
	}
	if(length >= 999){
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d904      	bls.n	8002a20 <static_strings_strlen+0x50>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_INVALID_STRING;
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <static_strings_strlen+0x7c>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
		return 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e00f      	b.n	8002a40 <static_strings_strlen+0x70>
	}
	else{
		if(*(string + length + 1) != '\n'){
 8002a20:	89fb      	ldrh	r3, [r7, #14]
 8002a22:	3301      	adds	r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b0a      	cmp	r3, #10
 8002a2c:	d005      	beq.n	8002a3a <static_strings_strlen+0x6a>
			*(string + length + 1) = '\n';
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	3301      	adds	r3, #1
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	220a      	movs	r2, #10
 8002a38:	701a      	strb	r2, [r3, #0]
		}
		return length + 2;
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	b29b      	uxth	r3, r3
	}
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200004f8 	.word	0x200004f8

08002a50 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <static_strings_string_splitter_set_parameters+0x2c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <static_strings_string_splitter_set_parameters+0x2c>)
 8002a68:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 8002a6a:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <static_strings_string_splitter_set_parameters+0x2c>)
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	7213      	strb	r3, [r2, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000090 	.word	0x20000090

08002a80 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor **string_descriptor){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4929      	ldr	r1, [pc, #164]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002a94:	6809      	ldr	r1, [r1, #0]
 8002a96:	8889      	ldrh	r1, [r1, #4]
 8002a98:	440b      	add	r3, r1
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d101      	bne.n	8002aa2 <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e045      	b.n	8002b2e <static_strings_string_splitter_get_next_token+0xae>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 8002aa8:	bf00      	nop
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	60fa      	str	r2, [r7, #12]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002ab4:	7a1b      	ldrb	r3, [r3, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d009      	beq.n	8002ace <static_strings_string_splitter_get_next_token+0x4e>
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	8892      	ldrh	r2, [r2, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d3ed      	bcc.n	8002aaa <static_strings_string_splitter_get_next_token+0x2a>

	int token_length;
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	8892      	ldrh	r2, [r2, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d105      	bne.n	8002aee <static_strings_string_splitter_get_next_token+0x6e>
		token_length = current_position - static_strings_string_splitter.next_token_start;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002ae6:	6852      	ldr	r2, [r2, #4]
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	e005      	b.n	8002afa <static_strings_string_splitter_get_next_token+0x7a>
	}
	else{
		token_length = current_position - static_strings_string_splitter.next_token_start - 1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a11      	ldr	r2, [pc, #68]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002af2:	6852      	ldr	r2, [r2, #4]
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	3b01      	subs	r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
	}
	*string_descriptor = static_strings_allocate(token_length);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fe3a 	bl	8002778 <static_strings_allocate>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	601a      	str	r2, [r3, #0]
	memcpy((*string_descriptor)->string,static_strings_string_splitter.next_token_start,token_length);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	4619      	mov	r1, r3
 8002b18:	f000 f930 	bl	8002d7c <memcpy>
	(*string_descriptor)->length = token_length;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	b292      	uxth	r2, r2
 8002b24:	809a      	strh	r2, [r3, #4]
	static_strings_string_splitter.next_token_start = current_position;
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <static_strings_string_splitter_get_next_token+0xb8>)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6053      	str	r3, [r2, #4]
	return 1;
 8002b2c:	2301      	movs	r3, #1
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000090 	.word	0x20000090

08002b3c <static_strings_substring>:

static_strings_string_descriptor *static_strings_substring(static_strings_string_descriptor* string,uint16_t start_index,uint16_t finish_index){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	803b      	strh	r3, [r7, #0]
	if(start_index < 0 || start_index >= string->length){
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	889b      	ldrh	r3, [r3, #4]
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d304      	bcc.n	8002b60 <static_strings_substring+0x24>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_START_INDEX_OUT_OF_RANGE;
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <static_strings_substring+0x80>)
 8002b58:	2203      	movs	r2, #3
 8002b5a:	701a      	strb	r2, [r3, #0]
		return NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e028      	b.n	8002bb2 <static_strings_substring+0x76>
	}
	if(finish_index <= 0 || finish_index > string->length){
 8002b60:	883b      	ldrh	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <static_strings_substring+0x34>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	889b      	ldrh	r3, [r3, #4]
 8002b6a:	883a      	ldrh	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d904      	bls.n	8002b7a <static_strings_substring+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_FINISH_INDEX_OUT_OF_RANGE;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <static_strings_substring+0x80>)
 8002b72:	2204      	movs	r2, #4
 8002b74:	701a      	strb	r2, [r3, #0]
		return NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e01b      	b.n	8002bb2 <static_strings_substring+0x76>
	}
	uint16_t substring_length = finish_index - start_index;
 8002b7a:	883a      	ldrh	r2, [r7, #0]
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	81fb      	strh	r3, [r7, #14]
	static_strings_string_descriptor *substring = static_strings_allocate(substring_length);
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fdf7 	bl	8002778 <static_strings_allocate>
 8002b8a:	60b8      	str	r0, [r7, #8]
	if(substring == NULL){
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <static_strings_substring+0x5a>
		return substring;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	e00d      	b.n	8002bb2 <static_strings_substring+0x76>
	}
	memcpy(substring->string,string->string + start_index,substring_length);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	89fa      	ldrh	r2, [r7, #14]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f000 f8e9 	bl	8002d7c <memcpy>
	substring->length = substring_length;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	89fa      	ldrh	r2, [r7, #14]
 8002bae:	809a      	strh	r2, [r3, #4]
	return substring;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200004f8 	.word	0x200004f8

08002bc0 <static_strings_concatenate>:

static_strings_string_descriptor *static_strings_concatenate(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	int concatenated_string_length = concatenate_at->length + concatenate->length;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	889b      	ldrh	r3, [r3, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(concatenated_string_length);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fdcb 	bl	8002778 <static_strings_allocate>
 8002be2:	60b8      	str	r0, [r7, #8]
	if(concatenated_string == NULL){
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <static_strings_concatenate+0x2e>
		return concatenated_string;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	e019      	b.n	8002c22 <static_strings_concatenate+0x62>
	}
	memcpy(concatenated_string->string,concatenate_at->string,concatenate_at->length);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	889b      	ldrh	r3, [r3, #4]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f000 f8be 	bl	8002d7c <memcpy>
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	8892      	ldrh	r2, [r2, #4]
 8002c08:	1898      	adds	r0, r3, r2
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	889b      	ldrh	r3, [r3, #4]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 f8b2 	bl	8002d7c <memcpy>
	concatenated_string->length = concatenated_string_length;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	809a      	strh	r2, [r3, #4]
	return concatenated_string;
 8002c20:	68bb      	ldr	r3, [r7, #8]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <static_strings_contains_string>:

int static_strings_contains_string(static_strings_string_descriptor* search_in,static_strings_string_descriptor* search_for){
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
	if(search_in->length < search_for->length){
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	889a      	ldrh	r2, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	889b      	ldrh	r3, [r3, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d201      	bcs.n	8002c44 <static_strings_contains_string+0x1a>
		return 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e034      	b.n	8002cae <static_strings_contains_string+0x84>
	}
	int i,j;
	int searched_string_found;
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e026      	b.n	8002c98 <static_strings_contains_string+0x6e>
		searched_string_found = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < search_for->length;j++){
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e013      	b.n	8002c7c <static_strings_contains_string+0x52>
			if( *(search_in->string + i + j) != *(search_for->string + j) ){
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	6979      	ldr	r1, [r7, #20]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	440b      	add	r3, r1
 8002c5e:	4413      	add	r3, r2
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	440b      	add	r3, r1
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d002      	beq.n	8002c76 <static_strings_contains_string+0x4c>
				searched_string_found = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
				break;
 8002c74:	e008      	b.n	8002c88 <static_strings_contains_string+0x5e>
		for(j = 0; j < search_for->length;j++){
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	889b      	ldrh	r3, [r3, #4]
 8002c80:	461a      	mov	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4293      	cmp	r3, r2
 8002c86:	dbe5      	blt.n	8002c54 <static_strings_contains_string+0x2a>
			}
		}
		if(searched_string_found){
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <static_strings_contains_string+0x68>
			return 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00d      	b.n	8002cae <static_strings_contains_string+0x84>
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	889b      	ldrh	r3, [r3, #4]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	889b      	ldrh	r3, [r3, #4]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	1acb      	subs	r3, r1, r3
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	ddce      	ble.n	8002c4a <static_strings_contains_string+0x20>
		}
	}
	return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <static_strings_contains_char>:

int static_strings_contains_char(static_strings_string_descriptor* search_in,uint8_t search_for){
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i = 0;i < search_in->length;i++){
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e00c      	b.n	8002ce4 <static_strings_contains_char+0x2c>
		if( *(search_in->string + i) == search_for){
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d101      	bne.n	8002cde <static_strings_contains_char+0x26>
			return 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e009      	b.n	8002cf2 <static_strings_contains_char+0x3a>
	for(i = 0;i < search_in->length;i++){
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	889b      	ldrh	r3, [r3, #4]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4293      	cmp	r3, r2
 8002cee:	dbec      	blt.n	8002cca <static_strings_contains_char+0x12>
		}
	}
	return 0;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <static_strings_compare>:

int static_strings_compare(static_strings_string_descriptor* compare_string_one,static_strings_string_descriptor* compare_string_two){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
	if(compare_string_one->length != compare_string_two->length){
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	889a      	ldrh	r2, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	889b      	ldrh	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <static_strings_compare+0x1a>
		return 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e004      	b.n	8002d20 <static_strings_compare+0x24>
	}
	return static_strings_contains_string(compare_string_one,compare_string_two);
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff86 	bl	8002c2a <static_strings_contains_string>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <__errno>:
 8002d28:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <__errno+0x8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	2500      	movs	r5, #0
 8002d38:	4e0c      	ldr	r6, [pc, #48]	; (8002d6c <__libc_init_array+0x38>)
 8002d3a:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <__libc_init_array+0x3c>)
 8002d3c:	1ba4      	subs	r4, r4, r6
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	42a5      	cmp	r5, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	f000 fc36 	bl	80035b4 <_init>
 8002d48:	2500      	movs	r5, #0
 8002d4a:	4e0a      	ldr	r6, [pc, #40]	; (8002d74 <__libc_init_array+0x40>)
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <__libc_init_array+0x44>)
 8002d4e:	1ba4      	subs	r4, r4, r6
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	42a5      	cmp	r5, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d5c:	4798      	blx	r3
 8002d5e:	3501      	adds	r5, #1
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d66:	4798      	blx	r3
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	08004270 	.word	0x08004270
 8002d70:	08004270 	.word	0x08004270
 8002d74:	08004270 	.word	0x08004270
 8002d78:	08004274 	.word	0x08004274

08002d7c <memcpy>:
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	1e43      	subs	r3, r0, #1
 8002d80:	440a      	add	r2, r1
 8002d82:	4291      	cmp	r1, r2
 8002d84:	d100      	bne.n	8002d88 <memcpy+0xc>
 8002d86:	bd10      	pop	{r4, pc}
 8002d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d90:	e7f7      	b.n	8002d82 <memcpy+0x6>

08002d92 <memset>:
 8002d92:	4603      	mov	r3, r0
 8002d94:	4402      	add	r2, r0
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d100      	bne.n	8002d9c <memset+0xa>
 8002d9a:	4770      	bx	lr
 8002d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8002da0:	e7f9      	b.n	8002d96 <memset+0x4>
	...

08002da4 <siprintf>:
 8002da4:	b40e      	push	{r1, r2, r3}
 8002da6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002daa:	b500      	push	{lr}
 8002dac:	b09c      	sub	sp, #112	; 0x70
 8002dae:	ab1d      	add	r3, sp, #116	; 0x74
 8002db0:	9002      	str	r0, [sp, #8]
 8002db2:	9006      	str	r0, [sp, #24]
 8002db4:	9107      	str	r1, [sp, #28]
 8002db6:	9104      	str	r1, [sp, #16]
 8002db8:	4808      	ldr	r0, [pc, #32]	; (8002ddc <siprintf+0x38>)
 8002dba:	4909      	ldr	r1, [pc, #36]	; (8002de0 <siprintf+0x3c>)
 8002dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dc0:	9105      	str	r1, [sp, #20]
 8002dc2:	6800      	ldr	r0, [r0, #0]
 8002dc4:	a902      	add	r1, sp, #8
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	f000 f866 	bl	8002e98 <_svfiprintf_r>
 8002dcc:	2200      	movs	r2, #0
 8002dce:	9b02      	ldr	r3, [sp, #8]
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	b01c      	add	sp, #112	; 0x70
 8002dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dd8:	b003      	add	sp, #12
 8002dda:	4770      	bx	lr
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	ffff0208 	.word	0xffff0208

08002de4 <__ssputs_r>:
 8002de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002de8:	688e      	ldr	r6, [r1, #8]
 8002dea:	4682      	mov	sl, r0
 8002dec:	429e      	cmp	r6, r3
 8002dee:	460c      	mov	r4, r1
 8002df0:	4690      	mov	r8, r2
 8002df2:	4699      	mov	r9, r3
 8002df4:	d837      	bhi.n	8002e66 <__ssputs_r+0x82>
 8002df6:	898a      	ldrh	r2, [r1, #12]
 8002df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dfc:	d031      	beq.n	8002e62 <__ssputs_r+0x7e>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	6825      	ldr	r5, [r4, #0]
 8002e02:	6909      	ldr	r1, [r1, #16]
 8002e04:	1a6f      	subs	r7, r5, r1
 8002e06:	6965      	ldr	r5, [r4, #20]
 8002e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e10:	f109 0301 	add.w	r3, r9, #1
 8002e14:	443b      	add	r3, r7
 8002e16:	429d      	cmp	r5, r3
 8002e18:	bf38      	it	cc
 8002e1a:	461d      	movcc	r5, r3
 8002e1c:	0553      	lsls	r3, r2, #21
 8002e1e:	d530      	bpl.n	8002e82 <__ssputs_r+0x9e>
 8002e20:	4629      	mov	r1, r5
 8002e22:	f000 fb2d 	bl	8003480 <_malloc_r>
 8002e26:	4606      	mov	r6, r0
 8002e28:	b950      	cbnz	r0, 8002e40 <__ssputs_r+0x5c>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f8ca 3000 	str.w	r3, [sl]
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3a:	81a3      	strh	r3, [r4, #12]
 8002e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e40:	463a      	mov	r2, r7
 8002e42:	6921      	ldr	r1, [r4, #16]
 8002e44:	f7ff ff9a 	bl	8002d7c <memcpy>
 8002e48:	89a3      	ldrh	r3, [r4, #12]
 8002e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	81a3      	strh	r3, [r4, #12]
 8002e54:	6126      	str	r6, [r4, #16]
 8002e56:	443e      	add	r6, r7
 8002e58:	6026      	str	r6, [r4, #0]
 8002e5a:	464e      	mov	r6, r9
 8002e5c:	6165      	str	r5, [r4, #20]
 8002e5e:	1bed      	subs	r5, r5, r7
 8002e60:	60a5      	str	r5, [r4, #8]
 8002e62:	454e      	cmp	r6, r9
 8002e64:	d900      	bls.n	8002e68 <__ssputs_r+0x84>
 8002e66:	464e      	mov	r6, r9
 8002e68:	4632      	mov	r2, r6
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	f000 faa1 	bl	80033b4 <memmove>
 8002e72:	68a3      	ldr	r3, [r4, #8]
 8002e74:	2000      	movs	r0, #0
 8002e76:	1b9b      	subs	r3, r3, r6
 8002e78:	60a3      	str	r3, [r4, #8]
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	441e      	add	r6, r3
 8002e7e:	6026      	str	r6, [r4, #0]
 8002e80:	e7dc      	b.n	8002e3c <__ssputs_r+0x58>
 8002e82:	462a      	mov	r2, r5
 8002e84:	f000 fb56 	bl	8003534 <_realloc_r>
 8002e88:	4606      	mov	r6, r0
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d1e2      	bne.n	8002e54 <__ssputs_r+0x70>
 8002e8e:	6921      	ldr	r1, [r4, #16]
 8002e90:	4650      	mov	r0, sl
 8002e92:	f000 faa9 	bl	80033e8 <_free_r>
 8002e96:	e7c8      	b.n	8002e2a <__ssputs_r+0x46>

08002e98 <_svfiprintf_r>:
 8002e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	898b      	ldrh	r3, [r1, #12]
 8002ea0:	b09d      	sub	sp, #116	; 0x74
 8002ea2:	061f      	lsls	r7, r3, #24
 8002ea4:	4680      	mov	r8, r0
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	4616      	mov	r6, r2
 8002eaa:	d50f      	bpl.n	8002ecc <_svfiprintf_r+0x34>
 8002eac:	690b      	ldr	r3, [r1, #16]
 8002eae:	b96b      	cbnz	r3, 8002ecc <_svfiprintf_r+0x34>
 8002eb0:	2140      	movs	r1, #64	; 0x40
 8002eb2:	f000 fae5 	bl	8003480 <_malloc_r>
 8002eb6:	6020      	str	r0, [r4, #0]
 8002eb8:	6120      	str	r0, [r4, #16]
 8002eba:	b928      	cbnz	r0, 8002ec8 <_svfiprintf_r+0x30>
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	f8c8 3000 	str.w	r3, [r8]
 8002ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec6:	e0c8      	b.n	800305a <_svfiprintf_r+0x1c2>
 8002ec8:	2340      	movs	r3, #64	; 0x40
 8002eca:	6163      	str	r3, [r4, #20]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ed6:	2330      	movs	r3, #48	; 0x30
 8002ed8:	f04f 0b01 	mov.w	fp, #1
 8002edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ee0:	9503      	str	r5, [sp, #12]
 8002ee2:	4637      	mov	r7, r6
 8002ee4:	463d      	mov	r5, r7
 8002ee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002eea:	b10b      	cbz	r3, 8002ef0 <_svfiprintf_r+0x58>
 8002eec:	2b25      	cmp	r3, #37	; 0x25
 8002eee:	d13e      	bne.n	8002f6e <_svfiprintf_r+0xd6>
 8002ef0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ef4:	d00b      	beq.n	8002f0e <_svfiprintf_r+0x76>
 8002ef6:	4653      	mov	r3, sl
 8002ef8:	4632      	mov	r2, r6
 8002efa:	4621      	mov	r1, r4
 8002efc:	4640      	mov	r0, r8
 8002efe:	f7ff ff71 	bl	8002de4 <__ssputs_r>
 8002f02:	3001      	adds	r0, #1
 8002f04:	f000 80a4 	beq.w	8003050 <_svfiprintf_r+0x1b8>
 8002f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f0a:	4453      	add	r3, sl
 8002f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f0e:	783b      	ldrb	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 809d 	beq.w	8003050 <_svfiprintf_r+0x1b8>
 8002f16:	2300      	movs	r3, #0
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f20:	9304      	str	r3, [sp, #16]
 8002f22:	9307      	str	r3, [sp, #28]
 8002f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f28:	931a      	str	r3, [sp, #104]	; 0x68
 8002f2a:	462f      	mov	r7, r5
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f32:	4850      	ldr	r0, [pc, #320]	; (8003074 <_svfiprintf_r+0x1dc>)
 8002f34:	f000 fa30 	bl	8003398 <memchr>
 8002f38:	9b04      	ldr	r3, [sp, #16]
 8002f3a:	b9d0      	cbnz	r0, 8002f72 <_svfiprintf_r+0xda>
 8002f3c:	06d9      	lsls	r1, r3, #27
 8002f3e:	bf44      	itt	mi
 8002f40:	2220      	movmi	r2, #32
 8002f42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f46:	071a      	lsls	r2, r3, #28
 8002f48:	bf44      	itt	mi
 8002f4a:	222b      	movmi	r2, #43	; 0x2b
 8002f4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f50:	782a      	ldrb	r2, [r5, #0]
 8002f52:	2a2a      	cmp	r2, #42	; 0x2a
 8002f54:	d015      	beq.n	8002f82 <_svfiprintf_r+0xea>
 8002f56:	462f      	mov	r7, r5
 8002f58:	2000      	movs	r0, #0
 8002f5a:	250a      	movs	r5, #10
 8002f5c:	9a07      	ldr	r2, [sp, #28]
 8002f5e:	4639      	mov	r1, r7
 8002f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f64:	3b30      	subs	r3, #48	; 0x30
 8002f66:	2b09      	cmp	r3, #9
 8002f68:	d94d      	bls.n	8003006 <_svfiprintf_r+0x16e>
 8002f6a:	b1b8      	cbz	r0, 8002f9c <_svfiprintf_r+0x104>
 8002f6c:	e00f      	b.n	8002f8e <_svfiprintf_r+0xf6>
 8002f6e:	462f      	mov	r7, r5
 8002f70:	e7b8      	b.n	8002ee4 <_svfiprintf_r+0x4c>
 8002f72:	4a40      	ldr	r2, [pc, #256]	; (8003074 <_svfiprintf_r+0x1dc>)
 8002f74:	463d      	mov	r5, r7
 8002f76:	1a80      	subs	r0, r0, r2
 8002f78:	fa0b f000 	lsl.w	r0, fp, r0
 8002f7c:	4318      	orrs	r0, r3
 8002f7e:	9004      	str	r0, [sp, #16]
 8002f80:	e7d3      	b.n	8002f2a <_svfiprintf_r+0x92>
 8002f82:	9a03      	ldr	r2, [sp, #12]
 8002f84:	1d11      	adds	r1, r2, #4
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	9103      	str	r1, [sp, #12]
 8002f8a:	2a00      	cmp	r2, #0
 8002f8c:	db01      	blt.n	8002f92 <_svfiprintf_r+0xfa>
 8002f8e:	9207      	str	r2, [sp, #28]
 8002f90:	e004      	b.n	8002f9c <_svfiprintf_r+0x104>
 8002f92:	4252      	negs	r2, r2
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	9207      	str	r2, [sp, #28]
 8002f9a:	9304      	str	r3, [sp, #16]
 8002f9c:	783b      	ldrb	r3, [r7, #0]
 8002f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002fa0:	d10c      	bne.n	8002fbc <_svfiprintf_r+0x124>
 8002fa2:	787b      	ldrb	r3, [r7, #1]
 8002fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa6:	d133      	bne.n	8003010 <_svfiprintf_r+0x178>
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	3702      	adds	r7, #2
 8002fac:	1d1a      	adds	r2, r3, #4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	9203      	str	r2, [sp, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfb8      	it	lt
 8002fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fba:	9305      	str	r3, [sp, #20]
 8002fbc:	4d2e      	ldr	r5, [pc, #184]	; (8003078 <_svfiprintf_r+0x1e0>)
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	7839      	ldrb	r1, [r7, #0]
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f000 f9e8 	bl	8003398 <memchr>
 8002fc8:	b138      	cbz	r0, 8002fda <_svfiprintf_r+0x142>
 8002fca:	2340      	movs	r3, #64	; 0x40
 8002fcc:	1b40      	subs	r0, r0, r5
 8002fce:	fa03 f000 	lsl.w	r0, r3, r0
 8002fd2:	9b04      	ldr	r3, [sp, #16]
 8002fd4:	3701      	adds	r7, #1
 8002fd6:	4303      	orrs	r3, r0
 8002fd8:	9304      	str	r3, [sp, #16]
 8002fda:	7839      	ldrb	r1, [r7, #0]
 8002fdc:	2206      	movs	r2, #6
 8002fde:	4827      	ldr	r0, [pc, #156]	; (800307c <_svfiprintf_r+0x1e4>)
 8002fe0:	1c7e      	adds	r6, r7, #1
 8002fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fe6:	f000 f9d7 	bl	8003398 <memchr>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d038      	beq.n	8003060 <_svfiprintf_r+0x1c8>
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <_svfiprintf_r+0x1e8>)
 8002ff0:	bb13      	cbnz	r3, 8003038 <_svfiprintf_r+0x1a0>
 8002ff2:	9b03      	ldr	r3, [sp, #12]
 8002ff4:	3307      	adds	r3, #7
 8002ff6:	f023 0307 	bic.w	r3, r3, #7
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	9303      	str	r3, [sp, #12]
 8002ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003000:	444b      	add	r3, r9
 8003002:	9309      	str	r3, [sp, #36]	; 0x24
 8003004:	e76d      	b.n	8002ee2 <_svfiprintf_r+0x4a>
 8003006:	fb05 3202 	mla	r2, r5, r2, r3
 800300a:	2001      	movs	r0, #1
 800300c:	460f      	mov	r7, r1
 800300e:	e7a6      	b.n	8002f5e <_svfiprintf_r+0xc6>
 8003010:	2300      	movs	r3, #0
 8003012:	250a      	movs	r5, #10
 8003014:	4619      	mov	r1, r3
 8003016:	3701      	adds	r7, #1
 8003018:	9305      	str	r3, [sp, #20]
 800301a:	4638      	mov	r0, r7
 800301c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003020:	3a30      	subs	r2, #48	; 0x30
 8003022:	2a09      	cmp	r2, #9
 8003024:	d903      	bls.n	800302e <_svfiprintf_r+0x196>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0c8      	beq.n	8002fbc <_svfiprintf_r+0x124>
 800302a:	9105      	str	r1, [sp, #20]
 800302c:	e7c6      	b.n	8002fbc <_svfiprintf_r+0x124>
 800302e:	fb05 2101 	mla	r1, r5, r1, r2
 8003032:	2301      	movs	r3, #1
 8003034:	4607      	mov	r7, r0
 8003036:	e7f0      	b.n	800301a <_svfiprintf_r+0x182>
 8003038:	ab03      	add	r3, sp, #12
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4622      	mov	r2, r4
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_svfiprintf_r+0x1ec>)
 8003040:	a904      	add	r1, sp, #16
 8003042:	4640      	mov	r0, r8
 8003044:	f3af 8000 	nop.w
 8003048:	f1b0 3fff 	cmp.w	r0, #4294967295
 800304c:	4681      	mov	r9, r0
 800304e:	d1d6      	bne.n	8002ffe <_svfiprintf_r+0x166>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	065b      	lsls	r3, r3, #25
 8003054:	f53f af35 	bmi.w	8002ec2 <_svfiprintf_r+0x2a>
 8003058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800305a:	b01d      	add	sp, #116	; 0x74
 800305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003060:	ab03      	add	r3, sp, #12
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4622      	mov	r2, r4
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_svfiprintf_r+0x1ec>)
 8003068:	a904      	add	r1, sp, #16
 800306a:	4640      	mov	r0, r8
 800306c:	f000 f882 	bl	8003174 <_printf_i>
 8003070:	e7ea      	b.n	8003048 <_svfiprintf_r+0x1b0>
 8003072:	bf00      	nop
 8003074:	0800423c 	.word	0x0800423c
 8003078:	08004242 	.word	0x08004242
 800307c:	08004246 	.word	0x08004246
 8003080:	00000000 	.word	0x00000000
 8003084:	08002de5 	.word	0x08002de5

08003088 <_printf_common>:
 8003088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800308c:	4691      	mov	r9, r2
 800308e:	461f      	mov	r7, r3
 8003090:	688a      	ldr	r2, [r1, #8]
 8003092:	690b      	ldr	r3, [r1, #16]
 8003094:	4606      	mov	r6, r0
 8003096:	4293      	cmp	r3, r2
 8003098:	bfb8      	it	lt
 800309a:	4613      	movlt	r3, r2
 800309c:	f8c9 3000 	str.w	r3, [r9]
 80030a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030a4:	460c      	mov	r4, r1
 80030a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030aa:	b112      	cbz	r2, 80030b2 <_printf_common+0x2a>
 80030ac:	3301      	adds	r3, #1
 80030ae:	f8c9 3000 	str.w	r3, [r9]
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	0699      	lsls	r1, r3, #26
 80030b6:	bf42      	ittt	mi
 80030b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030bc:	3302      	addmi	r3, #2
 80030be:	f8c9 3000 	strmi.w	r3, [r9]
 80030c2:	6825      	ldr	r5, [r4, #0]
 80030c4:	f015 0506 	ands.w	r5, r5, #6
 80030c8:	d107      	bne.n	80030da <_printf_common+0x52>
 80030ca:	f104 0a19 	add.w	sl, r4, #25
 80030ce:	68e3      	ldr	r3, [r4, #12]
 80030d0:	f8d9 2000 	ldr.w	r2, [r9]
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	42ab      	cmp	r3, r5
 80030d8:	dc29      	bgt.n	800312e <_printf_common+0xa6>
 80030da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	3300      	adds	r3, #0
 80030e2:	bf18      	it	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	0692      	lsls	r2, r2, #26
 80030e8:	d42e      	bmi.n	8003148 <_printf_common+0xc0>
 80030ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030ee:	4639      	mov	r1, r7
 80030f0:	4630      	mov	r0, r6
 80030f2:	47c0      	blx	r8
 80030f4:	3001      	adds	r0, #1
 80030f6:	d021      	beq.n	800313c <_printf_common+0xb4>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	68e5      	ldr	r5, [r4, #12]
 80030fc:	f003 0306 	and.w	r3, r3, #6
 8003100:	2b04      	cmp	r3, #4
 8003102:	bf18      	it	ne
 8003104:	2500      	movne	r5, #0
 8003106:	f8d9 2000 	ldr.w	r2, [r9]
 800310a:	f04f 0900 	mov.w	r9, #0
 800310e:	bf08      	it	eq
 8003110:	1aad      	subeq	r5, r5, r2
 8003112:	68a3      	ldr	r3, [r4, #8]
 8003114:	6922      	ldr	r2, [r4, #16]
 8003116:	bf08      	it	eq
 8003118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800311c:	4293      	cmp	r3, r2
 800311e:	bfc4      	itt	gt
 8003120:	1a9b      	subgt	r3, r3, r2
 8003122:	18ed      	addgt	r5, r5, r3
 8003124:	341a      	adds	r4, #26
 8003126:	454d      	cmp	r5, r9
 8003128:	d11a      	bne.n	8003160 <_printf_common+0xd8>
 800312a:	2000      	movs	r0, #0
 800312c:	e008      	b.n	8003140 <_printf_common+0xb8>
 800312e:	2301      	movs	r3, #1
 8003130:	4652      	mov	r2, sl
 8003132:	4639      	mov	r1, r7
 8003134:	4630      	mov	r0, r6
 8003136:	47c0      	blx	r8
 8003138:	3001      	adds	r0, #1
 800313a:	d103      	bne.n	8003144 <_printf_common+0xbc>
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003144:	3501      	adds	r5, #1
 8003146:	e7c2      	b.n	80030ce <_printf_common+0x46>
 8003148:	2030      	movs	r0, #48	; 0x30
 800314a:	18e1      	adds	r1, r4, r3
 800314c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003156:	4422      	add	r2, r4
 8003158:	3302      	adds	r3, #2
 800315a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800315e:	e7c4      	b.n	80030ea <_printf_common+0x62>
 8003160:	2301      	movs	r3, #1
 8003162:	4622      	mov	r2, r4
 8003164:	4639      	mov	r1, r7
 8003166:	4630      	mov	r0, r6
 8003168:	47c0      	blx	r8
 800316a:	3001      	adds	r0, #1
 800316c:	d0e6      	beq.n	800313c <_printf_common+0xb4>
 800316e:	f109 0901 	add.w	r9, r9, #1
 8003172:	e7d8      	b.n	8003126 <_printf_common+0x9e>

08003174 <_printf_i>:
 8003174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003178:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800317c:	460c      	mov	r4, r1
 800317e:	7e09      	ldrb	r1, [r1, #24]
 8003180:	b085      	sub	sp, #20
 8003182:	296e      	cmp	r1, #110	; 0x6e
 8003184:	4617      	mov	r7, r2
 8003186:	4606      	mov	r6, r0
 8003188:	4698      	mov	r8, r3
 800318a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800318c:	f000 80b3 	beq.w	80032f6 <_printf_i+0x182>
 8003190:	d822      	bhi.n	80031d8 <_printf_i+0x64>
 8003192:	2963      	cmp	r1, #99	; 0x63
 8003194:	d036      	beq.n	8003204 <_printf_i+0x90>
 8003196:	d80a      	bhi.n	80031ae <_printf_i+0x3a>
 8003198:	2900      	cmp	r1, #0
 800319a:	f000 80b9 	beq.w	8003310 <_printf_i+0x19c>
 800319e:	2958      	cmp	r1, #88	; 0x58
 80031a0:	f000 8083 	beq.w	80032aa <_printf_i+0x136>
 80031a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031ac:	e032      	b.n	8003214 <_printf_i+0xa0>
 80031ae:	2964      	cmp	r1, #100	; 0x64
 80031b0:	d001      	beq.n	80031b6 <_printf_i+0x42>
 80031b2:	2969      	cmp	r1, #105	; 0x69
 80031b4:	d1f6      	bne.n	80031a4 <_printf_i+0x30>
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	0605      	lsls	r5, r0, #24
 80031bc:	f103 0104 	add.w	r1, r3, #4
 80031c0:	d52a      	bpl.n	8003218 <_printf_i+0xa4>
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da03      	bge.n	80031d2 <_printf_i+0x5e>
 80031ca:	222d      	movs	r2, #45	; 0x2d
 80031cc:	425b      	negs	r3, r3
 80031ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031d2:	486f      	ldr	r0, [pc, #444]	; (8003390 <_printf_i+0x21c>)
 80031d4:	220a      	movs	r2, #10
 80031d6:	e039      	b.n	800324c <_printf_i+0xd8>
 80031d8:	2973      	cmp	r1, #115	; 0x73
 80031da:	f000 809d 	beq.w	8003318 <_printf_i+0x1a4>
 80031de:	d808      	bhi.n	80031f2 <_printf_i+0x7e>
 80031e0:	296f      	cmp	r1, #111	; 0x6f
 80031e2:	d020      	beq.n	8003226 <_printf_i+0xb2>
 80031e4:	2970      	cmp	r1, #112	; 0x70
 80031e6:	d1dd      	bne.n	80031a4 <_printf_i+0x30>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f043 0320 	orr.w	r3, r3, #32
 80031ee:	6023      	str	r3, [r4, #0]
 80031f0:	e003      	b.n	80031fa <_printf_i+0x86>
 80031f2:	2975      	cmp	r1, #117	; 0x75
 80031f4:	d017      	beq.n	8003226 <_printf_i+0xb2>
 80031f6:	2978      	cmp	r1, #120	; 0x78
 80031f8:	d1d4      	bne.n	80031a4 <_printf_i+0x30>
 80031fa:	2378      	movs	r3, #120	; 0x78
 80031fc:	4865      	ldr	r0, [pc, #404]	; (8003394 <_printf_i+0x220>)
 80031fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003202:	e055      	b.n	80032b0 <_printf_i+0x13c>
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800320a:	1d19      	adds	r1, r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6011      	str	r1, [r2, #0]
 8003210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003214:	2301      	movs	r3, #1
 8003216:	e08c      	b.n	8003332 <_printf_i+0x1be>
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800321e:	6011      	str	r1, [r2, #0]
 8003220:	bf18      	it	ne
 8003222:	b21b      	sxthne	r3, r3
 8003224:	e7cf      	b.n	80031c6 <_printf_i+0x52>
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	6825      	ldr	r5, [r4, #0]
 800322a:	1d18      	adds	r0, r3, #4
 800322c:	6010      	str	r0, [r2, #0]
 800322e:	0628      	lsls	r0, r5, #24
 8003230:	d501      	bpl.n	8003236 <_printf_i+0xc2>
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	e002      	b.n	800323c <_printf_i+0xc8>
 8003236:	0668      	lsls	r0, r5, #25
 8003238:	d5fb      	bpl.n	8003232 <_printf_i+0xbe>
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	296f      	cmp	r1, #111	; 0x6f
 800323e:	bf14      	ite	ne
 8003240:	220a      	movne	r2, #10
 8003242:	2208      	moveq	r2, #8
 8003244:	4852      	ldr	r0, [pc, #328]	; (8003390 <_printf_i+0x21c>)
 8003246:	2100      	movs	r1, #0
 8003248:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800324c:	6865      	ldr	r5, [r4, #4]
 800324e:	2d00      	cmp	r5, #0
 8003250:	60a5      	str	r5, [r4, #8]
 8003252:	f2c0 8095 	blt.w	8003380 <_printf_i+0x20c>
 8003256:	6821      	ldr	r1, [r4, #0]
 8003258:	f021 0104 	bic.w	r1, r1, #4
 800325c:	6021      	str	r1, [r4, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d13d      	bne.n	80032de <_printf_i+0x16a>
 8003262:	2d00      	cmp	r5, #0
 8003264:	f040 808e 	bne.w	8003384 <_printf_i+0x210>
 8003268:	4665      	mov	r5, ip
 800326a:	2a08      	cmp	r2, #8
 800326c:	d10b      	bne.n	8003286 <_printf_i+0x112>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	07db      	lsls	r3, r3, #31
 8003272:	d508      	bpl.n	8003286 <_printf_i+0x112>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	6862      	ldr	r2, [r4, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	bfde      	ittt	le
 800327c:	2330      	movle	r3, #48	; 0x30
 800327e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003282:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003286:	ebac 0305 	sub.w	r3, ip, r5
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	f8cd 8000 	str.w	r8, [sp]
 8003290:	463b      	mov	r3, r7
 8003292:	aa03      	add	r2, sp, #12
 8003294:	4621      	mov	r1, r4
 8003296:	4630      	mov	r0, r6
 8003298:	f7ff fef6 	bl	8003088 <_printf_common>
 800329c:	3001      	adds	r0, #1
 800329e:	d14d      	bne.n	800333c <_printf_i+0x1c8>
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	b005      	add	sp, #20
 80032a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032aa:	4839      	ldr	r0, [pc, #228]	; (8003390 <_printf_i+0x21c>)
 80032ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032b0:	6813      	ldr	r3, [r2, #0]
 80032b2:	6821      	ldr	r1, [r4, #0]
 80032b4:	1d1d      	adds	r5, r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6015      	str	r5, [r2, #0]
 80032ba:	060a      	lsls	r2, r1, #24
 80032bc:	d50b      	bpl.n	80032d6 <_printf_i+0x162>
 80032be:	07ca      	lsls	r2, r1, #31
 80032c0:	bf44      	itt	mi
 80032c2:	f041 0120 	orrmi.w	r1, r1, #32
 80032c6:	6021      	strmi	r1, [r4, #0]
 80032c8:	b91b      	cbnz	r3, 80032d2 <_printf_i+0x15e>
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	f022 0220 	bic.w	r2, r2, #32
 80032d0:	6022      	str	r2, [r4, #0]
 80032d2:	2210      	movs	r2, #16
 80032d4:	e7b7      	b.n	8003246 <_printf_i+0xd2>
 80032d6:	064d      	lsls	r5, r1, #25
 80032d8:	bf48      	it	mi
 80032da:	b29b      	uxthmi	r3, r3
 80032dc:	e7ef      	b.n	80032be <_printf_i+0x14a>
 80032de:	4665      	mov	r5, ip
 80032e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80032e4:	fb02 3311 	mls	r3, r2, r1, r3
 80032e8:	5cc3      	ldrb	r3, [r0, r3]
 80032ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032ee:	460b      	mov	r3, r1
 80032f0:	2900      	cmp	r1, #0
 80032f2:	d1f5      	bne.n	80032e0 <_printf_i+0x16c>
 80032f4:	e7b9      	b.n	800326a <_printf_i+0xf6>
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	6825      	ldr	r5, [r4, #0]
 80032fa:	1d18      	adds	r0, r3, #4
 80032fc:	6961      	ldr	r1, [r4, #20]
 80032fe:	6010      	str	r0, [r2, #0]
 8003300:	0628      	lsls	r0, r5, #24
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	d501      	bpl.n	800330a <_printf_i+0x196>
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	e002      	b.n	8003310 <_printf_i+0x19c>
 800330a:	066a      	lsls	r2, r5, #25
 800330c:	d5fb      	bpl.n	8003306 <_printf_i+0x192>
 800330e:	8019      	strh	r1, [r3, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	4665      	mov	r5, ip
 8003314:	6123      	str	r3, [r4, #16]
 8003316:	e7b9      	b.n	800328c <_printf_i+0x118>
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	1d19      	adds	r1, r3, #4
 800331c:	6011      	str	r1, [r2, #0]
 800331e:	681d      	ldr	r5, [r3, #0]
 8003320:	6862      	ldr	r2, [r4, #4]
 8003322:	2100      	movs	r1, #0
 8003324:	4628      	mov	r0, r5
 8003326:	f000 f837 	bl	8003398 <memchr>
 800332a:	b108      	cbz	r0, 8003330 <_printf_i+0x1bc>
 800332c:	1b40      	subs	r0, r0, r5
 800332e:	6060      	str	r0, [r4, #4]
 8003330:	6863      	ldr	r3, [r4, #4]
 8003332:	6123      	str	r3, [r4, #16]
 8003334:	2300      	movs	r3, #0
 8003336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333a:	e7a7      	b.n	800328c <_printf_i+0x118>
 800333c:	6923      	ldr	r3, [r4, #16]
 800333e:	462a      	mov	r2, r5
 8003340:	4639      	mov	r1, r7
 8003342:	4630      	mov	r0, r6
 8003344:	47c0      	blx	r8
 8003346:	3001      	adds	r0, #1
 8003348:	d0aa      	beq.n	80032a0 <_printf_i+0x12c>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	079b      	lsls	r3, r3, #30
 800334e:	d413      	bmi.n	8003378 <_printf_i+0x204>
 8003350:	68e0      	ldr	r0, [r4, #12]
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	4298      	cmp	r0, r3
 8003356:	bfb8      	it	lt
 8003358:	4618      	movlt	r0, r3
 800335a:	e7a3      	b.n	80032a4 <_printf_i+0x130>
 800335c:	2301      	movs	r3, #1
 800335e:	464a      	mov	r2, r9
 8003360:	4639      	mov	r1, r7
 8003362:	4630      	mov	r0, r6
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d09a      	beq.n	80032a0 <_printf_i+0x12c>
 800336a:	3501      	adds	r5, #1
 800336c:	68e3      	ldr	r3, [r4, #12]
 800336e:	9a03      	ldr	r2, [sp, #12]
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	42ab      	cmp	r3, r5
 8003374:	dcf2      	bgt.n	800335c <_printf_i+0x1e8>
 8003376:	e7eb      	b.n	8003350 <_printf_i+0x1dc>
 8003378:	2500      	movs	r5, #0
 800337a:	f104 0919 	add.w	r9, r4, #25
 800337e:	e7f5      	b.n	800336c <_printf_i+0x1f8>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ac      	bne.n	80032de <_printf_i+0x16a>
 8003384:	7803      	ldrb	r3, [r0, #0]
 8003386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800338a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800338e:	e76c      	b.n	800326a <_printf_i+0xf6>
 8003390:	0800424d 	.word	0x0800424d
 8003394:	0800425e 	.word	0x0800425e

08003398 <memchr>:
 8003398:	b510      	push	{r4, lr}
 800339a:	b2c9      	uxtb	r1, r1
 800339c:	4402      	add	r2, r0
 800339e:	4290      	cmp	r0, r2
 80033a0:	4603      	mov	r3, r0
 80033a2:	d101      	bne.n	80033a8 <memchr+0x10>
 80033a4:	2300      	movs	r3, #0
 80033a6:	e003      	b.n	80033b0 <memchr+0x18>
 80033a8:	781c      	ldrb	r4, [r3, #0]
 80033aa:	3001      	adds	r0, #1
 80033ac:	428c      	cmp	r4, r1
 80033ae:	d1f6      	bne.n	800339e <memchr+0x6>
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd10      	pop	{r4, pc}

080033b4 <memmove>:
 80033b4:	4288      	cmp	r0, r1
 80033b6:	b510      	push	{r4, lr}
 80033b8:	eb01 0302 	add.w	r3, r1, r2
 80033bc:	d807      	bhi.n	80033ce <memmove+0x1a>
 80033be:	1e42      	subs	r2, r0, #1
 80033c0:	4299      	cmp	r1, r3
 80033c2:	d00a      	beq.n	80033da <memmove+0x26>
 80033c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80033cc:	e7f8      	b.n	80033c0 <memmove+0xc>
 80033ce:	4283      	cmp	r3, r0
 80033d0:	d9f5      	bls.n	80033be <memmove+0xa>
 80033d2:	1881      	adds	r1, r0, r2
 80033d4:	1ad2      	subs	r2, r2, r3
 80033d6:	42d3      	cmn	r3, r2
 80033d8:	d100      	bne.n	80033dc <memmove+0x28>
 80033da:	bd10      	pop	{r4, pc}
 80033dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033e4:	e7f7      	b.n	80033d6 <memmove+0x22>
	...

080033e8 <_free_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4605      	mov	r5, r0
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d043      	beq.n	8003478 <_free_r+0x90>
 80033f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f4:	1f0c      	subs	r4, r1, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bfb8      	it	lt
 80033fa:	18e4      	addlt	r4, r4, r3
 80033fc:	f000 f8d0 	bl	80035a0 <__malloc_lock>
 8003400:	4a1e      	ldr	r2, [pc, #120]	; (800347c <_free_r+0x94>)
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	4610      	mov	r0, r2
 8003406:	b933      	cbnz	r3, 8003416 <_free_r+0x2e>
 8003408:	6063      	str	r3, [r4, #4]
 800340a:	6014      	str	r4, [r2, #0]
 800340c:	4628      	mov	r0, r5
 800340e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003412:	f000 b8c6 	b.w	80035a2 <__malloc_unlock>
 8003416:	42a3      	cmp	r3, r4
 8003418:	d90b      	bls.n	8003432 <_free_r+0x4a>
 800341a:	6821      	ldr	r1, [r4, #0]
 800341c:	1862      	adds	r2, r4, r1
 800341e:	4293      	cmp	r3, r2
 8003420:	bf01      	itttt	eq
 8003422:	681a      	ldreq	r2, [r3, #0]
 8003424:	685b      	ldreq	r3, [r3, #4]
 8003426:	1852      	addeq	r2, r2, r1
 8003428:	6022      	streq	r2, [r4, #0]
 800342a:	6063      	str	r3, [r4, #4]
 800342c:	6004      	str	r4, [r0, #0]
 800342e:	e7ed      	b.n	800340c <_free_r+0x24>
 8003430:	4613      	mov	r3, r2
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	b10a      	cbz	r2, 800343a <_free_r+0x52>
 8003436:	42a2      	cmp	r2, r4
 8003438:	d9fa      	bls.n	8003430 <_free_r+0x48>
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	1858      	adds	r0, r3, r1
 800343e:	42a0      	cmp	r0, r4
 8003440:	d10b      	bne.n	800345a <_free_r+0x72>
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	4401      	add	r1, r0
 8003446:	1858      	adds	r0, r3, r1
 8003448:	4282      	cmp	r2, r0
 800344a:	6019      	str	r1, [r3, #0]
 800344c:	d1de      	bne.n	800340c <_free_r+0x24>
 800344e:	6810      	ldr	r0, [r2, #0]
 8003450:	6852      	ldr	r2, [r2, #4]
 8003452:	4401      	add	r1, r0
 8003454:	6019      	str	r1, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	e7d8      	b.n	800340c <_free_r+0x24>
 800345a:	d902      	bls.n	8003462 <_free_r+0x7a>
 800345c:	230c      	movs	r3, #12
 800345e:	602b      	str	r3, [r5, #0]
 8003460:	e7d4      	b.n	800340c <_free_r+0x24>
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	1821      	adds	r1, r4, r0
 8003466:	428a      	cmp	r2, r1
 8003468:	bf01      	itttt	eq
 800346a:	6811      	ldreq	r1, [r2, #0]
 800346c:	6852      	ldreq	r2, [r2, #4]
 800346e:	1809      	addeq	r1, r1, r0
 8003470:	6021      	streq	r1, [r4, #0]
 8003472:	6062      	str	r2, [r4, #4]
 8003474:	605c      	str	r4, [r3, #4]
 8003476:	e7c9      	b.n	800340c <_free_r+0x24>
 8003478:	bd38      	pop	{r3, r4, r5, pc}
 800347a:	bf00      	nop
 800347c:	2000009c 	.word	0x2000009c

08003480 <_malloc_r>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	1ccd      	adds	r5, r1, #3
 8003484:	f025 0503 	bic.w	r5, r5, #3
 8003488:	3508      	adds	r5, #8
 800348a:	2d0c      	cmp	r5, #12
 800348c:	bf38      	it	cc
 800348e:	250c      	movcc	r5, #12
 8003490:	2d00      	cmp	r5, #0
 8003492:	4606      	mov	r6, r0
 8003494:	db01      	blt.n	800349a <_malloc_r+0x1a>
 8003496:	42a9      	cmp	r1, r5
 8003498:	d903      	bls.n	80034a2 <_malloc_r+0x22>
 800349a:	230c      	movs	r3, #12
 800349c:	6033      	str	r3, [r6, #0]
 800349e:	2000      	movs	r0, #0
 80034a0:	bd70      	pop	{r4, r5, r6, pc}
 80034a2:	f000 f87d 	bl	80035a0 <__malloc_lock>
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <_malloc_r+0xac>)
 80034a8:	6814      	ldr	r4, [r2, #0]
 80034aa:	4621      	mov	r1, r4
 80034ac:	b991      	cbnz	r1, 80034d4 <_malloc_r+0x54>
 80034ae:	4c20      	ldr	r4, [pc, #128]	; (8003530 <_malloc_r+0xb0>)
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	b91b      	cbnz	r3, 80034bc <_malloc_r+0x3c>
 80034b4:	4630      	mov	r0, r6
 80034b6:	f000 f863 	bl	8003580 <_sbrk_r>
 80034ba:	6020      	str	r0, [r4, #0]
 80034bc:	4629      	mov	r1, r5
 80034be:	4630      	mov	r0, r6
 80034c0:	f000 f85e 	bl	8003580 <_sbrk_r>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d124      	bne.n	8003512 <_malloc_r+0x92>
 80034c8:	230c      	movs	r3, #12
 80034ca:	4630      	mov	r0, r6
 80034cc:	6033      	str	r3, [r6, #0]
 80034ce:	f000 f868 	bl	80035a2 <__malloc_unlock>
 80034d2:	e7e4      	b.n	800349e <_malloc_r+0x1e>
 80034d4:	680b      	ldr	r3, [r1, #0]
 80034d6:	1b5b      	subs	r3, r3, r5
 80034d8:	d418      	bmi.n	800350c <_malloc_r+0x8c>
 80034da:	2b0b      	cmp	r3, #11
 80034dc:	d90f      	bls.n	80034fe <_malloc_r+0x7e>
 80034de:	600b      	str	r3, [r1, #0]
 80034e0:	18cc      	adds	r4, r1, r3
 80034e2:	50cd      	str	r5, [r1, r3]
 80034e4:	4630      	mov	r0, r6
 80034e6:	f000 f85c 	bl	80035a2 <__malloc_unlock>
 80034ea:	f104 000b 	add.w	r0, r4, #11
 80034ee:	1d23      	adds	r3, r4, #4
 80034f0:	f020 0007 	bic.w	r0, r0, #7
 80034f4:	1ac3      	subs	r3, r0, r3
 80034f6:	d0d3      	beq.n	80034a0 <_malloc_r+0x20>
 80034f8:	425a      	negs	r2, r3
 80034fa:	50e2      	str	r2, [r4, r3]
 80034fc:	e7d0      	b.n	80034a0 <_malloc_r+0x20>
 80034fe:	684b      	ldr	r3, [r1, #4]
 8003500:	428c      	cmp	r4, r1
 8003502:	bf16      	itet	ne
 8003504:	6063      	strne	r3, [r4, #4]
 8003506:	6013      	streq	r3, [r2, #0]
 8003508:	460c      	movne	r4, r1
 800350a:	e7eb      	b.n	80034e4 <_malloc_r+0x64>
 800350c:	460c      	mov	r4, r1
 800350e:	6849      	ldr	r1, [r1, #4]
 8003510:	e7cc      	b.n	80034ac <_malloc_r+0x2c>
 8003512:	1cc4      	adds	r4, r0, #3
 8003514:	f024 0403 	bic.w	r4, r4, #3
 8003518:	42a0      	cmp	r0, r4
 800351a:	d005      	beq.n	8003528 <_malloc_r+0xa8>
 800351c:	1a21      	subs	r1, r4, r0
 800351e:	4630      	mov	r0, r6
 8003520:	f000 f82e 	bl	8003580 <_sbrk_r>
 8003524:	3001      	adds	r0, #1
 8003526:	d0cf      	beq.n	80034c8 <_malloc_r+0x48>
 8003528:	6025      	str	r5, [r4, #0]
 800352a:	e7db      	b.n	80034e4 <_malloc_r+0x64>
 800352c:	2000009c 	.word	0x2000009c
 8003530:	200000a0 	.word	0x200000a0

08003534 <_realloc_r>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	4607      	mov	r7, r0
 8003538:	4614      	mov	r4, r2
 800353a:	460e      	mov	r6, r1
 800353c:	b921      	cbnz	r1, 8003548 <_realloc_r+0x14>
 800353e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003542:	4611      	mov	r1, r2
 8003544:	f7ff bf9c 	b.w	8003480 <_malloc_r>
 8003548:	b922      	cbnz	r2, 8003554 <_realloc_r+0x20>
 800354a:	f7ff ff4d 	bl	80033e8 <_free_r>
 800354e:	4625      	mov	r5, r4
 8003550:	4628      	mov	r0, r5
 8003552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003554:	f000 f826 	bl	80035a4 <_malloc_usable_size_r>
 8003558:	42a0      	cmp	r0, r4
 800355a:	d20f      	bcs.n	800357c <_realloc_r+0x48>
 800355c:	4621      	mov	r1, r4
 800355e:	4638      	mov	r0, r7
 8003560:	f7ff ff8e 	bl	8003480 <_malloc_r>
 8003564:	4605      	mov	r5, r0
 8003566:	2800      	cmp	r0, #0
 8003568:	d0f2      	beq.n	8003550 <_realloc_r+0x1c>
 800356a:	4631      	mov	r1, r6
 800356c:	4622      	mov	r2, r4
 800356e:	f7ff fc05 	bl	8002d7c <memcpy>
 8003572:	4631      	mov	r1, r6
 8003574:	4638      	mov	r0, r7
 8003576:	f7ff ff37 	bl	80033e8 <_free_r>
 800357a:	e7e9      	b.n	8003550 <_realloc_r+0x1c>
 800357c:	4635      	mov	r5, r6
 800357e:	e7e7      	b.n	8003550 <_realloc_r+0x1c>

08003580 <_sbrk_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	2300      	movs	r3, #0
 8003584:	4c05      	ldr	r4, [pc, #20]	; (800359c <_sbrk_r+0x1c>)
 8003586:	4605      	mov	r5, r0
 8003588:	4608      	mov	r0, r1
 800358a:	6023      	str	r3, [r4, #0]
 800358c:	f7fd fee4 	bl	8001358 <_sbrk>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_sbrk_r+0x1a>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	b103      	cbz	r3, 800359a <_sbrk_r+0x1a>
 8003598:	602b      	str	r3, [r5, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	20000d44 	.word	0x20000d44

080035a0 <__malloc_lock>:
 80035a0:	4770      	bx	lr

080035a2 <__malloc_unlock>:
 80035a2:	4770      	bx	lr

080035a4 <_malloc_usable_size_r>:
 80035a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035a8:	1f18      	subs	r0, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bfbc      	itt	lt
 80035ae:	580b      	ldrlt	r3, [r1, r0]
 80035b0:	18c0      	addlt	r0, r0, r3
 80035b2:	4770      	bx	lr

080035b4 <_init>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr

080035c0 <_fini>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr
