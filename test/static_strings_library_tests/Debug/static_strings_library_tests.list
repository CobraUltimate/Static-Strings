
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb0  08006808  08006808  00016808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b8  080077b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080077b8  080077b8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077b8  080077b8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ac  200001dc  0800799c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001888  0800799c  00021888  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a58  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c3  00000000  00000000  00028c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  0002a320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013efd  00000000  00000000  0002b088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006583  00000000  00000000  0003ef85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b7a7  00000000  00000000  00045508  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  000b0d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080067ec 	.word	0x080067ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080067ec 	.word	0x080067ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	f5ad 5de2 	sub.w	sp, sp, #7232	; 0x1c40
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a92:	f001 fee1 	bl	8002858 <HAL_Init>

	/* USER CODE BEGIN Init */
	static_strings_init();
 8000a96:	f002 ffa5 	bl	80039e4 <static_strings_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a9a:	f001 fd0d 	bl	80024b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a9e:	f001 fd7b 	bl	8002598 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000aa2:	f001 fd4f 	bl	8002544 <MX_USART1_UART_Init>

	//test 1

	uint8_t very_long_string[700];
	uint16_t i;
	for(i = 0; i < 699; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000aac:	f102 0206 	add.w	r2, r2, #6
 8000ab0:	8013      	strh	r3, [r2, #0]
 8000ab2:	e015      	b.n	8000ae0 <main+0x58>
		very_long_string[i] = 'a';
 8000ab4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ab8:	f103 0306 	add.w	r3, r3, #6
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000ac2:	f102 0210 	add.w	r2, r2, #16
 8000ac6:	2161      	movs	r1, #97	; 0x61
 8000ac8:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 699; i++){
 8000aca:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ace:	f103 0306 	add.w	r3, r3, #6
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000ada:	f102 0206 	add.w	r2, r2, #6
 8000ade:	8013      	strh	r3, [r2, #0]
 8000ae0:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ae4:	f103 0306 	add.w	r3, r3, #6
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d9e0      	bls.n	8000ab4 <main+0x2c>
	}
	very_long_string[699] = '\0';
 8000af2:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000af6:	f103 0310 	add.w	r3, r3, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
	static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 8000b00:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b04:	f103 0310 	add.w	r3, r3, #16
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f9d3 	bl	8003eb4 <static_strings_save>
 8000b0e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b12:	f103 0318 	add.w	r3, r3, #24
 8000b16:	6018      	str	r0, [r3, #0]
	char length[6];
	sprintf(length,"%04d",very_long_string_descriptor->length);
 8000b18:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b1c:	f103 0318 	add.w	r3, r3, #24
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	889b      	ldrh	r3, [r3, #4]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b2a:	f103 0308 	add.w	r3, r3, #8
 8000b2e:	49d0      	ldr	r1, [pc, #832]	; (8000e70 <main+0x3e8>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fa7b 	bl	800502c <siprintf>
	length[4] = '\r';
 8000b36:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b3a:	f103 0308 	add.w	r3, r3, #8
 8000b3e:	220d      	movs	r2, #13
 8000b40:	711a      	strb	r2, [r3, #4]
	length[5] = '\n';
 8000b42:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b46:	f103 0308 	add.w	r3, r3, #8
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	715a      	strb	r2, [r3, #5]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000b4e:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000b52:	f101 0108 	add.w	r1, r1, #8
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	48c5      	ldr	r0, [pc, #788]	; (8000e74 <main+0x3ec>)
 8000b5e:	f002 fd84 	bl	800366a <HAL_UART_Transmit>
	char type[3];
	type[0] = very_long_string_descriptor->type + 48;
 8000b62:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b66:	f103 0318 	add.w	r3, r3, #24
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	3330      	adds	r3, #48	; 0x30
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b76:	f103 0304 	add.w	r3, r3, #4
 8000b7a:	701a      	strb	r2, [r3, #0]
	type[1] = '\r';
 8000b7c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b80:	f103 0304 	add.w	r3, r3, #4
 8000b84:	220d      	movs	r2, #13
 8000b86:	705a      	strb	r2, [r3, #1]
	type[2] = '\n';
 8000b88:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b8c:	f103 0304 	add.w	r3, r3, #4
 8000b90:	220a      	movs	r2, #10
 8000b92:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000b94:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000b98:	f101 0104 	add.w	r1, r1, #4
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	48b4      	ldr	r0, [pc, #720]	; (8000e74 <main+0x3ec>)
 8000ba4:	f002 fd61 	bl	800366a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000ba8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000bac:	f103 0318 	add.w	r3, r3, #24
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000bb8:	f103 0318 	add.w	r3, r3, #24
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	889a      	ldrh	r2, [r3, #4]
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	48ab      	ldr	r0, [pc, #684]	; (8000e74 <main+0x3ec>)
 8000bc6:	f002 fd50 	bl	800366a <HAL_UART_Transmit>

	static_strings_deallocate(very_long_string_descriptor);
 8000bca:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000bce:	f103 0318 	add.w	r3, r3, #24
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f003 f9b2 	bl	8003f3c <static_strings_deallocate>

	uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000bd8:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000bdc:	f103 0310 	add.w	r3, r3, #16
 8000be0:	4aa5      	ldr	r2, [pc, #660]	; (8000e78 <main+0x3f0>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	4611      	mov	r1, r2
 8000be6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bea:	461a      	mov	r2, r3
 8000bec:	f003 fdbc 	bl	8004768 <memcpy>
	uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 8000bf0:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000bf4:	f103 0318 	add.w	r3, r3, #24
 8000bf8:	4aa0      	ldr	r2, [pc, #640]	; (8000e7c <main+0x3f4>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c02:	461a      	mov	r2, r3
 8000c04:	f003 fdb0 	bl	8004768 <memcpy>
	uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 8000c08:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8000c0c:	f103 0308 	add.w	r3, r3, #8
 8000c10:	4a9b      	ldr	r2, [pc, #620]	; (8000e80 <main+0x3f8>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	4611      	mov	r1, r2
 8000c16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f003 fda4 	bl	8004768 <memcpy>
	uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 8000c20:	f507 5489 	add.w	r4, r7, #4384	; 0x1120
 8000c24:	f104 0414 	add.w	r4, r4, #20
 8000c28:	4b96      	ldr	r3, [pc, #600]	; (8000e84 <main+0x3fc>)
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f240 1361 	movw	r3, #353	; 0x161
 8000c32:	461a      	mov	r2, r3
 8000c34:	f003 fd98 	bl	8004768 <memcpy>
 8000c38:	f204 1361 	addw	r3, r4, #353	; 0x161
 8000c3c:	2293      	movs	r2, #147	; 0x93
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fd9c 	bl	800477e <memset>
	uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 8000c46:	f607 544c 	addw	r4, r7, #3404	; 0xd4c
 8000c4a:	4b8f      	ldr	r3, [pc, #572]	; (8000e88 <main+0x400>)
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f240 235b 	movw	r3, #603	; 0x25b
 8000c54:	461a      	mov	r2, r3
 8000c56:	f003 fd87 	bl	8004768 <memcpy>
 8000c5a:	f204 235b 	addw	r3, r4, #603	; 0x25b
 8000c5e:	f240 128d 	movw	r2, #397	; 0x18d
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fd8a 	bl	800477e <memset>

	static_strings_string_descriptor *string_descriptor;

	//test 2

	string_descriptor = static_strings_save(test_very_long_string);
 8000c6a:	f607 534c 	addw	r3, r7, #3404	; 0xd4c
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f920 	bl	8003eb4 <static_strings_save>
 8000c74:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000c78:	6018      	str	r0, [r3, #0]
	sprintf(length,"%04d",string_descriptor->length);
 8000c7a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	889b      	ldrh	r3, [r3, #4]
 8000c82:	461a      	mov	r2, r3
 8000c84:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000c88:	f103 0308 	add.w	r3, r3, #8
 8000c8c:	4978      	ldr	r1, [pc, #480]	; (8000e70 <main+0x3e8>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 f9cc 	bl	800502c <siprintf>
	length[4] = '\r';
 8000c94:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000c98:	f103 0308 	add.w	r3, r3, #8
 8000c9c:	220d      	movs	r2, #13
 8000c9e:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000ca0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000ca4:	f101 0108 	add.w	r1, r1, #8
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cac:	2206      	movs	r2, #6
 8000cae:	4871      	ldr	r0, [pc, #452]	; (8000e74 <main+0x3ec>)
 8000cb0:	f002 fcdb 	bl	800366a <HAL_UART_Transmit>
	type[0] = string_descriptor->type + 48;
 8000cb4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	799b      	ldrb	r3, [r3, #6]
 8000cbc:	3330      	adds	r3, #48	; 0x30
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000cc4:	f103 0304 	add.w	r3, r3, #4
 8000cc8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000cca:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000cce:	f101 0104 	add.w	r1, r1, #4
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4866      	ldr	r0, [pc, #408]	; (8000e74 <main+0x3ec>)
 8000cda:	f002 fcc6 	bl	800366a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000cde:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6819      	ldr	r1, [r3, #0]
 8000ce6:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	889a      	ldrh	r2, [r3, #4]
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	4860      	ldr	r0, [pc, #384]	; (8000e74 <main+0x3ec>)
 8000cf4:	f002 fcb9 	bl	800366a <HAL_UART_Transmit>

	//test 3

	string_descriptor = static_strings_save(test_long_string);
 8000cf8:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000cfc:	f103 0314 	add.w	r3, r3, #20
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 f8d7 	bl	8003eb4 <static_strings_save>
 8000d06:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d0a:	6018      	str	r0, [r3, #0]
	sprintf(length,"%04d",string_descriptor->length);
 8000d0c:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	889b      	ldrh	r3, [r3, #4]
 8000d14:	461a      	mov	r2, r3
 8000d16:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d1a:	f103 0308 	add.w	r3, r3, #8
 8000d1e:	4954      	ldr	r1, [pc, #336]	; (8000e70 <main+0x3e8>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 f983 	bl	800502c <siprintf>
	length[4] = '\r';
 8000d26:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d2a:	f103 0308 	add.w	r3, r3, #8
 8000d2e:	220d      	movs	r2, #13
 8000d30:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000d32:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000d36:	f101 0108 	add.w	r1, r1, #8
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	2206      	movs	r2, #6
 8000d40:	484c      	ldr	r0, [pc, #304]	; (8000e74 <main+0x3ec>)
 8000d42:	f002 fc92 	bl	800366a <HAL_UART_Transmit>
	type[0] = string_descriptor->type + 48;
 8000d46:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	799b      	ldrb	r3, [r3, #6]
 8000d4e:	3330      	adds	r3, #48	; 0x30
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d56:	f103 0304 	add.w	r3, r3, #4
 8000d5a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000d5c:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000d60:	f101 0104 	add.w	r1, r1, #4
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4842      	ldr	r0, [pc, #264]	; (8000e74 <main+0x3ec>)
 8000d6c:	f002 fc7d 	bl	800366a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000d70:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6819      	ldr	r1, [r3, #0]
 8000d78:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	889a      	ldrh	r2, [r3, #4]
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	483b      	ldr	r0, [pc, #236]	; (8000e74 <main+0x3ec>)
 8000d86:	f002 fc70 	bl	800366a <HAL_UART_Transmit>

	//test 4,5

	for(i = 0; i < 2; i++){
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000d90:	f102 0206 	add.w	r2, r2, #6
 8000d94:	8013      	strh	r3, [r2, #0]
 8000d96:	e05c      	b.n	8000e52 <main+0x3ca>
		string_descriptor = static_strings_save(test_medium_strings[i]);
 8000d98:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d9c:	f103 0306 	add.w	r3, r3, #6
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8000da6:	f102 0208 	add.w	r2, r2, #8
 8000daa:	21c8      	movs	r1, #200	; 0xc8
 8000dac:	fb01 f303 	mul.w	r3, r1, r3
 8000db0:	4413      	add	r3, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 f87e 	bl	8003eb4 <static_strings_save>
 8000db8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000dbc:	6018      	str	r0, [r3, #0]
		sprintf(length,"%04d",string_descriptor->length);
 8000dbe:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	889b      	ldrh	r3, [r3, #4]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000dcc:	f103 0308 	add.w	r3, r3, #8
 8000dd0:	4927      	ldr	r1, [pc, #156]	; (8000e70 <main+0x3e8>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f92a 	bl	800502c <siprintf>
		length[4] = '\r';
 8000dd8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ddc:	f103 0308 	add.w	r3, r3, #8
 8000de0:	220d      	movs	r2, #13
 8000de2:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000de4:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000de8:	f101 0108 	add.w	r1, r1, #8
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2206      	movs	r2, #6
 8000df2:	4820      	ldr	r0, [pc, #128]	; (8000e74 <main+0x3ec>)
 8000df4:	f002 fc39 	bl	800366a <HAL_UART_Transmit>
		type[0] = string_descriptor->type + 48;
 8000df8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	799b      	ldrb	r3, [r3, #6]
 8000e00:	3330      	adds	r3, #48	; 0x30
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000e08:	f103 0304 	add.w	r3, r3, #4
 8000e0c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000e0e:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000e12:	f101 0104 	add.w	r1, r1, #4
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <main+0x3ec>)
 8000e1e:	f002 fc24 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000e22:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	889a      	ldrh	r2, [r3, #4]
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	480f      	ldr	r0, [pc, #60]	; (8000e74 <main+0x3ec>)
 8000e38:	f002 fc17 	bl	800366a <HAL_UART_Transmit>
	for(i = 0; i < 2; i++){
 8000e3c:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e40:	f103 0306 	add.w	r3, r3, #6
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000e4c:	f102 0206 	add.w	r2, r2, #6
 8000e50:	8013      	strh	r3, [r2, #0]
 8000e52:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e56:	f103 0306 	add.w	r3, r3, #6
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d99b      	bls.n	8000d98 <main+0x310>
	}

	//test 6-11

	for(i = 0; i < 6; i++){
 8000e60:	2300      	movs	r3, #0
 8000e62:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000e66:	f102 0206 	add.w	r2, r2, #6
 8000e6a:	8013      	strh	r3, [r2, #0]
 8000e6c:	e06b      	b.n	8000f46 <main+0x4be>
 8000e6e:	bf00      	nop
 8000e70:	08006808 	.word	0x08006808
 8000e74:	20001670 	.word	0x20001670
 8000e78:	080068e0 	.word	0x080068e0
 8000e7c:	08006ad4 	.word	0x08006ad4
 8000e80:	08006d2c 	.word	0x08006d2c
 8000e84:	08006ebc 	.word	0x08006ebc
 8000e88:	080070b0 	.word	0x080070b0
		string_descriptor = static_strings_save(test_short_strings[i]);
 8000e8c:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e90:	f103 0306 	add.w	r3, r3, #6
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	f507 52a5 	add.w	r2, r7, #5280	; 0x14a0
 8000e9a:	f102 0218 	add.w	r2, r2, #24
 8000e9e:	2164      	movs	r1, #100	; 0x64
 8000ea0:	fb01 f303 	mul.w	r3, r1, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f804 	bl	8003eb4 <static_strings_save>
 8000eac:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000eb0:	6018      	str	r0, [r3, #0]
		sprintf(length,"%04d",string_descriptor->length);
 8000eb2:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	889b      	ldrh	r3, [r3, #4]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ec0:	f103 0308 	add.w	r3, r3, #8
 8000ec4:	49b9      	ldr	r1, [pc, #740]	; (80011ac <main+0x724>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 f8b0 	bl	800502c <siprintf>
		length[4] = '\r';
 8000ecc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ed0:	f103 0308 	add.w	r3, r3, #8
 8000ed4:	220d      	movs	r2, #13
 8000ed6:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000ed8:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000edc:	f101 0108 	add.w	r1, r1, #8
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	2206      	movs	r2, #6
 8000ee6:	48b2      	ldr	r0, [pc, #712]	; (80011b0 <main+0x728>)
 8000ee8:	f002 fbbf 	bl	800366a <HAL_UART_Transmit>
		type[0] = string_descriptor->type + 48;
 8000eec:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	799b      	ldrb	r3, [r3, #6]
 8000ef4:	3330      	adds	r3, #48	; 0x30
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000efc:	f103 0304 	add.w	r3, r3, #4
 8000f00:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000f02:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000f06:	f101 0104 	add.w	r1, r1, #4
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	2203      	movs	r2, #3
 8000f10:	48a7      	ldr	r0, [pc, #668]	; (80011b0 <main+0x728>)
 8000f12:	f002 fbaa 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000f16:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	889a      	ldrh	r2, [r3, #4]
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	48a1      	ldr	r0, [pc, #644]	; (80011b0 <main+0x728>)
 8000f2c:	f002 fb9d 	bl	800366a <HAL_UART_Transmit>
	for(i = 0; i < 6; i++){
 8000f30:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f34:	f103 0306 	add.w	r3, r3, #6
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000f40:	f102 0206 	add.w	r2, r2, #6
 8000f44:	8013      	strh	r3, [r2, #0]
 8000f46:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f4a:	f103 0306 	add.w	r3, r3, #6
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d99b      	bls.n	8000e8c <main+0x404>
	}

	//test 12-21

	static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000f5a:	f102 021c 	add.w	r2, r2, #28
 8000f5e:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 10; i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000f66:	f102 0206 	add.w	r2, r2, #6
 8000f6a:	8013      	strh	r3, [r2, #0]
 8000f6c:	e06b      	b.n	8001046 <main+0x5be>
		string_descriptor = static_strings_save(test_very_short_strings[i]);
 8000f6e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f72:	f103 0306 	add.w	r3, r3, #6
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	f507 52b8 	add.w	r2, r7, #5888	; 0x1700
 8000f7c:	f102 0210 	add.w	r2, r2, #16
 8000f80:	2132      	movs	r1, #50	; 0x32
 8000f82:	fb01 f303 	mul.w	r3, r1, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 ff93 	bl	8003eb4 <static_strings_save>
 8000f8e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f92:	6018      	str	r0, [r3, #0]
		if(i == 6){
 8000f94:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f98:	f103 0306 	add.w	r3, r3, #6
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d107      	bne.n	8000fb2 <main+0x52a>
			string_descriptor_deallocate = string_descriptor;
 8000fa2:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000fac:	f102 021c 	add.w	r2, r2, #28
 8000fb0:	6013      	str	r3, [r2, #0]
		}
		sprintf(length,"%04d",string_descriptor->length);
 8000fb2:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	889b      	ldrh	r3, [r3, #4]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000fc0:	f103 0308 	add.w	r3, r3, #8
 8000fc4:	4979      	ldr	r1, [pc, #484]	; (80011ac <main+0x724>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 f830 	bl	800502c <siprintf>
		length[4] = '\r';
 8000fcc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000fd0:	f103 0308 	add.w	r3, r3, #8
 8000fd4:	220d      	movs	r2, #13
 8000fd6:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000fd8:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000fdc:	f101 0108 	add.w	r1, r1, #8
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	2206      	movs	r2, #6
 8000fe6:	4872      	ldr	r0, [pc, #456]	; (80011b0 <main+0x728>)
 8000fe8:	f002 fb3f 	bl	800366a <HAL_UART_Transmit>
		type[0] = string_descriptor->type + 48;
 8000fec:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	799b      	ldrb	r3, [r3, #6]
 8000ff4:	3330      	adds	r3, #48	; 0x30
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ffc:	f103 0304 	add.w	r3, r3, #4
 8001000:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8001002:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8001006:	f101 0104 	add.w	r1, r1, #4
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	2203      	movs	r2, #3
 8001010:	4867      	ldr	r0, [pc, #412]	; (80011b0 <main+0x728>)
 8001012:	f002 fb2a 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001016:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6819      	ldr	r1, [r3, #0]
 800101e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	889a      	ldrh	r2, [r3, #4]
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	4861      	ldr	r0, [pc, #388]	; (80011b0 <main+0x728>)
 800102c:	f002 fb1d 	bl	800366a <HAL_UART_Transmit>
	for(i = 0; i < 10; i++){
 8001030:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001034:	f103 0306 	add.w	r3, r3, #6
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8001040:	f102 0206 	add.w	r2, r2, #6
 8001044:	8013      	strh	r3, [r2, #0]
 8001046:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800104a:	f103 0306 	add.w	r3, r3, #6
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b09      	cmp	r3, #9
 8001052:	d98c      	bls.n	8000f6e <main+0x4e6>
	}

	//test 22

	static_strings_deallocate(string_descriptor_deallocate);
 8001054:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001058:	f103 031c 	add.w	r3, r3, #28
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	f002 ff6d 	bl	8003f3c <static_strings_deallocate>
	uint8_t test_short_string[50] = "reallocate_test\r\n";
 8001062:	f607 5618 	addw	r6, r7, #3352	; 0xd18
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <main+0x72c>)
 8001068:	4634      	mov	r4, r6
 800106a:	461d      	mov	r5, r3
 800106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	8023      	strh	r3, [r4, #0]
 8001074:	f106 0312 	add.w	r3, r6, #18
 8001078:	2220      	movs	r2, #32
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fb7e 	bl	800477e <memset>
	string_descriptor = static_strings_save(test_short_string);
 8001082:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001086:	4618      	mov	r0, r3
 8001088:	f002 ff14 	bl	8003eb4 <static_strings_save>
 800108c:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001090:	6018      	str	r0, [r3, #0]
	sprintf(length,"%04d",string_descriptor->length);
 8001092:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	889b      	ldrh	r3, [r3, #4]
 800109a:	461a      	mov	r2, r3
 800109c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80010a0:	f103 0308 	add.w	r3, r3, #8
 80010a4:	4941      	ldr	r1, [pc, #260]	; (80011ac <main+0x724>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 ffc0 	bl	800502c <siprintf>
	length[4] = '\r';
 80010ac:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80010b0:	f103 0308 	add.w	r3, r3, #8
 80010b4:	220d      	movs	r2, #13
 80010b6:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 80010b8:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80010bc:	f101 0108 	add.w	r1, r1, #8
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	2206      	movs	r2, #6
 80010c6:	483a      	ldr	r0, [pc, #232]	; (80011b0 <main+0x728>)
 80010c8:	f002 facf 	bl	800366a <HAL_UART_Transmit>
	type[0] = string_descriptor->type + 48;
 80010cc:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	799b      	ldrb	r3, [r3, #6]
 80010d4:	3330      	adds	r3, #48	; 0x30
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80010dc:	f103 0304 	add.w	r3, r3, #4
 80010e0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80010e2:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80010e6:	f101 0104 	add.w	r1, r1, #4
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2203      	movs	r2, #3
 80010f0:	482f      	ldr	r0, [pc, #188]	; (80011b0 <main+0x728>)
 80010f2:	f002 faba 	bl	800366a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80010f6:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6819      	ldr	r1, [r3, #0]
 80010fe:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	889a      	ldrh	r2, [r3, #4]
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	4829      	ldr	r0, [pc, #164]	; (80011b0 <main+0x728>)
 800110c:	f002 faad 	bl	800366a <HAL_UART_Transmit>

	//test 23

	uint8_t pointer[12];
	sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 8001110:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 8001114:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001118:	f102 021c 	add.w	r2, r2, #28
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	4926      	ldr	r1, [pc, #152]	; (80011b8 <main+0x730>)
 8001120:	4618      	mov	r0, r3
 8001122:	f003 ff83 	bl	800502c <siprintf>
	pointer[10] = '\r';
 8001126:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 800112a:	220d      	movs	r2, #13
 800112c:	729a      	strb	r2, [r3, #10]
	pointer[11] = '\n';
 800112e:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 8001132:	220a      	movs	r2, #10
 8001134:	72da      	strb	r2, [r3, #11]
	HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 8001136:	f607 510c 	addw	r1, r7, #3340	; 0xd0c
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	220c      	movs	r2, #12
 8001140:	481b      	ldr	r0, [pc, #108]	; (80011b0 <main+0x728>)
 8001142:	f002 fa92 	bl	800366a <HAL_UART_Transmit>

	sprintf((char *)pointer,"%10p",string_descriptor);
 8001146:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 800114a:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	4919      	ldr	r1, [pc, #100]	; (80011b8 <main+0x730>)
 8001152:	4618      	mov	r0, r3
 8001154:	f003 ff6a 	bl	800502c <siprintf>
	pointer[10] = '\r';
 8001158:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 800115c:	220d      	movs	r2, #13
 800115e:	729a      	strb	r2, [r3, #10]
	pointer[11] = '\n';
 8001160:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 8001164:	220a      	movs	r2, #10
 8001166:	72da      	strb	r2, [r3, #11]
	HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 8001168:	f607 510c 	addw	r1, r7, #3340	; 0xd0c
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	220c      	movs	r2, #12
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <main+0x728>)
 8001174:	f002 fa79 	bl	800366a <HAL_UART_Transmit>

	uint8_t error_code_char;

	//test 24

	string_descriptor = static_strings_save((uint8_t *)"useless_string");
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <main+0x734>)
 800117a:	f002 fe9b 	bl	8003eb4 <static_strings_save>
 800117e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001182:	6018      	str	r0, [r3, #0]
	while(string_descriptor != NULL){
 8001184:	e005      	b.n	8001192 <main+0x70a>
		string_descriptor = static_strings_save((uint8_t *)"useless_string");
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <main+0x734>)
 8001188:	f002 fe94 	bl	8003eb4 <static_strings_save>
 800118c:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001190:	6018      	str	r0, [r3, #0]
	while(string_descriptor != NULL){
 8001192:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f4      	bne.n	8001186 <main+0x6fe>
	}

	uint8_t no_memory_string[800];
	for(i = 0; i < 798; i++){
 800119c:	2300      	movs	r3, #0
 800119e:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80011a2:	f102 0206 	add.w	r2, r2, #6
 80011a6:	8013      	strh	r3, [r2, #0]
 80011a8:	e01e      	b.n	80011e8 <main+0x760>
 80011aa:	bf00      	nop
 80011ac:	08006808 	.word	0x08006808
 80011b0:	20001670 	.word	0x20001670
 80011b4:	08007498 	.word	0x08007498
 80011b8:	08006810 	.word	0x08006810
 80011bc:	08006818 	.word	0x08006818
		no_memory_string[i] = 'a';
 80011c0:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80011c4:	f103 0306 	add.w	r3, r3, #6
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 80011ce:	2161      	movs	r1, #97	; 0x61
 80011d0:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 798; i++){
 80011d2:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80011d6:	f103 0306 	add.w	r3, r3, #6
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80011e2:	f102 0206 	add.w	r2, r2, #6
 80011e6:	8013      	strh	r3, [r2, #0]
 80011e8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80011ec:	f103 0306 	add.w	r3, r3, #6
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	f240 321d 	movw	r2, #797	; 0x31d
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d9e2      	bls.n	80011c0 <main+0x738>
	}
	no_memory_string[798] = '\r';
 80011fa:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80011fe:	220d      	movs	r2, #13
 8001200:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
	no_memory_string[799] = '\n';
 8001204:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001208:	220a      	movs	r2, #10
 800120a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
	string_descriptor = static_strings_save(no_memory_string);
 800120e:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fe4e 	bl	8003eb4 <static_strings_save>
 8001218:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800121c:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 800121e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d107      	bne.n	8001238 <main+0x7b0>
		error_code_char = static_strings_error_code + 48;
 8001228:	4bb4      	ldr	r3, [pc, #720]	; (80014fc <main+0xa74>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	3330      	adds	r3, #48	; 0x30
 800122e:	b2da      	uxtb	r2, r3
 8001230:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e003      	b.n	8001240 <main+0x7b8>
	}
	else{
		error_code_char = '3';
 8001238:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 800123c:	2233      	movs	r2, #51	; 0x33
 800123e:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001240:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	2201      	movs	r2, #1
 800124a:	48ad      	ldr	r0, [pc, #692]	; (8001500 <main+0xa78>)
 800124c:	f002 fa0d 	bl	800366a <HAL_UART_Transmit>

	static_strings_init();
 8001250:	f002 fbc8 	bl	80039e4 <static_strings_init>

	//test 25

	uint8_t unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100];
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100; i++){
 8001254:	2300      	movs	r3, #0
 8001256:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 800125a:	f102 0206 	add.w	r2, r2, #6
 800125e:	8013      	strh	r3, [r2, #0]
 8001260:	e013      	b.n	800128a <main+0x802>
		unallocable_invalid_string[i] = 'a';
 8001262:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001266:	f103 0306 	add.w	r3, r3, #6
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8001270:	2161      	movs	r1, #97	; 0x61
 8001272:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100; i++){
 8001274:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001278:	f103 0306 	add.w	r3, r3, #6
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8001284:	f102 0206 	add.w	r2, r2, #6
 8001288:	8013      	strh	r3, [r2, #0]
 800128a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800128e:	f103 0306 	add.w	r3, r3, #6
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001298:	d3e3      	bcc.n	8001262 <main+0x7da>
	}
	unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100 - 2] = '\r';
 800129a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800129e:	220d      	movs	r2, #13
 80012a0:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
	unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100 - 1] = '\n';
 80012a4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012a8:	220a      	movs	r2, #10
 80012aa:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
	string_descriptor = static_strings_save(unallocable_invalid_string);
 80012ae:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fdfe 	bl	8003eb4 <static_strings_save>
 80012b8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80012bc:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 80012be:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <main+0x850>
		error_code_char = static_strings_error_code + 48;
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <main+0xa74>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3330      	adds	r3, #48	; 0x30
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e003      	b.n	80012e0 <main+0x858>
	}
	else{
		error_code_char = '4';
 80012d8:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 80012dc:	2234      	movs	r2, #52	; 0x34
 80012de:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80012e0:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	2201      	movs	r2, #1
 80012ea:	4885      	ldr	r0, [pc, #532]	; (8001500 <main+0xa78>)
 80012ec:	f002 f9bd 	bl	800366a <HAL_UART_Transmit>

	//test 26 deprecated

	uint8_t no_line_end_invalid_string[800];
	for(i = 0; i < 800; i++){
 80012f0:	2300      	movs	r3, #0
 80012f2:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80012f6:	f102 0206 	add.w	r2, r2, #6
 80012fa:	8013      	strh	r3, [r2, #0]
 80012fc:	e013      	b.n	8001326 <main+0x89e>
		no_line_end_invalid_string[i] = 'a';
 80012fe:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001302:	f103 0306 	add.w	r3, r3, #6
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800130c:	2161      	movs	r1, #97	; 0x61
 800130e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 800; i++){
 8001310:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001314:	f103 0306 	add.w	r3, r3, #6
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8001320:	f102 0206 	add.w	r2, r2, #6
 8001324:	8013      	strh	r3, [r2, #0]
 8001326:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800132a:	f103 0306 	add.w	r3, r3, #6
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001334:	d3e3      	bcc.n	80012fe <main+0x876>
	}
	string_descriptor = static_strings_save(no_line_end_invalid_string);
 8001336:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fdba 	bl	8003eb4 <static_strings_save>
 8001340:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001344:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 8001346:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d107      	bne.n	8001360 <main+0x8d8>
		error_code_char = static_strings_error_code + 48;
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <main+0xa74>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3330      	adds	r3, #48	; 0x30
 8001356:	b2da      	uxtb	r2, r3
 8001358:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e003      	b.n	8001368 <main+0x8e0>
	}
	else{
		error_code_char = '5';
 8001360:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 8001364:	2235      	movs	r2, #53	; 0x35
 8001366:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001368:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	2201      	movs	r2, #1
 8001372:	4863      	ldr	r0, [pc, #396]	; (8001500 <main+0xa78>)
 8001374:	f002 f979 	bl	800366a <HAL_UART_Transmit>

	//test 27 deprecated

	string_descriptor = static_strings_allocate(1200);
 8001378:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800137c:	f002 fc92 	bl	8003ca4 <static_strings_allocate>
 8001380:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001384:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 8001386:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <main+0x918>
		error_code_char = static_strings_error_code + 48;
 8001390:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <main+0xa74>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3330      	adds	r3, #48	; 0x30
 8001396:	b2da      	uxtb	r2, r3
 8001398:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e003      	b.n	80013a8 <main+0x920>
	}
	else{
		error_code_char = '6';
 80013a0:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 80013a4:	2236      	movs	r2, #54	; 0x36
 80013a6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80013a8:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	2201      	movs	r2, #1
 80013b2:	4853      	ldr	r0, [pc, #332]	; (8001500 <main+0xa78>)
 80013b4:	f002 f959 	bl	800366a <HAL_UART_Transmit>

	//test 28

	uint8_t custom[10] = "123,56,89\0";
 80013b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013bc:	3b0c      	subs	r3, #12
 80013be:	4a51      	ldr	r2, [pc, #324]	; (8001504 <main+0xa7c>)
 80013c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013c2:	c303      	stmia	r3!, {r0, r1}
 80013c4:	801a      	strh	r2, [r3, #0]
	static_strings_string_descriptor custom_string_descriptor;
	string_descriptor = &custom_string_descriptor;
 80013c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013ca:	3b14      	subs	r3, #20
 80013cc:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80013d0:	6013      	str	r3, [r2, #0]
	static_strings_create_custom_string(string_descriptor,custom);
 80013d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013d6:	3b0c      	subs	r3, #12
 80013d8:	4619      	mov	r1, r3
 80013da:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f002 fd8f 	bl	8003f02 <static_strings_create_custom_string>
	HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80013e4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	889a      	ldrh	r2, [r3, #4]
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	4841      	ldr	r0, [pc, #260]	; (8001500 <main+0xa78>)
 80013fa:	f002 f936 	bl	800366a <HAL_UART_Transmit>

	// test 29

	if(static_strings_is_line(string_descriptor)){
 80013fe:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	f002 fdaa 	bl	8003f5c <static_strings_is_line>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <main+0x996>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	2203      	movs	r2, #3
 8001414:	493c      	ldr	r1, [pc, #240]	; (8001508 <main+0xa80>)
 8001416:	483a      	ldr	r0, [pc, #232]	; (8001500 <main+0xa78>)
 8001418:	f002 f927 	bl	800366a <HAL_UART_Transmit>
 800141c:	e006      	b.n	800142c <main+0x9a4>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	2203      	movs	r2, #3
 8001424:	4939      	ldr	r1, [pc, #228]	; (800150c <main+0xa84>)
 8001426:	4836      	ldr	r0, [pc, #216]	; (8001500 <main+0xa78>)
 8001428:	f002 f91f 	bl	800366a <HAL_UART_Transmit>
	}

	// test 30

	uint8_t custom_line[10] = "123,56,8\r\n";
 800142c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001430:	4a37      	ldr	r2, [pc, #220]	; (8001510 <main+0xa88>)
 8001432:	ca07      	ldmia	r2, {r0, r1, r2}
 8001434:	c303      	stmia	r3!, {r0, r1}
 8001436:	801a      	strh	r2, [r3, #0]
	static_strings_create_custom_string(string_descriptor,custom_line);
 8001438:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800143c:	4619      	mov	r1, r3
 800143e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	f002 fd5d 	bl	8003f02 <static_strings_create_custom_string>

	if(static_strings_is_line(string_descriptor)){
 8001448:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f002 fd85 	bl	8003f5c <static_strings_is_line>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <main+0x9e0>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	2203      	movs	r2, #3
 800145e:	492a      	ldr	r1, [pc, #168]	; (8001508 <main+0xa80>)
 8001460:	4827      	ldr	r0, [pc, #156]	; (8001500 <main+0xa78>)
 8001462:	f002 f902 	bl	800366a <HAL_UART_Transmit>
 8001466:	e006      	b.n	8001476 <main+0x9ee>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	2203      	movs	r2, #3
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <main+0xa84>)
 8001470:	4823      	ldr	r0, [pc, #140]	; (8001500 <main+0xa78>)
 8001472:	f002 f8fa 	bl	800366a <HAL_UART_Transmit>
	}

	// reset all descriptors
	static_strings_init();
 8001476:	f002 fab5 	bl	80039e4 <static_strings_init>

	// test 31-33

	static_strings_string_descriptor *token;
	static_strings_string_splitter_set_parameters(string_descriptor,',');
 800147a:	212c      	movs	r1, #44	; 0x2c
 800147c:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	f002 fdc9 	bl	8004018 <static_strings_string_splitter_set_parameters>
	while(static_strings_string_splitter_get_next_token(&token)){
 8001486:	e015      	b.n	80014b4 <main+0xa2c>
		HAL_UART_Transmit(&huart1,token->string,token->length,HAL_MAX_DELAY);
 8001488:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800148c:	3b04      	subs	r3, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001496:	3b04      	subs	r3, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	889a      	ldrh	r2, [r3, #4]
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	4817      	ldr	r0, [pc, #92]	; (8001500 <main+0xa78>)
 80014a2:	f002 f8e2 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(token);
 80014a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014aa:	3b04      	subs	r3, #4
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fd44 	bl	8003f3c <static_strings_deallocate>
	while(static_strings_string_splitter_get_next_token(&token)){
 80014b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014b8:	3b04      	subs	r3, #4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fdc4 	bl	8004048 <static_strings_string_splitter_get_next_token>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1e0      	bne.n	8001488 <main+0xa00>
	}

	// test 34

	int next_token_result = static_strings_string_splitter_get_next_token(&token);
 80014c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014ca:	3b04      	subs	r3, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fdbb 	bl	8004048 <static_strings_string_splitter_get_next_token>
 80014d2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014d6:	f103 0314 	add.w	r3, r3, #20
 80014da:	6018      	str	r0, [r3, #0]
	if(next_token_result){
 80014dc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014e0:	f103 0314 	add.w	r3, r3, #20
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d014      	beq.n	8001514 <main+0xa8c>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	2203      	movs	r2, #3
 80014f0:	4905      	ldr	r1, [pc, #20]	; (8001508 <main+0xa80>)
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <main+0xa78>)
 80014f4:	f002 f8b9 	bl	800366a <HAL_UART_Transmit>
 80014f8:	e013      	b.n	8001522 <main+0xa9a>
 80014fa:	bf00      	nop
 80014fc:	2000066c 	.word	0x2000066c
 8001500:	20001670 	.word	0x20001670
 8001504:	080074cc 	.word	0x080074cc
 8001508:	08006828 	.word	0x08006828
 800150c:	0800682c 	.word	0x0800682c
 8001510:	080074d8 	.word	0x080074d8
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2203      	movs	r2, #3
 800151a:	49c4      	ldr	r1, [pc, #784]	; (800182c <main+0xda4>)
 800151c:	48c4      	ldr	r0, [pc, #784]	; (8001830 <main+0xda8>)
 800151e:	f002 f8a4 	bl	800366a <HAL_UART_Transmit>
	}

	// test 35

	static_strings_create_custom_string(string_descriptor,custom);
 8001522:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001526:	3b0c      	subs	r3, #12
 8001528:	4619      	mov	r1, r3
 800152a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f002 fce7 	bl	8003f02 <static_strings_create_custom_string>
	static_strings_string_descriptor *substring = static_strings_substring(string_descriptor,2,8);
 8001534:	2208      	movs	r2, #8
 8001536:	2102      	movs	r1, #2
 8001538:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f002 fde1 	bl	8004104 <static_strings_substring>
 8001542:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001546:	f103 0310 	add.w	r3, r3, #16
 800154a:	6018      	str	r0, [r3, #0]
	if(substring != NULL){
 800154c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001550:	f103 0310 	add.w	r3, r3, #16
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d017      	beq.n	800158a <main+0xb02>
		HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 800155a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800155e:	f103 0310 	add.w	r3, r3, #16
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800156a:	f103 0310 	add.w	r3, r3, #16
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	889a      	ldrh	r2, [r3, #4]
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	48ae      	ldr	r0, [pc, #696]	; (8001830 <main+0xda8>)
 8001578:	f002 f877 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 800157c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001580:	f103 0310 	add.w	r3, r3, #16
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	f002 fcd9 	bl	8003f3c <static_strings_deallocate>
	}

	// test 36

	substring = static_strings_substring(string_descriptor,0,string_descriptor->length);
 800158a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	889b      	ldrh	r3, [r3, #4]
 8001592:	461a      	mov	r2, r3
 8001594:	2100      	movs	r1, #0
 8001596:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	f002 fdb2 	bl	8004104 <static_strings_substring>
 80015a0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015a4:	f103 0310 	add.w	r3, r3, #16
 80015a8:	6018      	str	r0, [r3, #0]
	if(substring != NULL){
 80015aa:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015ae:	f103 0310 	add.w	r3, r3, #16
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d017      	beq.n	80015e8 <main+0xb60>
		HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 80015b8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015bc:	f103 0310 	add.w	r3, r3, #16
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015c8:	f103 0310 	add.w	r3, r3, #16
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	889a      	ldrh	r2, [r3, #4]
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	4896      	ldr	r0, [pc, #600]	; (8001830 <main+0xda8>)
 80015d6:	f002 f848 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 80015da:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015de:	f103 0310 	add.w	r3, r3, #16
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f002 fcaa 	bl	8003f3c <static_strings_deallocate>
	}

	// test 37

	substring = static_strings_substring(string_descriptor,0,12);
 80015e8:	220c      	movs	r2, #12
 80015ea:	2100      	movs	r1, #0
 80015ec:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	f002 fd87 	bl	8004104 <static_strings_substring>
 80015f6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015fa:	f103 0310 	add.w	r3, r3, #16
 80015fe:	6018      	str	r0, [r3, #0]
	if (substring != NULL) {
 8001600:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001604:	f103 0310 	add.w	r3, r3, #16
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00e      	beq.n	800162c <main+0xba4>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	2203      	movs	r2, #3
 8001614:	4987      	ldr	r1, [pc, #540]	; (8001834 <main+0xdac>)
 8001616:	4886      	ldr	r0, [pc, #536]	; (8001830 <main+0xda8>)
 8001618:	f002 f827 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 800161c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001620:	f103 0310 	add.w	r3, r3, #16
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	f002 fc89 	bl	8003f3c <static_strings_deallocate>
 800162a:	e006      	b.n	800163a <main+0xbb2>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	2203      	movs	r2, #3
 8001632:	497e      	ldr	r1, [pc, #504]	; (800182c <main+0xda4>)
 8001634:	487e      	ldr	r0, [pc, #504]	; (8001830 <main+0xda8>)
 8001636:	f002 f818 	bl	800366a <HAL_UART_Transmit>
	}

	// test 38

	substring = static_strings_substring(string_descriptor,-2,5);
 800163a:	2205      	movs	r2, #5
 800163c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001640:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f002 fd5d 	bl	8004104 <static_strings_substring>
 800164a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800164e:	f103 0310 	add.w	r3, r3, #16
 8001652:	6018      	str	r0, [r3, #0]
	if (substring != NULL){
 8001654:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001658:	f103 0310 	add.w	r3, r3, #16
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00e      	beq.n	8001680 <main+0xbf8>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	2203      	movs	r2, #3
 8001668:	4972      	ldr	r1, [pc, #456]	; (8001834 <main+0xdac>)
 800166a:	4871      	ldr	r0, [pc, #452]	; (8001830 <main+0xda8>)
 800166c:	f001 fffd 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 8001670:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001674:	f103 0310 	add.w	r3, r3, #16
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f002 fc5f 	bl	8003f3c <static_strings_deallocate>
 800167e:	e006      	b.n	800168e <main+0xc06>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	2203      	movs	r2, #3
 8001686:	4969      	ldr	r1, [pc, #420]	; (800182c <main+0xda4>)
 8001688:	4869      	ldr	r0, [pc, #420]	; (8001830 <main+0xda8>)
 800168a:	f001 ffee 	bl	800366a <HAL_UART_Transmit>
	}

	// test 39

	uint8_t concatenate_at_memory[] = "Hello \0";
 800168e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001692:	3b0c      	subs	r3, #12
 8001694:	4a68      	ldr	r2, [pc, #416]	; (8001838 <main+0xdb0>)
 8001696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800169a:	e883 0003 	stmia.w	r3, {r0, r1}
	static_strings_string_descriptor concatenate_at;
	static_strings_create_custom_string(&concatenate_at,concatenate_at_memory);
 800169e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80016a2:	3a0c      	subs	r2, #12
 80016a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016a8:	3b14      	subs	r3, #20
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fc28 	bl	8003f02 <static_strings_create_custom_string>
	uint8_t concatenate_memory[] = "World\r\n";
 80016b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016b6:	3b1c      	subs	r3, #28
 80016b8:	4a60      	ldr	r2, [pc, #384]	; (800183c <main+0xdb4>)
 80016ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016be:	e883 0003 	stmia.w	r3, {r0, r1}
	static_strings_string_descriptor concatenate;
	static_strings_create_custom_string(&concatenate,concatenate_memory);
 80016c2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80016c6:	3a1c      	subs	r2, #28
 80016c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016cc:	3b04      	subs	r3, #4
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 fc16 	bl	8003f02 <static_strings_create_custom_string>
	static_strings_string_descriptor *concatenated;
	concatenated = static_strings_concatenate(&concatenate_at,&concatenate);
 80016d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016da:	3a04      	subs	r2, #4
 80016dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016e0:	3b14      	subs	r3, #20
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fd4f 	bl	8004188 <static_strings_concatenate>
 80016ea:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016ee:	f103 030c 	add.w	r3, r3, #12
 80016f2:	6018      	str	r0, [r3, #0]
	if (concatenated != NULL) {
 80016f4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016f8:	f103 030c 	add.w	r3, r3, #12
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d017      	beq.n	8001732 <main+0xcaa>
		HAL_UART_Transmit(&huart1,concatenated->string,concatenated->length,HAL_MAX_DELAY);
 8001702:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001706:	f103 030c 	add.w	r3, r3, #12
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001712:	f103 030c 	add.w	r3, r3, #12
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	889a      	ldrh	r2, [r3, #4]
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	4844      	ldr	r0, [pc, #272]	; (8001830 <main+0xda8>)
 8001720:	f001 ffa3 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(concatenated);
 8001724:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001728:	f103 030c 	add.w	r3, r3, #12
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	f002 fc05 	bl	8003f3c <static_strings_deallocate>
	}

	// test 40

	if(static_strings_contains_string(concatenated,&concatenate_at)){
 8001732:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001736:	3b14      	subs	r3, #20
 8001738:	4619      	mov	r1, r3
 800173a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800173e:	f103 030c 	add.w	r3, r3, #12
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	f002 fde2 	bl	800430c <static_strings_contains_string>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <main+0xcd6>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	2203      	movs	r2, #3
 8001754:	4937      	ldr	r1, [pc, #220]	; (8001834 <main+0xdac>)
 8001756:	4836      	ldr	r0, [pc, #216]	; (8001830 <main+0xda8>)
 8001758:	f001 ff87 	bl	800366a <HAL_UART_Transmit>
 800175c:	e006      	b.n	800176c <main+0xce4>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	2203      	movs	r2, #3
 8001764:	4931      	ldr	r1, [pc, #196]	; (800182c <main+0xda4>)
 8001766:	4832      	ldr	r0, [pc, #200]	; (8001830 <main+0xda8>)
 8001768:	f001 ff7f 	bl	800366a <HAL_UART_Transmit>
	}

	// test 41

	if(static_strings_contains_string(concatenated,&concatenate)){
 800176c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001770:	3b04      	subs	r3, #4
 8001772:	4619      	mov	r1, r3
 8001774:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001778:	f103 030c 	add.w	r3, r3, #12
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f002 fdc5 	bl	800430c <static_strings_contains_string>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <main+0xd10>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	2203      	movs	r2, #3
 800178e:	4929      	ldr	r1, [pc, #164]	; (8001834 <main+0xdac>)
 8001790:	4827      	ldr	r0, [pc, #156]	; (8001830 <main+0xda8>)
 8001792:	f001 ff6a 	bl	800366a <HAL_UART_Transmit>
 8001796:	e006      	b.n	80017a6 <main+0xd1e>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	2203      	movs	r2, #3
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <main+0xda4>)
 80017a0:	4823      	ldr	r0, [pc, #140]	; (8001830 <main+0xda8>)
 80017a2:	f001 ff62 	bl	800366a <HAL_UART_Transmit>
	}

	// test 42

	uint8_t non_contained_memory[] = "Hill\0";
 80017a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017aa:	3b0c      	subs	r3, #12
 80017ac:	4a24      	ldr	r2, [pc, #144]	; (8001840 <main+0xdb8>)
 80017ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b2:	6018      	str	r0, [r3, #0]
 80017b4:	3304      	adds	r3, #4
 80017b6:	8019      	strh	r1, [r3, #0]
	static_strings_string_descriptor non_contained;
	static_strings_create_custom_string(&non_contained,non_contained_memory);
 80017b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80017bc:	3a0c      	subs	r2, #12
 80017be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017c2:	3b14      	subs	r3, #20
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fb9b 	bl	8003f02 <static_strings_create_custom_string>
	if(static_strings_contains_string(concatenated,&non_contained)){
 80017cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017d0:	3b14      	subs	r3, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80017d8:	f103 030c 	add.w	r3, r3, #12
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	f002 fd95 	bl	800430c <static_strings_contains_string>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <main+0xd70>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	2203      	movs	r2, #3
 80017ee:	4911      	ldr	r1, [pc, #68]	; (8001834 <main+0xdac>)
 80017f0:	480f      	ldr	r0, [pc, #60]	; (8001830 <main+0xda8>)
 80017f2:	f001 ff3a 	bl	800366a <HAL_UART_Transmit>
 80017f6:	e006      	b.n	8001806 <main+0xd7e>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	2203      	movs	r2, #3
 80017fe:	490b      	ldr	r1, [pc, #44]	; (800182c <main+0xda4>)
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <main+0xda8>)
 8001802:	f001 ff32 	bl	800366a <HAL_UART_Transmit>
	}

	// test 43

	if(static_strings_contains_char(concatenated,'W')){
 8001806:	2157      	movs	r1, #87	; 0x57
 8001808:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800180c:	f103 030c 	add.w	r3, r3, #12
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	f002 fdc2 	bl	800439a <static_strings_contains_char>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <main+0xdbc>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	2203      	movs	r2, #3
 8001822:	4904      	ldr	r1, [pc, #16]	; (8001834 <main+0xdac>)
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <main+0xda8>)
 8001826:	f001 ff20 	bl	800366a <HAL_UART_Transmit>
 800182a:	e012      	b.n	8001852 <main+0xdca>
 800182c:	0800682c 	.word	0x0800682c
 8001830:	20001670 	.word	0x20001670
 8001834:	08006828 	.word	0x08006828
 8001838:	080074e4 	.word	0x080074e4
 800183c:	080074ec 	.word	0x080074ec
 8001840:	080074f4 	.word	0x080074f4
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001844:	f04f 33ff 	mov.w	r3, #4294967295
 8001848:	2203      	movs	r2, #3
 800184a:	4951      	ldr	r1, [pc, #324]	; (8001990 <main+0xf08>)
 800184c:	4851      	ldr	r0, [pc, #324]	; (8001994 <main+0xf0c>)
 800184e:	f001 ff0c 	bl	800366a <HAL_UART_Transmit>
	}

	// test 44

	if(static_strings_contains_char(concatenated,'e')){
 8001852:	2165      	movs	r1, #101	; 0x65
 8001854:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001858:	f103 030c 	add.w	r3, r3, #12
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f002 fd9c 	bl	800439a <static_strings_contains_char>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <main+0xdf0>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	2203      	movs	r2, #3
 800186e:	494a      	ldr	r1, [pc, #296]	; (8001998 <main+0xf10>)
 8001870:	4848      	ldr	r0, [pc, #288]	; (8001994 <main+0xf0c>)
 8001872:	f001 fefa 	bl	800366a <HAL_UART_Transmit>
 8001876:	e006      	b.n	8001886 <main+0xdfe>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
 800187c:	2203      	movs	r2, #3
 800187e:	4944      	ldr	r1, [pc, #272]	; (8001990 <main+0xf08>)
 8001880:	4844      	ldr	r0, [pc, #272]	; (8001994 <main+0xf0c>)
 8001882:	f001 fef2 	bl	800366a <HAL_UART_Transmit>
	}

	// test 45

	if(static_strings_contains_char(concatenated,'m')){
 8001886:	216d      	movs	r1, #109	; 0x6d
 8001888:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800188c:	f103 030c 	add.w	r3, r3, #12
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	f002 fd82 	bl	800439a <static_strings_contains_char>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <main+0xe24>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	2203      	movs	r2, #3
 80018a2:	493d      	ldr	r1, [pc, #244]	; (8001998 <main+0xf10>)
 80018a4:	483b      	ldr	r0, [pc, #236]	; (8001994 <main+0xf0c>)
 80018a6:	f001 fee0 	bl	800366a <HAL_UART_Transmit>
 80018aa:	e006      	b.n	80018ba <main+0xe32>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	2203      	movs	r2, #3
 80018b2:	4937      	ldr	r1, [pc, #220]	; (8001990 <main+0xf08>)
 80018b4:	4837      	ldr	r0, [pc, #220]	; (8001994 <main+0xf0c>)
 80018b6:	f001 fed8 	bl	800366a <HAL_UART_Transmit>
	}

	// test 46

	uint8_t equal_a_memory[] = "Hall\0";
 80018ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018be:	3b1c      	subs	r3, #28
 80018c0:	4a36      	ldr	r2, [pc, #216]	; (800199c <main+0xf14>)
 80018c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c6:	6018      	str	r0, [r3, #0]
 80018c8:	3304      	adds	r3, #4
 80018ca:	8019      	strh	r1, [r3, #0]
	static_strings_string_descriptor equal_a;
	uint8_t equal_b_memory[] = "Hall\0";
 80018cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d0:	3b0c      	subs	r3, #12
 80018d2:	4a32      	ldr	r2, [pc, #200]	; (800199c <main+0xf14>)
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	6018      	str	r0, [r3, #0]
 80018da:	3304      	adds	r3, #4
 80018dc:	8019      	strh	r1, [r3, #0]
	static_strings_string_descriptor equal_b;
	uint8_t non_equal_memory[] = "oil\0";
 80018de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e2:	3b1c      	subs	r3, #28
 80018e4:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <main+0xf18>)
 80018e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ea:	6018      	str	r0, [r3, #0]
 80018ec:	3304      	adds	r3, #4
 80018ee:	7019      	strb	r1, [r3, #0]
	static_strings_string_descriptor non_equal;
	static_strings_create_custom_string(&equal_a,equal_a_memory);
 80018f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80018f4:	3a1c      	subs	r2, #28
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	3b04      	subs	r3, #4
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 faff 	bl	8003f02 <static_strings_create_custom_string>
	static_strings_create_custom_string(&equal_b,equal_b_memory);
 8001904:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001908:	3a0c      	subs	r2, #12
 800190a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190e:	3b14      	subs	r3, #20
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f002 faf5 	bl	8003f02 <static_strings_create_custom_string>
	static_strings_create_custom_string(&non_equal,non_equal_memory);
 8001918:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800191c:	3a1c      	subs	r2, #28
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	3b04      	subs	r3, #4
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f002 faeb 	bl	8003f02 <static_strings_create_custom_string>

	if(static_strings_compare(&equal_a,&equal_b)){
 800192c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001930:	3a14      	subs	r2, #20
 8001932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001936:	3b04      	subs	r3, #4
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fd4f 	bl	80043de <static_strings_compare>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <main+0xece>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	2203      	movs	r2, #3
 800194c:	4912      	ldr	r1, [pc, #72]	; (8001998 <main+0xf10>)
 800194e:	4811      	ldr	r0, [pc, #68]	; (8001994 <main+0xf0c>)
 8001950:	f001 fe8b 	bl	800366a <HAL_UART_Transmit>
 8001954:	e006      	b.n	8001964 <main+0xedc>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	2203      	movs	r2, #3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <main+0xf08>)
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <main+0xf0c>)
 8001960:	f001 fe83 	bl	800366a <HAL_UART_Transmit>
	}

	// test 47

	if(static_strings_compare(&equal_a,&non_equal)){
 8001964:	f107 0208 	add.w	r2, r7, #8
 8001968:	3a04      	subs	r2, #4
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	3b04      	subs	r3, #4
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fd33 	bl	80043de <static_strings_compare>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d012      	beq.n	80019a4 <main+0xf1c>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	2203      	movs	r2, #3
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <main+0xf10>)
 8001986:	4803      	ldr	r0, [pc, #12]	; (8001994 <main+0xf0c>)
 8001988:	f001 fe6f 	bl	800366a <HAL_UART_Transmit>
 800198c:	e011      	b.n	80019b2 <main+0xf2a>
 800198e:	bf00      	nop
 8001990:	0800682c 	.word	0x0800682c
 8001994:	20001670 	.word	0x20001670
 8001998:	08006828 	.word	0x08006828
 800199c:	080074fc 	.word	0x080074fc
 80019a0:	08007504 	.word	0x08007504
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	2203      	movs	r2, #3
 80019aa:	49cf      	ldr	r1, [pc, #828]	; (8001ce8 <main+0x1260>)
 80019ac:	48cf      	ldr	r0, [pc, #828]	; (8001cec <main+0x1264>)
 80019ae:	f001 fe5c 	bl	800366a <HAL_UART_Transmit>
	}

	// test 48

	static_strings_string_descriptor *var_string;
	uint8_t uint8 = 200;
 80019b2:	23c8      	movs	r3, #200	; 0xc8
 80019b4:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80019b8:	f102 020b 	add.w	r2, r2, #11
 80019bc:	7013      	strb	r3, [r2, #0]
	var_string = static_strings_uint8_to_string(uint8);
 80019be:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019c2:	f103 030b 	add.w	r3, r3, #11
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fd35 	bl	8004438 <static_strings_uint8_to_string>
 80019ce:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019d2:	f103 0304 	add.w	r3, r3, #4
 80019d6:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 80019d8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019dc:	f103 0304 	add.w	r3, r3, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d017      	beq.n	8001a16 <main+0xf8e>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 80019e6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019ea:	f103 0304 	add.w	r3, r3, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019f6:	f103 0304 	add.w	r3, r3, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	889a      	ldrh	r2, [r3, #4]
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	48ba      	ldr	r0, [pc, #744]	; (8001cec <main+0x1264>)
 8001a04:	f001 fe31 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001a08:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a0c:	f103 0304 	add.w	r3, r3, #4
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f002 fa93 	bl	8003f3c <static_strings_deallocate>
	}

	// test 49

	uint16_t uint16 = 64200;
 8001a16:	f64f 23c8 	movw	r3, #64200	; 0xfac8
 8001a1a:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001a1e:	f102 0202 	add.w	r2, r2, #2
 8001a22:	8013      	strh	r3, [r2, #0]
	var_string = static_strings_uint16_to_string(uint16);
 8001a24:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a28:	f103 0302 	add.w	r3, r3, #2
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fd36 	bl	80044a0 <static_strings_uint16_to_string>
 8001a34:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a38:	f103 0304 	add.w	r3, r3, #4
 8001a3c:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001a3e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a42:	f103 0304 	add.w	r3, r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d017      	beq.n	8001a7c <main+0xff4>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001a4c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a50:	f103 0304 	add.w	r3, r3, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a5c:	f103 0304 	add.w	r3, r3, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	889a      	ldrh	r2, [r3, #4]
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	48a0      	ldr	r0, [pc, #640]	; (8001cec <main+0x1264>)
 8001a6a:	f001 fdfe 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001a6e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a72:	f103 0304 	add.w	r3, r3, #4
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	f002 fa60 	bl	8003f3c <static_strings_deallocate>
	}

	// test 50

	uint32_t uint32 = 1000064200;
 8001a7c:	4b9c      	ldr	r3, [pc, #624]	; (8001cf0 <main+0x1268>)
 8001a7e:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001a82:	f102 021c 	add.w	r2, r2, #28
 8001a86:	6013      	str	r3, [r2, #0]
	var_string = static_strings_uint32_to_string(uint32);
 8001a88:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001a8c:	f103 031c 	add.w	r3, r3, #28
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	f002 fd39 	bl	8004508 <static_strings_uint32_to_string>
 8001a96:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a9a:	f103 0304 	add.w	r3, r3, #4
 8001a9e:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001aa0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001aa4:	f103 0304 	add.w	r3, r3, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d017      	beq.n	8001ade <main+0x1056>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001aae:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ab2:	f103 0304 	add.w	r3, r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001abe:	f103 0304 	add.w	r3, r3, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	889a      	ldrh	r2, [r3, #4]
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	4888      	ldr	r0, [pc, #544]	; (8001cec <main+0x1264>)
 8001acc:	f001 fdcd 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001ad0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ad4:	f103 0304 	add.w	r3, r3, #4
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	f002 fa2f 	bl	8003f3c <static_strings_deallocate>
	}

	// test 51

	int8_t int8 = 100;
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001ae4:	f102 021b 	add.w	r2, r2, #27
 8001ae8:	7013      	strb	r3, [r2, #0]
	var_string = static_strings_int8_to_string(int8);
 8001aea:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001aee:	f103 031b 	add.w	r3, r3, #27
 8001af2:	f993 3000 	ldrsb.w	r3, [r3]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fd38 	bl	800456c <static_strings_int8_to_string>
 8001afc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b00:	f103 0304 	add.w	r3, r3, #4
 8001b04:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001b06:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b0a:	f103 0304 	add.w	r3, r3, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d017      	beq.n	8001b44 <main+0x10bc>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b14:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b18:	f103 0304 	add.w	r3, r3, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6819      	ldr	r1, [r3, #0]
 8001b20:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b24:	f103 0304 	add.w	r3, r3, #4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	889a      	ldrh	r2, [r3, #4]
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	486e      	ldr	r0, [pc, #440]	; (8001cec <main+0x1264>)
 8001b32:	f001 fd9a 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001b36:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b3a:	f103 0304 	add.w	r3, r3, #4
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f002 f9fc 	bl	8003f3c <static_strings_deallocate>
	}

	// test 52

	int16_t int16 = -32100;
 8001b44:	f248 239c 	movw	r3, #33436	; 0x829c
 8001b48:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001b4c:	f102 0218 	add.w	r2, r2, #24
 8001b50:	8013      	strh	r3, [r2, #0]
	var_string = static_strings_int16_to_string(int16);
 8001b52:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b56:	f103 0318 	add.w	r3, r3, #24
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fd38 	bl	80045d4 <static_strings_int16_to_string>
 8001b64:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b68:	f103 0304 	add.w	r3, r3, #4
 8001b6c:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001b6e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b72:	f103 0304 	add.w	r3, r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <main+0x1124>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b7c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b80:	f103 0304 	add.w	r3, r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b8c:	f103 0304 	add.w	r3, r3, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	889a      	ldrh	r2, [r3, #4]
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	4854      	ldr	r0, [pc, #336]	; (8001cec <main+0x1264>)
 8001b9a:	f001 fd66 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001b9e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ba2:	f103 0304 	add.w	r3, r3, #4
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f002 f9c8 	bl	8003f3c <static_strings_deallocate>
	}

	// test 53

	int32_t int32 = 500032100;
 8001bac:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <main+0x126c>)
 8001bae:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001bb2:	f102 0214 	add.w	r2, r2, #20
 8001bb6:	6013      	str	r3, [r2, #0]
	var_string = static_strings_uint32_to_string(int32);
 8001bb8:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001bbc:	f103 0314 	add.w	r3, r3, #20
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fca0 	bl	8004508 <static_strings_uint32_to_string>
 8001bc8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001bcc:	f103 0304 	add.w	r3, r3, #4
 8001bd0:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001bd2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001bd6:	f103 0304 	add.w	r3, r3, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d017      	beq.n	8001c10 <main+0x1188>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001be0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001be4:	f103 0304 	add.w	r3, r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001bf0:	f103 0304 	add.w	r3, r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	889a      	ldrh	r2, [r3, #4]
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	483b      	ldr	r0, [pc, #236]	; (8001cec <main+0x1264>)
 8001bfe:	f001 fd34 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001c02:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c06:	f103 0304 	add.w	r3, r3, #4
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	f002 f996 	bl	8003f3c <static_strings_deallocate>
	}

	// test 54

	float float_number = 19.60232;
 8001c10:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <main+0x1270>)
 8001c12:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001c16:	f102 0210 	add.w	r2, r2, #16
 8001c1a:	6013      	str	r3, [r2, #0]
	var_string = static_strings_float_to_string(float_number);
 8001c1c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c20:	f103 0310 	add.w	r3, r3, #16
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	f002 fd09 	bl	800463c <static_strings_float_to_string>
 8001c2a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c2e:	f103 0304 	add.w	r3, r3, #4
 8001c32:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001c34:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c38:	f103 0304 	add.w	r3, r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d017      	beq.n	8001c72 <main+0x11ea>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c42:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c46:	f103 0304 	add.w	r3, r3, #4
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c52:	f103 0304 	add.w	r3, r3, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	889a      	ldrh	r2, [r3, #4]
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	4823      	ldr	r0, [pc, #140]	; (8001cec <main+0x1264>)
 8001c60:	f001 fd03 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001c64:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c68:	f103 0304 	add.w	r3, r3, #4
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	f002 f965 	bl	8003f3c <static_strings_deallocate>
	}

	// test 55

	double double_number = -1924.2342;
 8001c72:	a41b      	add	r4, pc, #108	; (adr r4, 8001ce0 <main+0x1258>)
 8001c74:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c78:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001c7c:	f102 0208 	add.w	r2, r2, #8
 8001c80:	e9c2 3400 	strd	r3, r4, [r2]
	var_string = static_strings_double_to_string(double_number);
 8001c84:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c88:	f103 0308 	add.w	r3, r3, #8
 8001c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c90:	f002 fd0c 	bl	80046ac <static_strings_double_to_string>
 8001c94:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c98:	f103 0304 	add.w	r3, r3, #4
 8001c9c:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001c9e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ca2:	f103 0304 	add.w	r3, r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d027      	beq.n	8001cfc <main+0x1274>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001cac:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001cb0:	f103 0304 	add.w	r3, r3, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6819      	ldr	r1, [r3, #0]
 8001cb8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001cbc:	f103 0304 	add.w	r3, r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	889a      	ldrh	r2, [r3, #4]
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <main+0x1264>)
 8001cca:	f001 fcce 	bl	800366a <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001cce:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001cd2:	f103 0304 	add.w	r3, r3, #4
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	f002 f930 	bl	8003f3c <static_strings_deallocate>
 8001cdc:	e00e      	b.n	8001cfc <main+0x1274>
 8001cde:	bf00      	nop
 8001ce0:	d21ff2e5 	.word	0xd21ff2e5
 8001ce4:	c09e10ef 	.word	0xc09e10ef
 8001ce8:	0800682c 	.word	0x0800682c
 8001cec:	20001670 	.word	0x20001670
 8001cf0:	3b9bc4c8 	.word	0x3b9bc4c8
 8001cf4:	1dcde264 	.word	0x1dcde264
 8001cf8:	419cd18d 	.word	0x419cd18d
	}

	// test 56

	static_strings_string_descriptor *copy_test_source_string = static_strings_save((uint8_t *)"I am a copy test\r\n");
 8001cfc:	48be      	ldr	r0, [pc, #760]	; (8001ff8 <main+0x1570>)
 8001cfe:	f002 f8d9 	bl	8003eb4 <static_strings_save>
 8001d02:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d06:	f103 0304 	add.w	r3, r3, #4
 8001d0a:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001d0c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d10:	f103 0304 	add.w	r3, r3, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d03c      	beq.n	8001d94 <main+0x130c>
		static_strings_string_descriptor *copy_test_target_string = static_strings_allocate(100);
 8001d1a:	2064      	movs	r0, #100	; 0x64
 8001d1c:	f001 ffc2 	bl	8003ca4 <static_strings_allocate>
 8001d20:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d24:	6018      	str	r0, [r3, #0]
		if(static_strings_copy(copy_test_target_string,copy_test_source_string,0) != NULL){
 8001d26:	2200      	movs	r2, #0
 8001d28:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d2c:	f103 0304 	add.w	r3, r3, #4
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f001 ff3c 	bl	8003bb4 <static_strings_copy>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d019      	beq.n	8001d76 <main+0x12ee>
			HAL_UART_Transmit(&huart1,copy_test_target_string->string,copy_test_target_string->length,HAL_MAX_DELAY);
 8001d42:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	889a      	ldrh	r2, [r3, #4]
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	48a9      	ldr	r0, [pc, #676]	; (8001ffc <main+0x1574>)
 8001d58:	f001 fc87 	bl	800366a <HAL_UART_Transmit>
			static_strings_deallocate(copy_test_source_string);
 8001d5c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d60:	f103 0304 	add.w	r3, r3, #4
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f002 f8e9 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(copy_test_target_string);
 8001d6a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	f002 f8e4 	bl	8003f3c <static_strings_deallocate>
 8001d74:	e01c      	b.n	8001db0 <main+0x1328>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	49a0      	ldr	r1, [pc, #640]	; (8002000 <main+0x1578>)
 8001d7e:	489f      	ldr	r0, [pc, #636]	; (8001ffc <main+0x1574>)
 8001d80:	f001 fc73 	bl	800366a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	2201      	movs	r2, #1
 8001d8a:	499e      	ldr	r1, [pc, #632]	; (8002004 <main+0x157c>)
 8001d8c:	489b      	ldr	r0, [pc, #620]	; (8001ffc <main+0x1574>)
 8001d8e:	f001 fc6c 	bl	800366a <HAL_UART_Transmit>
 8001d92:	e00d      	b.n	8001db0 <main+0x1328>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	2208      	movs	r2, #8
 8001d9a:	499b      	ldr	r1, [pc, #620]	; (8002008 <main+0x1580>)
 8001d9c:	4897      	ldr	r0, [pc, #604]	; (8001ffc <main+0x1574>)
 8001d9e:	f001 fc64 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	2201      	movs	r2, #1
 8001da8:	4996      	ldr	r1, [pc, #600]	; (8002004 <main+0x157c>)
 8001daa:	4894      	ldr	r0, [pc, #592]	; (8001ffc <main+0x1574>)
 8001dac:	f001 fc5d 	bl	800366a <HAL_UART_Transmit>
	}

	// test 57

	static_strings_string_descriptor *clone_test_source_string = static_strings_save((uint8_t *)"I am a clone test\r\n");
 8001db0:	4896      	ldr	r0, [pc, #600]	; (800200c <main+0x1584>)
 8001db2:	f002 f87f 	bl	8003eb4 <static_strings_save>
 8001db6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001dba:	f103 031c 	add.w	r3, r3, #28
 8001dbe:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001dc0:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001dc4:	f103 0304 	add.w	r3, r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d041      	beq.n	8001e52 <main+0x13ca>
		static_strings_string_descriptor *clone_test_target_string = static_strings_clone(clone_test_source_string);
 8001dce:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001dd2:	f103 031c 	add.w	r3, r3, #28
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	f001 ff3e 	bl	8003c58 <static_strings_clone>
 8001ddc:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001de0:	f103 0318 	add.w	r3, r3, #24
 8001de4:	6018      	str	r0, [r3, #0]
		if(clone_test_target_string != NULL){
 8001de6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001dea:	f103 0318 	add.w	r3, r3, #24
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01f      	beq.n	8001e34 <main+0x13ac>
			HAL_UART_Transmit(&huart1,clone_test_target_string->string,clone_test_target_string->length,HAL_MAX_DELAY);
 8001df4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001df8:	f103 0318 	add.w	r3, r3, #24
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e04:	f103 0318 	add.w	r3, r3, #24
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	889a      	ldrh	r2, [r3, #4]
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	487a      	ldr	r0, [pc, #488]	; (8001ffc <main+0x1574>)
 8001e12:	f001 fc2a 	bl	800366a <HAL_UART_Transmit>
			static_strings_deallocate(clone_test_source_string);
 8001e16:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e1a:	f103 031c 	add.w	r3, r3, #28
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	f002 f88c 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(clone_test_target_string);
 8001e24:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e28:	f103 0318 	add.w	r3, r3, #24
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f002 f885 	bl	8003f3c <static_strings_deallocate>
 8001e32:	e01c      	b.n	8001e6e <main+0x13e6>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
 8001e38:	2208      	movs	r2, #8
 8001e3a:	4971      	ldr	r1, [pc, #452]	; (8002000 <main+0x1578>)
 8001e3c:	486f      	ldr	r0, [pc, #444]	; (8001ffc <main+0x1574>)
 8001e3e:	f001 fc14 	bl	800366a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	2201      	movs	r2, #1
 8001e48:	496e      	ldr	r1, [pc, #440]	; (8002004 <main+0x157c>)
 8001e4a:	486c      	ldr	r0, [pc, #432]	; (8001ffc <main+0x1574>)
 8001e4c:	f001 fc0d 	bl	800366a <HAL_UART_Transmit>
 8001e50:	e00d      	b.n	8001e6e <main+0x13e6>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	2208      	movs	r2, #8
 8001e58:	496b      	ldr	r1, [pc, #428]	; (8002008 <main+0x1580>)
 8001e5a:	4868      	ldr	r0, [pc, #416]	; (8001ffc <main+0x1574>)
 8001e5c:	f001 fc05 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	2201      	movs	r2, #1
 8001e66:	4967      	ldr	r1, [pc, #412]	; (8002004 <main+0x157c>)
 8001e68:	4864      	ldr	r0, [pc, #400]	; (8001ffc <main+0x1574>)
 8001e6a:	f001 fbfe 	bl	800366a <HAL_UART_Transmit>
	}

	// test 58

	static_strings_string_descriptor *move_test_source_string = static_strings_save((uint8_t *)"I am a move test\r\n");
 8001e6e:	4868      	ldr	r0, [pc, #416]	; (8002010 <main+0x1588>)
 8001e70:	f002 f820 	bl	8003eb4 <static_strings_save>
 8001e74:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e78:	f103 0314 	add.w	r3, r3, #20
 8001e7c:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001e7e:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001e82:	f103 0304 	add.w	r3, r3, #4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d057      	beq.n	8001f3c <main+0x14b4>
		static_strings_string_descriptor *move_test_target_string = static_strings_allocate(100);
 8001e8c:	2064      	movs	r0, #100	; 0x64
 8001e8e:	f001 ff09 	bl	8003ca4 <static_strings_allocate>
 8001e92:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e96:	f103 0310 	add.w	r3, r3, #16
 8001e9a:	6018      	str	r0, [r3, #0]
		*move_test_target_string->string = '.';
 8001e9c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ea0:	f103 0310 	add.w	r3, r3, #16
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	222e      	movs	r2, #46	; 0x2e
 8001eaa:	701a      	strb	r2, [r3, #0]
		if(static_strings_move(move_test_target_string,move_test_source_string,1) != NULL){
 8001eac:	2201      	movs	r2, #1
 8001eae:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001eb2:	f103 0314 	add.w	r3, r3, #20
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ebc:	f103 0310 	add.w	r3, r3, #16
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	f001 feaf 	bl	8003c24 <static_strings_move>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d028      	beq.n	8001f1e <main+0x1496>
			if(move_test_source_string->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8001ecc:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ed0:	f103 0314 	add.w	r3, r3, #20
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	79db      	ldrb	r3, [r3, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <main+0x1478>
				HAL_UART_Transmit(&huart1,move_test_target_string->string,move_test_target_string->length,HAL_MAX_DELAY);
 8001edc:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ee0:	f103 0310 	add.w	r3, r3, #16
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001eec:	f103 0310 	add.w	r3, r3, #16
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	889a      	ldrh	r2, [r3, #4]
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	4840      	ldr	r0, [pc, #256]	; (8001ffc <main+0x1574>)
 8001efa:	f001 fbb6 	bl	800366a <HAL_UART_Transmit>
 8001efe:	e006      	b.n	8001f0e <main+0x1486>
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	2208      	movs	r2, #8
 8001f06:	4943      	ldr	r1, [pc, #268]	; (8002014 <main+0x158c>)
 8001f08:	483c      	ldr	r0, [pc, #240]	; (8001ffc <main+0x1574>)
 8001f0a:	f001 fbae 	bl	800366a <HAL_UART_Transmit>
			}
			static_strings_deallocate(move_test_source_string);
 8001f0e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f12:	f103 0314 	add.w	r3, r3, #20
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	f002 f810 	bl	8003f3c <static_strings_deallocate>
 8001f1c:	e01c      	b.n	8001f58 <main+0x14d0>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	2208      	movs	r2, #8
 8001f24:	4936      	ldr	r1, [pc, #216]	; (8002000 <main+0x1578>)
 8001f26:	4835      	ldr	r0, [pc, #212]	; (8001ffc <main+0x1574>)
 8001f28:	f001 fb9f 	bl	800366a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	2201      	movs	r2, #1
 8001f32:	4934      	ldr	r1, [pc, #208]	; (8002004 <main+0x157c>)
 8001f34:	4831      	ldr	r0, [pc, #196]	; (8001ffc <main+0x1574>)
 8001f36:	f001 fb98 	bl	800366a <HAL_UART_Transmit>
 8001f3a:	e00d      	b.n	8001f58 <main+0x14d0>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	2208      	movs	r2, #8
 8001f42:	4931      	ldr	r1, [pc, #196]	; (8002008 <main+0x1580>)
 8001f44:	482d      	ldr	r0, [pc, #180]	; (8001ffc <main+0x1574>)
 8001f46:	f001 fb90 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	2201      	movs	r2, #1
 8001f50:	492c      	ldr	r1, [pc, #176]	; (8002004 <main+0x157c>)
 8001f52:	482a      	ldr	r0, [pc, #168]	; (8001ffc <main+0x1574>)
 8001f54:	f001 fb89 	bl	800366a <HAL_UART_Transmit>
	}

	// test 59

	static_strings_string_descriptor *concatenate_and_clean_concatenate_at_test = static_strings_save((uint8_t *)"I am a ");
 8001f58:	482f      	ldr	r0, [pc, #188]	; (8002018 <main+0x1590>)
 8001f5a:	f001 ffab 	bl	8003eb4 <static_strings_save>
 8001f5e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f62:	f103 030c 	add.w	r3, r3, #12
 8001f66:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_and_clean_concatenate_test = static_strings_save((uint8_t *)"concatenate test\r\n");
 8001f68:	482c      	ldr	r0, [pc, #176]	; (800201c <main+0x1594>)
 8001f6a:	f001 ffa3 	bl	8003eb4 <static_strings_save>
 8001f6e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f72:	f103 0308 	add.w	r3, r3, #8
 8001f76:	6018      	str	r0, [r3, #0]
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8001f78:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f7c:	f103 030c 	add.w	r3, r3, #12
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d078      	beq.n	8002078 <main+0x15f0>
 8001f86:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f8a:	f103 0308 	add.w	r3, r3, #8
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d071      	beq.n	8002078 <main+0x15f0>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean(concatenate_and_clean_concatenate_at_test,concatenate_and_clean_concatenate_test);
 8001f94:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f98:	f103 0308 	add.w	r3, r3, #8
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fa2:	f103 030c 	add.w	r3, r3, #12
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f002 f928 	bl	80041fc <static_strings_concatenate_and_clean>
 8001fac:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fb0:	f103 0304 	add.w	r3, r3, #4
 8001fb4:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 8001fb6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fba:	f103 0304 	add.w	r3, r3, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d04a      	beq.n	800205a <main+0x15d2>
			if(concatenate_and_clean_concatenate_at_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8001fc4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fc8:	f103 030c 	add.w	r3, r3, #12
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	79db      	ldrb	r3, [r3, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d125      	bne.n	8002020 <main+0x1598>
				HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 8001fd4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fd8:	f103 0304 	add.w	r3, r3, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fe4:	f103 0304 	add.w	r3, r3, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	889a      	ldrh	r2, [r3, #4]
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <main+0x1574>)
 8001ff2:	f001 fb3a 	bl	800366a <HAL_UART_Transmit>
 8001ff6:	e01a      	b.n	800202e <main+0x15a6>
 8001ff8:	08006830 	.word	0x08006830
 8001ffc:	20001670 	.word	0x20001670
 8002000:	08006844 	.word	0x08006844
 8002004:	2000066c 	.word	0x2000066c
 8002008:	08006850 	.word	0x08006850
 800200c:	0800685c 	.word	0x0800685c
 8002010:	08006870 	.word	0x08006870
 8002014:	08006884 	.word	0x08006884
 8002018:	08006890 	.word	0x08006890
 800201c:	08006898 	.word	0x08006898
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	2208      	movs	r2, #8
 8002026:	49a9      	ldr	r1, [pc, #676]	; (80022cc <main+0x1844>)
 8002028:	48a9      	ldr	r0, [pc, #676]	; (80022d0 <main+0x1848>)
 800202a:	f001 fb1e 	bl	800366a <HAL_UART_Transmit>
			}
			static_strings_deallocate(concatenate_and_clean_concatenate_at_test);
 800202e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002032:	f103 030c 	add.w	r3, r3, #12
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	f001 ff80 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenate_and_clean_concatenate_test);
 800203c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002040:	f103 0308 	add.w	r3, r3, #8
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f001 ff79 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 800204a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800204e:	f103 0304 	add.w	r3, r3, #4
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f001 ff72 	bl	8003f3c <static_strings_deallocate>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8002058:	e01c      	b.n	8002094 <main+0x160c>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	2208      	movs	r2, #8
 8002060:	499c      	ldr	r1, [pc, #624]	; (80022d4 <main+0x184c>)
 8002062:	489b      	ldr	r0, [pc, #620]	; (80022d0 <main+0x1848>)
 8002064:	f001 fb01 	bl	800366a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	2201      	movs	r2, #1
 800206e:	499a      	ldr	r1, [pc, #616]	; (80022d8 <main+0x1850>)
 8002070:	4897      	ldr	r0, [pc, #604]	; (80022d0 <main+0x1848>)
 8002072:	f001 fafa 	bl	800366a <HAL_UART_Transmit>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8002076:	e00d      	b.n	8002094 <main+0x160c>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	2208      	movs	r2, #8
 800207e:	4997      	ldr	r1, [pc, #604]	; (80022dc <main+0x1854>)
 8002080:	4893      	ldr	r0, [pc, #588]	; (80022d0 <main+0x1848>)
 8002082:	f001 faf2 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	2201      	movs	r2, #1
 800208c:	4992      	ldr	r1, [pc, #584]	; (80022d8 <main+0x1850>)
 800208e:	4890      	ldr	r0, [pc, #576]	; (80022d0 <main+0x1848>)
 8002090:	f001 faeb 	bl	800366a <HAL_UART_Transmit>
	}

	// test 60

	static_strings_string_descriptor *concatenate_all_test_one = static_strings_save((uint8_t *)"I am a ");
 8002094:	4892      	ldr	r0, [pc, #584]	; (80022e0 <main+0x1858>)
 8002096:	f001 ff0d 	bl	8003eb4 <static_strings_save>
 800209a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800209e:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_two = static_strings_save((uint8_t *)"concatenate all ");
 80020a0:	4890      	ldr	r0, [pc, #576]	; (80022e4 <main+0x185c>)
 80020a2:	f001 ff07 	bl	8003eb4 <static_strings_save>
 80020a6:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020aa:	f103 031c 	add.w	r3, r3, #28
 80020ae:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_three = static_strings_save((uint8_t *)"test\r\n");
 80020b0:	488d      	ldr	r0, [pc, #564]	; (80022e8 <main+0x1860>)
 80020b2:	f001 feff 	bl	8003eb4 <static_strings_save>
 80020b6:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020ba:	f103 0318 	add.w	r3, r3, #24
 80020be:	6018      	str	r0, [r3, #0]
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 80020c0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d064      	beq.n	8002194 <main+0x170c>
 80020ca:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020ce:	f103 031c 	add.w	r3, r3, #28
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d05d      	beq.n	8002194 <main+0x170c>
 80020d8:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020dc:	f103 0318 	add.w	r3, r3, #24
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d056      	beq.n	8002194 <main+0x170c>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_all(3,concatenate_all_test_one,concatenate_all_test_two,concatenate_all_test_three);
 80020e6:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020ea:	f103 0318 	add.w	r3, r3, #24
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f507 52de 	add.w	r2, r7, #7104	; 0x1bc0
 80020f4:	f102 021c 	add.w	r2, r2, #28
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	f507 51df 	add.w	r1, r7, #7136	; 0x1be0
 80020fe:	6809      	ldr	r1, [r1, #0]
 8002100:	2003      	movs	r0, #3
 8002102:	f002 f8ac 	bl	800425e <static_strings_concatenate_all>
 8002106:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800210a:	f103 0314 	add.w	r3, r3, #20
 800210e:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 8002110:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002114:	f103 0314 	add.w	r3, r3, #20
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d02b      	beq.n	8002176 <main+0x16ee>
			HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 800211e:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002122:	f103 0314 	add.w	r3, r3, #20
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800212e:	f103 0314 	add.w	r3, r3, #20
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	889a      	ldrh	r2, [r3, #4]
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	4865      	ldr	r0, [pc, #404]	; (80022d0 <main+0x1848>)
 800213c:	f001 fa95 	bl	800366a <HAL_UART_Transmit>
			static_strings_deallocate(concatenate_all_test_one);
 8002140:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	f001 fef9 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_two);
 800214a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800214e:	f103 031c 	add.w	r3, r3, #28
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	f001 fef2 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_three);
 8002158:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800215c:	f103 0318 	add.w	r3, r3, #24
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f001 feeb 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 8002166:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800216a:	f103 0314 	add.w	r3, r3, #20
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f001 fee4 	bl	8003f3c <static_strings_deallocate>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002174:	e01c      	b.n	80021b0 <main+0x1728>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	2208      	movs	r2, #8
 800217c:	4955      	ldr	r1, [pc, #340]	; (80022d4 <main+0x184c>)
 800217e:	4854      	ldr	r0, [pc, #336]	; (80022d0 <main+0x1848>)
 8002180:	f001 fa73 	bl	800366a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	2201      	movs	r2, #1
 800218a:	4953      	ldr	r1, [pc, #332]	; (80022d8 <main+0x1850>)
 800218c:	4850      	ldr	r0, [pc, #320]	; (80022d0 <main+0x1848>)
 800218e:	f001 fa6c 	bl	800366a <HAL_UART_Transmit>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002192:	e00d      	b.n	80021b0 <main+0x1728>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	2208      	movs	r2, #8
 800219a:	4950      	ldr	r1, [pc, #320]	; (80022dc <main+0x1854>)
 800219c:	484c      	ldr	r0, [pc, #304]	; (80022d0 <main+0x1848>)
 800219e:	f001 fa64 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	2201      	movs	r2, #1
 80021a8:	494b      	ldr	r1, [pc, #300]	; (80022d8 <main+0x1850>)
 80021aa:	4849      	ldr	r0, [pc, #292]	; (80022d0 <main+0x1848>)
 80021ac:	f001 fa5d 	bl	800366a <HAL_UART_Transmit>
	}

	// test 61

	concatenate_and_clean_concatenate_at_test = static_strings_save((uint8_t *)"I am a ");
 80021b0:	484b      	ldr	r0, [pc, #300]	; (80022e0 <main+0x1858>)
 80021b2:	f001 fe7f 	bl	8003eb4 <static_strings_save>
 80021b6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021ba:	f103 030c 	add.w	r3, r3, #12
 80021be:	6018      	str	r0, [r3, #0]
	concatenate_and_clean_concatenate_test = static_strings_save((uint8_t *)"concatenate test\r\n");
 80021c0:	484a      	ldr	r0, [pc, #296]	; (80022ec <main+0x1864>)
 80021c2:	f001 fe77 	bl	8003eb4 <static_strings_save>
 80021c6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021ca:	f103 0308 	add.w	r3, r3, #8
 80021ce:	6018      	str	r0, [r3, #0]
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 80021d0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021d4:	f103 030c 	add.w	r3, r3, #12
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 808a 	beq.w	80022f4 <main+0x186c>
 80021e0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021e4:	f103 0308 	add.w	r3, r3, #8
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8082 	beq.w	80022f4 <main+0x186c>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean_both(concatenate_and_clean_concatenate_at_test,concatenate_and_clean_concatenate_test);
 80021f0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021f4:	f103 0308 	add.w	r3, r3, #8
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021fe:	f103 030c 	add.w	r3, r3, #12
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	f002 f811 	bl	800422a <static_strings_concatenate_and_clean_both>
 8002208:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800220c:	f103 0310 	add.w	r3, r3, #16
 8002210:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 8002212:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002216:	f103 0310 	add.w	r3, r3, #16
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d046      	beq.n	80022ae <main+0x1826>
			if(concatenate_and_clean_concatenate_at_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002220:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002224:	f103 030c 	add.w	r3, r3, #12
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	79db      	ldrb	r3, [r3, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d121      	bne.n	8002274 <main+0x17ec>
				if(concatenate_and_clean_concatenate_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002230:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002234:	f103 0308 	add.w	r3, r3, #8
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	79db      	ldrb	r3, [r3, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d111      	bne.n	8002264 <main+0x17dc>
					HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 8002240:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002244:	f103 0310 	add.w	r3, r3, #16
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002250:	f103 0310 	add.w	r3, r3, #16
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	889a      	ldrh	r2, [r3, #4]
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	481c      	ldr	r0, [pc, #112]	; (80022d0 <main+0x1848>)
 800225e:	f001 fa04 	bl	800366a <HAL_UART_Transmit>
 8002262:	e00e      	b.n	8002282 <main+0x17fa>
				}
				else{
					HAL_UART_Transmit(&huart1,(uint8_t *)"error4\r\n",8,HAL_MAX_DELAY);
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	2208      	movs	r2, #8
 800226a:	4921      	ldr	r1, [pc, #132]	; (80022f0 <main+0x1868>)
 800226c:	4818      	ldr	r0, [pc, #96]	; (80022d0 <main+0x1848>)
 800226e:	f001 f9fc 	bl	800366a <HAL_UART_Transmit>
 8002272:	e006      	b.n	8002282 <main+0x17fa>
				}
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	2208      	movs	r2, #8
 800227a:	4914      	ldr	r1, [pc, #80]	; (80022cc <main+0x1844>)
 800227c:	4814      	ldr	r0, [pc, #80]	; (80022d0 <main+0x1848>)
 800227e:	f001 f9f4 	bl	800366a <HAL_UART_Transmit>
			}
			static_strings_deallocate(concatenate_and_clean_concatenate_at_test);
 8002282:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002286:	f103 030c 	add.w	r3, r3, #12
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	f001 fe56 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenate_and_clean_concatenate_test);
 8002290:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002294:	f103 0308 	add.w	r3, r3, #8
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	f001 fe4f 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 800229e:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80022a2:	f103 0310 	add.w	r3, r3, #16
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	f001 fe48 	bl	8003f3c <static_strings_deallocate>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 80022ac:	e030      	b.n	8002310 <main+0x1888>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	2208      	movs	r2, #8
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <main+0x184c>)
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <main+0x1848>)
 80022b8:	f001 f9d7 	bl	800366a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	2201      	movs	r2, #1
 80022c2:	4905      	ldr	r1, [pc, #20]	; (80022d8 <main+0x1850>)
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <main+0x1848>)
 80022c6:	f001 f9d0 	bl	800366a <HAL_UART_Transmit>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 80022ca:	e021      	b.n	8002310 <main+0x1888>
 80022cc:	08006884 	.word	0x08006884
 80022d0:	20001670 	.word	0x20001670
 80022d4:	08006844 	.word	0x08006844
 80022d8:	2000066c 	.word	0x2000066c
 80022dc:	08006850 	.word	0x08006850
 80022e0:	08006890 	.word	0x08006890
 80022e4:	080068ac 	.word	0x080068ac
 80022e8:	080068c0 	.word	0x080068c0
 80022ec:	08006898 	.word	0x08006898
 80022f0:	080068c8 	.word	0x080068c8
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
 80022f8:	2208      	movs	r2, #8
 80022fa:	4965      	ldr	r1, [pc, #404]	; (8002490 <main+0x1a08>)
 80022fc:	4865      	ldr	r0, [pc, #404]	; (8002494 <main+0x1a0c>)
 80022fe:	f001 f9b4 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	2201      	movs	r2, #1
 8002308:	4963      	ldr	r1, [pc, #396]	; (8002498 <main+0x1a10>)
 800230a:	4862      	ldr	r0, [pc, #392]	; (8002494 <main+0x1a0c>)
 800230c:	f001 f9ad 	bl	800366a <HAL_UART_Transmit>
	}
	// test 62

	concatenate_all_test_one = static_strings_save((uint8_t *)"I am a ");
 8002310:	4862      	ldr	r0, [pc, #392]	; (800249c <main+0x1a14>)
 8002312:	f001 fdcf 	bl	8003eb4 <static_strings_save>
 8002316:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800231a:	6018      	str	r0, [r3, #0]
	concatenate_all_test_two = static_strings_save((uint8_t *)"concatenate all ");
 800231c:	4860      	ldr	r0, [pc, #384]	; (80024a0 <main+0x1a18>)
 800231e:	f001 fdc9 	bl	8003eb4 <static_strings_save>
 8002322:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002326:	f103 031c 	add.w	r3, r3, #28
 800232a:	6018      	str	r0, [r3, #0]
	concatenate_all_test_three = static_strings_save((uint8_t *)"test\r\n");
 800232c:	485d      	ldr	r0, [pc, #372]	; (80024a4 <main+0x1a1c>)
 800232e:	f001 fdc1 	bl	8003eb4 <static_strings_save>
 8002332:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002336:	f103 0318 	add.w	r3, r3, #24
 800233a:	6018      	str	r0, [r3, #0]
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 800233c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8095 	beq.w	8002472 <main+0x19ea>
 8002348:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800234c:	f103 031c 	add.w	r3, r3, #28
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 808d 	beq.w	8002472 <main+0x19ea>
 8002358:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800235c:	f103 0318 	add.w	r3, r3, #24
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8085 	beq.w	8002472 <main+0x19ea>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean_all(3,concatenate_all_test_one,concatenate_all_test_two,concatenate_all_test_three);
 8002368:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800236c:	f103 0318 	add.w	r3, r3, #24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f507 52de 	add.w	r2, r7, #7104	; 0x1bc0
 8002376:	f102 021c 	add.w	r2, r2, #28
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	f507 51df 	add.w	r1, r7, #7136	; 0x1be0
 8002380:	6809      	ldr	r1, [r1, #0]
 8002382:	2003      	movs	r0, #3
 8002384:	f001 ff95 	bl	80042b2 <static_strings_concatenate_and_clean_all>
 8002388:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800238c:	f103 030c 	add.w	r3, r3, #12
 8002390:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 8002392:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002396:	f103 030c 	add.w	r3, r3, #12
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d059      	beq.n	8002454 <main+0x19cc>
			if(concatenate_all_test_one->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80023a0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	79db      	ldrb	r3, [r3, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d131      	bne.n	8002410 <main+0x1988>
				if(concatenate_all_test_two->status == STATIC_STRINGS_STRING_STATUS_ALLOCATED){
 80023ac:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80023b0:	f103 031c 	add.w	r3, r3, #28
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	79db      	ldrb	r3, [r3, #7]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d121      	bne.n	8002400 <main+0x1978>
					if(concatenate_all_test_three->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80023bc:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80023c0:	f103 0318 	add.w	r3, r3, #24
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	79db      	ldrb	r3, [r3, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d111      	bne.n	80023f0 <main+0x1968>
						HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 80023cc:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80023d0:	f103 030c 	add.w	r3, r3, #12
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80023dc:	f103 030c 	add.w	r3, r3, #12
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	889a      	ldrh	r2, [r3, #4]
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	482a      	ldr	r0, [pc, #168]	; (8002494 <main+0x1a0c>)
 80023ea:	f001 f93e 	bl	800366a <HAL_UART_Transmit>
 80023ee:	e016      	b.n	800241e <main+0x1996>
					}
					else{
						HAL_UART_Transmit(&huart1,(uint8_t *)"error5\r\n",8,HAL_MAX_DELAY);
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	2208      	movs	r2, #8
 80023f6:	492c      	ldr	r1, [pc, #176]	; (80024a8 <main+0x1a20>)
 80023f8:	4826      	ldr	r0, [pc, #152]	; (8002494 <main+0x1a0c>)
 80023fa:	f001 f936 	bl	800366a <HAL_UART_Transmit>
 80023fe:	e00e      	b.n	800241e <main+0x1996>
					}
				}
				else{
					HAL_UART_Transmit(&huart1,(uint8_t *)"error4\r\n",8,HAL_MAX_DELAY);
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	2208      	movs	r2, #8
 8002406:	4929      	ldr	r1, [pc, #164]	; (80024ac <main+0x1a24>)
 8002408:	4822      	ldr	r0, [pc, #136]	; (8002494 <main+0x1a0c>)
 800240a:	f001 f92e 	bl	800366a <HAL_UART_Transmit>
 800240e:	e006      	b.n	800241e <main+0x1996>
				}
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
 8002414:	2208      	movs	r2, #8
 8002416:	4926      	ldr	r1, [pc, #152]	; (80024b0 <main+0x1a28>)
 8002418:	481e      	ldr	r0, [pc, #120]	; (8002494 <main+0x1a0c>)
 800241a:	f001 f926 	bl	800366a <HAL_UART_Transmit>
			}
			static_strings_deallocate(concatenate_all_test_one);
 800241e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	f001 fd8a 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_two);
 8002428:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800242c:	f103 031c 	add.w	r3, r3, #28
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	f001 fd83 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_three);
 8002436:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800243a:	f103 0318 	add.w	r3, r3, #24
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	f001 fd7c 	bl	8003f3c <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 8002444:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002448:	f103 030c 	add.w	r3, r3, #12
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	f001 fd75 	bl	8003f3c <static_strings_deallocate>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002452:	e01c      	b.n	800248e <main+0x1a06>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	2208      	movs	r2, #8
 800245a:	4916      	ldr	r1, [pc, #88]	; (80024b4 <main+0x1a2c>)
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <main+0x1a0c>)
 800245e:	f001 f904 	bl	800366a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	2201      	movs	r2, #1
 8002468:	490b      	ldr	r1, [pc, #44]	; (8002498 <main+0x1a10>)
 800246a:	480a      	ldr	r0, [pc, #40]	; (8002494 <main+0x1a0c>)
 800246c:	f001 f8fd 	bl	800366a <HAL_UART_Transmit>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002470:	e00d      	b.n	800248e <main+0x1a06>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	2208      	movs	r2, #8
 8002478:	4905      	ldr	r1, [pc, #20]	; (8002490 <main+0x1a08>)
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <main+0x1a0c>)
 800247c:	f001 f8f5 	bl	800366a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	2201      	movs	r2, #1
 8002486:	4904      	ldr	r1, [pc, #16]	; (8002498 <main+0x1a10>)
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <main+0x1a0c>)
 800248a:	f001 f8ee 	bl	800366a <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800248e:	e7fe      	b.n	800248e <main+0x1a06>
 8002490:	08006850 	.word	0x08006850
 8002494:	20001670 	.word	0x20001670
 8002498:	2000066c 	.word	0x2000066c
 800249c:	08006890 	.word	0x08006890
 80024a0:	080068ac 	.word	0x080068ac
 80024a4:	080068c0 	.word	0x080068c0
 80024a8:	080068d4 	.word	0x080068d4
 80024ac:	080068c8 	.word	0x080068c8
 80024b0:	08006884 	.word	0x08006884
 80024b4:	08006844 	.word	0x08006844

080024b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	; 0x40
 80024bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024be:	f107 0318 	add.w	r3, r7, #24
 80024c2:	2228      	movs	r2, #40	; 0x28
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 f959 	bl	800477e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024da:	2301      	movs	r3, #1
 80024dc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e8:	2301      	movs	r3, #1
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ec:	2302      	movs	r3, #2
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fc49 	bl	8002d98 <HAL_RCC_OscConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <SystemClock_Config+0x58>
	{
		Error_Handler();
 800250c:	f000 f866 	bl	80025dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002510:	230f      	movs	r3, #15
 8002512:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002514:	2302      	movs	r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800251c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002520:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f000 feb4 	bl	8003298 <HAL_RCC_ClockConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <SystemClock_Config+0x82>
	{
		Error_Handler();
 8002536:	f000 f851 	bl	80025dc <Error_Handler>
	}
}
 800253a:	bf00      	nop
 800253c:	3740      	adds	r7, #64	; 0x40
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <MX_USART1_UART_Init+0x50>)
 800254c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002554:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_USART1_UART_Init+0x4c>)
 800257c:	f001 f828 	bl	80035d0 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002586:	f000 f829 	bl	80025dc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20001670 	.word	0x20001670
 8002594:	40013800 	.word	0x40013800

08002598 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_GPIO_Init+0x40>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <MX_GPIO_Init+0x40>)
 80025a4:	f043 0320 	orr.w	r3, r3, #32
 80025a8:	6193      	str	r3, [r2, #24]
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <MX_GPIO_Init+0x40>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <MX_GPIO_Init+0x40>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <MX_GPIO_Init+0x40>)
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	6193      	str	r3, [r2, #24]
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <MX_GPIO_Init+0x40>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]

}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000

080025dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_MspInit+0x5c>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_MspInit+0x5c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6193      	str	r3, [r2, #24]
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_MspInit+0x5c>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_MspInit+0x5c>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_MspInit+0x5c>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_MspInit+0x5c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_MspInit+0x60>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_MspInit+0x60>)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40021000 	.word	0x40021000
 8002648:	40010000 	.word	0x40010000

0800264c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_UART_MspInit+0x8c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d131      	bne.n	80026d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_UART_MspInit+0x90>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_UART_MspInit+0x90>)
 8002672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_UART_MspInit+0x90>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_UART_MspInit+0x90>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <HAL_UART_MspInit+0x90>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_UART_MspInit+0x90>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800269c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a6:	2303      	movs	r3, #3
 80026a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4619      	mov	r1, r3
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <HAL_UART_MspInit+0x94>)
 80026b2:	f000 fa17 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4619      	mov	r1, r3
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <HAL_UART_MspInit+0x94>)
 80026cc:	f000 fa0a 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026d0:	bf00      	nop
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40010800 	.word	0x40010800

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <HardFault_Handler+0x4>

080026f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <MemManage_Handler+0x4>

080026fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <BusFault_Handler+0x4>

08002702 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <UsageFault_Handler+0x4>

08002708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002730:	f000 f8d8 	bl	80028e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <_sbrk+0x5c>)
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <_sbrk+0x60>)
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <_sbrk+0x64>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <_sbrk+0x68>)
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d207      	bcs.n	8002778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002768:	f001 ffd4 	bl	8004714 <__errno>
 800276c:	4602      	mov	r2, r0
 800276e:	230c      	movs	r3, #12
 8002770:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	e009      	b.n	800278c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20005000 	.word	0x20005000
 8002798:	00000400 	.word	0x00000400
 800279c:	200001f8 	.word	0x200001f8
 80027a0:	20001888 	.word	0x20001888

080027a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <SystemInit+0x5c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <SystemInit+0x5c>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <SystemInit+0x5c>)
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4911      	ldr	r1, [pc, #68]	; (8002800 <SystemInit+0x5c>)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <SystemInit+0x60>)
 80027bc:	4013      	ands	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <SystemInit+0x5c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <SystemInit+0x5c>)
 80027c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <SystemInit+0x5c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SystemInit+0x5c>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <SystemInit+0x5c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a07      	ldr	r2, [pc, #28]	; (8002800 <SystemInit+0x5c>)
 80027e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SystemInit+0x5c>)
 80027ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SystemInit+0x64>)
 80027f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40021000 	.word	0x40021000
 8002804:	f8ff0000 	.word	0xf8ff0000
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800280c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800280e:	e003      	b.n	8002818 <LoopCopyDataInit>

08002810 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002812:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002814:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002816:	3104      	adds	r1, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002818:	480a      	ldr	r0, [pc, #40]	; (8002844 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800281c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800281e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002820:	d3f6      	bcc.n	8002810 <CopyDataInit>
  ldr r2, =_sbss
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002824:	e002      	b.n	800282c <LoopFillZerobss>

08002826 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002828:	f842 3b04 	str.w	r3, [r2], #4

0800282c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800282e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002830:	d3f9      	bcc.n	8002826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002832:	f7ff ffb7 	bl	80027a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002836:	f001 ff73 	bl	8004720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800283a:	f7fe f925 	bl	8000a88 <main>
  bx lr
 800283e:	4770      	bx	lr
  ldr r3, =_sidata
 8002840:	080077c0 	.word	0x080077c0
  ldr r0, =_sdata
 8002844:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002848:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800284c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002850:	20001888 	.word	0x20001888

08002854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC1_2_IRQHandler>
	...

08002858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x28>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x28>)
 8002862:	f043 0310 	orr.w	r3, r3, #16
 8002866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 f907 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	2000      	movs	r0, #0
 8002870:	f000 f808 	bl	8002884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff feb8 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000

08002884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x54>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x58>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289a:	fbb3 f3f1 	udiv	r3, r3, r1
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f911 	bl	8002aca <HAL_SYSTICK_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00e      	b.n	80028d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	d80a      	bhi.n	80028ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b8:	2200      	movs	r2, #0
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f000 f8e7 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_InitTick+0x5c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000008 	.word	0x20000008
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_IncTick+0x1c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_IncTick+0x20>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_IncTick+0x20>)
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000008 	.word	0x20000008
 8002904:	20001880 	.word	0x20001880

08002908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b02      	ldr	r3, [pc, #8]	; (8002918 <HAL_GetTick+0x10>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	20001880 	.word	0x20001880

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f7ff ff90 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff49 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff5e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff90 	bl	80029d4 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5f 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffb0 	bl	8002a38 <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b08b      	sub	sp, #44	; 0x2c
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af6:	e127      	b.n	8002d48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af8:	2201      	movs	r2, #1
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8116 	bne.w	8002d42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b12      	cmp	r3, #18
 8002b1c:	d034      	beq.n	8002b88 <HAL_GPIO_Init+0xa4>
 8002b1e:	2b12      	cmp	r3, #18
 8002b20:	d80d      	bhi.n	8002b3e <HAL_GPIO_Init+0x5a>
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d02b      	beq.n	8002b7e <HAL_GPIO_Init+0x9a>
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d804      	bhi.n	8002b34 <HAL_GPIO_Init+0x50>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d031      	beq.n	8002b92 <HAL_GPIO_Init+0xae>
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d01c      	beq.n	8002b6c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b32:	e048      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d043      	beq.n	8002bc0 <HAL_GPIO_Init+0xdc>
 8002b38:	2b11      	cmp	r3, #17
 8002b3a:	d01b      	beq.n	8002b74 <HAL_GPIO_Init+0x90>
          break;
 8002b3c:	e043      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b3e:	4a89      	ldr	r2, [pc, #548]	; (8002d64 <HAL_GPIO_Init+0x280>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d026      	beq.n	8002b92 <HAL_GPIO_Init+0xae>
 8002b44:	4a87      	ldr	r2, [pc, #540]	; (8002d64 <HAL_GPIO_Init+0x280>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d806      	bhi.n	8002b58 <HAL_GPIO_Init+0x74>
 8002b4a:	4a87      	ldr	r2, [pc, #540]	; (8002d68 <HAL_GPIO_Init+0x284>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d020      	beq.n	8002b92 <HAL_GPIO_Init+0xae>
 8002b50:	4a86      	ldr	r2, [pc, #536]	; (8002d6c <HAL_GPIO_Init+0x288>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01d      	beq.n	8002b92 <HAL_GPIO_Init+0xae>
          break;
 8002b56:	e036      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b58:	4a85      	ldr	r2, [pc, #532]	; (8002d70 <HAL_GPIO_Init+0x28c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d019      	beq.n	8002b92 <HAL_GPIO_Init+0xae>
 8002b5e:	4a85      	ldr	r2, [pc, #532]	; (8002d74 <HAL_GPIO_Init+0x290>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d016      	beq.n	8002b92 <HAL_GPIO_Init+0xae>
 8002b64:	4a84      	ldr	r2, [pc, #528]	; (8002d78 <HAL_GPIO_Init+0x294>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_GPIO_Init+0xae>
          break;
 8002b6a:	e02c      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	623b      	str	r3, [r7, #32]
          break;
 8002b72:	e028      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	623b      	str	r3, [r7, #32]
          break;
 8002b7c:	e023      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	3308      	adds	r3, #8
 8002b84:	623b      	str	r3, [r7, #32]
          break;
 8002b86:	e01e      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	623b      	str	r3, [r7, #32]
          break;
 8002b90:	e019      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e012      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	611a      	str	r2, [r3, #16]
          break;
 8002bb2:	e008      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	615a      	str	r2, [r3, #20]
          break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
          break;
 8002bc4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2bff      	cmp	r3, #255	; 0xff
 8002bca:	d801      	bhi.n	8002bd0 <HAL_GPIO_Init+0xec>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	e001      	b.n	8002bd4 <HAL_GPIO_Init+0xf0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2bff      	cmp	r3, #255	; 0xff
 8002bda:	d802      	bhi.n	8002be2 <HAL_GPIO_Init+0xfe>
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	e002      	b.n	8002be8 <HAL_GPIO_Init+0x104>
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	3b08      	subs	r3, #8
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	210f      	movs	r1, #15
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	6a39      	ldr	r1, [r7, #32]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	431a      	orrs	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8096 	beq.w	8002d42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c16:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_GPIO_Init+0x298>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_GPIO_Init+0x298>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6193      	str	r3, [r2, #24]
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_GPIO_Init+0x298>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c2e:	4a54      	ldr	r2, [pc, #336]	; (8002d80 <HAL_GPIO_Init+0x29c>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	220f      	movs	r2, #15
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_GPIO_Init+0x2a0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x19e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_GPIO_Init+0x2a4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x19a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_GPIO_Init+0x2a8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x196>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a48      	ldr	r2, [pc, #288]	; (8002d90 <HAL_GPIO_Init+0x2ac>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x192>
 8002c72:	2303      	movs	r3, #3
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x1a0>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x1a0>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x1a0>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x1a0>
 8002c82:	2300      	movs	r3, #0
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c94:	493a      	ldr	r1, [pc, #232]	; (8002d80 <HAL_GPIO_Init+0x29c>)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cae:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4938      	ldr	r1, [pc, #224]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
 8002cba:	e006      	b.n	8002cca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	4933      	ldr	r1, [pc, #204]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	492e      	ldr	r1, [pc, #184]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
 8002ce2:	e006      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	4929      	ldr	r1, [pc, #164]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	4924      	ldr	r1, [pc, #144]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	491f      	ldr	r1, [pc, #124]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	491a      	ldr	r1, [pc, #104]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60cb      	str	r3, [r1, #12]
 8002d32:	e006      	b.n	8002d42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4915      	ldr	r1, [pc, #84]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f47f aed0 	bne.w	8002af8 <HAL_GPIO_Init+0x14>
  }
}
 8002d58:	bf00      	nop
 8002d5a:	372c      	adds	r7, #44	; 0x2c
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	10210000 	.word	0x10210000
 8002d68:	10110000 	.word	0x10110000
 8002d6c:	10120000 	.word	0x10120000
 8002d70:	10310000 	.word	0x10310000
 8002d74:	10320000 	.word	0x10320000
 8002d78:	10220000 	.word	0x10220000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40010800 	.word	0x40010800
 8002d88:	40010c00 	.word	0x40010c00
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40011400 	.word	0x40011400
 8002d94:	40010400 	.word	0x40010400

08002d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e26c      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8087 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db8:	4b92      	ldr	r3, [pc, #584]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d00c      	beq.n	8002dde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dc4:	4b8f      	ldr	r3, [pc, #572]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d112      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5e>
 8002dd0:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ddc:	d10b      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dde:	4b89      	ldr	r3, [pc, #548]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d06c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x12c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d168      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e246      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x76>
 8002e00:	4b80      	ldr	r3, [pc, #512]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7f      	ldr	r2, [pc, #508]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e02e      	b.n	8002e6c <HAL_RCC_OscConfig+0xd4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x98>
 8002e16:	4b7b      	ldr	r3, [pc, #492]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7a      	ldr	r2, [pc, #488]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b78      	ldr	r3, [pc, #480]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a77      	ldr	r2, [pc, #476]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e01d      	b.n	8002e6c <HAL_RCC_OscConfig+0xd4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0xbc>
 8002e3a:	4b72      	ldr	r3, [pc, #456]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a71      	ldr	r2, [pc, #452]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6e      	ldr	r2, [pc, #440]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0xd4>
 8002e54:	4b6b      	ldr	r3, [pc, #428]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6a      	ldr	r2, [pc, #424]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b68      	ldr	r3, [pc, #416]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a67      	ldr	r2, [pc, #412]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7ff fd48 	bl	8002908 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7ff fd44 	bl	8002908 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1fa      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0xe4>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7ff fd34 	bl	8002908 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7ff fd30 	bl	8002908 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1e6      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	4b53      	ldr	r3, [pc, #332]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x10c>
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d063      	beq.n	8002f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ed2:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d11c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x18c>
 8002eea:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d116      	bne.n	8002f24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	4b43      	ldr	r3, [pc, #268]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x176>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1ba      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4939      	ldr	r1, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	e03a      	b.n	8002f9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff fce9 	bl	8002908 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7ff fce5 	bl	8002908 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e19b      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4927      	ldr	r1, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
 8002f6c:	e015      	b.n	8002f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <HAL_RCC_OscConfig+0x270>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7ff fcc8 	bl	8002908 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7ff fcc4 	bl	8002908 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e17a      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03a      	beq.n	800301c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d019      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_RCC_OscConfig+0x274>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb4:	f7ff fca8 	bl	8002908 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7ff fca4 	bl	8002908 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e15a      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f000 fada 	bl	8003594 <RCC_Delay>
 8002fe0:	e01c      	b.n	800301c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_OscConfig+0x274>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7ff fc8e 	bl	8002908 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fee:	e00f      	b.n	8003010 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7ff fc8a 	bl	8002908 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d908      	bls.n	8003010 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e140      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	42420000 	.word	0x42420000
 800300c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	4b9e      	ldr	r3, [pc, #632]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e9      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a6 	beq.w	8003176 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302e:	4b97      	ldr	r3, [pc, #604]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4a93      	ldr	r2, [pc, #588]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	61d3      	str	r3, [r2, #28]
 8003046:	4b91      	ldr	r3, [pc, #580]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b8e      	ldr	r3, [pc, #568]	; (8003290 <HAL_RCC_OscConfig+0x4f8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d118      	bne.n	8003094 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <HAL_RCC_OscConfig+0x4f8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a8a      	ldr	r2, [pc, #552]	; (8003290 <HAL_RCC_OscConfig+0x4f8>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306e:	f7ff fc4b 	bl	8002908 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7ff fc47 	bl	8002908 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0fd      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x4f8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x312>
 800309c:	4b7b      	ldr	r3, [pc, #492]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4a7a      	ldr	r2, [pc, #488]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6213      	str	r3, [r2, #32]
 80030a8:	e02d      	b.n	8003106 <HAL_RCC_OscConfig+0x36e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x334>
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a75      	ldr	r2, [pc, #468]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6213      	str	r3, [r2, #32]
 80030be:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4a72      	ldr	r2, [pc, #456]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6213      	str	r3, [r2, #32]
 80030ca:	e01c      	b.n	8003106 <HAL_RCC_OscConfig+0x36e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d10c      	bne.n	80030ee <HAL_RCC_OscConfig+0x356>
 80030d4:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a6c      	ldr	r2, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	4b6a      	ldr	r3, [pc, #424]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4a69      	ldr	r2, [pc, #420]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6213      	str	r3, [r2, #32]
 80030ec:	e00b      	b.n	8003106 <HAL_RCC_OscConfig+0x36e>
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a66      	ldr	r2, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	4b64      	ldr	r3, [pc, #400]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4a63      	ldr	r2, [pc, #396]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d015      	beq.n	800313a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7ff fbfb 	bl	8002908 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7ff fbf7 	bl	8002908 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0ab      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312c:	4b57      	ldr	r3, [pc, #348]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ee      	beq.n	8003116 <HAL_RCC_OscConfig+0x37e>
 8003138:	e014      	b.n	8003164 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7ff fbe5 	bl	8002908 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7ff fbe1 	bl	8002908 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e095      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003158:	4b4c      	ldr	r3, [pc, #304]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ee      	bne.n	8003142 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d105      	bne.n	8003176 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	4b48      	ldr	r3, [pc, #288]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4a47      	ldr	r2, [pc, #284]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8081 	beq.w	8003282 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003180:	4b42      	ldr	r3, [pc, #264]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d061      	beq.n	8003250 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d146      	bne.n	8003222 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x4fc>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7ff fbb5 	bl	8002908 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a2:	f7ff fbb1 	bl	8002908 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e067      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d108      	bne.n	80031dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ca:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	492d      	ldr	r1, [pc, #180]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a19      	ldr	r1, [r3, #32]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	430b      	orrs	r3, r1
 80031ee:	4927      	ldr	r1, [pc, #156]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x4fc>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7ff fb85 	bl	8002908 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003202:	f7ff fb81 	bl	8002908 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e037      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x46a>
 8003220:	e02f      	b.n	8003282 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_RCC_OscConfig+0x4fc>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7ff fb6e 	bl	8002908 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7ff fb6a 	bl	8002908 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e020      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x498>
 800324e:	e018      	b.n	8003282 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e013      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x4f4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	429a      	cmp	r2, r3
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
 8003294:	42420060 	.word	0x42420060

08003298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0d0      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d910      	bls.n	80032dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b67      	ldr	r3, [pc, #412]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 0207 	bic.w	r2, r3, #7
 80032c2:	4965      	ldr	r1, [pc, #404]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0b8      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	494d      	ldr	r1, [pc, #308]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d040      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d115      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07f      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e073      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b3d      	ldr	r3, [pc, #244]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06b      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4936      	ldr	r1, [pc, #216]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7ff fabe 	bl	8002908 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7ff faba 	bl	8002908 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e053      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d210      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 0207 	bic.w	r2, r3, #7
 80033ce:	4922      	ldr	r1, [pc, #136]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e032      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4916      	ldr	r1, [pc, #88]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	490e      	ldr	r1, [pc, #56]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003426:	f000 f821 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800342a:	4601      	mov	r1, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	5cd3      	ldrb	r3, [r2, r3]
 800343a:	fa21 f303 	lsr.w	r3, r1, r3
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1cc>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1d0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fa1c 	bl	8002884 <HAL_InitTick>

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40022000 	.word	0x40022000
 800345c:	40021000 	.word	0x40021000
 8003460:	08007540 	.word	0x08007540
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004

0800346c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	b490      	push	{r4, r7}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003472:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003474:	1d3c      	adds	r4, r7, #4
 8003476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <HAL_RCC_GetSysClockFreq+0xb4>)
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x40>
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x46>
 80034aa:	e02d      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ae:	623b      	str	r3, [r7, #32]
      break;
 80034b0:	e02d      	b.n	800350e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	0c9b      	lsrs	r3, r3, #18
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034be:	4413      	add	r3, r2
 80034c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034d0:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c5b      	lsrs	r3, r3, #17
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034de:	4413      	add	r3, r2
 80034e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ea:	fb02 f203 	mul.w	r2, r2, r3
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	e004      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	623b      	str	r3, [r7, #32]
      break;
 8003506:	e002      	b.n	800350e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <HAL_RCC_GetSysClockFreq+0xbc>)
 800350a:	623b      	str	r3, [r7, #32]
      break;
 800350c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350e:	6a3b      	ldr	r3, [r7, #32]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3728      	adds	r7, #40	; 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bc90      	pop	{r4, r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	0800750c 	.word	0x0800750c
 8003520:	0800751c 	.word	0x0800751c
 8003524:	40021000 	.word	0x40021000
 8003528:	007a1200 	.word	0x007a1200
 800352c:	003d0900 	.word	0x003d0900

08003530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <HAL_RCC_GetHCLKFreq+0x10>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000000 	.word	0x20000000

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003548:	f7ff fff2 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 800354c:	4601      	mov	r1, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4a03      	ldr	r2, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	08007550 	.word	0x08007550

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003570:	f7ff ffde 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003574:	4601      	mov	r1, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0adb      	lsrs	r3, r3, #11
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4a03      	ldr	r2, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	08007550 	.word	0x08007550

08003594 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <RCC_Delay+0x34>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <RCC_Delay+0x38>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0a5b      	lsrs	r3, r3, #9
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035b0:	bf00      	nop
  }
  while (Delay --);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	60fa      	str	r2, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f9      	bne.n	80035b0 <RCC_Delay+0x1c>
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000
 80035cc:	10624dd3 	.word	0x10624dd3

080035d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e03f      	b.n	8003662 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff f828 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f90b 	bl	8003830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b088      	sub	sp, #32
 800366e:	af02      	add	r7, sp, #8
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	f040 8083 	bne.w	8003792 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_UART_Transmit+0x2e>
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e07b      	b.n	8003794 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Transmit+0x40>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e074      	b.n	8003794 <HAL_UART_Transmit+0x12a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2221      	movs	r2, #33	; 0x21
 80036bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036c0:	f7ff f922 	bl	8002908 <HAL_GetTick>
 80036c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036d2:	e042      	b.n	800375a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	d122      	bne.n	8003732 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f850 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e046      	b.n	8003794 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003718:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3302      	adds	r3, #2
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	e017      	b.n	800375a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	e013      	b.n	800375a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f82d 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e023      	b.n	8003794 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	60ba      	str	r2, [r7, #8]
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1b7      	bne.n	80036d4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f814 	bl	800379c <UART_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e00a      	b.n	8003794 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ac:	e02c      	b.n	8003808 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d028      	beq.n	8003808 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <UART_WaitOnFlagUntilTimeout+0x30>
 80037bc:	f7ff f8a4 	bl	8002908 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d21d      	bcs.n	8003808 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e00f      	b.n	8003828 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4013      	ands	r3, r2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	429a      	cmp	r2, r3
 8003824:	d0c3      	beq.n	80037ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800386a:	f023 030c 	bic.w	r3, r3, #12
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	430b      	orrs	r3, r1
 8003876:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a52      	ldr	r2, [pc, #328]	; (80039dc <UART_SetConfig+0x1ac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d14e      	bne.n	8003936 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003898:	f7ff fe68 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 800389c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <UART_SetConfig+0x1b0>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	0119      	lsls	r1, r3, #4
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009a      	lsls	r2, r3, #2
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d4:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <UART_SetConfig+0x1b0>)
 80038d6:	fba3 0302 	umull	r0, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2064      	movs	r0, #100	; 0x64
 80038de:	fb00 f303 	mul.w	r3, r0, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	3332      	adds	r3, #50	; 0x32
 80038e8:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <UART_SetConfig+0x1b0>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f4:	4419      	add	r1, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <UART_SetConfig+0x1b0>)
 800390e:	fba3 0302 	umull	r0, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 020f 	and.w	r2, r3, #15
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	440a      	add	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003934:	e04d      	b.n	80039d2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003936:	f7ff fe05 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 800393a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	0119      	lsls	r1, r3, #4
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	009a      	lsls	r2, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003974:	fba3 0302 	umull	r0, r3, r3, r2
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	2064      	movs	r0, #100	; 0x64
 800397c:	fb00 f303 	mul.w	r3, r0, r3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	3332      	adds	r3, #50	; 0x32
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003992:	4419      	add	r1, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <UART_SetConfig+0x1b0>)
 80039ac:	fba3 0302 	umull	r0, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2064      	movs	r0, #100	; 0x64
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <UART_SetConfig+0x1b0>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	440a      	add	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40013800 	.word	0x40013800
 80039e0:	51eb851f 	.word	0x51eb851f

080039e4 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	e018      	b.n	8003a22 <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2232      	movs	r2, #50	; 0x32
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <static_strings_init+0x14c>)
 80039fa:	441a      	add	r2, r3
 80039fc:	494d      	ldr	r1, [pc, #308]	; (8003b34 <static_strings_init+0x150>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 8003a04:	4a4b      	ldr	r2, [pc, #300]	; (8003b34 <static_strings_init+0x150>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003a10:	4a48      	ldr	r2, [pc, #288]	; (8003b34 <static_strings_init+0x150>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	2200      	movs	r2, #0
 8003a1a:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	dde3      	ble.n	80039f0 <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003a28:	2300      	movs	r3, #0
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e018      	b.n	8003a60 <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2264      	movs	r2, #100	; 0x64
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	4a40      	ldr	r2, [pc, #256]	; (8003b38 <static_strings_init+0x154>)
 8003a38:	441a      	add	r2, r3
 8003a3a:	4940      	ldr	r1, [pc, #256]	; (8003b3c <static_strings_init+0x158>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 8003a42:	4a3e      	ldr	r2, [pc, #248]	; (8003b3c <static_strings_init+0x158>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	; (8003b3c <static_strings_init+0x158>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	2200      	movs	r2, #0
 8003a58:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	dde3      	ble.n	8003a2e <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	e018      	b.n	8003a9e <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	22c8      	movs	r2, #200	; 0xc8
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	4a32      	ldr	r2, [pc, #200]	; (8003b40 <static_strings_init+0x15c>)
 8003a76:	441a      	add	r2, r3
 8003a78:	4932      	ldr	r1, [pc, #200]	; (8003b44 <static_strings_init+0x160>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 8003a80:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <static_strings_init+0x160>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	2202      	movs	r2, #2
 8003a8a:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003a8c:	4a2d      	ldr	r2, [pc, #180]	; (8003b44 <static_strings_init+0x160>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	2200      	movs	r2, #0
 8003a96:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	dde3      	ble.n	8003a6c <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	e019      	b.n	8003ade <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <static_strings_init+0x164>)
 8003ab6:	441a      	add	r2, r3
 8003ab8:	4924      	ldr	r1, [pc, #144]	; (8003b4c <static_strings_init+0x168>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 8003ac0:	4a22      	ldr	r2, [pc, #136]	; (8003b4c <static_strings_init+0x168>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	2203      	movs	r2, #3
 8003aca:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003acc:	4a1f      	ldr	r2, [pc, #124]	; (8003b4c <static_strings_init+0x168>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3301      	adds	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	dde2      	ble.n	8003aaa <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	e019      	b.n	8003b1e <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <static_strings_init+0x16c>)
 8003af6:	441a      	add	r2, r3
 8003af8:	4916      	ldr	r1, [pc, #88]	; (8003b54 <static_strings_init+0x170>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <static_strings_init+0x170>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	2204      	movs	r2, #4
 8003b0a:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003b0c:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <static_strings_init+0x170>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	2200      	movs	r2, #0
 8003b16:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	dde2      	ble.n	8003aea <static_strings_init+0x106>
	}
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000478 	.word	0x20000478
 8003b34:	20001238 	.word	0x20001238
 8003b38:	20000220 	.word	0x20000220
 8003b3c:	20001840 	.word	0x20001840
 8003b40:	200016b0 	.word	0x200016b0
 8003b44:	20001228 	.word	0x20001228
 8003b48:	20001288 	.word	0x20001288
 8003b4c:	20001870 	.word	0x20001870
 8003b50:	20000670 	.word	0x20000670
 8003b54:	20000210 	.word	0x20000210

08003b58 <static_strings_get_string_max_length>:

int static_strings_get_string_max_length(static_strings_string_descriptor *string){
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	if(string->type == STATIC_STRINGS_STRING_TYPE_CUSTOM){
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	799b      	ldrb	r3, [r3, #6]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d102      	bne.n	8003b6e <static_strings_get_string_max_length+0x16>
		return string->length;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	e01d      	b.n	8003baa <static_strings_get_string_max_length+0x52>
	}
	else{
		switch(string->type){
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	799b      	ldrb	r3, [r3, #6]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d818      	bhi.n	8003ba8 <static_strings_get_string_max_length+0x50>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <static_strings_get_string_max_length+0x24>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003b91 	.word	0x08003b91
 8003b80:	08003b95 	.word	0x08003b95
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003b9d 	.word	0x08003b9d
 8003b8c:	08003ba3 	.word	0x08003ba3
			case STATIC_STRINGS_STRING_TYPE_VERY_SHORT:
				return STATIC_STRINGS_VERY_SHORT_STRING_SIZE;
 8003b90:	2332      	movs	r3, #50	; 0x32
 8003b92:	e00a      	b.n	8003baa <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_SHORT:
				return STATIC_STRINGS_SHORT_STRING_SIZE;
 8003b94:	2364      	movs	r3, #100	; 0x64
 8003b96:	e008      	b.n	8003baa <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_MEDIUM:
				return STATIC_STRINGS_MEDIUM_STRING_SIZE;
 8003b98:	23c8      	movs	r3, #200	; 0xc8
 8003b9a:	e006      	b.n	8003baa <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_LONG:
				return STATIC_STRINGS_LONG_STRING_SIZE;
 8003b9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ba0:	e003      	b.n	8003baa <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_VERY_LONG:
				return STATIC_STRINGS_VERY_LONG_STRING_SIZE;
 8003ba2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003ba6:	e000      	b.n	8003baa <static_strings_get_string_max_length+0x52>
				break;
		}
	}
	return 0;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <static_strings_copy>:

static_strings_string_descriptor *static_strings_copy(static_strings_string_descriptor *copy_to,static_strings_string_descriptor *copy_from,uint16_t copy_to_offset){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
	if(copy_to == NULL || copy_from == NULL){
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <static_strings_copy+0x1a>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <static_strings_copy+0x1e>
		return NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e022      	b.n	8003c18 <static_strings_copy+0x64>
	}
	if(static_strings_get_string_max_length(copy_to) <= copy_from->length + copy_to_offset){
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff ffc0 	bl	8003b58 <static_strings_get_string_max_length>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	889b      	ldrh	r3, [r3, #4]
 8003bde:	4619      	mov	r1, r3
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	440b      	add	r3, r1
 8003be4:	429a      	cmp	r2, r3
 8003be6:	dc04      	bgt.n	8003bf2 <static_strings_copy+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_OVERFLOW;
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <static_strings_copy+0x6c>)
 8003bea:	2206      	movs	r2, #6
 8003bec:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e012      	b.n	8003c18 <static_strings_copy+0x64>
	}
	memcpy(copy_to->string + copy_to_offset,copy_from->string,copy_from->length);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	18d0      	adds	r0, r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	889b      	ldrh	r3, [r3, #4]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 fdb0 	bl	8004768 <memcpy>
	copy_to->length = copy_from->length + copy_to_offset;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	889a      	ldrh	r2, [r3, #4]
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	4413      	add	r3, r2
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	809a      	strh	r2, [r3, #4]
	return copy_to;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	2000066c 	.word	0x2000066c

08003c24 <static_strings_move>:

static_strings_string_descriptor *static_strings_move(static_strings_string_descriptor *move_to,static_strings_string_descriptor *move_from,uint16_t move_to_offset){
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
	if(static_strings_copy(move_to,move_from,move_to_offset) == NULL){
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	461a      	mov	r2, r3
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff ffbb 	bl	8003bb4 <static_strings_copy>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <static_strings_move+0x24>
		return NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e003      	b.n	8003c50 <static_strings_move+0x2c>
	}
	static_strings_deallocate(move_from);
 8003c48:	68b8      	ldr	r0, [r7, #8]
 8003c4a:	f000 f977 	bl	8003f3c <static_strings_deallocate>
	return move_to;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <static_strings_clone>:

static_strings_string_descriptor *static_strings_clone(static_strings_string_descriptor *clone_from){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	if(clone_from == NULL){
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <static_strings_clone+0x12>
		return NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e018      	b.n	8003c9c <static_strings_clone+0x44>
	}
	static_strings_string_descriptor *cloned_string = static_strings_allocate(clone_from->length);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	889b      	ldrh	r3, [r3, #4]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f818 	bl	8003ca4 <static_strings_allocate>
 8003c74:	60f8      	str	r0, [r7, #12]
	if(cloned_string == NULL){
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <static_strings_clone+0x28>
		return NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e00d      	b.n	8003c9c <static_strings_clone+0x44>
	}
	memcpy(cloned_string->string,clone_from->string,clone_from->length);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	889b      	ldrh	r3, [r3, #4]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f000 fd6b 	bl	8004768 <memcpy>
	cloned_string->length = clone_from->length;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	889a      	ldrh	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	809a      	strh	r2, [r3, #4]
	return cloned_string;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b32      	cmp	r3, #50	; 0x32
 8003cb2:	d829      	bhi.n	8003d08 <static_strings_allocate+0x64>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e023      	b.n	8003d02 <static_strings_allocate+0x5e>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003cba:	4a78      	ldr	r2, [pc, #480]	; (8003e9c <static_strings_allocate+0x1f8>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	79db      	ldrb	r3, [r3, #7]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d119      	bne.n	8003cfc <static_strings_allocate+0x58>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003cc8:	4a74      	ldr	r2, [pc, #464]	; (8003e9c <static_strings_allocate+0x1f8>)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	71da      	strb	r2, [r3, #7]
				static_strings_very_short_strings_descriptors[i].length = 0;
 8003cd4:	4a71      	ldr	r2, [pc, #452]	; (8003e9c <static_strings_allocate+0x1f8>)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	2200      	movs	r2, #0
 8003cde:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_short_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_SHORT_STRING_SIZE);
 8003ce0:	4a6e      	ldr	r2, [pc, #440]	; (8003e9c <static_strings_allocate+0x1f8>)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ce8:	2232      	movs	r2, #50	; 0x32
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fd46 	bl	800477e <memset>
				return &static_strings_very_short_strings_descriptors[i];
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4a69      	ldr	r2, [pc, #420]	; (8003e9c <static_strings_allocate+0x1f8>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	e0cb      	b.n	8003e94 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b09      	cmp	r3, #9
 8003d06:	ddd8      	ble.n	8003cba <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d829      	bhi.n	8003d62 <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e023      	b.n	8003d5c <static_strings_allocate+0xb8>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003d14:	4a62      	ldr	r2, [pc, #392]	; (8003ea0 <static_strings_allocate+0x1fc>)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	79db      	ldrb	r3, [r3, #7]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d119      	bne.n	8003d56 <static_strings_allocate+0xb2>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003d22:	4a5f      	ldr	r2, [pc, #380]	; (8003ea0 <static_strings_allocate+0x1fc>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	71da      	strb	r2, [r3, #7]
				static_strings_short_strings_descriptors[i].length = 0;
 8003d2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ea0 <static_strings_allocate+0x1fc>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	2200      	movs	r2, #0
 8003d38:	809a      	strh	r2, [r3, #4]
				memset(static_strings_short_strings_descriptors[i].string,0,STATIC_STRINGS_SHORT_STRING_SIZE);
 8003d3a:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <static_strings_allocate+0x1fc>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d42:	2264      	movs	r2, #100	; 0x64
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd19 	bl	800477e <memset>
				return &static_strings_short_strings_descriptors[i];
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4a53      	ldr	r2, [pc, #332]	; (8003ea0 <static_strings_allocate+0x1fc>)
 8003d52:	4413      	add	r3, r2
 8003d54:	e09e      	b.n	8003e94 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	ddd8      	ble.n	8003d14 <static_strings_allocate+0x70>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2bc8      	cmp	r3, #200	; 0xc8
 8003d66:	d829      	bhi.n	8003dbc <static_strings_allocate+0x118>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e023      	b.n	8003db6 <static_strings_allocate+0x112>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003d6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ea4 <static_strings_allocate+0x200>)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	79db      	ldrb	r3, [r3, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d119      	bne.n	8003db0 <static_strings_allocate+0x10c>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003d7c:	4a49      	ldr	r2, [pc, #292]	; (8003ea4 <static_strings_allocate+0x200>)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	2201      	movs	r2, #1
 8003d86:	71da      	strb	r2, [r3, #7]
				static_strings_medium_strings_descriptors[i].length = 0;
 8003d88:	4a46      	ldr	r2, [pc, #280]	; (8003ea4 <static_strings_allocate+0x200>)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	2200      	movs	r2, #0
 8003d92:	809a      	strh	r2, [r3, #4]
				memset(static_strings_medium_strings_descriptors[i].string,0,STATIC_STRINGS_MEDIUM_STRING_SIZE);
 8003d94:	4a43      	ldr	r2, [pc, #268]	; (8003ea4 <static_strings_allocate+0x200>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d9c:	22c8      	movs	r2, #200	; 0xc8
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fcec 	bl	800477e <memset>
				return &static_strings_medium_strings_descriptors[i];
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <static_strings_allocate+0x200>)
 8003dac:	4413      	add	r3, r2
 8003dae:	e071      	b.n	8003e94 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	ddd8      	ble.n	8003d6e <static_strings_allocate+0xca>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dc2:	d82a      	bhi.n	8003e1a <static_strings_allocate+0x176>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	e024      	b.n	8003e14 <static_strings_allocate+0x170>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003dca:	4a37      	ldr	r2, [pc, #220]	; (8003ea8 <static_strings_allocate+0x204>)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	79db      	ldrb	r3, [r3, #7]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d11a      	bne.n	8003e0e <static_strings_allocate+0x16a>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003dd8:	4a33      	ldr	r2, [pc, #204]	; (8003ea8 <static_strings_allocate+0x204>)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	2201      	movs	r2, #1
 8003de2:	71da      	strb	r2, [r3, #7]
				static_strings_long_strings_descriptors[i].length = 0;
 8003de4:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <static_strings_allocate+0x204>)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	2200      	movs	r2, #0
 8003dee:	809a      	strh	r2, [r3, #4]
				memset(static_strings_long_strings_descriptors[i].string,0,STATIC_STRINGS_LONG_STRING_SIZE);
 8003df0:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <static_strings_allocate+0x204>)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003df8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fcbd 	bl	800477e <memset>
				return &static_strings_long_strings_descriptors[i];
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <static_strings_allocate+0x204>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	e042      	b.n	8003e94 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3301      	adds	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	ddd7      	ble.n	8003dca <static_strings_allocate+0x126>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d82a      	bhi.n	8003e7a <static_strings_allocate+0x1d6>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e024      	b.n	8003e74 <static_strings_allocate+0x1d0>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003e2a:	4a20      	ldr	r2, [pc, #128]	; (8003eac <static_strings_allocate+0x208>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	79db      	ldrb	r3, [r3, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11a      	bne.n	8003e6e <static_strings_allocate+0x1ca>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <static_strings_allocate+0x208>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	2201      	movs	r2, #1
 8003e42:	71da      	strb	r2, [r3, #7]
				static_strings_very_long_strings_descriptors[i].length = 0;
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <static_strings_allocate+0x208>)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_long_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_LONG_STRING_SIZE);
 8003e50:	4a16      	ldr	r2, [pc, #88]	; (8003eac <static_strings_allocate+0x208>)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e58:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc8d 	bl	800477e <memset>
				return &static_strings_very_long_strings_descriptors[i];
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4a10      	ldr	r2, [pc, #64]	; (8003eac <static_strings_allocate+0x208>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	e012      	b.n	8003e94 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	ddd7      	ble.n	8003e2a <static_strings_allocate+0x186>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d803      	bhi.n	8003e8c <static_strings_allocate+0x1e8>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <static_strings_allocate+0x20c>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <static_strings_allocate+0x1ee>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <static_strings_allocate+0x20c>)
 8003e8e:	2203      	movs	r2, #3
 8003e90:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20001238 	.word	0x20001238
 8003ea0:	20001840 	.word	0x20001840
 8003ea4:	20001228 	.word	0x20001228
 8003ea8:	20001870 	.word	0x20001870
 8003eac:	20000210 	.word	0x20000210
 8003eb0:	2000066c 	.word	0x2000066c

08003eb4 <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f86b 	bl	8003f98 <static_strings_strlen>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 8003ec6:	89fb      	ldrh	r3, [r7, #14]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e014      	b.n	8003efa <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8003ed0:	89fb      	ldrh	r3, [r7, #14]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fee6 	bl	8003ca4 <static_strings_allocate>
 8003ed8:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <static_strings_save+0x30>
		return descriptor;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	e00a      	b.n	8003efa <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	89fa      	ldrh	r2, [r7, #14]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fc3b 	bl	8004768 <memcpy>
	descriptor->length = string_length;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	89fa      	ldrh	r2, [r7, #14]
 8003ef6:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2205      	movs	r2, #5
 8003f10:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f838 	bl	8003f98 <static_strings_strlen>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	889b      	ldrh	r3, [r3, #4]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	if(string_descriptor->status != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	79db      	ldrb	r3, [r3, #7]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d002      	beq.n	8003f52 <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	71da      	strb	r2, [r3, #7]
	}
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	889b      	ldrh	r3, [r3, #4]
 8003f6c:	3b02      	subs	r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b0d      	cmp	r3, #13
 8003f74:	d008      	beq.n	8003f88 <static_strings_is_line+0x2c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	889b      	ldrh	r3, [r3, #4]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b0a      	cmp	r3, #10
 8003f86:	d101      	bne.n	8003f8c <static_strings_is_line+0x30>
		return 1;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <static_strings_is_line+0x32>
	}
	return 0;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	81fb      	strh	r3, [r7, #14]
 8003fa4:	e01e      	b.n	8003fe4 <static_strings_strlen+0x4c>
		if( *(string + length) == '\r' && length < STATIC_STRINGS_VERY_LONG_STRING_SIZE - 1){
 8003fa6:	89fb      	ldrh	r3, [r7, #14]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4413      	add	r3, r2
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b0d      	cmp	r3, #13
 8003fb0:	d10f      	bne.n	8003fd2 <static_strings_strlen+0x3a>
 8003fb2:	89fb      	ldrh	r3, [r7, #14]
 8003fb4:	f240 52da 	movw	r2, #1498	; 0x5da
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d80a      	bhi.n	8003fd2 <static_strings_strlen+0x3a>
			if(*(string + length + 1) == '\n'){
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b0a      	cmp	r3, #10
 8003fc8:	d103      	bne.n	8003fd2 <static_strings_strlen+0x3a>
				length += 2;
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	3302      	adds	r3, #2
 8003fce:	81fb      	strh	r3, [r7, #14]
				break;
 8003fd0:	e00f      	b.n	8003ff2 <static_strings_strlen+0x5a>
			}
		}
		if( *(string + length) == '\0'){
 8003fd2:	89fb      	ldrh	r3, [r7, #14]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <static_strings_strlen+0x58>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003fde:	89fb      	ldrh	r3, [r7, #14]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	81fb      	strh	r3, [r7, #14]
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	f240 52db 	movw	r2, #1499	; 0x5db
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d9db      	bls.n	8003fa6 <static_strings_strlen+0xe>
 8003fee:	e000      	b.n	8003ff2 <static_strings_strlen+0x5a>
			break;
 8003ff0:	bf00      	nop
		}
	}
	if(length >= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003ff2:	89fb      	ldrh	r3, [r7, #14]
 8003ff4:	f240 52db 	movw	r2, #1499	; 0x5db
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d904      	bls.n	8004006 <static_strings_strlen+0x6e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <static_strings_strlen+0x7c>)
 8003ffe:	2203      	movs	r2, #3
 8004000:	701a      	strb	r2, [r3, #0]
		return 0;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <static_strings_strlen+0x70>
	}
	else{
		return length;
 8004006:	89fb      	ldrh	r3, [r7, #14]
	}
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000066c 	.word	0x2000066c

08004018 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 8004024:	4a07      	ldr	r2, [pc, #28]	; (8004044 <static_strings_string_splitter_set_parameters+0x2c>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a05      	ldr	r2, [pc, #20]	; (8004044 <static_strings_string_splitter_set_parameters+0x2c>)
 8004030:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 8004032:	4a04      	ldr	r2, [pc, #16]	; (8004044 <static_strings_string_splitter_set_parameters+0x2c>)
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	7213      	strb	r3, [r2, #8]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	200001fc 	.word	0x200001fc

08004048 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor **string_descriptor){
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4929      	ldr	r1, [pc, #164]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 800405c:	6809      	ldr	r1, [r1, #0]
 800405e:	8889      	ldrh	r1, [r1, #4]
 8004060:	440b      	add	r3, r1
 8004062:	429a      	cmp	r2, r3
 8004064:	d101      	bne.n	800406a <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 8004066:	2300      	movs	r3, #0
 8004068:	e045      	b.n	80040f6 <static_strings_string_splitter_get_next_token+0xae>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 8004070:	bf00      	nop
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	60fa      	str	r2, [r7, #12]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	4b21      	ldr	r3, [pc, #132]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 800407c:	7a1b      	ldrb	r3, [r3, #8]
 800407e:	429a      	cmp	r2, r3
 8004080:	d009      	beq.n	8004096 <static_strings_string_splitter_get_next_token+0x4e>
 8004082:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	8892      	ldrh	r2, [r2, #4]
 800408e:	4413      	add	r3, r2
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3ed      	bcc.n	8004072 <static_strings_string_splitter_get_next_token+0x2a>

	int token_length;
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8004096:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a18      	ldr	r2, [pc, #96]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	8892      	ldrh	r2, [r2, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d105      	bne.n	80040b6 <static_strings_string_splitter_get_next_token+0x6e>
		token_length = current_position - static_strings_string_splitter.next_token_start;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 80040ae:	6852      	ldr	r2, [r2, #4]
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	e005      	b.n	80040c2 <static_strings_string_splitter_get_next_token+0x7a>
	}
	else{
		token_length = current_position - static_strings_string_splitter.next_token_start - 1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 80040ba:	6852      	ldr	r2, [r2, #4]
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	3b01      	subs	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
	}
	*string_descriptor = static_strings_allocate(token_length);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fdec 	bl	8003ca4 <static_strings_allocate>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
	memcpy((*string_descriptor)->string,static_strings_string_splitter.next_token_start,token_length);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	4619      	mov	r1, r3
 80040e0:	f000 fb42 	bl	8004768 <memcpy>
	(*string_descriptor)->length = token_length;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	b292      	uxth	r2, r2
 80040ec:	809a      	strh	r2, [r3, #4]
	static_strings_string_splitter.next_token_start = current_position;
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <static_strings_string_splitter_get_next_token+0xb8>)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6053      	str	r3, [r2, #4]
	return 1;
 80040f4:	2301      	movs	r3, #1
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200001fc 	.word	0x200001fc

08004104 <static_strings_substring>:

static_strings_string_descriptor *static_strings_substring(static_strings_string_descriptor* string,uint16_t start_index,uint16_t finish_index){
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	803b      	strh	r3, [r7, #0]
	if(start_index < 0 || start_index >= string->length){
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	889b      	ldrh	r3, [r3, #4]
 8004118:	887a      	ldrh	r2, [r7, #2]
 800411a:	429a      	cmp	r2, r3
 800411c:	d304      	bcc.n	8004128 <static_strings_substring+0x24>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_START_INDEX_OUT_OF_RANGE;
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <static_strings_substring+0x80>)
 8004120:	2204      	movs	r2, #4
 8004122:	701a      	strb	r2, [r3, #0]
		return NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	e028      	b.n	800417a <static_strings_substring+0x76>
	}
	if(finish_index <= 0 || finish_index > string->length){
 8004128:	883b      	ldrh	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <static_strings_substring+0x34>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	889b      	ldrh	r3, [r3, #4]
 8004132:	883a      	ldrh	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d904      	bls.n	8004142 <static_strings_substring+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_FINISH_INDEX_OUT_OF_RANGE;
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <static_strings_substring+0x80>)
 800413a:	2205      	movs	r2, #5
 800413c:	701a      	strb	r2, [r3, #0]
		return NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	e01b      	b.n	800417a <static_strings_substring+0x76>
	}
	uint16_t substring_length = finish_index - start_index;
 8004142:	883a      	ldrh	r2, [r7, #0]
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	81fb      	strh	r3, [r7, #14]
	static_strings_string_descriptor *substring = static_strings_allocate(substring_length);
 800414a:	89fb      	ldrh	r3, [r7, #14]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fda9 	bl	8003ca4 <static_strings_allocate>
 8004152:	60b8      	str	r0, [r7, #8]
	if(substring == NULL){
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <static_strings_substring+0x5a>
		return substring;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	e00d      	b.n	800417a <static_strings_substring+0x76>
	}
	memcpy(substring->string,string->string + start_index,substring_length);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	4413      	add	r3, r2
 800416a:	89fa      	ldrh	r2, [r7, #14]
 800416c:	4619      	mov	r1, r3
 800416e:	f000 fafb 	bl	8004768 <memcpy>
	substring->length = substring_length;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	89fa      	ldrh	r2, [r7, #14]
 8004176:	809a      	strh	r2, [r3, #4]
	return substring;
 8004178:	68bb      	ldr	r3, [r7, #8]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	2000066c 	.word	0x2000066c

08004188 <static_strings_concatenate>:

static_strings_string_descriptor *static_strings_concatenate(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
	int concatenated_string_length = concatenate_at->length + concatenate->length;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	889b      	ldrh	r3, [r3, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	889b      	ldrh	r3, [r3, #4]
 800419c:	4413      	add	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(concatenated_string_length);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fd7d 	bl	8003ca4 <static_strings_allocate>
 80041aa:	60b8      	str	r0, [r7, #8]
	if(concatenated_string == NULL){
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <static_strings_concatenate+0x34>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 80041b2:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <static_strings_concatenate+0x70>)
 80041b4:	2203      	movs	r2, #3
 80041b6:	701a      	strb	r2, [r3, #0]
		return concatenated_string;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	e019      	b.n	80041f0 <static_strings_concatenate+0x68>
	}
	memcpy(concatenated_string->string,concatenate_at->string,concatenate_at->length);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	889b      	ldrh	r3, [r3, #4]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f000 facd 	bl	8004768 <memcpy>
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	8892      	ldrh	r2, [r2, #4]
 80041d6:	1898      	adds	r0, r3, r2
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	889b      	ldrh	r3, [r3, #4]
 80041e0:	461a      	mov	r2, r3
 80041e2:	f000 fac1 	bl	8004768 <memcpy>
	concatenated_string->length = concatenated_string_length;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	809a      	strh	r2, [r3, #4]
	return concatenated_string;
 80041ee:	68bb      	ldr	r3, [r7, #8]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	2000066c 	.word	0x2000066c

080041fc <static_strings_concatenate_and_clean>:

static_strings_string_descriptor *static_strings_concatenate_and_clean(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
	static_strings_string_descriptor* concatenated_string = static_strings_concatenate(concatenate_at,concatenate);
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ffbd 	bl	8004188 <static_strings_concatenate>
 800420e:	60f8      	str	r0, [r7, #12]
	if(concatenated_string == NULL){
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <static_strings_concatenate_and_clean+0x1e>
		return concatenated_string;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	e003      	b.n	8004222 <static_strings_concatenate_and_clean+0x26>
	}
	static_strings_deallocate(concatenate_at);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fe8e 	bl	8003f3c <static_strings_deallocate>
	return concatenated_string;
 8004220:	68fb      	ldr	r3, [r7, #12]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <static_strings_concatenate_and_clean_both>:

static_strings_string_descriptor *static_strings_concatenate_and_clean_both(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
	static_strings_string_descriptor* concatenated_string = static_strings_concatenate(concatenate_at,concatenate);
 8004234:	6839      	ldr	r1, [r7, #0]
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ffa6 	bl	8004188 <static_strings_concatenate>
 800423c:	60f8      	str	r0, [r7, #12]
	if(concatenated_string == NULL){
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <static_strings_concatenate_and_clean_both+0x1e>
		return concatenated_string;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	e006      	b.n	8004256 <static_strings_concatenate_and_clean_both+0x2c>
	}
	static_strings_deallocate(concatenate_at);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fe77 	bl	8003f3c <static_strings_deallocate>
	static_strings_deallocate(concatenate);
 800424e:	6838      	ldr	r0, [r7, #0]
 8004250:	f7ff fe74 	bl	8003f3c <static_strings_deallocate>
	return concatenated_string;
 8004254:	68fb      	ldr	r3, [r7, #12]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <static_strings_concatenate_all>:

static_strings_string_descriptor *static_strings_concatenate_all(uint16_t arguments_quantity,...){
 800425e:	b40f      	push	{r0, r1, r2, r3}
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
	va_list arguments_list;
	int i;
	va_start(arguments_list, arguments_quantity);
 8004266:	f107 031c 	add.w	r3, r7, #28
 800426a:	603b      	str	r3, [r7, #0]
	static_strings_string_descriptor *next_string_to_concatenate;
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(0);
 800426c:	2000      	movs	r0, #0
 800426e:	f7ff fd19 	bl	8003ca4 <static_strings_allocate>
 8004272:	60b8      	str	r0, [r7, #8]
	concatenated_string->length = 0;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < arguments_quantity;i++){
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e00c      	b.n	800429a <static_strings_concatenate_all+0x3c>
		next_string_to_concatenate = va_arg(arguments_list, static_strings_string_descriptor *);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	603a      	str	r2, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	607b      	str	r3, [r7, #4]
		concatenated_string = static_strings_concatenate_and_clean(concatenated_string,next_string_to_concatenate);
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	68b8      	ldr	r0, [r7, #8]
 800428e:	f7ff ffb5 	bl	80041fc <static_strings_concatenate_and_clean>
 8004292:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < arguments_quantity;i++){
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	8b3b      	ldrh	r3, [r7, #24]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	429a      	cmp	r2, r3
 80042a0:	dbee      	blt.n	8004280 <static_strings_concatenate_all+0x22>
	}
	va_end(arguments_list);
	return concatenated_string;
 80042a2:	68bb      	ldr	r3, [r7, #8]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ae:	b004      	add	sp, #16
 80042b0:	4770      	bx	lr

080042b2 <static_strings_concatenate_and_clean_all>:

static_strings_string_descriptor *static_strings_concatenate_and_clean_all(uint16_t arguments_quantity,...){
 80042b2:	b40f      	push	{r0, r1, r2, r3}
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
	va_list arguments_list;
	int i;
	va_start(arguments_list, arguments_quantity);
 80042ba:	f107 031c 	add.w	r3, r7, #28
 80042be:	603b      	str	r3, [r7, #0]
	static_strings_string_descriptor *next_string_to_concatenate;
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(0);
 80042c0:	2000      	movs	r0, #0
 80042c2:	f7ff fcef 	bl	8003ca4 <static_strings_allocate>
 80042c6:	60b8      	str	r0, [r7, #8]
	concatenated_string->length = 0;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2200      	movs	r2, #0
 80042cc:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < arguments_quantity;i++){
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e00f      	b.n	80042f4 <static_strings_concatenate_and_clean_all+0x42>
		next_string_to_concatenate = va_arg(arguments_list, static_strings_string_descriptor *);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	1d1a      	adds	r2, r3, #4
 80042d8:	603a      	str	r2, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	607b      	str	r3, [r7, #4]
		concatenated_string = static_strings_concatenate_and_clean(concatenated_string,next_string_to_concatenate);
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	68b8      	ldr	r0, [r7, #8]
 80042e2:	f7ff ff8b 	bl	80041fc <static_strings_concatenate_and_clean>
 80042e6:	60b8      	str	r0, [r7, #8]
		static_strings_deallocate(next_string_to_concatenate);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fe27 	bl	8003f3c <static_strings_deallocate>
	for (i = 0; i < arguments_quantity;i++){
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	8b3b      	ldrh	r3, [r7, #24]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	dbeb      	blt.n	80042d4 <static_strings_concatenate_and_clean_all+0x22>
	}
	va_end(arguments_list);
	return concatenated_string;
 80042fc:	68bb      	ldr	r3, [r7, #8]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004308:	b004      	add	sp, #16
 800430a:	4770      	bx	lr

0800430c <static_strings_contains_string>:

int static_strings_contains_string(static_strings_string_descriptor* search_in,static_strings_string_descriptor* search_for){
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	if(search_in->length < search_for->length){
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	889a      	ldrh	r2, [r3, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	889b      	ldrh	r3, [r3, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d201      	bcs.n	8004326 <static_strings_contains_string+0x1a>
		return 0;
 8004322:	2300      	movs	r3, #0
 8004324:	e034      	b.n	8004390 <static_strings_contains_string+0x84>
	}
	int i,j;
	int searched_string_found;
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e026      	b.n	800437a <static_strings_contains_string+0x6e>
		searched_string_found = 1;
 800432c:	2301      	movs	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < search_for->length;j++){
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	e013      	b.n	800435e <static_strings_contains_string+0x52>
			if( *(search_in->string + i + j) != *(search_for->string + j) ){
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	6979      	ldr	r1, [r7, #20]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	440b      	add	r3, r1
 8004340:	4413      	add	r3, r2
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	440b      	add	r3, r1
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d002      	beq.n	8004358 <static_strings_contains_string+0x4c>
				searched_string_found = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
				break;
 8004356:	e008      	b.n	800436a <static_strings_contains_string+0x5e>
		for(j = 0; j < search_for->length;j++){
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	3301      	adds	r3, #1
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	889b      	ldrh	r3, [r3, #4]
 8004362:	461a      	mov	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4293      	cmp	r3, r2
 8004368:	dbe5      	blt.n	8004336 <static_strings_contains_string+0x2a>
			}
		}
		if(searched_string_found){
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <static_strings_contains_string+0x68>
			return 1;
 8004370:	2301      	movs	r3, #1
 8004372:	e00d      	b.n	8004390 <static_strings_contains_string+0x84>
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	889b      	ldrh	r3, [r3, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	889b      	ldrh	r3, [r3, #4]
 8004384:	4619      	mov	r1, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	1acb      	subs	r3, r1, r3
 800438a:	429a      	cmp	r2, r3
 800438c:	ddce      	ble.n	800432c <static_strings_contains_string+0x20>
		}
	}
	return 0;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <static_strings_contains_char>:

int static_strings_contains_char(static_strings_string_descriptor* search_in,uint8_t search_for){
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i = 0;i < search_in->length;i++){
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e00c      	b.n	80043c6 <static_strings_contains_char+0x2c>
		if( *(search_in->string + i) == search_for){
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d101      	bne.n	80043c0 <static_strings_contains_char+0x26>
			return 1;
 80043bc:	2301      	movs	r3, #1
 80043be:	e009      	b.n	80043d4 <static_strings_contains_char+0x3a>
	for(i = 0;i < search_in->length;i++){
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	889b      	ldrh	r3, [r3, #4]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4293      	cmp	r3, r2
 80043d0:	dbec      	blt.n	80043ac <static_strings_contains_char+0x12>
		}
	}
	return 0;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <static_strings_compare>:

int static_strings_compare(static_strings_string_descriptor* compare_string_one,static_strings_string_descriptor* compare_string_two){
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
	if(compare_string_one->length != compare_string_two->length){
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	889a      	ldrh	r2, [r3, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	889b      	ldrh	r3, [r3, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <static_strings_compare+0x1a>
		return 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e01a      	b.n	800442e <static_strings_compare+0x50>
	}
	int i;
	for(i = 0;i < compare_string_one->length;i++){
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e010      	b.n	8004420 <static_strings_compare+0x42>
		if(*(compare_string_one->string + i) != *(compare_string_two->string + i)){
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	440b      	add	r3, r1
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <static_strings_compare+0x3c>
			return 0;
 8004416:	2300      	movs	r3, #0
 8004418:	e009      	b.n	800442e <static_strings_compare+0x50>
	for(i = 0;i < compare_string_one->length;i++){
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	889b      	ldrh	r3, [r3, #4]
 8004424:	461a      	mov	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4293      	cmp	r3, r2
 800442a:	dbe8      	blt.n	80043fe <static_strings_compare+0x20>
		}
	}
	return 1;
 800442c:	2301      	movs	r3, #1
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <static_strings_uint8_to_string>:

static_strings_string_descriptor *static_strings_uint8_to_string(uint8_t uint8){
 8004438:	b580      	push	{r7, lr}
 800443a:	b092      	sub	sp, #72	; 0x48
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
	uint8_t uint8_temp_string[50];
	sprintf((char *)uint8_temp_string,"%" PRIu8,uint8);
 8004442:	79fa      	ldrb	r2, [r7, #7]
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	4914      	ldr	r1, [pc, #80]	; (800449c <static_strings_uint8_to_string+0x64>)
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fdee 	bl	800502c <siprintf>
	uint16_t uint8_string_length = static_strings_strlen(uint8_temp_string);
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fd9f 	bl	8003f98 <static_strings_strlen>
 800445a:	4603      	mov	r3, r0
 800445c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint8_string = static_strings_allocate(uint8_string_length);
 8004460:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fc1d 	bl	8003ca4 <static_strings_allocate>
 800446a:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint8_string == NULL){
 800446c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <static_strings_uint8_to_string+0x3e>
		return uint8_string;
 8004472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004474:	e00d      	b.n	8004492 <static_strings_uint8_to_string+0x5a>
	}
	memcpy(uint8_string->string,uint8_temp_string,uint8_string_length);
 8004476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800447e:	f107 010c 	add.w	r1, r7, #12
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f970 	bl	8004768 <memcpy>
	uint8_string->length = uint8_string_length;
 8004488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800448e:	809a      	strh	r2, [r3, #4]
	return uint8_string;
 8004490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004492:	4618      	mov	r0, r3
 8004494:	3748      	adds	r7, #72	; 0x48
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	08007520 	.word	0x08007520

080044a0 <static_strings_uint16_to_string>:

static_strings_string_descriptor *static_strings_uint16_to_string(uint16_t uint16){
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b092      	sub	sp, #72	; 0x48
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
	uint8_t uint16_temp_string[50];
	sprintf((char *)uint16_temp_string,"%" PRIu16,uint16);
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	4914      	ldr	r1, [pc, #80]	; (8004504 <static_strings_uint16_to_string+0x64>)
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fdba 	bl	800502c <siprintf>
	uint16_t uint16_string_length = static_strings_strlen(uint16_temp_string);
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fd6b 	bl	8003f98 <static_strings_strlen>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint16_string = static_strings_allocate(uint16_string_length);
 80044c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fbe9 	bl	8003ca4 <static_strings_allocate>
 80044d2:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint16_string == NULL){
 80044d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <static_strings_uint16_to_string+0x3e>
		return uint16_string;
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	e00d      	b.n	80044fa <static_strings_uint16_to_string+0x5a>
	}
	memcpy(uint16_string->string,uint16_temp_string,uint16_string_length);
 80044de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80044e6:	f107 010c 	add.w	r1, r7, #12
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f93c 	bl	8004768 <memcpy>
	uint16_string->length = uint16_string_length;
 80044f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80044f6:	809a      	strh	r2, [r3, #4]
	return uint16_string;
 80044f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3748      	adds	r7, #72	; 0x48
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	08007524 	.word	0x08007524

08004508 <static_strings_uint32_to_string>:

static_strings_string_descriptor *static_strings_uint32_to_string(uint32_t uint32){
 8004508:	b580      	push	{r7, lr}
 800450a:	b092      	sub	sp, #72	; 0x48
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	uint8_t uint32_temp_string[50];
	sprintf((char *)uint32_temp_string,"%" PRIu32,uint32);
 8004510:	f107 030c 	add.w	r3, r7, #12
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4914      	ldr	r1, [pc, #80]	; (8004568 <static_strings_uint32_to_string+0x60>)
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fd87 	bl	800502c <siprintf>
	uint16_t uint32_string_length = static_strings_strlen(uint32_temp_string);
 800451e:	f107 030c 	add.w	r3, r7, #12
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fd38 	bl	8003f98 <static_strings_strlen>
 8004528:	4603      	mov	r3, r0
 800452a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint32_string = static_strings_allocate(uint32_string_length);
 800452e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fbb6 	bl	8003ca4 <static_strings_allocate>
 8004538:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint32_string == NULL){
 800453a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <static_strings_uint32_to_string+0x3c>
		return uint32_string;
 8004540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004542:	e00d      	b.n	8004560 <static_strings_uint32_to_string+0x58>
	}
	memcpy(uint32_string->string,uint32_temp_string,uint32_string_length);
 8004544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800454c:	f107 010c 	add.w	r1, r7, #12
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f909 	bl	8004768 <memcpy>
	uint32_string->length = uint32_string_length;
 8004556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004558:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800455c:	809a      	strh	r2, [r3, #4]
	return uint32_string;
 800455e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004560:	4618      	mov	r0, r3
 8004562:	3748      	adds	r7, #72	; 0x48
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	08007528 	.word	0x08007528

0800456c <static_strings_int8_to_string>:

static_strings_string_descriptor *static_strings_int8_to_string(int8_t int8){
 800456c:	b580      	push	{r7, lr}
 800456e:	b092      	sub	sp, #72	; 0x48
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
	uint8_t int8_temp_string[50];
	sprintf((char *)int8_temp_string,"%" PRId8,int8);
 8004576:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800457a:	f107 030c 	add.w	r3, r7, #12
 800457e:	4914      	ldr	r1, [pc, #80]	; (80045d0 <static_strings_int8_to_string+0x64>)
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fd53 	bl	800502c <siprintf>
	uint16_t int8_string_length = static_strings_strlen(int8_temp_string);
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fd04 	bl	8003f98 <static_strings_strlen>
 8004590:	4603      	mov	r3, r0
 8004592:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int8_string = static_strings_allocate(int8_string_length);
 8004596:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fb82 	bl	8003ca4 <static_strings_allocate>
 80045a0:	6438      	str	r0, [r7, #64]	; 0x40
	if(int8_string == NULL){
 80045a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <static_strings_int8_to_string+0x40>
		return int8_string;
 80045a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045aa:	e00d      	b.n	80045c8 <static_strings_int8_to_string+0x5c>
	}
	memcpy(int8_string->string,int8_temp_string,int8_string_length);
 80045ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80045b4:	f107 010c 	add.w	r1, r7, #12
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f8d5 	bl	8004768 <memcpy>
	int8_string->length = int8_string_length;
 80045be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80045c4:	809a      	strh	r2, [r3, #4]
	return int8_string;
 80045c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3748      	adds	r7, #72	; 0x48
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	0800752c 	.word	0x0800752c

080045d4 <static_strings_int16_to_string>:

static_strings_string_descriptor *static_strings_int16_to_string(int16_t int16){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b092      	sub	sp, #72	; 0x48
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
	uint8_t int16_temp_string[50];
	sprintf((char *)int16_temp_string,"%" PRId16,int16);
 80045de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045e2:	f107 030c 	add.w	r3, r7, #12
 80045e6:	4914      	ldr	r1, [pc, #80]	; (8004638 <static_strings_int16_to_string+0x64>)
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fd1f 	bl	800502c <siprintf>
	int16_t int16_string_length = static_strings_strlen(int16_temp_string);
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fcd0 	bl	8003f98 <static_strings_strlen>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int16_string = static_strings_allocate(int16_string_length);
 80045fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fb4e 	bl	8003ca4 <static_strings_allocate>
 8004608:	6438      	str	r0, [r7, #64]	; 0x40
	if(int16_string == NULL){
 800460a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <static_strings_int16_to_string+0x40>
		return int16_string;
 8004610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004612:	e00d      	b.n	8004630 <static_strings_int16_to_string+0x5c>
	}
	memcpy(int16_string->string,int16_temp_string,int16_string_length);
 8004614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800461c:	f107 010c 	add.w	r1, r7, #12
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f8a1 	bl	8004768 <memcpy>
	int16_string->length = int16_string_length;
 8004626:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800462a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462c:	809a      	strh	r2, [r3, #4]
	return int16_string;
 800462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004630:	4618      	mov	r0, r3
 8004632:	3748      	adds	r7, #72	; 0x48
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08007530 	.word	0x08007530

0800463c <static_strings_float_to_string>:
	memcpy(int32_string->string,int32_temp_string,int32_string_length);
	int32_string->length = int32_string_length;
	return int32_string;
}

static_strings_string_descriptor *static_strings_float_to_string(float float_arg){
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b093      	sub	sp, #76	; 0x4c
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	uint8_t float_temp_string[50];
	sprintf((char *)float_temp_string,"%f",float_arg);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fb feef 	bl	8000428 <__aeabi_f2d>
 800464a:	4603      	mov	r3, r0
 800464c:	460c      	mov	r4, r1
 800464e:	f107 000c 	add.w	r0, r7, #12
 8004652:	461a      	mov	r2, r3
 8004654:	4623      	mov	r3, r4
 8004656:	4914      	ldr	r1, [pc, #80]	; (80046a8 <static_strings_float_to_string+0x6c>)
 8004658:	f000 fce8 	bl	800502c <siprintf>
	int16_t float_string_length = static_strings_strlen(float_temp_string);
 800465c:	f107 030c 	add.w	r3, r7, #12
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fc99 	bl	8003f98 <static_strings_strlen>
 8004666:	4603      	mov	r3, r0
 8004668:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *float_string = static_strings_allocate(float_string_length);
 800466c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fb17 	bl	8003ca4 <static_strings_allocate>
 8004676:	6438      	str	r0, [r7, #64]	; 0x40
	if(float_string == NULL){
 8004678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <static_strings_float_to_string+0x46>
		return float_string;
 800467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004680:	e00d      	b.n	800469e <static_strings_float_to_string+0x62>
	}
	memcpy(float_string->string,float_temp_string,float_string_length);
 8004682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800468a:	f107 010c 	add.w	r1, r7, #12
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f86a 	bl	8004768 <memcpy>
	float_string->length = float_string_length;
 8004694:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469a:	809a      	strh	r2, [r3, #4]
	return float_string;
 800469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800469e:	4618      	mov	r0, r3
 80046a0:	374c      	adds	r7, #76	; 0x4c
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd90      	pop	{r4, r7, pc}
 80046a6:	bf00      	nop
 80046a8:	08007538 	.word	0x08007538

080046ac <static_strings_double_to_string>:

static_strings_string_descriptor *static_strings_double_to_string(double double_arg){
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b092      	sub	sp, #72	; 0x48
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t double_temp_string[50];
	sprintf((char *)double_temp_string,"%lf",double_arg);
 80046b6:	f107 000c 	add.w	r0, r7, #12
 80046ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046be:	4914      	ldr	r1, [pc, #80]	; (8004710 <static_strings_double_to_string+0x64>)
 80046c0:	f000 fcb4 	bl	800502c <siprintf>
	int16_t double_string_length = static_strings_strlen(double_temp_string);
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fc65 	bl	8003f98 <static_strings_strlen>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *double_string = static_strings_allocate(double_string_length);
 80046d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fae3 	bl	8003ca4 <static_strings_allocate>
 80046de:	6438      	str	r0, [r7, #64]	; 0x40
	if(double_string == NULL){
 80046e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <static_strings_double_to_string+0x3e>
		return double_string;
 80046e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e8:	e00d      	b.n	8004706 <static_strings_double_to_string+0x5a>
	}
	memcpy(double_string->string,double_temp_string,double_string_length);
 80046ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80046f2:	f107 010c 	add.w	r1, r7, #12
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f836 	bl	8004768 <memcpy>
	double_string->length = double_string_length;
 80046fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	809a      	strh	r2, [r3, #4]
	return double_string;
 8004704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004706:	4618      	mov	r0, r3
 8004708:	3748      	adds	r7, #72	; 0x48
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	0800753c 	.word	0x0800753c

08004714 <__errno>:
 8004714:	4b01      	ldr	r3, [pc, #4]	; (800471c <__errno+0x8>)
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	2000000c 	.word	0x2000000c

08004720 <__libc_init_array>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	2500      	movs	r5, #0
 8004724:	4e0c      	ldr	r6, [pc, #48]	; (8004758 <__libc_init_array+0x38>)
 8004726:	4c0d      	ldr	r4, [pc, #52]	; (800475c <__libc_init_array+0x3c>)
 8004728:	1ba4      	subs	r4, r4, r6
 800472a:	10a4      	asrs	r4, r4, #2
 800472c:	42a5      	cmp	r5, r4
 800472e:	d109      	bne.n	8004744 <__libc_init_array+0x24>
 8004730:	f002 f85c 	bl	80067ec <_init>
 8004734:	2500      	movs	r5, #0
 8004736:	4e0a      	ldr	r6, [pc, #40]	; (8004760 <__libc_init_array+0x40>)
 8004738:	4c0a      	ldr	r4, [pc, #40]	; (8004764 <__libc_init_array+0x44>)
 800473a:	1ba4      	subs	r4, r4, r6
 800473c:	10a4      	asrs	r4, r4, #2
 800473e:	42a5      	cmp	r5, r4
 8004740:	d105      	bne.n	800474e <__libc_init_array+0x2e>
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004748:	4798      	blx	r3
 800474a:	3501      	adds	r5, #1
 800474c:	e7ee      	b.n	800472c <__libc_init_array+0xc>
 800474e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004752:	4798      	blx	r3
 8004754:	3501      	adds	r5, #1
 8004756:	e7f2      	b.n	800473e <__libc_init_array+0x1e>
 8004758:	080077b8 	.word	0x080077b8
 800475c:	080077b8 	.word	0x080077b8
 8004760:	080077b8 	.word	0x080077b8
 8004764:	080077bc 	.word	0x080077bc

08004768 <memcpy>:
 8004768:	b510      	push	{r4, lr}
 800476a:	1e43      	subs	r3, r0, #1
 800476c:	440a      	add	r2, r1
 800476e:	4291      	cmp	r1, r2
 8004770:	d100      	bne.n	8004774 <memcpy+0xc>
 8004772:	bd10      	pop	{r4, pc}
 8004774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800477c:	e7f7      	b.n	800476e <memcpy+0x6>

0800477e <memset>:
 800477e:	4603      	mov	r3, r0
 8004780:	4402      	add	r2, r0
 8004782:	4293      	cmp	r3, r2
 8004784:	d100      	bne.n	8004788 <memset+0xa>
 8004786:	4770      	bx	lr
 8004788:	f803 1b01 	strb.w	r1, [r3], #1
 800478c:	e7f9      	b.n	8004782 <memset+0x4>

0800478e <__cvt>:
 800478e:	2b00      	cmp	r3, #0
 8004790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	461e      	mov	r6, r3
 8004796:	bfbb      	ittet	lt
 8004798:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800479c:	461e      	movlt	r6, r3
 800479e:	2300      	movge	r3, #0
 80047a0:	232d      	movlt	r3, #45	; 0x2d
 80047a2:	b088      	sub	sp, #32
 80047a4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80047a6:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80047aa:	f027 0720 	bic.w	r7, r7, #32
 80047ae:	2f46      	cmp	r7, #70	; 0x46
 80047b0:	4614      	mov	r4, r2
 80047b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80047b4:	700b      	strb	r3, [r1, #0]
 80047b6:	d004      	beq.n	80047c2 <__cvt+0x34>
 80047b8:	2f45      	cmp	r7, #69	; 0x45
 80047ba:	d100      	bne.n	80047be <__cvt+0x30>
 80047bc:	3501      	adds	r5, #1
 80047be:	2302      	movs	r3, #2
 80047c0:	e000      	b.n	80047c4 <__cvt+0x36>
 80047c2:	2303      	movs	r3, #3
 80047c4:	aa07      	add	r2, sp, #28
 80047c6:	9204      	str	r2, [sp, #16]
 80047c8:	aa06      	add	r2, sp, #24
 80047ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80047ce:	e9cd 3500 	strd	r3, r5, [sp]
 80047d2:	4622      	mov	r2, r4
 80047d4:	4633      	mov	r3, r6
 80047d6:	f000 fcd7 	bl	8005188 <_dtoa_r>
 80047da:	2f47      	cmp	r7, #71	; 0x47
 80047dc:	4680      	mov	r8, r0
 80047de:	d102      	bne.n	80047e6 <__cvt+0x58>
 80047e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047e2:	07db      	lsls	r3, r3, #31
 80047e4:	d526      	bpl.n	8004834 <__cvt+0xa6>
 80047e6:	2f46      	cmp	r7, #70	; 0x46
 80047e8:	eb08 0905 	add.w	r9, r8, r5
 80047ec:	d111      	bne.n	8004812 <__cvt+0x84>
 80047ee:	f898 3000 	ldrb.w	r3, [r8]
 80047f2:	2b30      	cmp	r3, #48	; 0x30
 80047f4:	d10a      	bne.n	800480c <__cvt+0x7e>
 80047f6:	2200      	movs	r2, #0
 80047f8:	2300      	movs	r3, #0
 80047fa:	4620      	mov	r0, r4
 80047fc:	4631      	mov	r1, r6
 80047fe:	f7fc f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 8004802:	b918      	cbnz	r0, 800480c <__cvt+0x7e>
 8004804:	f1c5 0501 	rsb	r5, r5, #1
 8004808:	f8ca 5000 	str.w	r5, [sl]
 800480c:	f8da 3000 	ldr.w	r3, [sl]
 8004810:	4499      	add	r9, r3
 8004812:	2200      	movs	r2, #0
 8004814:	2300      	movs	r3, #0
 8004816:	4620      	mov	r0, r4
 8004818:	4631      	mov	r1, r6
 800481a:	f7fc f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800481e:	b938      	cbnz	r0, 8004830 <__cvt+0xa2>
 8004820:	2230      	movs	r2, #48	; 0x30
 8004822:	9b07      	ldr	r3, [sp, #28]
 8004824:	454b      	cmp	r3, r9
 8004826:	d205      	bcs.n	8004834 <__cvt+0xa6>
 8004828:	1c59      	adds	r1, r3, #1
 800482a:	9107      	str	r1, [sp, #28]
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e7f8      	b.n	8004822 <__cvt+0x94>
 8004830:	f8cd 901c 	str.w	r9, [sp, #28]
 8004834:	4640      	mov	r0, r8
 8004836:	9b07      	ldr	r3, [sp, #28]
 8004838:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800483a:	eba3 0308 	sub.w	r3, r3, r8
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	b008      	add	sp, #32
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004846 <__exponent>:
 8004846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004848:	2900      	cmp	r1, #0
 800484a:	bfb4      	ite	lt
 800484c:	232d      	movlt	r3, #45	; 0x2d
 800484e:	232b      	movge	r3, #43	; 0x2b
 8004850:	4604      	mov	r4, r0
 8004852:	bfb8      	it	lt
 8004854:	4249      	neglt	r1, r1
 8004856:	2909      	cmp	r1, #9
 8004858:	f804 2b02 	strb.w	r2, [r4], #2
 800485c:	7043      	strb	r3, [r0, #1]
 800485e:	dd21      	ble.n	80048a4 <__exponent+0x5e>
 8004860:	f10d 0307 	add.w	r3, sp, #7
 8004864:	461f      	mov	r7, r3
 8004866:	260a      	movs	r6, #10
 8004868:	fb91 f5f6 	sdiv	r5, r1, r6
 800486c:	fb06 1115 	mls	r1, r6, r5, r1
 8004870:	2d09      	cmp	r5, #9
 8004872:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004876:	f803 1c01 	strb.w	r1, [r3, #-1]
 800487a:	f103 32ff 	add.w	r2, r3, #4294967295
 800487e:	4629      	mov	r1, r5
 8004880:	dc09      	bgt.n	8004896 <__exponent+0x50>
 8004882:	3130      	adds	r1, #48	; 0x30
 8004884:	3b02      	subs	r3, #2
 8004886:	f802 1c01 	strb.w	r1, [r2, #-1]
 800488a:	42bb      	cmp	r3, r7
 800488c:	4622      	mov	r2, r4
 800488e:	d304      	bcc.n	800489a <__exponent+0x54>
 8004890:	1a10      	subs	r0, r2, r0
 8004892:	b003      	add	sp, #12
 8004894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004896:	4613      	mov	r3, r2
 8004898:	e7e6      	b.n	8004868 <__exponent+0x22>
 800489a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800489e:	f804 2b01 	strb.w	r2, [r4], #1
 80048a2:	e7f2      	b.n	800488a <__exponent+0x44>
 80048a4:	2330      	movs	r3, #48	; 0x30
 80048a6:	4419      	add	r1, r3
 80048a8:	7083      	strb	r3, [r0, #2]
 80048aa:	1d02      	adds	r2, r0, #4
 80048ac:	70c1      	strb	r1, [r0, #3]
 80048ae:	e7ef      	b.n	8004890 <__exponent+0x4a>

080048b0 <_printf_float>:
 80048b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	b091      	sub	sp, #68	; 0x44
 80048b6:	460c      	mov	r4, r1
 80048b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80048ba:	4693      	mov	fp, r2
 80048bc:	461e      	mov	r6, r3
 80048be:	4605      	mov	r5, r0
 80048c0:	f001 fa16 	bl	8005cf0 <_localeconv_r>
 80048c4:	6803      	ldr	r3, [r0, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ca:	f7fb fc41 	bl	8000150 <strlen>
 80048ce:	2300      	movs	r3, #0
 80048d0:	930e      	str	r3, [sp, #56]	; 0x38
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	900a      	str	r0, [sp, #40]	; 0x28
 80048d6:	3307      	adds	r3, #7
 80048d8:	f023 0307 	bic.w	r3, r3, #7
 80048dc:	f103 0208 	add.w	r2, r3, #8
 80048e0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80048e4:	f8d4 a000 	ldr.w	sl, [r4]
 80048e8:	603a      	str	r2, [r7, #0]
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048f2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80048f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004900:	4ba6      	ldr	r3, [pc, #664]	; (8004b9c <_printf_float+0x2ec>)
 8004902:	4638      	mov	r0, r7
 8004904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004906:	f7fc f881 	bl	8000a0c <__aeabi_dcmpun>
 800490a:	bb68      	cbnz	r0, 8004968 <_printf_float+0xb8>
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	4ba2      	ldr	r3, [pc, #648]	; (8004b9c <_printf_float+0x2ec>)
 8004912:	4638      	mov	r0, r7
 8004914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004916:	f7fc f85b 	bl	80009d0 <__aeabi_dcmple>
 800491a:	bb28      	cbnz	r0, 8004968 <_printf_float+0xb8>
 800491c:	2200      	movs	r2, #0
 800491e:	2300      	movs	r3, #0
 8004920:	4638      	mov	r0, r7
 8004922:	4649      	mov	r1, r9
 8004924:	f7fc f84a 	bl	80009bc <__aeabi_dcmplt>
 8004928:	b110      	cbz	r0, 8004930 <_printf_float+0x80>
 800492a:	232d      	movs	r3, #45	; 0x2d
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004930:	4f9b      	ldr	r7, [pc, #620]	; (8004ba0 <_printf_float+0x2f0>)
 8004932:	4b9c      	ldr	r3, [pc, #624]	; (8004ba4 <_printf_float+0x2f4>)
 8004934:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004938:	bf98      	it	ls
 800493a:	461f      	movls	r7, r3
 800493c:	2303      	movs	r3, #3
 800493e:	f04f 0900 	mov.w	r9, #0
 8004942:	6123      	str	r3, [r4, #16]
 8004944:	f02a 0304 	bic.w	r3, sl, #4
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	9600      	str	r6, [sp, #0]
 800494c:	465b      	mov	r3, fp
 800494e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004950:	4621      	mov	r1, r4
 8004952:	4628      	mov	r0, r5
 8004954:	f000 f9e2 	bl	8004d1c <_printf_common>
 8004958:	3001      	adds	r0, #1
 800495a:	f040 8090 	bne.w	8004a7e <_printf_float+0x1ce>
 800495e:	f04f 30ff 	mov.w	r0, #4294967295
 8004962:	b011      	add	sp, #68	; 0x44
 8004964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004968:	463a      	mov	r2, r7
 800496a:	464b      	mov	r3, r9
 800496c:	4638      	mov	r0, r7
 800496e:	4649      	mov	r1, r9
 8004970:	f7fc f84c 	bl	8000a0c <__aeabi_dcmpun>
 8004974:	b110      	cbz	r0, 800497c <_printf_float+0xcc>
 8004976:	4f8c      	ldr	r7, [pc, #560]	; (8004ba8 <_printf_float+0x2f8>)
 8004978:	4b8c      	ldr	r3, [pc, #560]	; (8004bac <_printf_float+0x2fc>)
 800497a:	e7db      	b.n	8004934 <_printf_float+0x84>
 800497c:	6863      	ldr	r3, [r4, #4]
 800497e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	a80d      	add	r0, sp, #52	; 0x34
 8004986:	a90e      	add	r1, sp, #56	; 0x38
 8004988:	d140      	bne.n	8004a0c <_printf_float+0x15c>
 800498a:	2306      	movs	r3, #6
 800498c:	6063      	str	r3, [r4, #4]
 800498e:	f04f 0c00 	mov.w	ip, #0
 8004992:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004996:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	6022      	str	r2, [r4, #0]
 800499e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	463a      	mov	r2, r7
 80049a6:	464b      	mov	r3, r9
 80049a8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80049ac:	4628      	mov	r0, r5
 80049ae:	f7ff feee 	bl	800478e <__cvt>
 80049b2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80049b6:	2b47      	cmp	r3, #71	; 0x47
 80049b8:	4607      	mov	r7, r0
 80049ba:	d109      	bne.n	80049d0 <_printf_float+0x120>
 80049bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049be:	1cd8      	adds	r0, r3, #3
 80049c0:	db02      	blt.n	80049c8 <_printf_float+0x118>
 80049c2:	6862      	ldr	r2, [r4, #4]
 80049c4:	4293      	cmp	r3, r2
 80049c6:	dd47      	ble.n	8004a58 <_printf_float+0x1a8>
 80049c8:	f1a8 0802 	sub.w	r8, r8, #2
 80049cc:	fa5f f888 	uxtb.w	r8, r8
 80049d0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80049d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049d6:	d824      	bhi.n	8004a22 <_printf_float+0x172>
 80049d8:	3901      	subs	r1, #1
 80049da:	4642      	mov	r2, r8
 80049dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049e0:	910d      	str	r1, [sp, #52]	; 0x34
 80049e2:	f7ff ff30 	bl	8004846 <__exponent>
 80049e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049e8:	4681      	mov	r9, r0
 80049ea:	1813      	adds	r3, r2, r0
 80049ec:	2a01      	cmp	r2, #1
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	dc02      	bgt.n	80049f8 <_printf_float+0x148>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	07d1      	lsls	r1, r2, #31
 80049f6:	d501      	bpl.n	80049fc <_printf_float+0x14c>
 80049f8:	3301      	adds	r3, #1
 80049fa:	6123      	str	r3, [r4, #16]
 80049fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0a2      	beq.n	800494a <_printf_float+0x9a>
 8004a04:	232d      	movs	r3, #45	; 0x2d
 8004a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a0a:	e79e      	b.n	800494a <_printf_float+0x9a>
 8004a0c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004a10:	f000 816e 	beq.w	8004cf0 <_printf_float+0x440>
 8004a14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a18:	d1b9      	bne.n	800498e <_printf_float+0xde>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1b7      	bne.n	800498e <_printf_float+0xde>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e7b4      	b.n	800498c <_printf_float+0xdc>
 8004a22:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004a26:	d119      	bne.n	8004a5c <_printf_float+0x1ac>
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	dd0c      	ble.n	8004a48 <_printf_float+0x198>
 8004a2e:	6121      	str	r1, [r4, #16]
 8004a30:	b913      	cbnz	r3, 8004a38 <_printf_float+0x188>
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	07d2      	lsls	r2, r2, #31
 8004a36:	d502      	bpl.n	8004a3e <_printf_float+0x18e>
 8004a38:	3301      	adds	r3, #1
 8004a3a:	440b      	add	r3, r1
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a40:	f04f 0900 	mov.w	r9, #0
 8004a44:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a46:	e7d9      	b.n	80049fc <_printf_float+0x14c>
 8004a48:	b913      	cbnz	r3, 8004a50 <_printf_float+0x1a0>
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	07d0      	lsls	r0, r2, #31
 8004a4e:	d501      	bpl.n	8004a54 <_printf_float+0x1a4>
 8004a50:	3302      	adds	r3, #2
 8004a52:	e7f3      	b.n	8004a3c <_printf_float+0x18c>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e7f1      	b.n	8004a3c <_printf_float+0x18c>
 8004a58:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004a5c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004a60:	4293      	cmp	r3, r2
 8004a62:	db05      	blt.n	8004a70 <_printf_float+0x1c0>
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	07d1      	lsls	r1, r2, #31
 8004a6a:	d5e8      	bpl.n	8004a3e <_printf_float+0x18e>
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	e7e5      	b.n	8004a3c <_printf_float+0x18c>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bfcc      	ite	gt
 8004a74:	2301      	movgt	r3, #1
 8004a76:	f1c3 0302 	rsble	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	e7de      	b.n	8004a3c <_printf_float+0x18c>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	055a      	lsls	r2, r3, #21
 8004a82:	d407      	bmi.n	8004a94 <_printf_float+0x1e4>
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	463a      	mov	r2, r7
 8004a88:	4659      	mov	r1, fp
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b0      	blx	r6
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d129      	bne.n	8004ae6 <_printf_float+0x236>
 8004a92:	e764      	b.n	800495e <_printf_float+0xae>
 8004a94:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004a98:	f240 80d7 	bls.w	8004c4a <_printf_float+0x39a>
 8004a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f7fb ff80 	bl	80009a8 <__aeabi_dcmpeq>
 8004aa8:	b388      	cbz	r0, 8004b0e <_printf_float+0x25e>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4a40      	ldr	r2, [pc, #256]	; (8004bb0 <_printf_float+0x300>)
 8004aae:	4659      	mov	r1, fp
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b0      	blx	r6
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f43f af52 	beq.w	800495e <_printf_float+0xae>
 8004aba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	db02      	blt.n	8004ac8 <_printf_float+0x218>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	07d8      	lsls	r0, r3, #31
 8004ac6:	d50e      	bpl.n	8004ae6 <_printf_float+0x236>
 8004ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004acc:	4659      	mov	r1, fp
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b0      	blx	r6
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f af43 	beq.w	800495e <_printf_float+0xae>
 8004ad8:	2700      	movs	r7, #0
 8004ada:	f104 081a 	add.w	r8, r4, #26
 8004ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	42bb      	cmp	r3, r7
 8004ae4:	dc09      	bgt.n	8004afa <_printf_float+0x24a>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	079f      	lsls	r7, r3, #30
 8004aea:	f100 80fd 	bmi.w	8004ce8 <_printf_float+0x438>
 8004aee:	68e0      	ldr	r0, [r4, #12]
 8004af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004af2:	4298      	cmp	r0, r3
 8004af4:	bfb8      	it	lt
 8004af6:	4618      	movlt	r0, r3
 8004af8:	e733      	b.n	8004962 <_printf_float+0xb2>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4642      	mov	r2, r8
 8004afe:	4659      	mov	r1, fp
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b0      	blx	r6
 8004b04:	3001      	adds	r0, #1
 8004b06:	f43f af2a 	beq.w	800495e <_printf_float+0xae>
 8004b0a:	3701      	adds	r7, #1
 8004b0c:	e7e7      	b.n	8004ade <_printf_float+0x22e>
 8004b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	dc2b      	bgt.n	8004b6c <_printf_float+0x2bc>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <_printf_float+0x300>)
 8004b18:	4659      	mov	r1, fp
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	47b0      	blx	r6
 8004b1e:	3001      	adds	r0, #1
 8004b20:	f43f af1d 	beq.w	800495e <_printf_float+0xae>
 8004b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b26:	b923      	cbnz	r3, 8004b32 <_printf_float+0x282>
 8004b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b2a:	b913      	cbnz	r3, 8004b32 <_printf_float+0x282>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	07d9      	lsls	r1, r3, #31
 8004b30:	d5d9      	bpl.n	8004ae6 <_printf_float+0x236>
 8004b32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b36:	4659      	mov	r1, fp
 8004b38:	4628      	mov	r0, r5
 8004b3a:	47b0      	blx	r6
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	f43f af0e 	beq.w	800495e <_printf_float+0xae>
 8004b42:	f04f 0800 	mov.w	r8, #0
 8004b46:	f104 091a 	add.w	r9, r4, #26
 8004b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	4543      	cmp	r3, r8
 8004b50:	dc01      	bgt.n	8004b56 <_printf_float+0x2a6>
 8004b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b54:	e797      	b.n	8004a86 <_printf_float+0x1d6>
 8004b56:	2301      	movs	r3, #1
 8004b58:	464a      	mov	r2, r9
 8004b5a:	4659      	mov	r1, fp
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b0      	blx	r6
 8004b60:	3001      	adds	r0, #1
 8004b62:	f43f aefc 	beq.w	800495e <_printf_float+0xae>
 8004b66:	f108 0801 	add.w	r8, r8, #1
 8004b6a:	e7ee      	b.n	8004b4a <_printf_float+0x29a>
 8004b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b70:	429a      	cmp	r2, r3
 8004b72:	bfa8      	it	ge
 8004b74:	461a      	movge	r2, r3
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	4690      	mov	r8, r2
 8004b7a:	dd07      	ble.n	8004b8c <_printf_float+0x2dc>
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	4659      	mov	r1, fp
 8004b80:	463a      	mov	r2, r7
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b0      	blx	r6
 8004b86:	3001      	adds	r0, #1
 8004b88:	f43f aee9 	beq.w	800495e <_printf_float+0xae>
 8004b8c:	f104 031a 	add.w	r3, r4, #26
 8004b90:	f04f 0a00 	mov.w	sl, #0
 8004b94:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b9a:	e015      	b.n	8004bc8 <_printf_float+0x318>
 8004b9c:	7fefffff 	.word	0x7fefffff
 8004ba0:	0800755c 	.word	0x0800755c
 8004ba4:	08007558 	.word	0x08007558
 8004ba8:	08007564 	.word	0x08007564
 8004bac:	08007560 	.word	0x08007560
 8004bb0:	08007568 	.word	0x08007568
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bb8:	4659      	mov	r1, fp
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b0      	blx	r6
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f aecd 	beq.w	800495e <_printf_float+0xae>
 8004bc4:	f10a 0a01 	add.w	sl, sl, #1
 8004bc8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004bcc:	eba9 0308 	sub.w	r3, r9, r8
 8004bd0:	4553      	cmp	r3, sl
 8004bd2:	dcef      	bgt.n	8004bb4 <_printf_float+0x304>
 8004bd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	444f      	add	r7, r9
 8004bdc:	db14      	blt.n	8004c08 <_printf_float+0x358>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	07da      	lsls	r2, r3, #31
 8004be2:	d411      	bmi.n	8004c08 <_printf_float+0x358>
 8004be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004be8:	eba3 0209 	sub.w	r2, r3, r9
 8004bec:	eba3 0901 	sub.w	r9, r3, r1
 8004bf0:	4591      	cmp	r9, r2
 8004bf2:	bfa8      	it	ge
 8004bf4:	4691      	movge	r9, r2
 8004bf6:	f1b9 0f00 	cmp.w	r9, #0
 8004bfa:	dc0d      	bgt.n	8004c18 <_printf_float+0x368>
 8004bfc:	2700      	movs	r7, #0
 8004bfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c02:	f104 081a 	add.w	r8, r4, #26
 8004c06:	e018      	b.n	8004c3a <_printf_float+0x38a>
 8004c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b0      	blx	r6
 8004c12:	3001      	adds	r0, #1
 8004c14:	d1e6      	bne.n	8004be4 <_printf_float+0x334>
 8004c16:	e6a2      	b.n	800495e <_printf_float+0xae>
 8004c18:	464b      	mov	r3, r9
 8004c1a:	463a      	mov	r2, r7
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b0      	blx	r6
 8004c22:	3001      	adds	r0, #1
 8004c24:	d1ea      	bne.n	8004bfc <_printf_float+0x34c>
 8004c26:	e69a      	b.n	800495e <_printf_float+0xae>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b0      	blx	r6
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f ae93 	beq.w	800495e <_printf_float+0xae>
 8004c38:	3701      	adds	r7, #1
 8004c3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	eba3 0309 	sub.w	r3, r3, r9
 8004c44:	42bb      	cmp	r3, r7
 8004c46:	dcef      	bgt.n	8004c28 <_printf_float+0x378>
 8004c48:	e74d      	b.n	8004ae6 <_printf_float+0x236>
 8004c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c4c:	2a01      	cmp	r2, #1
 8004c4e:	dc01      	bgt.n	8004c54 <_printf_float+0x3a4>
 8004c50:	07db      	lsls	r3, r3, #31
 8004c52:	d538      	bpl.n	8004cc6 <_printf_float+0x416>
 8004c54:	2301      	movs	r3, #1
 8004c56:	463a      	mov	r2, r7
 8004c58:	4659      	mov	r1, fp
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b0      	blx	r6
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f ae7d 	beq.w	800495e <_printf_float+0xae>
 8004c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c68:	4659      	mov	r1, fp
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b0      	blx	r6
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f107 0701 	add.w	r7, r7, #1
 8004c74:	f43f ae73 	beq.w	800495e <_printf_float+0xae>
 8004c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f103 38ff 	add.w	r8, r3, #4294967295
 8004c84:	2300      	movs	r3, #0
 8004c86:	f7fb fe8f 	bl	80009a8 <__aeabi_dcmpeq>
 8004c8a:	b9c0      	cbnz	r0, 8004cbe <_printf_float+0x40e>
 8004c8c:	4643      	mov	r3, r8
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4659      	mov	r1, fp
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b0      	blx	r6
 8004c96:	3001      	adds	r0, #1
 8004c98:	d10d      	bne.n	8004cb6 <_printf_float+0x406>
 8004c9a:	e660      	b.n	800495e <_printf_float+0xae>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b0      	blx	r6
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f ae59 	beq.w	800495e <_printf_float+0xae>
 8004cac:	3701      	adds	r7, #1
 8004cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	42bb      	cmp	r3, r7
 8004cb4:	dcf2      	bgt.n	8004c9c <_printf_float+0x3ec>
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cbc:	e6e4      	b.n	8004a88 <_printf_float+0x1d8>
 8004cbe:	2700      	movs	r7, #0
 8004cc0:	f104 081a 	add.w	r8, r4, #26
 8004cc4:	e7f3      	b.n	8004cae <_printf_float+0x3fe>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e7e1      	b.n	8004c8e <_printf_float+0x3de>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4642      	mov	r2, r8
 8004cce:	4659      	mov	r1, fp
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b0      	blx	r6
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f ae42 	beq.w	800495e <_printf_float+0xae>
 8004cda:	3701      	adds	r7, #1
 8004cdc:	68e3      	ldr	r3, [r4, #12]
 8004cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	42bb      	cmp	r3, r7
 8004ce4:	dcf1      	bgt.n	8004cca <_printf_float+0x41a>
 8004ce6:	e702      	b.n	8004aee <_printf_float+0x23e>
 8004ce8:	2700      	movs	r7, #0
 8004cea:	f104 0819 	add.w	r8, r4, #25
 8004cee:	e7f5      	b.n	8004cdc <_printf_float+0x42c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f43f ae94 	beq.w	8004a1e <_printf_float+0x16e>
 8004cf6:	f04f 0c00 	mov.w	ip, #0
 8004cfa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004cfe:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004d08:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	463a      	mov	r2, r7
 8004d10:	464b      	mov	r3, r9
 8004d12:	4628      	mov	r0, r5
 8004d14:	f7ff fd3b 	bl	800478e <__cvt>
 8004d18:	4607      	mov	r7, r0
 8004d1a:	e64f      	b.n	80049bc <_printf_float+0x10c>

08004d1c <_printf_common>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	4691      	mov	r9, r2
 8004d22:	461f      	mov	r7, r3
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	4606      	mov	r6, r0
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	bfb8      	it	lt
 8004d2e:	4613      	movlt	r3, r2
 8004d30:	f8c9 3000 	str.w	r3, [r9]
 8004d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d38:	460c      	mov	r4, r1
 8004d3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d3e:	b112      	cbz	r2, 8004d46 <_printf_common+0x2a>
 8004d40:	3301      	adds	r3, #1
 8004d42:	f8c9 3000 	str.w	r3, [r9]
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	0699      	lsls	r1, r3, #26
 8004d4a:	bf42      	ittt	mi
 8004d4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d50:	3302      	addmi	r3, #2
 8004d52:	f8c9 3000 	strmi.w	r3, [r9]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d107      	bne.n	8004d6e <_printf_common+0x52>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	f8d9 2000 	ldr.w	r2, [r9]
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	42ab      	cmp	r3, r5
 8004d6c:	dc29      	bgt.n	8004dc2 <_printf_common+0xa6>
 8004d6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	3300      	adds	r3, #0
 8004d76:	bf18      	it	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	0692      	lsls	r2, r2, #26
 8004d7c:	d42e      	bmi.n	8004ddc <_printf_common+0xc0>
 8004d7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d82:	4639      	mov	r1, r7
 8004d84:	4630      	mov	r0, r6
 8004d86:	47c0      	blx	r8
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d021      	beq.n	8004dd0 <_printf_common+0xb4>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	68e5      	ldr	r5, [r4, #12]
 8004d90:	f003 0306 	and.w	r3, r3, #6
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	bf18      	it	ne
 8004d98:	2500      	movne	r5, #0
 8004d9a:	f8d9 2000 	ldr.w	r2, [r9]
 8004d9e:	f04f 0900 	mov.w	r9, #0
 8004da2:	bf08      	it	eq
 8004da4:	1aad      	subeq	r5, r5, r2
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	bf08      	it	eq
 8004dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db0:	4293      	cmp	r3, r2
 8004db2:	bfc4      	itt	gt
 8004db4:	1a9b      	subgt	r3, r3, r2
 8004db6:	18ed      	addgt	r5, r5, r3
 8004db8:	341a      	adds	r4, #26
 8004dba:	454d      	cmp	r5, r9
 8004dbc:	d11a      	bne.n	8004df4 <_printf_common+0xd8>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e008      	b.n	8004dd4 <_printf_common+0xb8>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	4630      	mov	r0, r6
 8004dca:	47c0      	blx	r8
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d103      	bne.n	8004dd8 <_printf_common+0xbc>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7c2      	b.n	8004d62 <_printf_common+0x46>
 8004ddc:	2030      	movs	r0, #48	; 0x30
 8004dde:	18e1      	adds	r1, r4, r3
 8004de0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dea:	4422      	add	r2, r4
 8004dec:	3302      	adds	r3, #2
 8004dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df2:	e7c4      	b.n	8004d7e <_printf_common+0x62>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4622      	mov	r2, r4
 8004df8:	4639      	mov	r1, r7
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	47c0      	blx	r8
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d0e6      	beq.n	8004dd0 <_printf_common+0xb4>
 8004e02:	f109 0901 	add.w	r9, r9, #1
 8004e06:	e7d8      	b.n	8004dba <_printf_common+0x9e>

08004e08 <_printf_i>:
 8004e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e10:	460c      	mov	r4, r1
 8004e12:	7e09      	ldrb	r1, [r1, #24]
 8004e14:	b085      	sub	sp, #20
 8004e16:	296e      	cmp	r1, #110	; 0x6e
 8004e18:	4617      	mov	r7, r2
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	4698      	mov	r8, r3
 8004e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e20:	f000 80b3 	beq.w	8004f8a <_printf_i+0x182>
 8004e24:	d822      	bhi.n	8004e6c <_printf_i+0x64>
 8004e26:	2963      	cmp	r1, #99	; 0x63
 8004e28:	d036      	beq.n	8004e98 <_printf_i+0x90>
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x3a>
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	f000 80b9 	beq.w	8004fa4 <_printf_i+0x19c>
 8004e32:	2958      	cmp	r1, #88	; 0x58
 8004e34:	f000 8083 	beq.w	8004f3e <_printf_i+0x136>
 8004e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e40:	e032      	b.n	8004ea8 <_printf_i+0xa0>
 8004e42:	2964      	cmp	r1, #100	; 0x64
 8004e44:	d001      	beq.n	8004e4a <_printf_i+0x42>
 8004e46:	2969      	cmp	r1, #105	; 0x69
 8004e48:	d1f6      	bne.n	8004e38 <_printf_i+0x30>
 8004e4a:	6820      	ldr	r0, [r4, #0]
 8004e4c:	6813      	ldr	r3, [r2, #0]
 8004e4e:	0605      	lsls	r5, r0, #24
 8004e50:	f103 0104 	add.w	r1, r3, #4
 8004e54:	d52a      	bpl.n	8004eac <_printf_i+0xa4>
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6011      	str	r1, [r2, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da03      	bge.n	8004e66 <_printf_i+0x5e>
 8004e5e:	222d      	movs	r2, #45	; 0x2d
 8004e60:	425b      	negs	r3, r3
 8004e62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e66:	486f      	ldr	r0, [pc, #444]	; (8005024 <_printf_i+0x21c>)
 8004e68:	220a      	movs	r2, #10
 8004e6a:	e039      	b.n	8004ee0 <_printf_i+0xd8>
 8004e6c:	2973      	cmp	r1, #115	; 0x73
 8004e6e:	f000 809d 	beq.w	8004fac <_printf_i+0x1a4>
 8004e72:	d808      	bhi.n	8004e86 <_printf_i+0x7e>
 8004e74:	296f      	cmp	r1, #111	; 0x6f
 8004e76:	d020      	beq.n	8004eba <_printf_i+0xb2>
 8004e78:	2970      	cmp	r1, #112	; 0x70
 8004e7a:	d1dd      	bne.n	8004e38 <_printf_i+0x30>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	f043 0320 	orr.w	r3, r3, #32
 8004e82:	6023      	str	r3, [r4, #0]
 8004e84:	e003      	b.n	8004e8e <_printf_i+0x86>
 8004e86:	2975      	cmp	r1, #117	; 0x75
 8004e88:	d017      	beq.n	8004eba <_printf_i+0xb2>
 8004e8a:	2978      	cmp	r1, #120	; 0x78
 8004e8c:	d1d4      	bne.n	8004e38 <_printf_i+0x30>
 8004e8e:	2378      	movs	r3, #120	; 0x78
 8004e90:	4865      	ldr	r0, [pc, #404]	; (8005028 <_printf_i+0x220>)
 8004e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e96:	e055      	b.n	8004f44 <_printf_i+0x13c>
 8004e98:	6813      	ldr	r3, [r2, #0]
 8004e9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e9e:	1d19      	adds	r1, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6011      	str	r1, [r2, #0]
 8004ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e08c      	b.n	8004fc6 <_printf_i+0x1be>
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eb2:	6011      	str	r1, [r2, #0]
 8004eb4:	bf18      	it	ne
 8004eb6:	b21b      	sxthne	r3, r3
 8004eb8:	e7cf      	b.n	8004e5a <_printf_i+0x52>
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	1d18      	adds	r0, r3, #4
 8004ec0:	6010      	str	r0, [r2, #0]
 8004ec2:	0628      	lsls	r0, r5, #24
 8004ec4:	d501      	bpl.n	8004eca <_printf_i+0xc2>
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	e002      	b.n	8004ed0 <_printf_i+0xc8>
 8004eca:	0668      	lsls	r0, r5, #25
 8004ecc:	d5fb      	bpl.n	8004ec6 <_printf_i+0xbe>
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	296f      	cmp	r1, #111	; 0x6f
 8004ed2:	bf14      	ite	ne
 8004ed4:	220a      	movne	r2, #10
 8004ed6:	2208      	moveq	r2, #8
 8004ed8:	4852      	ldr	r0, [pc, #328]	; (8005024 <_printf_i+0x21c>)
 8004eda:	2100      	movs	r1, #0
 8004edc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ee0:	6865      	ldr	r5, [r4, #4]
 8004ee2:	2d00      	cmp	r5, #0
 8004ee4:	60a5      	str	r5, [r4, #8]
 8004ee6:	f2c0 8095 	blt.w	8005014 <_printf_i+0x20c>
 8004eea:	6821      	ldr	r1, [r4, #0]
 8004eec:	f021 0104 	bic.w	r1, r1, #4
 8004ef0:	6021      	str	r1, [r4, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d13d      	bne.n	8004f72 <_printf_i+0x16a>
 8004ef6:	2d00      	cmp	r5, #0
 8004ef8:	f040 808e 	bne.w	8005018 <_printf_i+0x210>
 8004efc:	4665      	mov	r5, ip
 8004efe:	2a08      	cmp	r2, #8
 8004f00:	d10b      	bne.n	8004f1a <_printf_i+0x112>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	07db      	lsls	r3, r3, #31
 8004f06:	d508      	bpl.n	8004f1a <_printf_i+0x112>
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	6862      	ldr	r2, [r4, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	bfde      	ittt	le
 8004f10:	2330      	movle	r3, #48	; 0x30
 8004f12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f1a:	ebac 0305 	sub.w	r3, ip, r5
 8004f1e:	6123      	str	r3, [r4, #16]
 8004f20:	f8cd 8000 	str.w	r8, [sp]
 8004f24:	463b      	mov	r3, r7
 8004f26:	aa03      	add	r2, sp, #12
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f7ff fef6 	bl	8004d1c <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d14d      	bne.n	8004fd0 <_printf_i+0x1c8>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	b005      	add	sp, #20
 8004f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f3e:	4839      	ldr	r0, [pc, #228]	; (8005024 <_printf_i+0x21c>)
 8004f40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f44:	6813      	ldr	r3, [r2, #0]
 8004f46:	6821      	ldr	r1, [r4, #0]
 8004f48:	1d1d      	adds	r5, r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6015      	str	r5, [r2, #0]
 8004f4e:	060a      	lsls	r2, r1, #24
 8004f50:	d50b      	bpl.n	8004f6a <_printf_i+0x162>
 8004f52:	07ca      	lsls	r2, r1, #31
 8004f54:	bf44      	itt	mi
 8004f56:	f041 0120 	orrmi.w	r1, r1, #32
 8004f5a:	6021      	strmi	r1, [r4, #0]
 8004f5c:	b91b      	cbnz	r3, 8004f66 <_printf_i+0x15e>
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	f022 0220 	bic.w	r2, r2, #32
 8004f64:	6022      	str	r2, [r4, #0]
 8004f66:	2210      	movs	r2, #16
 8004f68:	e7b7      	b.n	8004eda <_printf_i+0xd2>
 8004f6a:	064d      	lsls	r5, r1, #25
 8004f6c:	bf48      	it	mi
 8004f6e:	b29b      	uxthmi	r3, r3
 8004f70:	e7ef      	b.n	8004f52 <_printf_i+0x14a>
 8004f72:	4665      	mov	r5, ip
 8004f74:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f78:	fb02 3311 	mls	r3, r2, r1, r3
 8004f7c:	5cc3      	ldrb	r3, [r0, r3]
 8004f7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f82:	460b      	mov	r3, r1
 8004f84:	2900      	cmp	r1, #0
 8004f86:	d1f5      	bne.n	8004f74 <_printf_i+0x16c>
 8004f88:	e7b9      	b.n	8004efe <_printf_i+0xf6>
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	6825      	ldr	r5, [r4, #0]
 8004f8e:	1d18      	adds	r0, r3, #4
 8004f90:	6961      	ldr	r1, [r4, #20]
 8004f92:	6010      	str	r0, [r2, #0]
 8004f94:	0628      	lsls	r0, r5, #24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	d501      	bpl.n	8004f9e <_printf_i+0x196>
 8004f9a:	6019      	str	r1, [r3, #0]
 8004f9c:	e002      	b.n	8004fa4 <_printf_i+0x19c>
 8004f9e:	066a      	lsls	r2, r5, #25
 8004fa0:	d5fb      	bpl.n	8004f9a <_printf_i+0x192>
 8004fa2:	8019      	strh	r1, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4665      	mov	r5, ip
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	e7b9      	b.n	8004f20 <_printf_i+0x118>
 8004fac:	6813      	ldr	r3, [r2, #0]
 8004fae:	1d19      	adds	r1, r3, #4
 8004fb0:	6011      	str	r1, [r2, #0]
 8004fb2:	681d      	ldr	r5, [r3, #0]
 8004fb4:	6862      	ldr	r2, [r4, #4]
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f000 feaf 	bl	8005d1c <memchr>
 8004fbe:	b108      	cbz	r0, 8004fc4 <_printf_i+0x1bc>
 8004fc0:	1b40      	subs	r0, r0, r5
 8004fc2:	6060      	str	r0, [r4, #4]
 8004fc4:	6863      	ldr	r3, [r4, #4]
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fce:	e7a7      	b.n	8004f20 <_printf_i+0x118>
 8004fd0:	6923      	ldr	r3, [r4, #16]
 8004fd2:	462a      	mov	r2, r5
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	47c0      	blx	r8
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d0aa      	beq.n	8004f34 <_printf_i+0x12c>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	079b      	lsls	r3, r3, #30
 8004fe2:	d413      	bmi.n	800500c <_printf_i+0x204>
 8004fe4:	68e0      	ldr	r0, [r4, #12]
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	4298      	cmp	r0, r3
 8004fea:	bfb8      	it	lt
 8004fec:	4618      	movlt	r0, r3
 8004fee:	e7a3      	b.n	8004f38 <_printf_i+0x130>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	464a      	mov	r2, r9
 8004ff4:	4639      	mov	r1, r7
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	47c0      	blx	r8
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d09a      	beq.n	8004f34 <_printf_i+0x12c>
 8004ffe:	3501      	adds	r5, #1
 8005000:	68e3      	ldr	r3, [r4, #12]
 8005002:	9a03      	ldr	r2, [sp, #12]
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	42ab      	cmp	r3, r5
 8005008:	dcf2      	bgt.n	8004ff0 <_printf_i+0x1e8>
 800500a:	e7eb      	b.n	8004fe4 <_printf_i+0x1dc>
 800500c:	2500      	movs	r5, #0
 800500e:	f104 0919 	add.w	r9, r4, #25
 8005012:	e7f5      	b.n	8005000 <_printf_i+0x1f8>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1ac      	bne.n	8004f72 <_printf_i+0x16a>
 8005018:	7803      	ldrb	r3, [r0, #0]
 800501a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005022:	e76c      	b.n	8004efe <_printf_i+0xf6>
 8005024:	0800756a 	.word	0x0800756a
 8005028:	0800757b 	.word	0x0800757b

0800502c <siprintf>:
 800502c:	b40e      	push	{r1, r2, r3}
 800502e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005032:	b500      	push	{lr}
 8005034:	b09c      	sub	sp, #112	; 0x70
 8005036:	ab1d      	add	r3, sp, #116	; 0x74
 8005038:	9002      	str	r0, [sp, #8]
 800503a:	9006      	str	r0, [sp, #24]
 800503c:	9107      	str	r1, [sp, #28]
 800503e:	9104      	str	r1, [sp, #16]
 8005040:	4808      	ldr	r0, [pc, #32]	; (8005064 <siprintf+0x38>)
 8005042:	4909      	ldr	r1, [pc, #36]	; (8005068 <siprintf+0x3c>)
 8005044:	f853 2b04 	ldr.w	r2, [r3], #4
 8005048:	9105      	str	r1, [sp, #20]
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	a902      	add	r1, sp, #8
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	f001 fa5c 	bl	800650c <_svfiprintf_r>
 8005054:	2200      	movs	r2, #0
 8005056:	9b02      	ldr	r3, [sp, #8]
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	b01c      	add	sp, #112	; 0x70
 800505c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005060:	b003      	add	sp, #12
 8005062:	4770      	bx	lr
 8005064:	2000000c 	.word	0x2000000c
 8005068:	ffff0208 	.word	0xffff0208

0800506c <quorem>:
 800506c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	6903      	ldr	r3, [r0, #16]
 8005072:	690c      	ldr	r4, [r1, #16]
 8005074:	4680      	mov	r8, r0
 8005076:	42a3      	cmp	r3, r4
 8005078:	f2c0 8084 	blt.w	8005184 <quorem+0x118>
 800507c:	3c01      	subs	r4, #1
 800507e:	f101 0714 	add.w	r7, r1, #20
 8005082:	f100 0614 	add.w	r6, r0, #20
 8005086:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800508a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800508e:	3501      	adds	r5, #1
 8005090:	fbb0 f5f5 	udiv	r5, r0, r5
 8005094:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005098:	eb06 030c 	add.w	r3, r6, ip
 800509c:	eb07 090c 	add.w	r9, r7, ip
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	b39d      	cbz	r5, 800510c <quorem+0xa0>
 80050a4:	f04f 0a00 	mov.w	sl, #0
 80050a8:	4638      	mov	r0, r7
 80050aa:	46b6      	mov	lr, r6
 80050ac:	46d3      	mov	fp, sl
 80050ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80050b2:	b293      	uxth	r3, r2
 80050b4:	fb05 a303 	mla	r3, r5, r3, sl
 80050b8:	0c12      	lsrs	r2, r2, #16
 80050ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050be:	fb05 a202 	mla	r2, r5, r2, sl
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	ebab 0303 	sub.w	r3, fp, r3
 80050c8:	f8de b000 	ldr.w	fp, [lr]
 80050cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80050d0:	fa1f fb8b 	uxth.w	fp, fp
 80050d4:	445b      	add	r3, fp
 80050d6:	fa1f fb82 	uxth.w	fp, r2
 80050da:	f8de 2000 	ldr.w	r2, [lr]
 80050de:	4581      	cmp	r9, r0
 80050e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80050e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ee:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80050f2:	f84e 3b04 	str.w	r3, [lr], #4
 80050f6:	d2da      	bcs.n	80050ae <quorem+0x42>
 80050f8:	f856 300c 	ldr.w	r3, [r6, ip]
 80050fc:	b933      	cbnz	r3, 800510c <quorem+0xa0>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	3b04      	subs	r3, #4
 8005102:	429e      	cmp	r6, r3
 8005104:	461a      	mov	r2, r3
 8005106:	d331      	bcc.n	800516c <quorem+0x100>
 8005108:	f8c8 4010 	str.w	r4, [r8, #16]
 800510c:	4640      	mov	r0, r8
 800510e:	f001 f827 	bl	8006160 <__mcmp>
 8005112:	2800      	cmp	r0, #0
 8005114:	db26      	blt.n	8005164 <quorem+0xf8>
 8005116:	4630      	mov	r0, r6
 8005118:	f04f 0c00 	mov.w	ip, #0
 800511c:	3501      	adds	r5, #1
 800511e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005122:	f8d0 e000 	ldr.w	lr, [r0]
 8005126:	b28b      	uxth	r3, r1
 8005128:	ebac 0303 	sub.w	r3, ip, r3
 800512c:	fa1f f28e 	uxth.w	r2, lr
 8005130:	4413      	add	r3, r2
 8005132:	0c0a      	lsrs	r2, r1, #16
 8005134:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800513c:	b29b      	uxth	r3, r3
 800513e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005142:	45b9      	cmp	r9, r7
 8005144:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005148:	f840 3b04 	str.w	r3, [r0], #4
 800514c:	d2e7      	bcs.n	800511e <quorem+0xb2>
 800514e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005152:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005156:	b92a      	cbnz	r2, 8005164 <quorem+0xf8>
 8005158:	3b04      	subs	r3, #4
 800515a:	429e      	cmp	r6, r3
 800515c:	461a      	mov	r2, r3
 800515e:	d30b      	bcc.n	8005178 <quorem+0x10c>
 8005160:	f8c8 4010 	str.w	r4, [r8, #16]
 8005164:	4628      	mov	r0, r5
 8005166:	b003      	add	sp, #12
 8005168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	3b04      	subs	r3, #4
 8005170:	2a00      	cmp	r2, #0
 8005172:	d1c9      	bne.n	8005108 <quorem+0x9c>
 8005174:	3c01      	subs	r4, #1
 8005176:	e7c4      	b.n	8005102 <quorem+0x96>
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	3b04      	subs	r3, #4
 800517c:	2a00      	cmp	r2, #0
 800517e:	d1ef      	bne.n	8005160 <quorem+0xf4>
 8005180:	3c01      	subs	r4, #1
 8005182:	e7ea      	b.n	800515a <quorem+0xee>
 8005184:	2000      	movs	r0, #0
 8005186:	e7ee      	b.n	8005166 <quorem+0xfa>

08005188 <_dtoa_r>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	4616      	mov	r6, r2
 800518e:	461f      	mov	r7, r3
 8005190:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005192:	b095      	sub	sp, #84	; 0x54
 8005194:	4604      	mov	r4, r0
 8005196:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800519a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800519e:	b93d      	cbnz	r5, 80051b0 <_dtoa_r+0x28>
 80051a0:	2010      	movs	r0, #16
 80051a2:	f000 fdb3 	bl	8005d0c <malloc>
 80051a6:	6260      	str	r0, [r4, #36]	; 0x24
 80051a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051ac:	6005      	str	r5, [r0, #0]
 80051ae:	60c5      	str	r5, [r0, #12]
 80051b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	b151      	cbz	r1, 80051cc <_dtoa_r+0x44>
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	2301      	movs	r3, #1
 80051ba:	4093      	lsls	r3, r2
 80051bc:	604a      	str	r2, [r1, #4]
 80051be:	608b      	str	r3, [r1, #8]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 fded 	bl	8005da0 <_Bfree>
 80051c6:	2200      	movs	r2, #0
 80051c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	1e3b      	subs	r3, r7, #0
 80051ce:	bfaf      	iteee	ge
 80051d0:	2300      	movge	r3, #0
 80051d2:	2201      	movlt	r2, #1
 80051d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	9303      	strlt	r3, [sp, #12]
 80051da:	bfac      	ite	ge
 80051dc:	f8c8 3000 	strge.w	r3, [r8]
 80051e0:	f8c8 2000 	strlt.w	r2, [r8]
 80051e4:	4bae      	ldr	r3, [pc, #696]	; (80054a0 <_dtoa_r+0x318>)
 80051e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80051ea:	ea33 0308 	bics.w	r3, r3, r8
 80051ee:	d11b      	bne.n	8005228 <_dtoa_r+0xa0>
 80051f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80051f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	9b02      	ldr	r3, [sp, #8]
 80051fa:	b923      	cbnz	r3, 8005206 <_dtoa_r+0x7e>
 80051fc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005200:	2800      	cmp	r0, #0
 8005202:	f000 8545 	beq.w	8005c90 <_dtoa_r+0xb08>
 8005206:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005208:	b953      	cbnz	r3, 8005220 <_dtoa_r+0x98>
 800520a:	4ba6      	ldr	r3, [pc, #664]	; (80054a4 <_dtoa_r+0x31c>)
 800520c:	e021      	b.n	8005252 <_dtoa_r+0xca>
 800520e:	4ba6      	ldr	r3, [pc, #664]	; (80054a8 <_dtoa_r+0x320>)
 8005210:	9306      	str	r3, [sp, #24]
 8005212:	3308      	adds	r3, #8
 8005214:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	9806      	ldr	r0, [sp, #24]
 800521a:	b015      	add	sp, #84	; 0x54
 800521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005220:	4ba0      	ldr	r3, [pc, #640]	; (80054a4 <_dtoa_r+0x31c>)
 8005222:	9306      	str	r3, [sp, #24]
 8005224:	3303      	adds	r3, #3
 8005226:	e7f5      	b.n	8005214 <_dtoa_r+0x8c>
 8005228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005238:	4682      	mov	sl, r0
 800523a:	b160      	cbz	r0, 8005256 <_dtoa_r+0xce>
 800523c:	2301      	movs	r3, #1
 800523e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8520 	beq.w	8005c8a <_dtoa_r+0xb02>
 800524a:	4b98      	ldr	r3, [pc, #608]	; (80054ac <_dtoa_r+0x324>)
 800524c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	3b01      	subs	r3, #1
 8005252:	9306      	str	r3, [sp, #24]
 8005254:	e7e0      	b.n	8005218 <_dtoa_r+0x90>
 8005256:	ab12      	add	r3, sp, #72	; 0x48
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	ab13      	add	r3, sp, #76	; 0x4c
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	4632      	mov	r2, r6
 8005260:	463b      	mov	r3, r7
 8005262:	4620      	mov	r0, r4
 8005264:	f000 fff4 	bl	8006250 <__d2b>
 8005268:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800526c:	4683      	mov	fp, r0
 800526e:	2d00      	cmp	r5, #0
 8005270:	d07d      	beq.n	800536e <_dtoa_r+0x1e6>
 8005272:	46b0      	mov	r8, r6
 8005274:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005278:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800527c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005280:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005284:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005288:	2200      	movs	r2, #0
 800528a:	4b89      	ldr	r3, [pc, #548]	; (80054b0 <_dtoa_r+0x328>)
 800528c:	4640      	mov	r0, r8
 800528e:	4649      	mov	r1, r9
 8005290:	f7fa ff6a 	bl	8000168 <__aeabi_dsub>
 8005294:	a37c      	add	r3, pc, #496	; (adr r3, 8005488 <_dtoa_r+0x300>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7fb f91d 	bl	80004d8 <__aeabi_dmul>
 800529e:	a37c      	add	r3, pc, #496	; (adr r3, 8005490 <_dtoa_r+0x308>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fa ff62 	bl	800016c <__adddf3>
 80052a8:	4606      	mov	r6, r0
 80052aa:	4628      	mov	r0, r5
 80052ac:	460f      	mov	r7, r1
 80052ae:	f7fb f8a9 	bl	8000404 <__aeabi_i2d>
 80052b2:	a379      	add	r3, pc, #484	; (adr r3, 8005498 <_dtoa_r+0x310>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fb f90e 	bl	80004d8 <__aeabi_dmul>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	f7fa ff52 	bl	800016c <__adddf3>
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	f7fb fbb4 	bl	8000a38 <__aeabi_d2iz>
 80052d0:	2200      	movs	r2, #0
 80052d2:	4682      	mov	sl, r0
 80052d4:	2300      	movs	r3, #0
 80052d6:	4630      	mov	r0, r6
 80052d8:	4639      	mov	r1, r7
 80052da:	f7fb fb6f 	bl	80009bc <__aeabi_dcmplt>
 80052de:	b148      	cbz	r0, 80052f4 <_dtoa_r+0x16c>
 80052e0:	4650      	mov	r0, sl
 80052e2:	f7fb f88f 	bl	8000404 <__aeabi_i2d>
 80052e6:	4632      	mov	r2, r6
 80052e8:	463b      	mov	r3, r7
 80052ea:	f7fb fb5d 	bl	80009a8 <__aeabi_dcmpeq>
 80052ee:	b908      	cbnz	r0, 80052f4 <_dtoa_r+0x16c>
 80052f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052f4:	f1ba 0f16 	cmp.w	sl, #22
 80052f8:	d85a      	bhi.n	80053b0 <_dtoa_r+0x228>
 80052fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052fe:	496d      	ldr	r1, [pc, #436]	; (80054b4 <_dtoa_r+0x32c>)
 8005300:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005308:	f7fb fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800530c:	2800      	cmp	r0, #0
 800530e:	d051      	beq.n	80053b4 <_dtoa_r+0x22c>
 8005310:	2300      	movs	r3, #0
 8005312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005316:	930d      	str	r3, [sp, #52]	; 0x34
 8005318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800531a:	1b5d      	subs	r5, r3, r5
 800531c:	1e6b      	subs	r3, r5, #1
 800531e:	9307      	str	r3, [sp, #28]
 8005320:	bf43      	ittte	mi
 8005322:	2300      	movmi	r3, #0
 8005324:	f1c5 0901 	rsbmi	r9, r5, #1
 8005328:	9307      	strmi	r3, [sp, #28]
 800532a:	f04f 0900 	movpl.w	r9, #0
 800532e:	f1ba 0f00 	cmp.w	sl, #0
 8005332:	db41      	blt.n	80053b8 <_dtoa_r+0x230>
 8005334:	9b07      	ldr	r3, [sp, #28]
 8005336:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800533a:	4453      	add	r3, sl
 800533c:	9307      	str	r3, [sp, #28]
 800533e:	2300      	movs	r3, #0
 8005340:	9308      	str	r3, [sp, #32]
 8005342:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005344:	2b09      	cmp	r3, #9
 8005346:	f200 808f 	bhi.w	8005468 <_dtoa_r+0x2e0>
 800534a:	2b05      	cmp	r3, #5
 800534c:	bfc4      	itt	gt
 800534e:	3b04      	subgt	r3, #4
 8005350:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005352:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005354:	bfc8      	it	gt
 8005356:	2500      	movgt	r5, #0
 8005358:	f1a3 0302 	sub.w	r3, r3, #2
 800535c:	bfd8      	it	le
 800535e:	2501      	movle	r5, #1
 8005360:	2b03      	cmp	r3, #3
 8005362:	f200 808d 	bhi.w	8005480 <_dtoa_r+0x2f8>
 8005366:	e8df f003 	tbb	[pc, r3]
 800536a:	7d7b      	.short	0x7d7b
 800536c:	6f2f      	.short	0x6f2f
 800536e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005372:	441d      	add	r5, r3
 8005374:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005378:	2820      	cmp	r0, #32
 800537a:	dd13      	ble.n	80053a4 <_dtoa_r+0x21c>
 800537c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005380:	9b02      	ldr	r3, [sp, #8]
 8005382:	fa08 f800 	lsl.w	r8, r8, r0
 8005386:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800538a:	fa23 f000 	lsr.w	r0, r3, r0
 800538e:	ea48 0000 	orr.w	r0, r8, r0
 8005392:	f7fb f827 	bl	80003e4 <__aeabi_ui2d>
 8005396:	2301      	movs	r3, #1
 8005398:	4680      	mov	r8, r0
 800539a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800539e:	3d01      	subs	r5, #1
 80053a0:	9310      	str	r3, [sp, #64]	; 0x40
 80053a2:	e771      	b.n	8005288 <_dtoa_r+0x100>
 80053a4:	9b02      	ldr	r3, [sp, #8]
 80053a6:	f1c0 0020 	rsb	r0, r0, #32
 80053aa:	fa03 f000 	lsl.w	r0, r3, r0
 80053ae:	e7f0      	b.n	8005392 <_dtoa_r+0x20a>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e7b0      	b.n	8005316 <_dtoa_r+0x18e>
 80053b4:	900d      	str	r0, [sp, #52]	; 0x34
 80053b6:	e7af      	b.n	8005318 <_dtoa_r+0x190>
 80053b8:	f1ca 0300 	rsb	r3, sl, #0
 80053bc:	9308      	str	r3, [sp, #32]
 80053be:	2300      	movs	r3, #0
 80053c0:	eba9 090a 	sub.w	r9, r9, sl
 80053c4:	930c      	str	r3, [sp, #48]	; 0x30
 80053c6:	e7bc      	b.n	8005342 <_dtoa_r+0x1ba>
 80053c8:	2301      	movs	r3, #1
 80053ca:	9309      	str	r3, [sp, #36]	; 0x24
 80053cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd74      	ble.n	80054bc <_dtoa_r+0x334>
 80053d2:	4698      	mov	r8, r3
 80053d4:	9304      	str	r3, [sp, #16]
 80053d6:	2200      	movs	r2, #0
 80053d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053da:	6072      	str	r2, [r6, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	f102 0014 	add.w	r0, r2, #20
 80053e2:	4298      	cmp	r0, r3
 80053e4:	6871      	ldr	r1, [r6, #4]
 80053e6:	d96e      	bls.n	80054c6 <_dtoa_r+0x33e>
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fca5 	bl	8005d38 <_Balloc>
 80053ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f0:	6030      	str	r0, [r6, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f1b8 0f0e 	cmp.w	r8, #14
 80053f8:	9306      	str	r3, [sp, #24]
 80053fa:	f200 80ed 	bhi.w	80055d8 <_dtoa_r+0x450>
 80053fe:	2d00      	cmp	r5, #0
 8005400:	f000 80ea 	beq.w	80055d8 <_dtoa_r+0x450>
 8005404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005408:	f1ba 0f00 	cmp.w	sl, #0
 800540c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005410:	dd77      	ble.n	8005502 <_dtoa_r+0x37a>
 8005412:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <_dtoa_r+0x32c>)
 8005414:	f00a 030f 	and.w	r3, sl, #15
 8005418:	ea4f 162a 	mov.w	r6, sl, asr #4
 800541c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005420:	06f0      	lsls	r0, r6, #27
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800542a:	d568      	bpl.n	80054fe <_dtoa_r+0x376>
 800542c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005430:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <_dtoa_r+0x330>)
 8005432:	2503      	movs	r5, #3
 8005434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005438:	f7fb f978 	bl	800072c <__aeabi_ddiv>
 800543c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005440:	f006 060f 	and.w	r6, r6, #15
 8005444:	4f1c      	ldr	r7, [pc, #112]	; (80054b8 <_dtoa_r+0x330>)
 8005446:	e04f      	b.n	80054e8 <_dtoa_r+0x360>
 8005448:	2301      	movs	r3, #1
 800544a:	9309      	str	r3, [sp, #36]	; 0x24
 800544c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800544e:	4453      	add	r3, sl
 8005450:	f103 0801 	add.w	r8, r3, #1
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	4643      	mov	r3, r8
 8005458:	2b01      	cmp	r3, #1
 800545a:	bfb8      	it	lt
 800545c:	2301      	movlt	r3, #1
 800545e:	e7ba      	b.n	80053d6 <_dtoa_r+0x24e>
 8005460:	2300      	movs	r3, #0
 8005462:	e7b2      	b.n	80053ca <_dtoa_r+0x242>
 8005464:	2300      	movs	r3, #0
 8005466:	e7f0      	b.n	800544a <_dtoa_r+0x2c2>
 8005468:	2501      	movs	r5, #1
 800546a:	2300      	movs	r3, #0
 800546c:	9509      	str	r5, [sp, #36]	; 0x24
 800546e:	931e      	str	r3, [sp, #120]	; 0x78
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	2200      	movs	r2, #0
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	4698      	mov	r8, r3
 800547a:	2312      	movs	r3, #18
 800547c:	921f      	str	r2, [sp, #124]	; 0x7c
 800547e:	e7aa      	b.n	80053d6 <_dtoa_r+0x24e>
 8005480:	2301      	movs	r3, #1
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	e7f4      	b.n	8005470 <_dtoa_r+0x2e8>
 8005486:	bf00      	nop
 8005488:	636f4361 	.word	0x636f4361
 800548c:	3fd287a7 	.word	0x3fd287a7
 8005490:	8b60c8b3 	.word	0x8b60c8b3
 8005494:	3fc68a28 	.word	0x3fc68a28
 8005498:	509f79fb 	.word	0x509f79fb
 800549c:	3fd34413 	.word	0x3fd34413
 80054a0:	7ff00000 	.word	0x7ff00000
 80054a4:	08007595 	.word	0x08007595
 80054a8:	0800758c 	.word	0x0800758c
 80054ac:	08007569 	.word	0x08007569
 80054b0:	3ff80000 	.word	0x3ff80000
 80054b4:	080075c8 	.word	0x080075c8
 80054b8:	080075a0 	.word	0x080075a0
 80054bc:	2301      	movs	r3, #1
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	4698      	mov	r8, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	e7da      	b.n	800547c <_dtoa_r+0x2f4>
 80054c6:	3101      	adds	r1, #1
 80054c8:	6071      	str	r1, [r6, #4]
 80054ca:	0052      	lsls	r2, r2, #1
 80054cc:	e787      	b.n	80053de <_dtoa_r+0x256>
 80054ce:	07f1      	lsls	r1, r6, #31
 80054d0:	d508      	bpl.n	80054e4 <_dtoa_r+0x35c>
 80054d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054da:	f7fa fffd 	bl	80004d8 <__aeabi_dmul>
 80054de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054e2:	3501      	adds	r5, #1
 80054e4:	1076      	asrs	r6, r6, #1
 80054e6:	3708      	adds	r7, #8
 80054e8:	2e00      	cmp	r6, #0
 80054ea:	d1f0      	bne.n	80054ce <_dtoa_r+0x346>
 80054ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054f4:	f7fb f91a 	bl	800072c <__aeabi_ddiv>
 80054f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054fc:	e01b      	b.n	8005536 <_dtoa_r+0x3ae>
 80054fe:	2502      	movs	r5, #2
 8005500:	e7a0      	b.n	8005444 <_dtoa_r+0x2bc>
 8005502:	f000 80a4 	beq.w	800564e <_dtoa_r+0x4c6>
 8005506:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800550a:	f1ca 0600 	rsb	r6, sl, #0
 800550e:	4ba0      	ldr	r3, [pc, #640]	; (8005790 <_dtoa_r+0x608>)
 8005510:	f006 020f 	and.w	r2, r6, #15
 8005514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f7fa ffdc 	bl	80004d8 <__aeabi_dmul>
 8005520:	2502      	movs	r5, #2
 8005522:	2300      	movs	r3, #0
 8005524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005528:	4f9a      	ldr	r7, [pc, #616]	; (8005794 <_dtoa_r+0x60c>)
 800552a:	1136      	asrs	r6, r6, #4
 800552c:	2e00      	cmp	r6, #0
 800552e:	f040 8083 	bne.w	8005638 <_dtoa_r+0x4b0>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e0      	bne.n	80054f8 <_dtoa_r+0x370>
 8005536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 808a 	beq.w	8005652 <_dtoa_r+0x4ca>
 800553e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005542:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800554a:	2200      	movs	r2, #0
 800554c:	4b92      	ldr	r3, [pc, #584]	; (8005798 <_dtoa_r+0x610>)
 800554e:	f7fb fa35 	bl	80009bc <__aeabi_dcmplt>
 8005552:	2800      	cmp	r0, #0
 8005554:	d07d      	beq.n	8005652 <_dtoa_r+0x4ca>
 8005556:	f1b8 0f00 	cmp.w	r8, #0
 800555a:	d07a      	beq.n	8005652 <_dtoa_r+0x4ca>
 800555c:	9b04      	ldr	r3, [sp, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	dd36      	ble.n	80055d0 <_dtoa_r+0x448>
 8005562:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005566:	2200      	movs	r2, #0
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <_dtoa_r+0x614>)
 800556a:	f7fa ffb5 	bl	80004d8 <__aeabi_dmul>
 800556e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005572:	9e04      	ldr	r6, [sp, #16]
 8005574:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005578:	3501      	adds	r5, #1
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa ff42 	bl	8000404 <__aeabi_i2d>
 8005580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005584:	f7fa ffa8 	bl	80004d8 <__aeabi_dmul>
 8005588:	2200      	movs	r2, #0
 800558a:	4b85      	ldr	r3, [pc, #532]	; (80057a0 <_dtoa_r+0x618>)
 800558c:	f7fa fdee 	bl	800016c <__adddf3>
 8005590:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005594:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005598:	950b      	str	r5, [sp, #44]	; 0x2c
 800559a:	2e00      	cmp	r6, #0
 800559c:	d15c      	bne.n	8005658 <_dtoa_r+0x4d0>
 800559e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	4b7f      	ldr	r3, [pc, #508]	; (80057a4 <_dtoa_r+0x61c>)
 80055a6:	f7fa fddf 	bl	8000168 <__aeabi_dsub>
 80055aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ac:	462b      	mov	r3, r5
 80055ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b2:	f7fb fa21 	bl	80009f8 <__aeabi_dcmpgt>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f040 8281 	bne.w	8005abe <_dtoa_r+0x936>
 80055bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055c2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80055c6:	f7fb f9f9 	bl	80009bc <__aeabi_dcmplt>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f040 8275 	bne.w	8005aba <_dtoa_r+0x932>
 80055d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80055d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f2c0 814b 	blt.w	8005876 <_dtoa_r+0x6ee>
 80055e0:	f1ba 0f0e 	cmp.w	sl, #14
 80055e4:	f300 8147 	bgt.w	8005876 <_dtoa_r+0x6ee>
 80055e8:	4b69      	ldr	r3, [pc, #420]	; (8005790 <_dtoa_r+0x608>)
 80055ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f280 80d7 	bge.w	80057ac <_dtoa_r+0x624>
 80055fe:	f1b8 0f00 	cmp.w	r8, #0
 8005602:	f300 80d3 	bgt.w	80057ac <_dtoa_r+0x624>
 8005606:	f040 8257 	bne.w	8005ab8 <_dtoa_r+0x930>
 800560a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800560e:	2200      	movs	r2, #0
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <_dtoa_r+0x61c>)
 8005612:	f7fa ff61 	bl	80004d8 <__aeabi_dmul>
 8005616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561a:	f7fb f9e3 	bl	80009e4 <__aeabi_dcmpge>
 800561e:	4646      	mov	r6, r8
 8005620:	4647      	mov	r7, r8
 8005622:	2800      	cmp	r0, #0
 8005624:	f040 822d 	bne.w	8005a82 <_dtoa_r+0x8fa>
 8005628:	9b06      	ldr	r3, [sp, #24]
 800562a:	9a06      	ldr	r2, [sp, #24]
 800562c:	1c5d      	adds	r5, r3, #1
 800562e:	2331      	movs	r3, #49	; 0x31
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	7013      	strb	r3, [r2, #0]
 8005636:	e228      	b.n	8005a8a <_dtoa_r+0x902>
 8005638:	07f2      	lsls	r2, r6, #31
 800563a:	d505      	bpl.n	8005648 <_dtoa_r+0x4c0>
 800563c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005640:	f7fa ff4a 	bl	80004d8 <__aeabi_dmul>
 8005644:	2301      	movs	r3, #1
 8005646:	3501      	adds	r5, #1
 8005648:	1076      	asrs	r6, r6, #1
 800564a:	3708      	adds	r7, #8
 800564c:	e76e      	b.n	800552c <_dtoa_r+0x3a4>
 800564e:	2502      	movs	r5, #2
 8005650:	e771      	b.n	8005536 <_dtoa_r+0x3ae>
 8005652:	4657      	mov	r7, sl
 8005654:	4646      	mov	r6, r8
 8005656:	e790      	b.n	800557a <_dtoa_r+0x3f2>
 8005658:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <_dtoa_r+0x608>)
 800565a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800565e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d048      	beq.n	80056fa <_dtoa_r+0x572>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	2000      	movs	r0, #0
 800566e:	494e      	ldr	r1, [pc, #312]	; (80057a8 <_dtoa_r+0x620>)
 8005670:	f7fb f85c 	bl	800072c <__aeabi_ddiv>
 8005674:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005678:	f7fa fd76 	bl	8000168 <__aeabi_dsub>
 800567c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005680:	9d06      	ldr	r5, [sp, #24]
 8005682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005686:	f7fb f9d7 	bl	8000a38 <__aeabi_d2iz>
 800568a:	9011      	str	r0, [sp, #68]	; 0x44
 800568c:	f7fa feba 	bl	8000404 <__aeabi_i2d>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005698:	f7fa fd66 	bl	8000168 <__aeabi_dsub>
 800569c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800569e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a2:	3330      	adds	r3, #48	; 0x30
 80056a4:	f805 3b01 	strb.w	r3, [r5], #1
 80056a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056ac:	f7fb f986 	bl	80009bc <__aeabi_dcmplt>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d163      	bne.n	800577c <_dtoa_r+0x5f4>
 80056b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056b8:	2000      	movs	r0, #0
 80056ba:	4937      	ldr	r1, [pc, #220]	; (8005798 <_dtoa_r+0x610>)
 80056bc:	f7fa fd54 	bl	8000168 <__aeabi_dsub>
 80056c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056c4:	f7fb f97a 	bl	80009bc <__aeabi_dcmplt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f040 80b5 	bne.w	8005838 <_dtoa_r+0x6b0>
 80056ce:	9b06      	ldr	r3, [sp, #24]
 80056d0:	1aeb      	subs	r3, r5, r3
 80056d2:	429e      	cmp	r6, r3
 80056d4:	f77f af7c 	ble.w	80055d0 <_dtoa_r+0x448>
 80056d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056dc:	2200      	movs	r2, #0
 80056de:	4b2f      	ldr	r3, [pc, #188]	; (800579c <_dtoa_r+0x614>)
 80056e0:	f7fa fefa 	bl	80004d8 <__aeabi_dmul>
 80056e4:	2200      	movs	r2, #0
 80056e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <_dtoa_r+0x614>)
 80056f0:	f7fa fef2 	bl	80004d8 <__aeabi_dmul>
 80056f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056f8:	e7c3      	b.n	8005682 <_dtoa_r+0x4fa>
 80056fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056fe:	f7fa feeb 	bl	80004d8 <__aeabi_dmul>
 8005702:	9b06      	ldr	r3, [sp, #24]
 8005704:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005708:	199d      	adds	r5, r3, r6
 800570a:	461e      	mov	r6, r3
 800570c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005710:	f7fb f992 	bl	8000a38 <__aeabi_d2iz>
 8005714:	9011      	str	r0, [sp, #68]	; 0x44
 8005716:	f7fa fe75 	bl	8000404 <__aeabi_i2d>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005722:	f7fa fd21 	bl	8000168 <__aeabi_dsub>
 8005726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800572c:	3330      	adds	r3, #48	; 0x30
 800572e:	f806 3b01 	strb.w	r3, [r6], #1
 8005732:	42ae      	cmp	r6, r5
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	d124      	bne.n	8005784 <_dtoa_r+0x5fc>
 800573a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800573e:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <_dtoa_r+0x620>)
 8005740:	f7fa fd14 	bl	800016c <__adddf3>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800574c:	f7fb f954 	bl	80009f8 <__aeabi_dcmpgt>
 8005750:	2800      	cmp	r0, #0
 8005752:	d171      	bne.n	8005838 <_dtoa_r+0x6b0>
 8005754:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005758:	2000      	movs	r0, #0
 800575a:	4913      	ldr	r1, [pc, #76]	; (80057a8 <_dtoa_r+0x620>)
 800575c:	f7fa fd04 	bl	8000168 <__aeabi_dsub>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005768:	f7fb f928 	bl	80009bc <__aeabi_dcmplt>
 800576c:	2800      	cmp	r0, #0
 800576e:	f43f af2f 	beq.w	80055d0 <_dtoa_r+0x448>
 8005772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005776:	1e6a      	subs	r2, r5, #1
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d001      	beq.n	8005780 <_dtoa_r+0x5f8>
 800577c:	46ba      	mov	sl, r7
 800577e:	e04a      	b.n	8005816 <_dtoa_r+0x68e>
 8005780:	4615      	mov	r5, r2
 8005782:	e7f6      	b.n	8005772 <_dtoa_r+0x5ea>
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <_dtoa_r+0x614>)
 8005786:	f7fa fea7 	bl	80004d8 <__aeabi_dmul>
 800578a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800578e:	e7bd      	b.n	800570c <_dtoa_r+0x584>
 8005790:	080075c8 	.word	0x080075c8
 8005794:	080075a0 	.word	0x080075a0
 8005798:	3ff00000 	.word	0x3ff00000
 800579c:	40240000 	.word	0x40240000
 80057a0:	401c0000 	.word	0x401c0000
 80057a4:	40140000 	.word	0x40140000
 80057a8:	3fe00000 	.word	0x3fe00000
 80057ac:	9d06      	ldr	r5, [sp, #24]
 80057ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fa ffb7 	bl	800072c <__aeabi_ddiv>
 80057be:	f7fb f93b 	bl	8000a38 <__aeabi_d2iz>
 80057c2:	4681      	mov	r9, r0
 80057c4:	f7fa fe1e 	bl	8000404 <__aeabi_i2d>
 80057c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057cc:	f7fa fe84 	bl	80004d8 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fcc6 	bl	8000168 <__aeabi_dsub>
 80057dc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80057e0:	f805 6b01 	strb.w	r6, [r5], #1
 80057e4:	9e06      	ldr	r6, [sp, #24]
 80057e6:	4602      	mov	r2, r0
 80057e8:	1bae      	subs	r6, r5, r6
 80057ea:	45b0      	cmp	r8, r6
 80057ec:	460b      	mov	r3, r1
 80057ee:	d135      	bne.n	800585c <_dtoa_r+0x6d4>
 80057f0:	f7fa fcbc 	bl	800016c <__adddf3>
 80057f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f8:	4606      	mov	r6, r0
 80057fa:	460f      	mov	r7, r1
 80057fc:	f7fb f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 8005800:	b9c8      	cbnz	r0, 8005836 <_dtoa_r+0x6ae>
 8005802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005806:	4630      	mov	r0, r6
 8005808:	4639      	mov	r1, r7
 800580a:	f7fb f8cd 	bl	80009a8 <__aeabi_dcmpeq>
 800580e:	b110      	cbz	r0, 8005816 <_dtoa_r+0x68e>
 8005810:	f019 0f01 	tst.w	r9, #1
 8005814:	d10f      	bne.n	8005836 <_dtoa_r+0x6ae>
 8005816:	4659      	mov	r1, fp
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fac1 	bl	8005da0 <_Bfree>
 800581e:	2300      	movs	r3, #0
 8005820:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005822:	702b      	strb	r3, [r5, #0]
 8005824:	f10a 0301 	add.w	r3, sl, #1
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800582c:	2b00      	cmp	r3, #0
 800582e:	f43f acf3 	beq.w	8005218 <_dtoa_r+0x90>
 8005832:	601d      	str	r5, [r3, #0]
 8005834:	e4f0      	b.n	8005218 <_dtoa_r+0x90>
 8005836:	4657      	mov	r7, sl
 8005838:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800583c:	1e6b      	subs	r3, r5, #1
 800583e:	2a39      	cmp	r2, #57	; 0x39
 8005840:	d106      	bne.n	8005850 <_dtoa_r+0x6c8>
 8005842:	9a06      	ldr	r2, [sp, #24]
 8005844:	429a      	cmp	r2, r3
 8005846:	d107      	bne.n	8005858 <_dtoa_r+0x6d0>
 8005848:	2330      	movs	r3, #48	; 0x30
 800584a:	7013      	strb	r3, [r2, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	3701      	adds	r7, #1
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	3201      	adds	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e791      	b.n	800577c <_dtoa_r+0x5f4>
 8005858:	461d      	mov	r5, r3
 800585a:	e7ed      	b.n	8005838 <_dtoa_r+0x6b0>
 800585c:	2200      	movs	r2, #0
 800585e:	4b99      	ldr	r3, [pc, #612]	; (8005ac4 <_dtoa_r+0x93c>)
 8005860:	f7fa fe3a 	bl	80004d8 <__aeabi_dmul>
 8005864:	2200      	movs	r2, #0
 8005866:	2300      	movs	r3, #0
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	f7fb f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8005870:	2800      	cmp	r0, #0
 8005872:	d09e      	beq.n	80057b2 <_dtoa_r+0x62a>
 8005874:	e7cf      	b.n	8005816 <_dtoa_r+0x68e>
 8005876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005878:	2a00      	cmp	r2, #0
 800587a:	f000 8088 	beq.w	800598e <_dtoa_r+0x806>
 800587e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005880:	2a01      	cmp	r2, #1
 8005882:	dc6d      	bgt.n	8005960 <_dtoa_r+0x7d8>
 8005884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005886:	2a00      	cmp	r2, #0
 8005888:	d066      	beq.n	8005958 <_dtoa_r+0x7d0>
 800588a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800588e:	464d      	mov	r5, r9
 8005890:	9e08      	ldr	r6, [sp, #32]
 8005892:	9a07      	ldr	r2, [sp, #28]
 8005894:	2101      	movs	r1, #1
 8005896:	441a      	add	r2, r3
 8005898:	4620      	mov	r0, r4
 800589a:	4499      	add	r9, r3
 800589c:	9207      	str	r2, [sp, #28]
 800589e:	f000 fb1f 	bl	8005ee0 <__i2b>
 80058a2:	4607      	mov	r7, r0
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	dd0b      	ble.n	80058c0 <_dtoa_r+0x738>
 80058a8:	9b07      	ldr	r3, [sp, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	dd08      	ble.n	80058c0 <_dtoa_r+0x738>
 80058ae:	42ab      	cmp	r3, r5
 80058b0:	bfa8      	it	ge
 80058b2:	462b      	movge	r3, r5
 80058b4:	9a07      	ldr	r2, [sp, #28]
 80058b6:	eba9 0903 	sub.w	r9, r9, r3
 80058ba:	1aed      	subs	r5, r5, r3
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	9307      	str	r3, [sp, #28]
 80058c0:	9b08      	ldr	r3, [sp, #32]
 80058c2:	b1eb      	cbz	r3, 8005900 <_dtoa_r+0x778>
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d065      	beq.n	8005996 <_dtoa_r+0x80e>
 80058ca:	b18e      	cbz	r6, 80058f0 <_dtoa_r+0x768>
 80058cc:	4639      	mov	r1, r7
 80058ce:	4632      	mov	r2, r6
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fba3 	bl	800601c <__pow5mult>
 80058d6:	465a      	mov	r2, fp
 80058d8:	4601      	mov	r1, r0
 80058da:	4607      	mov	r7, r0
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fb08 	bl	8005ef2 <__multiply>
 80058e2:	4659      	mov	r1, fp
 80058e4:	900a      	str	r0, [sp, #40]	; 0x28
 80058e6:	4620      	mov	r0, r4
 80058e8:	f000 fa5a 	bl	8005da0 <_Bfree>
 80058ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ee:	469b      	mov	fp, r3
 80058f0:	9b08      	ldr	r3, [sp, #32]
 80058f2:	1b9a      	subs	r2, r3, r6
 80058f4:	d004      	beq.n	8005900 <_dtoa_r+0x778>
 80058f6:	4659      	mov	r1, fp
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fb8f 	bl	800601c <__pow5mult>
 80058fe:	4683      	mov	fp, r0
 8005900:	2101      	movs	r1, #1
 8005902:	4620      	mov	r0, r4
 8005904:	f000 faec 	bl	8005ee0 <__i2b>
 8005908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800590a:	4606      	mov	r6, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 81c6 	beq.w	8005c9e <_dtoa_r+0xb16>
 8005912:	461a      	mov	r2, r3
 8005914:	4601      	mov	r1, r0
 8005916:	4620      	mov	r0, r4
 8005918:	f000 fb80 	bl	800601c <__pow5mult>
 800591c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800591e:	4606      	mov	r6, r0
 8005920:	2b01      	cmp	r3, #1
 8005922:	dc3e      	bgt.n	80059a2 <_dtoa_r+0x81a>
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d137      	bne.n	800599a <_dtoa_r+0x812>
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005930:	2b00      	cmp	r3, #0
 8005932:	d134      	bne.n	800599e <_dtoa_r+0x816>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800593a:	0d1b      	lsrs	r3, r3, #20
 800593c:	051b      	lsls	r3, r3, #20
 800593e:	b12b      	cbz	r3, 800594c <_dtoa_r+0x7c4>
 8005940:	9b07      	ldr	r3, [sp, #28]
 8005942:	f109 0901 	add.w	r9, r9, #1
 8005946:	3301      	adds	r3, #1
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	2301      	movs	r3, #1
 800594c:	9308      	str	r3, [sp, #32]
 800594e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d128      	bne.n	80059a6 <_dtoa_r+0x81e>
 8005954:	2001      	movs	r0, #1
 8005956:	e02e      	b.n	80059b6 <_dtoa_r+0x82e>
 8005958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800595a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800595e:	e796      	b.n	800588e <_dtoa_r+0x706>
 8005960:	9b08      	ldr	r3, [sp, #32]
 8005962:	f108 36ff 	add.w	r6, r8, #4294967295
 8005966:	42b3      	cmp	r3, r6
 8005968:	bfb7      	itett	lt
 800596a:	9b08      	ldrlt	r3, [sp, #32]
 800596c:	1b9e      	subge	r6, r3, r6
 800596e:	1af2      	sublt	r2, r6, r3
 8005970:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005972:	bfbf      	itttt	lt
 8005974:	9608      	strlt	r6, [sp, #32]
 8005976:	189b      	addlt	r3, r3, r2
 8005978:	930c      	strlt	r3, [sp, #48]	; 0x30
 800597a:	2600      	movlt	r6, #0
 800597c:	f1b8 0f00 	cmp.w	r8, #0
 8005980:	bfb9      	ittee	lt
 8005982:	eba9 0508 	sublt.w	r5, r9, r8
 8005986:	2300      	movlt	r3, #0
 8005988:	464d      	movge	r5, r9
 800598a:	4643      	movge	r3, r8
 800598c:	e781      	b.n	8005892 <_dtoa_r+0x70a>
 800598e:	9e08      	ldr	r6, [sp, #32]
 8005990:	464d      	mov	r5, r9
 8005992:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005994:	e786      	b.n	80058a4 <_dtoa_r+0x71c>
 8005996:	9a08      	ldr	r2, [sp, #32]
 8005998:	e7ad      	b.n	80058f6 <_dtoa_r+0x76e>
 800599a:	2300      	movs	r3, #0
 800599c:	e7d6      	b.n	800594c <_dtoa_r+0x7c4>
 800599e:	9b02      	ldr	r3, [sp, #8]
 80059a0:	e7d4      	b.n	800594c <_dtoa_r+0x7c4>
 80059a2:	2300      	movs	r3, #0
 80059a4:	9308      	str	r3, [sp, #32]
 80059a6:	6933      	ldr	r3, [r6, #16]
 80059a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059ac:	6918      	ldr	r0, [r3, #16]
 80059ae:	f000 fa49 	bl	8005e44 <__hi0bits>
 80059b2:	f1c0 0020 	rsb	r0, r0, #32
 80059b6:	9b07      	ldr	r3, [sp, #28]
 80059b8:	4418      	add	r0, r3
 80059ba:	f010 001f 	ands.w	r0, r0, #31
 80059be:	d047      	beq.n	8005a50 <_dtoa_r+0x8c8>
 80059c0:	f1c0 0320 	rsb	r3, r0, #32
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	dd3b      	ble.n	8005a40 <_dtoa_r+0x8b8>
 80059c8:	9b07      	ldr	r3, [sp, #28]
 80059ca:	f1c0 001c 	rsb	r0, r0, #28
 80059ce:	4481      	add	r9, r0
 80059d0:	4405      	add	r5, r0
 80059d2:	4403      	add	r3, r0
 80059d4:	9307      	str	r3, [sp, #28]
 80059d6:	f1b9 0f00 	cmp.w	r9, #0
 80059da:	dd05      	ble.n	80059e8 <_dtoa_r+0x860>
 80059dc:	4659      	mov	r1, fp
 80059de:	464a      	mov	r2, r9
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 fb69 	bl	80060b8 <__lshift>
 80059e6:	4683      	mov	fp, r0
 80059e8:	9b07      	ldr	r3, [sp, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dd05      	ble.n	80059fa <_dtoa_r+0x872>
 80059ee:	4631      	mov	r1, r6
 80059f0:	461a      	mov	r2, r3
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fb60 	bl	80060b8 <__lshift>
 80059f8:	4606      	mov	r6, r0
 80059fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059fc:	b353      	cbz	r3, 8005a54 <_dtoa_r+0x8cc>
 80059fe:	4631      	mov	r1, r6
 8005a00:	4658      	mov	r0, fp
 8005a02:	f000 fbad 	bl	8006160 <__mcmp>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	da24      	bge.n	8005a54 <_dtoa_r+0x8cc>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	220a      	movs	r2, #10
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 f9dc 	bl	8005dce <__multadd>
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a1c:	4683      	mov	fp, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8144 	beq.w	8005cac <_dtoa_r+0xb24>
 8005a24:	2300      	movs	r3, #0
 8005a26:	4639      	mov	r1, r7
 8005a28:	220a      	movs	r2, #10
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f9cf 	bl	8005dce <__multadd>
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	4607      	mov	r7, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dc4d      	bgt.n	8005ad4 <_dtoa_r+0x94c>
 8005a38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	dd4a      	ble.n	8005ad4 <_dtoa_r+0x94c>
 8005a3e:	e011      	b.n	8005a64 <_dtoa_r+0x8dc>
 8005a40:	d0c9      	beq.n	80059d6 <_dtoa_r+0x84e>
 8005a42:	9a07      	ldr	r2, [sp, #28]
 8005a44:	331c      	adds	r3, #28
 8005a46:	441a      	add	r2, r3
 8005a48:	4499      	add	r9, r3
 8005a4a:	441d      	add	r5, r3
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	e7c1      	b.n	80059d4 <_dtoa_r+0x84c>
 8005a50:	4603      	mov	r3, r0
 8005a52:	e7f6      	b.n	8005a42 <_dtoa_r+0x8ba>
 8005a54:	f1b8 0f00 	cmp.w	r8, #0
 8005a58:	dc36      	bgt.n	8005ac8 <_dtoa_r+0x940>
 8005a5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	dd33      	ble.n	8005ac8 <_dtoa_r+0x940>
 8005a60:	f8cd 8010 	str.w	r8, [sp, #16]
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	b963      	cbnz	r3, 8005a82 <_dtoa_r+0x8fa>
 8005a68:	4631      	mov	r1, r6
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 f9ae 	bl	8005dce <__multadd>
 8005a72:	4601      	mov	r1, r0
 8005a74:	4606      	mov	r6, r0
 8005a76:	4658      	mov	r0, fp
 8005a78:	f000 fb72 	bl	8006160 <__mcmp>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f73f add3 	bgt.w	8005628 <_dtoa_r+0x4a0>
 8005a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a84:	9d06      	ldr	r5, [sp, #24]
 8005a86:	ea6f 0a03 	mvn.w	sl, r3
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 f985 	bl	8005da0 <_Bfree>
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	f43f aebd 	beq.w	8005816 <_dtoa_r+0x68e>
 8005a9c:	f1b9 0f00 	cmp.w	r9, #0
 8005aa0:	d005      	beq.n	8005aae <_dtoa_r+0x926>
 8005aa2:	45b9      	cmp	r9, r7
 8005aa4:	d003      	beq.n	8005aae <_dtoa_r+0x926>
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f979 	bl	8005da0 <_Bfree>
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f975 	bl	8005da0 <_Bfree>
 8005ab6:	e6ae      	b.n	8005816 <_dtoa_r+0x68e>
 8005ab8:	2600      	movs	r6, #0
 8005aba:	4637      	mov	r7, r6
 8005abc:	e7e1      	b.n	8005a82 <_dtoa_r+0x8fa>
 8005abe:	46ba      	mov	sl, r7
 8005ac0:	4637      	mov	r7, r6
 8005ac2:	e5b1      	b.n	8005628 <_dtoa_r+0x4a0>
 8005ac4:	40240000 	.word	0x40240000
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80f3 	beq.w	8005cba <_dtoa_r+0xb32>
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	dd05      	ble.n	8005ae4 <_dtoa_r+0x95c>
 8005ad8:	4639      	mov	r1, r7
 8005ada:	462a      	mov	r2, r5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 faeb 	bl	80060b8 <__lshift>
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	9b08      	ldr	r3, [sp, #32]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04c      	beq.n	8005b84 <_dtoa_r+0x9fc>
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f923 	bl	8005d38 <_Balloc>
 8005af2:	4605      	mov	r5, r0
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	f107 010c 	add.w	r1, r7, #12
 8005afa:	3202      	adds	r2, #2
 8005afc:	0092      	lsls	r2, r2, #2
 8005afe:	300c      	adds	r0, #12
 8005b00:	f7fe fe32 	bl	8004768 <memcpy>
 8005b04:	2201      	movs	r2, #1
 8005b06:	4629      	mov	r1, r5
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fad5 	bl	80060b8 <__lshift>
 8005b0e:	46b9      	mov	r9, r7
 8005b10:	4607      	mov	r7, r0
 8005b12:	9b06      	ldr	r3, [sp, #24]
 8005b14:	9307      	str	r3, [sp, #28]
 8005b16:	9b02      	ldr	r3, [sp, #8]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	9308      	str	r3, [sp, #32]
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4658      	mov	r0, fp
 8005b22:	f7ff faa3 	bl	800506c <quorem>
 8005b26:	4649      	mov	r1, r9
 8005b28:	4605      	mov	r5, r0
 8005b2a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b2e:	4658      	mov	r0, fp
 8005b30:	f000 fb16 	bl	8006160 <__mcmp>
 8005b34:	463a      	mov	r2, r7
 8005b36:	9002      	str	r0, [sp, #8]
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fb2a 	bl	8006194 <__mdiff>
 8005b40:	68c3      	ldr	r3, [r0, #12]
 8005b42:	4602      	mov	r2, r0
 8005b44:	bb03      	cbnz	r3, 8005b88 <_dtoa_r+0xa00>
 8005b46:	4601      	mov	r1, r0
 8005b48:	9009      	str	r0, [sp, #36]	; 0x24
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	f000 fb08 	bl	8006160 <__mcmp>
 8005b50:	4603      	mov	r3, r0
 8005b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b54:	4611      	mov	r1, r2
 8005b56:	4620      	mov	r0, r4
 8005b58:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5a:	f000 f921 	bl	8005da0 <_Bfree>
 8005b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b60:	b9a3      	cbnz	r3, 8005b8c <_dtoa_r+0xa04>
 8005b62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b64:	b992      	cbnz	r2, 8005b8c <_dtoa_r+0xa04>
 8005b66:	9a08      	ldr	r2, [sp, #32]
 8005b68:	b982      	cbnz	r2, 8005b8c <_dtoa_r+0xa04>
 8005b6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b6e:	d029      	beq.n	8005bc4 <_dtoa_r+0xa3c>
 8005b70:	9b02      	ldr	r3, [sp, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	dd01      	ble.n	8005b7a <_dtoa_r+0x9f2>
 8005b76:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005b7a:	9b07      	ldr	r3, [sp, #28]
 8005b7c:	1c5d      	adds	r5, r3, #1
 8005b7e:	f883 8000 	strb.w	r8, [r3]
 8005b82:	e784      	b.n	8005a8e <_dtoa_r+0x906>
 8005b84:	4638      	mov	r0, r7
 8005b86:	e7c2      	b.n	8005b0e <_dtoa_r+0x986>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e7e3      	b.n	8005b54 <_dtoa_r+0x9cc>
 8005b8c:	9a02      	ldr	r2, [sp, #8]
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	db04      	blt.n	8005b9c <_dtoa_r+0xa14>
 8005b92:	d123      	bne.n	8005bdc <_dtoa_r+0xa54>
 8005b94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b96:	bb0a      	cbnz	r2, 8005bdc <_dtoa_r+0xa54>
 8005b98:	9a08      	ldr	r2, [sp, #32]
 8005b9a:	b9fa      	cbnz	r2, 8005bdc <_dtoa_r+0xa54>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	ddec      	ble.n	8005b7a <_dtoa_r+0x9f2>
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fa87 	bl	80060b8 <__lshift>
 8005baa:	4631      	mov	r1, r6
 8005bac:	4683      	mov	fp, r0
 8005bae:	f000 fad7 	bl	8006160 <__mcmp>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	dc03      	bgt.n	8005bbe <_dtoa_r+0xa36>
 8005bb6:	d1e0      	bne.n	8005b7a <_dtoa_r+0x9f2>
 8005bb8:	f018 0f01 	tst.w	r8, #1
 8005bbc:	d0dd      	beq.n	8005b7a <_dtoa_r+0x9f2>
 8005bbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bc2:	d1d8      	bne.n	8005b76 <_dtoa_r+0x9ee>
 8005bc4:	9b07      	ldr	r3, [sp, #28]
 8005bc6:	9a07      	ldr	r2, [sp, #28]
 8005bc8:	1c5d      	adds	r5, r3, #1
 8005bca:	2339      	movs	r3, #57	; 0x39
 8005bcc:	7013      	strb	r3, [r2, #0]
 8005bce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bd2:	1e6a      	subs	r2, r5, #1
 8005bd4:	2b39      	cmp	r3, #57	; 0x39
 8005bd6:	d04d      	beq.n	8005c74 <_dtoa_r+0xaec>
 8005bd8:	3301      	adds	r3, #1
 8005bda:	e052      	b.n	8005c82 <_dtoa_r+0xafa>
 8005bdc:	9a07      	ldr	r2, [sp, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f102 0501 	add.w	r5, r2, #1
 8005be4:	dd06      	ble.n	8005bf4 <_dtoa_r+0xa6c>
 8005be6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bea:	d0eb      	beq.n	8005bc4 <_dtoa_r+0xa3c>
 8005bec:	f108 0801 	add.w	r8, r8, #1
 8005bf0:	9b07      	ldr	r3, [sp, #28]
 8005bf2:	e7c4      	b.n	8005b7e <_dtoa_r+0x9f6>
 8005bf4:	9b06      	ldr	r3, [sp, #24]
 8005bf6:	9a04      	ldr	r2, [sp, #16]
 8005bf8:	1aeb      	subs	r3, r5, r3
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c00:	d021      	beq.n	8005c46 <_dtoa_r+0xabe>
 8005c02:	4659      	mov	r1, fp
 8005c04:	2300      	movs	r3, #0
 8005c06:	220a      	movs	r2, #10
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 f8e0 	bl	8005dce <__multadd>
 8005c0e:	45b9      	cmp	r9, r7
 8005c10:	4683      	mov	fp, r0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	f04f 020a 	mov.w	r2, #10
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	d105      	bne.n	8005c2c <_dtoa_r+0xaa4>
 8005c20:	f000 f8d5 	bl	8005dce <__multadd>
 8005c24:	4681      	mov	r9, r0
 8005c26:	4607      	mov	r7, r0
 8005c28:	9507      	str	r5, [sp, #28]
 8005c2a:	e778      	b.n	8005b1e <_dtoa_r+0x996>
 8005c2c:	f000 f8cf 	bl	8005dce <__multadd>
 8005c30:	4639      	mov	r1, r7
 8005c32:	4681      	mov	r9, r0
 8005c34:	2300      	movs	r3, #0
 8005c36:	220a      	movs	r2, #10
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 f8c8 	bl	8005dce <__multadd>
 8005c3e:	4607      	mov	r7, r0
 8005c40:	e7f2      	b.n	8005c28 <_dtoa_r+0xaa0>
 8005c42:	f04f 0900 	mov.w	r9, #0
 8005c46:	4659      	mov	r1, fp
 8005c48:	2201      	movs	r2, #1
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fa34 	bl	80060b8 <__lshift>
 8005c50:	4631      	mov	r1, r6
 8005c52:	4683      	mov	fp, r0
 8005c54:	f000 fa84 	bl	8006160 <__mcmp>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	dcb8      	bgt.n	8005bce <_dtoa_r+0xa46>
 8005c5c:	d102      	bne.n	8005c64 <_dtoa_r+0xadc>
 8005c5e:	f018 0f01 	tst.w	r8, #1
 8005c62:	d1b4      	bne.n	8005bce <_dtoa_r+0xa46>
 8005c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c68:	1e6a      	subs	r2, r5, #1
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	f47f af0f 	bne.w	8005a8e <_dtoa_r+0x906>
 8005c70:	4615      	mov	r5, r2
 8005c72:	e7f7      	b.n	8005c64 <_dtoa_r+0xadc>
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d105      	bne.n	8005c86 <_dtoa_r+0xafe>
 8005c7a:	2331      	movs	r3, #49	; 0x31
 8005c7c:	9a06      	ldr	r2, [sp, #24]
 8005c7e:	f10a 0a01 	add.w	sl, sl, #1
 8005c82:	7013      	strb	r3, [r2, #0]
 8005c84:	e703      	b.n	8005a8e <_dtoa_r+0x906>
 8005c86:	4615      	mov	r5, r2
 8005c88:	e7a1      	b.n	8005bce <_dtoa_r+0xa46>
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <_dtoa_r+0xb60>)
 8005c8c:	f7ff bae1 	b.w	8005252 <_dtoa_r+0xca>
 8005c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f aabb 	bne.w	800520e <_dtoa_r+0x86>
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <_dtoa_r+0xb64>)
 8005c9a:	f7ff bada 	b.w	8005252 <_dtoa_r+0xca>
 8005c9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	f77f ae3f 	ble.w	8005924 <_dtoa_r+0x79c>
 8005ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ca8:	9308      	str	r3, [sp, #32]
 8005caa:	e653      	b.n	8005954 <_dtoa_r+0x7cc>
 8005cac:	9b04      	ldr	r3, [sp, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dc03      	bgt.n	8005cba <_dtoa_r+0xb32>
 8005cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	f73f aed5 	bgt.w	8005a64 <_dtoa_r+0x8dc>
 8005cba:	9d06      	ldr	r5, [sp, #24]
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4658      	mov	r0, fp
 8005cc0:	f7ff f9d4 	bl	800506c <quorem>
 8005cc4:	9b06      	ldr	r3, [sp, #24]
 8005cc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cca:	f805 8b01 	strb.w	r8, [r5], #1
 8005cce:	9a04      	ldr	r2, [sp, #16]
 8005cd0:	1aeb      	subs	r3, r5, r3
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	ddb5      	ble.n	8005c42 <_dtoa_r+0xaba>
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	2300      	movs	r3, #0
 8005cda:	220a      	movs	r2, #10
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 f876 	bl	8005dce <__multadd>
 8005ce2:	4683      	mov	fp, r0
 8005ce4:	e7ea      	b.n	8005cbc <_dtoa_r+0xb34>
 8005ce6:	bf00      	nop
 8005ce8:	08007568 	.word	0x08007568
 8005cec:	0800758c 	.word	0x0800758c

08005cf0 <_localeconv_r>:
 8005cf0:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <_localeconv_r+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a18      	ldr	r0, [r3, #32]
 8005cf6:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <_localeconv_r+0x18>)
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	bf08      	it	eq
 8005cfc:	4618      	moveq	r0, r3
 8005cfe:	30f0      	adds	r0, #240	; 0xf0
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	20000070 	.word	0x20000070

08005d0c <malloc>:
 8005d0c:	4b02      	ldr	r3, [pc, #8]	; (8005d18 <malloc+0xc>)
 8005d0e:	4601      	mov	r1, r0
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f000 bb47 	b.w	80063a4 <_malloc_r>
 8005d16:	bf00      	nop
 8005d18:	2000000c 	.word	0x2000000c

08005d1c <memchr>:
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	b2c9      	uxtb	r1, r1
 8005d20:	4402      	add	r2, r0
 8005d22:	4290      	cmp	r0, r2
 8005d24:	4603      	mov	r3, r0
 8005d26:	d101      	bne.n	8005d2c <memchr+0x10>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e003      	b.n	8005d34 <memchr+0x18>
 8005d2c:	781c      	ldrb	r4, [r3, #0]
 8005d2e:	3001      	adds	r0, #1
 8005d30:	428c      	cmp	r4, r1
 8005d32:	d1f6      	bne.n	8005d22 <memchr+0x6>
 8005d34:	4618      	mov	r0, r3
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <_Balloc>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	460e      	mov	r6, r1
 8005d40:	b93d      	cbnz	r5, 8005d52 <_Balloc+0x1a>
 8005d42:	2010      	movs	r0, #16
 8005d44:	f7ff ffe2 	bl	8005d0c <malloc>
 8005d48:	6260      	str	r0, [r4, #36]	; 0x24
 8005d4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d4e:	6005      	str	r5, [r0, #0]
 8005d50:	60c5      	str	r5, [r0, #12]
 8005d52:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d54:	68eb      	ldr	r3, [r5, #12]
 8005d56:	b183      	cbz	r3, 8005d7a <_Balloc+0x42>
 8005d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d60:	b9b8      	cbnz	r0, 8005d92 <_Balloc+0x5a>
 8005d62:	2101      	movs	r1, #1
 8005d64:	fa01 f506 	lsl.w	r5, r1, r6
 8005d68:	1d6a      	adds	r2, r5, #5
 8005d6a:	0092      	lsls	r2, r2, #2
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fabe 	bl	80062ee <_calloc_r>
 8005d72:	b160      	cbz	r0, 8005d8e <_Balloc+0x56>
 8005d74:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005d78:	e00e      	b.n	8005d98 <_Balloc+0x60>
 8005d7a:	2221      	movs	r2, #33	; 0x21
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 fab5 	bl	80062ee <_calloc_r>
 8005d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d86:	60e8      	str	r0, [r5, #12]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e4      	bne.n	8005d58 <_Balloc+0x20>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
 8005d92:	6802      	ldr	r2, [r0, #0]
 8005d94:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d9e:	e7f7      	b.n	8005d90 <_Balloc+0x58>

08005da0 <_Bfree>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005da4:	4606      	mov	r6, r0
 8005da6:	460d      	mov	r5, r1
 8005da8:	b93c      	cbnz	r4, 8005dba <_Bfree+0x1a>
 8005daa:	2010      	movs	r0, #16
 8005dac:	f7ff ffae 	bl	8005d0c <malloc>
 8005db0:	6270      	str	r0, [r6, #36]	; 0x24
 8005db2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005db6:	6004      	str	r4, [r0, #0]
 8005db8:	60c4      	str	r4, [r0, #12]
 8005dba:	b13d      	cbz	r5, 8005dcc <_Bfree+0x2c>
 8005dbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005dbe:	686a      	ldr	r2, [r5, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dc6:	6029      	str	r1, [r5, #0]
 8005dc8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}

08005dce <__multadd>:
 8005dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	2300      	movs	r3, #0
 8005dda:	690d      	ldr	r5, [r1, #16]
 8005ddc:	f101 0c14 	add.w	ip, r1, #20
 8005de0:	f8dc 0000 	ldr.w	r0, [ip]
 8005de4:	3301      	adds	r3, #1
 8005de6:	b281      	uxth	r1, r0
 8005de8:	fb02 7101 	mla	r1, r2, r1, r7
 8005dec:	0c00      	lsrs	r0, r0, #16
 8005dee:	0c0f      	lsrs	r7, r1, #16
 8005df0:	fb02 7000 	mla	r0, r2, r0, r7
 8005df4:	b289      	uxth	r1, r1
 8005df6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e00:	f84c 1b04 	str.w	r1, [ip], #4
 8005e04:	dcec      	bgt.n	8005de0 <__multadd+0x12>
 8005e06:	b1d7      	cbz	r7, 8005e3e <__multadd+0x70>
 8005e08:	68a3      	ldr	r3, [r4, #8]
 8005e0a:	42ab      	cmp	r3, r5
 8005e0c:	dc12      	bgt.n	8005e34 <__multadd+0x66>
 8005e0e:	6861      	ldr	r1, [r4, #4]
 8005e10:	4630      	mov	r0, r6
 8005e12:	3101      	adds	r1, #1
 8005e14:	f7ff ff90 	bl	8005d38 <_Balloc>
 8005e18:	4680      	mov	r8, r0
 8005e1a:	6922      	ldr	r2, [r4, #16]
 8005e1c:	f104 010c 	add.w	r1, r4, #12
 8005e20:	3202      	adds	r2, #2
 8005e22:	0092      	lsls	r2, r2, #2
 8005e24:	300c      	adds	r0, #12
 8005e26:	f7fe fc9f 	bl	8004768 <memcpy>
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff ffb7 	bl	8005da0 <_Bfree>
 8005e32:	4644      	mov	r4, r8
 8005e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e38:	3501      	adds	r5, #1
 8005e3a:	615f      	str	r7, [r3, #20]
 8005e3c:	6125      	str	r5, [r4, #16]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e44 <__hi0bits>:
 8005e44:	0c02      	lsrs	r2, r0, #16
 8005e46:	0412      	lsls	r2, r2, #16
 8005e48:	4603      	mov	r3, r0
 8005e4a:	b9b2      	cbnz	r2, 8005e7a <__hi0bits+0x36>
 8005e4c:	0403      	lsls	r3, r0, #16
 8005e4e:	2010      	movs	r0, #16
 8005e50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e54:	bf04      	itt	eq
 8005e56:	021b      	lsleq	r3, r3, #8
 8005e58:	3008      	addeq	r0, #8
 8005e5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e5e:	bf04      	itt	eq
 8005e60:	011b      	lsleq	r3, r3, #4
 8005e62:	3004      	addeq	r0, #4
 8005e64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e68:	bf04      	itt	eq
 8005e6a:	009b      	lsleq	r3, r3, #2
 8005e6c:	3002      	addeq	r0, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	db06      	blt.n	8005e80 <__hi0bits+0x3c>
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	d503      	bpl.n	8005e7e <__hi0bits+0x3a>
 8005e76:	3001      	adds	r0, #1
 8005e78:	4770      	bx	lr
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e7e8      	b.n	8005e50 <__hi0bits+0xc>
 8005e7e:	2020      	movs	r0, #32
 8005e80:	4770      	bx	lr

08005e82 <__lo0bits>:
 8005e82:	6803      	ldr	r3, [r0, #0]
 8005e84:	4601      	mov	r1, r0
 8005e86:	f013 0207 	ands.w	r2, r3, #7
 8005e8a:	d00b      	beq.n	8005ea4 <__lo0bits+0x22>
 8005e8c:	07da      	lsls	r2, r3, #31
 8005e8e:	d423      	bmi.n	8005ed8 <__lo0bits+0x56>
 8005e90:	0798      	lsls	r0, r3, #30
 8005e92:	bf49      	itett	mi
 8005e94:	085b      	lsrmi	r3, r3, #1
 8005e96:	089b      	lsrpl	r3, r3, #2
 8005e98:	2001      	movmi	r0, #1
 8005e9a:	600b      	strmi	r3, [r1, #0]
 8005e9c:	bf5c      	itt	pl
 8005e9e:	600b      	strpl	r3, [r1, #0]
 8005ea0:	2002      	movpl	r0, #2
 8005ea2:	4770      	bx	lr
 8005ea4:	b298      	uxth	r0, r3
 8005ea6:	b9a8      	cbnz	r0, 8005ed4 <__lo0bits+0x52>
 8005ea8:	2010      	movs	r0, #16
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005eb0:	bf04      	itt	eq
 8005eb2:	0a1b      	lsreq	r3, r3, #8
 8005eb4:	3008      	addeq	r0, #8
 8005eb6:	071a      	lsls	r2, r3, #28
 8005eb8:	bf04      	itt	eq
 8005eba:	091b      	lsreq	r3, r3, #4
 8005ebc:	3004      	addeq	r0, #4
 8005ebe:	079a      	lsls	r2, r3, #30
 8005ec0:	bf04      	itt	eq
 8005ec2:	089b      	lsreq	r3, r3, #2
 8005ec4:	3002      	addeq	r0, #2
 8005ec6:	07da      	lsls	r2, r3, #31
 8005ec8:	d402      	bmi.n	8005ed0 <__lo0bits+0x4e>
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	d006      	beq.n	8005edc <__lo0bits+0x5a>
 8005ece:	3001      	adds	r0, #1
 8005ed0:	600b      	str	r3, [r1, #0]
 8005ed2:	4770      	bx	lr
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	e7e9      	b.n	8005eac <__lo0bits+0x2a>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	4770      	bx	lr
 8005edc:	2020      	movs	r0, #32
 8005ede:	4770      	bx	lr

08005ee0 <__i2b>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	f7ff ff27 	bl	8005d38 <_Balloc>
 8005eea:	2201      	movs	r2, #1
 8005eec:	6144      	str	r4, [r0, #20]
 8005eee:	6102      	str	r2, [r0, #16]
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <__multiply>:
 8005ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	690a      	ldr	r2, [r1, #16]
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	4688      	mov	r8, r1
 8005efe:	429a      	cmp	r2, r3
 8005f00:	bfbe      	ittt	lt
 8005f02:	460b      	movlt	r3, r1
 8005f04:	46a0      	movlt	r8, r4
 8005f06:	461c      	movlt	r4, r3
 8005f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f18:	eb07 0609 	add.w	r6, r7, r9
 8005f1c:	42b3      	cmp	r3, r6
 8005f1e:	bfb8      	it	lt
 8005f20:	3101      	addlt	r1, #1
 8005f22:	f7ff ff09 	bl	8005d38 <_Balloc>
 8005f26:	f100 0514 	add.w	r5, r0, #20
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f32:	4573      	cmp	r3, lr
 8005f34:	d316      	bcc.n	8005f64 <__multiply+0x72>
 8005f36:	f104 0214 	add.w	r2, r4, #20
 8005f3a:	f108 0114 	add.w	r1, r8, #20
 8005f3e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f42:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	9b00      	ldr	r3, [sp, #0]
 8005f4a:	9201      	str	r2, [sp, #4]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d80c      	bhi.n	8005f6a <__multiply+0x78>
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	dd03      	ble.n	8005f5c <__multiply+0x6a>
 8005f54:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d05d      	beq.n	8006018 <__multiply+0x126>
 8005f5c:	6106      	str	r6, [r0, #16]
 8005f5e:	b003      	add	sp, #12
 8005f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f64:	f843 2b04 	str.w	r2, [r3], #4
 8005f68:	e7e3      	b.n	8005f32 <__multiply+0x40>
 8005f6a:	f8b2 b000 	ldrh.w	fp, [r2]
 8005f6e:	f1bb 0f00 	cmp.w	fp, #0
 8005f72:	d023      	beq.n	8005fbc <__multiply+0xca>
 8005f74:	4689      	mov	r9, r1
 8005f76:	46ac      	mov	ip, r5
 8005f78:	f04f 0800 	mov.w	r8, #0
 8005f7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f80:	f8dc a000 	ldr.w	sl, [ip]
 8005f84:	b2a3      	uxth	r3, r4
 8005f86:	fa1f fa8a 	uxth.w	sl, sl
 8005f8a:	fb0b a303 	mla	r3, fp, r3, sl
 8005f8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f92:	f8dc 4000 	ldr.w	r4, [ip]
 8005f96:	4443      	add	r3, r8
 8005f98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f9c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005fa0:	46e2      	mov	sl, ip
 8005fa2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fac:	454f      	cmp	r7, r9
 8005fae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fb2:	f84a 3b04 	str.w	r3, [sl], #4
 8005fb6:	d82b      	bhi.n	8006010 <__multiply+0x11e>
 8005fb8:	f8cc 8004 	str.w	r8, [ip, #4]
 8005fbc:	9b01      	ldr	r3, [sp, #4]
 8005fbe:	3204      	adds	r2, #4
 8005fc0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005fc4:	f1ba 0f00 	cmp.w	sl, #0
 8005fc8:	d020      	beq.n	800600c <__multiply+0x11a>
 8005fca:	4689      	mov	r9, r1
 8005fcc:	46a8      	mov	r8, r5
 8005fce:	f04f 0b00 	mov.w	fp, #0
 8005fd2:	682b      	ldr	r3, [r5, #0]
 8005fd4:	f8b9 c000 	ldrh.w	ip, [r9]
 8005fd8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	fb0a 440c 	mla	r4, sl, ip, r4
 8005fe2:	46c4      	mov	ip, r8
 8005fe4:	445c      	add	r4, fp
 8005fe6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fea:	f84c 3b04 	str.w	r3, [ip], #4
 8005fee:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ff2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005ff6:	0c1b      	lsrs	r3, r3, #16
 8005ff8:	fb0a b303 	mla	r3, sl, r3, fp
 8005ffc:	454f      	cmp	r7, r9
 8005ffe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006002:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006006:	d805      	bhi.n	8006014 <__multiply+0x122>
 8006008:	f8c8 3004 	str.w	r3, [r8, #4]
 800600c:	3504      	adds	r5, #4
 800600e:	e79b      	b.n	8005f48 <__multiply+0x56>
 8006010:	46d4      	mov	ip, sl
 8006012:	e7b3      	b.n	8005f7c <__multiply+0x8a>
 8006014:	46e0      	mov	r8, ip
 8006016:	e7dd      	b.n	8005fd4 <__multiply+0xe2>
 8006018:	3e01      	subs	r6, #1
 800601a:	e799      	b.n	8005f50 <__multiply+0x5e>

0800601c <__pow5mult>:
 800601c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006020:	4615      	mov	r5, r2
 8006022:	f012 0203 	ands.w	r2, r2, #3
 8006026:	4606      	mov	r6, r0
 8006028:	460f      	mov	r7, r1
 800602a:	d007      	beq.n	800603c <__pow5mult+0x20>
 800602c:	4c21      	ldr	r4, [pc, #132]	; (80060b4 <__pow5mult+0x98>)
 800602e:	3a01      	subs	r2, #1
 8006030:	2300      	movs	r3, #0
 8006032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006036:	f7ff feca 	bl	8005dce <__multadd>
 800603a:	4607      	mov	r7, r0
 800603c:	10ad      	asrs	r5, r5, #2
 800603e:	d035      	beq.n	80060ac <__pow5mult+0x90>
 8006040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006042:	b93c      	cbnz	r4, 8006054 <__pow5mult+0x38>
 8006044:	2010      	movs	r0, #16
 8006046:	f7ff fe61 	bl	8005d0c <malloc>
 800604a:	6270      	str	r0, [r6, #36]	; 0x24
 800604c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006050:	6004      	str	r4, [r0, #0]
 8006052:	60c4      	str	r4, [r0, #12]
 8006054:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800605c:	b94c      	cbnz	r4, 8006072 <__pow5mult+0x56>
 800605e:	f240 2171 	movw	r1, #625	; 0x271
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff ff3c 	bl	8005ee0 <__i2b>
 8006068:	2300      	movs	r3, #0
 800606a:	4604      	mov	r4, r0
 800606c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006070:	6003      	str	r3, [r0, #0]
 8006072:	f04f 0800 	mov.w	r8, #0
 8006076:	07eb      	lsls	r3, r5, #31
 8006078:	d50a      	bpl.n	8006090 <__pow5mult+0x74>
 800607a:	4639      	mov	r1, r7
 800607c:	4622      	mov	r2, r4
 800607e:	4630      	mov	r0, r6
 8006080:	f7ff ff37 	bl	8005ef2 <__multiply>
 8006084:	4681      	mov	r9, r0
 8006086:	4639      	mov	r1, r7
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff fe89 	bl	8005da0 <_Bfree>
 800608e:	464f      	mov	r7, r9
 8006090:	106d      	asrs	r5, r5, #1
 8006092:	d00b      	beq.n	80060ac <__pow5mult+0x90>
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	b938      	cbnz	r0, 80060a8 <__pow5mult+0x8c>
 8006098:	4622      	mov	r2, r4
 800609a:	4621      	mov	r1, r4
 800609c:	4630      	mov	r0, r6
 800609e:	f7ff ff28 	bl	8005ef2 <__multiply>
 80060a2:	6020      	str	r0, [r4, #0]
 80060a4:	f8c0 8000 	str.w	r8, [r0]
 80060a8:	4604      	mov	r4, r0
 80060aa:	e7e4      	b.n	8006076 <__pow5mult+0x5a>
 80060ac:	4638      	mov	r0, r7
 80060ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b2:	bf00      	nop
 80060b4:	08007690 	.word	0x08007690

080060b8 <__lshift>:
 80060b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060bc:	460c      	mov	r4, r1
 80060be:	4607      	mov	r7, r0
 80060c0:	4616      	mov	r6, r2
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060c8:	eb0a 0903 	add.w	r9, sl, r3
 80060cc:	6849      	ldr	r1, [r1, #4]
 80060ce:	68a3      	ldr	r3, [r4, #8]
 80060d0:	f109 0501 	add.w	r5, r9, #1
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	db32      	blt.n	800613e <__lshift+0x86>
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff fe2d 	bl	8005d38 <_Balloc>
 80060de:	2300      	movs	r3, #0
 80060e0:	4680      	mov	r8, r0
 80060e2:	461a      	mov	r2, r3
 80060e4:	f100 0114 	add.w	r1, r0, #20
 80060e8:	4553      	cmp	r3, sl
 80060ea:	db2b      	blt.n	8006144 <__lshift+0x8c>
 80060ec:	6920      	ldr	r0, [r4, #16]
 80060ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060f2:	f104 0314 	add.w	r3, r4, #20
 80060f6:	f016 021f 	ands.w	r2, r6, #31
 80060fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006102:	d025      	beq.n	8006150 <__lshift+0x98>
 8006104:	2000      	movs	r0, #0
 8006106:	f1c2 0e20 	rsb	lr, r2, #32
 800610a:	468a      	mov	sl, r1
 800610c:	681e      	ldr	r6, [r3, #0]
 800610e:	4096      	lsls	r6, r2
 8006110:	4330      	orrs	r0, r6
 8006112:	f84a 0b04 	str.w	r0, [sl], #4
 8006116:	f853 0b04 	ldr.w	r0, [r3], #4
 800611a:	459c      	cmp	ip, r3
 800611c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006120:	d814      	bhi.n	800614c <__lshift+0x94>
 8006122:	6048      	str	r0, [r1, #4]
 8006124:	b108      	cbz	r0, 800612a <__lshift+0x72>
 8006126:	f109 0502 	add.w	r5, r9, #2
 800612a:	3d01      	subs	r5, #1
 800612c:	4638      	mov	r0, r7
 800612e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006132:	4621      	mov	r1, r4
 8006134:	f7ff fe34 	bl	8005da0 <_Bfree>
 8006138:	4640      	mov	r0, r8
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	3101      	adds	r1, #1
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	e7c7      	b.n	80060d4 <__lshift+0x1c>
 8006144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006148:	3301      	adds	r3, #1
 800614a:	e7cd      	b.n	80060e8 <__lshift+0x30>
 800614c:	4651      	mov	r1, sl
 800614e:	e7dc      	b.n	800610a <__lshift+0x52>
 8006150:	3904      	subs	r1, #4
 8006152:	f853 2b04 	ldr.w	r2, [r3], #4
 8006156:	459c      	cmp	ip, r3
 8006158:	f841 2f04 	str.w	r2, [r1, #4]!
 800615c:	d8f9      	bhi.n	8006152 <__lshift+0x9a>
 800615e:	e7e4      	b.n	800612a <__lshift+0x72>

08006160 <__mcmp>:
 8006160:	6903      	ldr	r3, [r0, #16]
 8006162:	690a      	ldr	r2, [r1, #16]
 8006164:	b530      	push	{r4, r5, lr}
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	d10c      	bne.n	8006184 <__mcmp+0x24>
 800616a:	0092      	lsls	r2, r2, #2
 800616c:	3014      	adds	r0, #20
 800616e:	3114      	adds	r1, #20
 8006170:	1884      	adds	r4, r0, r2
 8006172:	4411      	add	r1, r2
 8006174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800617c:	4295      	cmp	r5, r2
 800617e:	d003      	beq.n	8006188 <__mcmp+0x28>
 8006180:	d305      	bcc.n	800618e <__mcmp+0x2e>
 8006182:	2301      	movs	r3, #1
 8006184:	4618      	mov	r0, r3
 8006186:	bd30      	pop	{r4, r5, pc}
 8006188:	42a0      	cmp	r0, r4
 800618a:	d3f3      	bcc.n	8006174 <__mcmp+0x14>
 800618c:	e7fa      	b.n	8006184 <__mcmp+0x24>
 800618e:	f04f 33ff 	mov.w	r3, #4294967295
 8006192:	e7f7      	b.n	8006184 <__mcmp+0x24>

08006194 <__mdiff>:
 8006194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	460d      	mov	r5, r1
 800619a:	4607      	mov	r7, r0
 800619c:	4611      	mov	r1, r2
 800619e:	4628      	mov	r0, r5
 80061a0:	4614      	mov	r4, r2
 80061a2:	f7ff ffdd 	bl	8006160 <__mcmp>
 80061a6:	1e06      	subs	r6, r0, #0
 80061a8:	d108      	bne.n	80061bc <__mdiff+0x28>
 80061aa:	4631      	mov	r1, r6
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff fdc3 	bl	8005d38 <_Balloc>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061bc:	bfa4      	itt	ge
 80061be:	4623      	movge	r3, r4
 80061c0:	462c      	movge	r4, r5
 80061c2:	4638      	mov	r0, r7
 80061c4:	6861      	ldr	r1, [r4, #4]
 80061c6:	bfa6      	itte	ge
 80061c8:	461d      	movge	r5, r3
 80061ca:	2600      	movge	r6, #0
 80061cc:	2601      	movlt	r6, #1
 80061ce:	f7ff fdb3 	bl	8005d38 <_Balloc>
 80061d2:	f04f 0e00 	mov.w	lr, #0
 80061d6:	60c6      	str	r6, [r0, #12]
 80061d8:	692b      	ldr	r3, [r5, #16]
 80061da:	6926      	ldr	r6, [r4, #16]
 80061dc:	f104 0214 	add.w	r2, r4, #20
 80061e0:	f105 0914 	add.w	r9, r5, #20
 80061e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80061e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80061ec:	f100 0114 	add.w	r1, r0, #20
 80061f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80061f4:	f859 5b04 	ldr.w	r5, [r9], #4
 80061f8:	fa1f f38a 	uxth.w	r3, sl
 80061fc:	4473      	add	r3, lr
 80061fe:	b2ac      	uxth	r4, r5
 8006200:	1b1b      	subs	r3, r3, r4
 8006202:	0c2c      	lsrs	r4, r5, #16
 8006204:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006208:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800620c:	b29b      	uxth	r3, r3
 800620e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006212:	45c8      	cmp	r8, r9
 8006214:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006218:	4694      	mov	ip, r2
 800621a:	f841 4b04 	str.w	r4, [r1], #4
 800621e:	d8e7      	bhi.n	80061f0 <__mdiff+0x5c>
 8006220:	45bc      	cmp	ip, r7
 8006222:	d304      	bcc.n	800622e <__mdiff+0x9a>
 8006224:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006228:	b183      	cbz	r3, 800624c <__mdiff+0xb8>
 800622a:	6106      	str	r6, [r0, #16]
 800622c:	e7c4      	b.n	80061b8 <__mdiff+0x24>
 800622e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006232:	b2a2      	uxth	r2, r4
 8006234:	4472      	add	r2, lr
 8006236:	1413      	asrs	r3, r2, #16
 8006238:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800623c:	b292      	uxth	r2, r2
 800623e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006242:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006246:	f841 2b04 	str.w	r2, [r1], #4
 800624a:	e7e9      	b.n	8006220 <__mdiff+0x8c>
 800624c:	3e01      	subs	r6, #1
 800624e:	e7e9      	b.n	8006224 <__mdiff+0x90>

08006250 <__d2b>:
 8006250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006254:	461c      	mov	r4, r3
 8006256:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800625a:	2101      	movs	r1, #1
 800625c:	4690      	mov	r8, r2
 800625e:	f7ff fd6b 	bl	8005d38 <_Balloc>
 8006262:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006266:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800626a:	4607      	mov	r7, r0
 800626c:	bb34      	cbnz	r4, 80062bc <__d2b+0x6c>
 800626e:	9201      	str	r2, [sp, #4]
 8006270:	f1b8 0200 	subs.w	r2, r8, #0
 8006274:	d027      	beq.n	80062c6 <__d2b+0x76>
 8006276:	a802      	add	r0, sp, #8
 8006278:	f840 2d08 	str.w	r2, [r0, #-8]!
 800627c:	f7ff fe01 	bl	8005e82 <__lo0bits>
 8006280:	9900      	ldr	r1, [sp, #0]
 8006282:	b1f0      	cbz	r0, 80062c2 <__d2b+0x72>
 8006284:	9a01      	ldr	r2, [sp, #4]
 8006286:	f1c0 0320 	rsb	r3, r0, #32
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	430b      	orrs	r3, r1
 8006290:	40c2      	lsrs	r2, r0
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	9201      	str	r2, [sp, #4]
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bf14      	ite	ne
 800629c:	2102      	movne	r1, #2
 800629e:	2101      	moveq	r1, #1
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	6139      	str	r1, [r7, #16]
 80062a4:	b1c4      	cbz	r4, 80062d8 <__d2b+0x88>
 80062a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80062aa:	4404      	add	r4, r0
 80062ac:	6034      	str	r4, [r6, #0]
 80062ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062b2:	6028      	str	r0, [r5, #0]
 80062b4:	4638      	mov	r0, r7
 80062b6:	b002      	add	sp, #8
 80062b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062c0:	e7d5      	b.n	800626e <__d2b+0x1e>
 80062c2:	6179      	str	r1, [r7, #20]
 80062c4:	e7e7      	b.n	8006296 <__d2b+0x46>
 80062c6:	a801      	add	r0, sp, #4
 80062c8:	f7ff fddb 	bl	8005e82 <__lo0bits>
 80062cc:	2101      	movs	r1, #1
 80062ce:	9b01      	ldr	r3, [sp, #4]
 80062d0:	6139      	str	r1, [r7, #16]
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	3020      	adds	r0, #32
 80062d6:	e7e5      	b.n	80062a4 <__d2b+0x54>
 80062d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80062e0:	6030      	str	r0, [r6, #0]
 80062e2:	6918      	ldr	r0, [r3, #16]
 80062e4:	f7ff fdae 	bl	8005e44 <__hi0bits>
 80062e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80062ec:	e7e1      	b.n	80062b2 <__d2b+0x62>

080062ee <_calloc_r>:
 80062ee:	b538      	push	{r3, r4, r5, lr}
 80062f0:	fb02 f401 	mul.w	r4, r2, r1
 80062f4:	4621      	mov	r1, r4
 80062f6:	f000 f855 	bl	80063a4 <_malloc_r>
 80062fa:	4605      	mov	r5, r0
 80062fc:	b118      	cbz	r0, 8006306 <_calloc_r+0x18>
 80062fe:	4622      	mov	r2, r4
 8006300:	2100      	movs	r1, #0
 8006302:	f7fe fa3c 	bl	800477e <memset>
 8006306:	4628      	mov	r0, r5
 8006308:	bd38      	pop	{r3, r4, r5, pc}
	...

0800630c <_free_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4605      	mov	r5, r0
 8006310:	2900      	cmp	r1, #0
 8006312:	d043      	beq.n	800639c <_free_r+0x90>
 8006314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006318:	1f0c      	subs	r4, r1, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	bfb8      	it	lt
 800631e:	18e4      	addlt	r4, r4, r3
 8006320:	f000 fa27 	bl	8006772 <__malloc_lock>
 8006324:	4a1e      	ldr	r2, [pc, #120]	; (80063a0 <_free_r+0x94>)
 8006326:	6813      	ldr	r3, [r2, #0]
 8006328:	4610      	mov	r0, r2
 800632a:	b933      	cbnz	r3, 800633a <_free_r+0x2e>
 800632c:	6063      	str	r3, [r4, #4]
 800632e:	6014      	str	r4, [r2, #0]
 8006330:	4628      	mov	r0, r5
 8006332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006336:	f000 ba1d 	b.w	8006774 <__malloc_unlock>
 800633a:	42a3      	cmp	r3, r4
 800633c:	d90b      	bls.n	8006356 <_free_r+0x4a>
 800633e:	6821      	ldr	r1, [r4, #0]
 8006340:	1862      	adds	r2, r4, r1
 8006342:	4293      	cmp	r3, r2
 8006344:	bf01      	itttt	eq
 8006346:	681a      	ldreq	r2, [r3, #0]
 8006348:	685b      	ldreq	r3, [r3, #4]
 800634a:	1852      	addeq	r2, r2, r1
 800634c:	6022      	streq	r2, [r4, #0]
 800634e:	6063      	str	r3, [r4, #4]
 8006350:	6004      	str	r4, [r0, #0]
 8006352:	e7ed      	b.n	8006330 <_free_r+0x24>
 8006354:	4613      	mov	r3, r2
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	b10a      	cbz	r2, 800635e <_free_r+0x52>
 800635a:	42a2      	cmp	r2, r4
 800635c:	d9fa      	bls.n	8006354 <_free_r+0x48>
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	1858      	adds	r0, r3, r1
 8006362:	42a0      	cmp	r0, r4
 8006364:	d10b      	bne.n	800637e <_free_r+0x72>
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	4401      	add	r1, r0
 800636a:	1858      	adds	r0, r3, r1
 800636c:	4282      	cmp	r2, r0
 800636e:	6019      	str	r1, [r3, #0]
 8006370:	d1de      	bne.n	8006330 <_free_r+0x24>
 8006372:	6810      	ldr	r0, [r2, #0]
 8006374:	6852      	ldr	r2, [r2, #4]
 8006376:	4401      	add	r1, r0
 8006378:	6019      	str	r1, [r3, #0]
 800637a:	605a      	str	r2, [r3, #4]
 800637c:	e7d8      	b.n	8006330 <_free_r+0x24>
 800637e:	d902      	bls.n	8006386 <_free_r+0x7a>
 8006380:	230c      	movs	r3, #12
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	e7d4      	b.n	8006330 <_free_r+0x24>
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1821      	adds	r1, r4, r0
 800638a:	428a      	cmp	r2, r1
 800638c:	bf01      	itttt	eq
 800638e:	6811      	ldreq	r1, [r2, #0]
 8006390:	6852      	ldreq	r2, [r2, #4]
 8006392:	1809      	addeq	r1, r1, r0
 8006394:	6021      	streq	r1, [r4, #0]
 8006396:	6062      	str	r2, [r4, #4]
 8006398:	605c      	str	r4, [r3, #4]
 800639a:	e7c9      	b.n	8006330 <_free_r+0x24>
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	bf00      	nop
 80063a0:	20000208 	.word	0x20000208

080063a4 <_malloc_r>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	1ccd      	adds	r5, r1, #3
 80063a8:	f025 0503 	bic.w	r5, r5, #3
 80063ac:	3508      	adds	r5, #8
 80063ae:	2d0c      	cmp	r5, #12
 80063b0:	bf38      	it	cc
 80063b2:	250c      	movcc	r5, #12
 80063b4:	2d00      	cmp	r5, #0
 80063b6:	4606      	mov	r6, r0
 80063b8:	db01      	blt.n	80063be <_malloc_r+0x1a>
 80063ba:	42a9      	cmp	r1, r5
 80063bc:	d903      	bls.n	80063c6 <_malloc_r+0x22>
 80063be:	230c      	movs	r3, #12
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	2000      	movs	r0, #0
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	f000 f9d4 	bl	8006772 <__malloc_lock>
 80063ca:	4a21      	ldr	r2, [pc, #132]	; (8006450 <_malloc_r+0xac>)
 80063cc:	6814      	ldr	r4, [r2, #0]
 80063ce:	4621      	mov	r1, r4
 80063d0:	b991      	cbnz	r1, 80063f8 <_malloc_r+0x54>
 80063d2:	4c20      	ldr	r4, [pc, #128]	; (8006454 <_malloc_r+0xb0>)
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	b91b      	cbnz	r3, 80063e0 <_malloc_r+0x3c>
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 f98f 	bl	80066fc <_sbrk_r>
 80063de:	6020      	str	r0, [r4, #0]
 80063e0:	4629      	mov	r1, r5
 80063e2:	4630      	mov	r0, r6
 80063e4:	f000 f98a 	bl	80066fc <_sbrk_r>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d124      	bne.n	8006436 <_malloc_r+0x92>
 80063ec:	230c      	movs	r3, #12
 80063ee:	4630      	mov	r0, r6
 80063f0:	6033      	str	r3, [r6, #0]
 80063f2:	f000 f9bf 	bl	8006774 <__malloc_unlock>
 80063f6:	e7e4      	b.n	80063c2 <_malloc_r+0x1e>
 80063f8:	680b      	ldr	r3, [r1, #0]
 80063fa:	1b5b      	subs	r3, r3, r5
 80063fc:	d418      	bmi.n	8006430 <_malloc_r+0x8c>
 80063fe:	2b0b      	cmp	r3, #11
 8006400:	d90f      	bls.n	8006422 <_malloc_r+0x7e>
 8006402:	600b      	str	r3, [r1, #0]
 8006404:	18cc      	adds	r4, r1, r3
 8006406:	50cd      	str	r5, [r1, r3]
 8006408:	4630      	mov	r0, r6
 800640a:	f000 f9b3 	bl	8006774 <__malloc_unlock>
 800640e:	f104 000b 	add.w	r0, r4, #11
 8006412:	1d23      	adds	r3, r4, #4
 8006414:	f020 0007 	bic.w	r0, r0, #7
 8006418:	1ac3      	subs	r3, r0, r3
 800641a:	d0d3      	beq.n	80063c4 <_malloc_r+0x20>
 800641c:	425a      	negs	r2, r3
 800641e:	50e2      	str	r2, [r4, r3]
 8006420:	e7d0      	b.n	80063c4 <_malloc_r+0x20>
 8006422:	684b      	ldr	r3, [r1, #4]
 8006424:	428c      	cmp	r4, r1
 8006426:	bf16      	itet	ne
 8006428:	6063      	strne	r3, [r4, #4]
 800642a:	6013      	streq	r3, [r2, #0]
 800642c:	460c      	movne	r4, r1
 800642e:	e7eb      	b.n	8006408 <_malloc_r+0x64>
 8006430:	460c      	mov	r4, r1
 8006432:	6849      	ldr	r1, [r1, #4]
 8006434:	e7cc      	b.n	80063d0 <_malloc_r+0x2c>
 8006436:	1cc4      	adds	r4, r0, #3
 8006438:	f024 0403 	bic.w	r4, r4, #3
 800643c:	42a0      	cmp	r0, r4
 800643e:	d005      	beq.n	800644c <_malloc_r+0xa8>
 8006440:	1a21      	subs	r1, r4, r0
 8006442:	4630      	mov	r0, r6
 8006444:	f000 f95a 	bl	80066fc <_sbrk_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d0cf      	beq.n	80063ec <_malloc_r+0x48>
 800644c:	6025      	str	r5, [r4, #0]
 800644e:	e7db      	b.n	8006408 <_malloc_r+0x64>
 8006450:	20000208 	.word	0x20000208
 8006454:	2000020c 	.word	0x2000020c

08006458 <__ssputs_r>:
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	688e      	ldr	r6, [r1, #8]
 800645e:	4682      	mov	sl, r0
 8006460:	429e      	cmp	r6, r3
 8006462:	460c      	mov	r4, r1
 8006464:	4690      	mov	r8, r2
 8006466:	4699      	mov	r9, r3
 8006468:	d837      	bhi.n	80064da <__ssputs_r+0x82>
 800646a:	898a      	ldrh	r2, [r1, #12]
 800646c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006470:	d031      	beq.n	80064d6 <__ssputs_r+0x7e>
 8006472:	2302      	movs	r3, #2
 8006474:	6825      	ldr	r5, [r4, #0]
 8006476:	6909      	ldr	r1, [r1, #16]
 8006478:	1a6f      	subs	r7, r5, r1
 800647a:	6965      	ldr	r5, [r4, #20]
 800647c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006480:	fb95 f5f3 	sdiv	r5, r5, r3
 8006484:	f109 0301 	add.w	r3, r9, #1
 8006488:	443b      	add	r3, r7
 800648a:	429d      	cmp	r5, r3
 800648c:	bf38      	it	cc
 800648e:	461d      	movcc	r5, r3
 8006490:	0553      	lsls	r3, r2, #21
 8006492:	d530      	bpl.n	80064f6 <__ssputs_r+0x9e>
 8006494:	4629      	mov	r1, r5
 8006496:	f7ff ff85 	bl	80063a4 <_malloc_r>
 800649a:	4606      	mov	r6, r0
 800649c:	b950      	cbnz	r0, 80064b4 <__ssputs_r+0x5c>
 800649e:	230c      	movs	r3, #12
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	f8ca 3000 	str.w	r3, [sl]
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b4:	463a      	mov	r2, r7
 80064b6:	6921      	ldr	r1, [r4, #16]
 80064b8:	f7fe f956 	bl	8004768 <memcpy>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	6126      	str	r6, [r4, #16]
 80064ca:	443e      	add	r6, r7
 80064cc:	6026      	str	r6, [r4, #0]
 80064ce:	464e      	mov	r6, r9
 80064d0:	6165      	str	r5, [r4, #20]
 80064d2:	1bed      	subs	r5, r5, r7
 80064d4:	60a5      	str	r5, [r4, #8]
 80064d6:	454e      	cmp	r6, r9
 80064d8:	d900      	bls.n	80064dc <__ssputs_r+0x84>
 80064da:	464e      	mov	r6, r9
 80064dc:	4632      	mov	r2, r6
 80064de:	4641      	mov	r1, r8
 80064e0:	6820      	ldr	r0, [r4, #0]
 80064e2:	f000 f92d 	bl	8006740 <memmove>
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	2000      	movs	r0, #0
 80064ea:	1b9b      	subs	r3, r3, r6
 80064ec:	60a3      	str	r3, [r4, #8]
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	441e      	add	r6, r3
 80064f2:	6026      	str	r6, [r4, #0]
 80064f4:	e7dc      	b.n	80064b0 <__ssputs_r+0x58>
 80064f6:	462a      	mov	r2, r5
 80064f8:	f000 f93d 	bl	8006776 <_realloc_r>
 80064fc:	4606      	mov	r6, r0
 80064fe:	2800      	cmp	r0, #0
 8006500:	d1e2      	bne.n	80064c8 <__ssputs_r+0x70>
 8006502:	6921      	ldr	r1, [r4, #16]
 8006504:	4650      	mov	r0, sl
 8006506:	f7ff ff01 	bl	800630c <_free_r>
 800650a:	e7c8      	b.n	800649e <__ssputs_r+0x46>

0800650c <_svfiprintf_r>:
 800650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	461d      	mov	r5, r3
 8006512:	898b      	ldrh	r3, [r1, #12]
 8006514:	b09d      	sub	sp, #116	; 0x74
 8006516:	061f      	lsls	r7, r3, #24
 8006518:	4680      	mov	r8, r0
 800651a:	460c      	mov	r4, r1
 800651c:	4616      	mov	r6, r2
 800651e:	d50f      	bpl.n	8006540 <_svfiprintf_r+0x34>
 8006520:	690b      	ldr	r3, [r1, #16]
 8006522:	b96b      	cbnz	r3, 8006540 <_svfiprintf_r+0x34>
 8006524:	2140      	movs	r1, #64	; 0x40
 8006526:	f7ff ff3d 	bl	80063a4 <_malloc_r>
 800652a:	6020      	str	r0, [r4, #0]
 800652c:	6120      	str	r0, [r4, #16]
 800652e:	b928      	cbnz	r0, 800653c <_svfiprintf_r+0x30>
 8006530:	230c      	movs	r3, #12
 8006532:	f8c8 3000 	str.w	r3, [r8]
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	e0c8      	b.n	80066ce <_svfiprintf_r+0x1c2>
 800653c:	2340      	movs	r3, #64	; 0x40
 800653e:	6163      	str	r3, [r4, #20]
 8006540:	2300      	movs	r3, #0
 8006542:	9309      	str	r3, [sp, #36]	; 0x24
 8006544:	2320      	movs	r3, #32
 8006546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800654a:	2330      	movs	r3, #48	; 0x30
 800654c:	f04f 0b01 	mov.w	fp, #1
 8006550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006554:	9503      	str	r5, [sp, #12]
 8006556:	4637      	mov	r7, r6
 8006558:	463d      	mov	r5, r7
 800655a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800655e:	b10b      	cbz	r3, 8006564 <_svfiprintf_r+0x58>
 8006560:	2b25      	cmp	r3, #37	; 0x25
 8006562:	d13e      	bne.n	80065e2 <_svfiprintf_r+0xd6>
 8006564:	ebb7 0a06 	subs.w	sl, r7, r6
 8006568:	d00b      	beq.n	8006582 <_svfiprintf_r+0x76>
 800656a:	4653      	mov	r3, sl
 800656c:	4632      	mov	r2, r6
 800656e:	4621      	mov	r1, r4
 8006570:	4640      	mov	r0, r8
 8006572:	f7ff ff71 	bl	8006458 <__ssputs_r>
 8006576:	3001      	adds	r0, #1
 8006578:	f000 80a4 	beq.w	80066c4 <_svfiprintf_r+0x1b8>
 800657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657e:	4453      	add	r3, sl
 8006580:	9309      	str	r3, [sp, #36]	; 0x24
 8006582:	783b      	ldrb	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 809d 	beq.w	80066c4 <_svfiprintf_r+0x1b8>
 800658a:	2300      	movs	r3, #0
 800658c:	f04f 32ff 	mov.w	r2, #4294967295
 8006590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800659c:	931a      	str	r3, [sp, #104]	; 0x68
 800659e:	462f      	mov	r7, r5
 80065a0:	2205      	movs	r2, #5
 80065a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065a6:	4850      	ldr	r0, [pc, #320]	; (80066e8 <_svfiprintf_r+0x1dc>)
 80065a8:	f7ff fbb8 	bl	8005d1c <memchr>
 80065ac:	9b04      	ldr	r3, [sp, #16]
 80065ae:	b9d0      	cbnz	r0, 80065e6 <_svfiprintf_r+0xda>
 80065b0:	06d9      	lsls	r1, r3, #27
 80065b2:	bf44      	itt	mi
 80065b4:	2220      	movmi	r2, #32
 80065b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065ba:	071a      	lsls	r2, r3, #28
 80065bc:	bf44      	itt	mi
 80065be:	222b      	movmi	r2, #43	; 0x2b
 80065c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065c4:	782a      	ldrb	r2, [r5, #0]
 80065c6:	2a2a      	cmp	r2, #42	; 0x2a
 80065c8:	d015      	beq.n	80065f6 <_svfiprintf_r+0xea>
 80065ca:	462f      	mov	r7, r5
 80065cc:	2000      	movs	r0, #0
 80065ce:	250a      	movs	r5, #10
 80065d0:	9a07      	ldr	r2, [sp, #28]
 80065d2:	4639      	mov	r1, r7
 80065d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065d8:	3b30      	subs	r3, #48	; 0x30
 80065da:	2b09      	cmp	r3, #9
 80065dc:	d94d      	bls.n	800667a <_svfiprintf_r+0x16e>
 80065de:	b1b8      	cbz	r0, 8006610 <_svfiprintf_r+0x104>
 80065e0:	e00f      	b.n	8006602 <_svfiprintf_r+0xf6>
 80065e2:	462f      	mov	r7, r5
 80065e4:	e7b8      	b.n	8006558 <_svfiprintf_r+0x4c>
 80065e6:	4a40      	ldr	r2, [pc, #256]	; (80066e8 <_svfiprintf_r+0x1dc>)
 80065e8:	463d      	mov	r5, r7
 80065ea:	1a80      	subs	r0, r0, r2
 80065ec:	fa0b f000 	lsl.w	r0, fp, r0
 80065f0:	4318      	orrs	r0, r3
 80065f2:	9004      	str	r0, [sp, #16]
 80065f4:	e7d3      	b.n	800659e <_svfiprintf_r+0x92>
 80065f6:	9a03      	ldr	r2, [sp, #12]
 80065f8:	1d11      	adds	r1, r2, #4
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	9103      	str	r1, [sp, #12]
 80065fe:	2a00      	cmp	r2, #0
 8006600:	db01      	blt.n	8006606 <_svfiprintf_r+0xfa>
 8006602:	9207      	str	r2, [sp, #28]
 8006604:	e004      	b.n	8006610 <_svfiprintf_r+0x104>
 8006606:	4252      	negs	r2, r2
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	9207      	str	r2, [sp, #28]
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	783b      	ldrb	r3, [r7, #0]
 8006612:	2b2e      	cmp	r3, #46	; 0x2e
 8006614:	d10c      	bne.n	8006630 <_svfiprintf_r+0x124>
 8006616:	787b      	ldrb	r3, [r7, #1]
 8006618:	2b2a      	cmp	r3, #42	; 0x2a
 800661a:	d133      	bne.n	8006684 <_svfiprintf_r+0x178>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	3702      	adds	r7, #2
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	9203      	str	r2, [sp, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfb8      	it	lt
 800662a:	f04f 33ff 	movlt.w	r3, #4294967295
 800662e:	9305      	str	r3, [sp, #20]
 8006630:	4d2e      	ldr	r5, [pc, #184]	; (80066ec <_svfiprintf_r+0x1e0>)
 8006632:	2203      	movs	r2, #3
 8006634:	7839      	ldrb	r1, [r7, #0]
 8006636:	4628      	mov	r0, r5
 8006638:	f7ff fb70 	bl	8005d1c <memchr>
 800663c:	b138      	cbz	r0, 800664e <_svfiprintf_r+0x142>
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	1b40      	subs	r0, r0, r5
 8006642:	fa03 f000 	lsl.w	r0, r3, r0
 8006646:	9b04      	ldr	r3, [sp, #16]
 8006648:	3701      	adds	r7, #1
 800664a:	4303      	orrs	r3, r0
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	7839      	ldrb	r1, [r7, #0]
 8006650:	2206      	movs	r2, #6
 8006652:	4827      	ldr	r0, [pc, #156]	; (80066f0 <_svfiprintf_r+0x1e4>)
 8006654:	1c7e      	adds	r6, r7, #1
 8006656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800665a:	f7ff fb5f 	bl	8005d1c <memchr>
 800665e:	2800      	cmp	r0, #0
 8006660:	d038      	beq.n	80066d4 <_svfiprintf_r+0x1c8>
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <_svfiprintf_r+0x1e8>)
 8006664:	bb13      	cbnz	r3, 80066ac <_svfiprintf_r+0x1a0>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	3307      	adds	r3, #7
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	3308      	adds	r3, #8
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006674:	444b      	add	r3, r9
 8006676:	9309      	str	r3, [sp, #36]	; 0x24
 8006678:	e76d      	b.n	8006556 <_svfiprintf_r+0x4a>
 800667a:	fb05 3202 	mla	r2, r5, r2, r3
 800667e:	2001      	movs	r0, #1
 8006680:	460f      	mov	r7, r1
 8006682:	e7a6      	b.n	80065d2 <_svfiprintf_r+0xc6>
 8006684:	2300      	movs	r3, #0
 8006686:	250a      	movs	r5, #10
 8006688:	4619      	mov	r1, r3
 800668a:	3701      	adds	r7, #1
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	4638      	mov	r0, r7
 8006690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006694:	3a30      	subs	r2, #48	; 0x30
 8006696:	2a09      	cmp	r2, #9
 8006698:	d903      	bls.n	80066a2 <_svfiprintf_r+0x196>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0c8      	beq.n	8006630 <_svfiprintf_r+0x124>
 800669e:	9105      	str	r1, [sp, #20]
 80066a0:	e7c6      	b.n	8006630 <_svfiprintf_r+0x124>
 80066a2:	fb05 2101 	mla	r1, r5, r1, r2
 80066a6:	2301      	movs	r3, #1
 80066a8:	4607      	mov	r7, r0
 80066aa:	e7f0      	b.n	800668e <_svfiprintf_r+0x182>
 80066ac:	ab03      	add	r3, sp, #12
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	4622      	mov	r2, r4
 80066b2:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <_svfiprintf_r+0x1ec>)
 80066b4:	a904      	add	r1, sp, #16
 80066b6:	4640      	mov	r0, r8
 80066b8:	f7fe f8fa 	bl	80048b0 <_printf_float>
 80066bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066c0:	4681      	mov	r9, r0
 80066c2:	d1d6      	bne.n	8006672 <_svfiprintf_r+0x166>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	065b      	lsls	r3, r3, #25
 80066c8:	f53f af35 	bmi.w	8006536 <_svfiprintf_r+0x2a>
 80066cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ce:	b01d      	add	sp, #116	; 0x74
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	ab03      	add	r3, sp, #12
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4622      	mov	r2, r4
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <_svfiprintf_r+0x1ec>)
 80066dc:	a904      	add	r1, sp, #16
 80066de:	4640      	mov	r0, r8
 80066e0:	f7fe fb92 	bl	8004e08 <_printf_i>
 80066e4:	e7ea      	b.n	80066bc <_svfiprintf_r+0x1b0>
 80066e6:	bf00      	nop
 80066e8:	0800769c 	.word	0x0800769c
 80066ec:	080076a2 	.word	0x080076a2
 80066f0:	080076a6 	.word	0x080076a6
 80066f4:	080048b1 	.word	0x080048b1
 80066f8:	08006459 	.word	0x08006459

080066fc <_sbrk_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	2300      	movs	r3, #0
 8006700:	4c05      	ldr	r4, [pc, #20]	; (8006718 <_sbrk_r+0x1c>)
 8006702:	4605      	mov	r5, r0
 8006704:	4608      	mov	r0, r1
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	f7fc f816 	bl	8002738 <_sbrk>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_sbrk_r+0x1a>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	b103      	cbz	r3, 8006716 <_sbrk_r+0x1a>
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20001884 	.word	0x20001884

0800671c <__ascii_mbtowc>:
 800671c:	b082      	sub	sp, #8
 800671e:	b901      	cbnz	r1, 8006722 <__ascii_mbtowc+0x6>
 8006720:	a901      	add	r1, sp, #4
 8006722:	b142      	cbz	r2, 8006736 <__ascii_mbtowc+0x1a>
 8006724:	b14b      	cbz	r3, 800673a <__ascii_mbtowc+0x1e>
 8006726:	7813      	ldrb	r3, [r2, #0]
 8006728:	600b      	str	r3, [r1, #0]
 800672a:	7812      	ldrb	r2, [r2, #0]
 800672c:	1c10      	adds	r0, r2, #0
 800672e:	bf18      	it	ne
 8006730:	2001      	movne	r0, #1
 8006732:	b002      	add	sp, #8
 8006734:	4770      	bx	lr
 8006736:	4610      	mov	r0, r2
 8006738:	e7fb      	b.n	8006732 <__ascii_mbtowc+0x16>
 800673a:	f06f 0001 	mvn.w	r0, #1
 800673e:	e7f8      	b.n	8006732 <__ascii_mbtowc+0x16>

08006740 <memmove>:
 8006740:	4288      	cmp	r0, r1
 8006742:	b510      	push	{r4, lr}
 8006744:	eb01 0302 	add.w	r3, r1, r2
 8006748:	d807      	bhi.n	800675a <memmove+0x1a>
 800674a:	1e42      	subs	r2, r0, #1
 800674c:	4299      	cmp	r1, r3
 800674e:	d00a      	beq.n	8006766 <memmove+0x26>
 8006750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006754:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006758:	e7f8      	b.n	800674c <memmove+0xc>
 800675a:	4283      	cmp	r3, r0
 800675c:	d9f5      	bls.n	800674a <memmove+0xa>
 800675e:	1881      	adds	r1, r0, r2
 8006760:	1ad2      	subs	r2, r2, r3
 8006762:	42d3      	cmn	r3, r2
 8006764:	d100      	bne.n	8006768 <memmove+0x28>
 8006766:	bd10      	pop	{r4, pc}
 8006768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800676c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006770:	e7f7      	b.n	8006762 <memmove+0x22>

08006772 <__malloc_lock>:
 8006772:	4770      	bx	lr

08006774 <__malloc_unlock>:
 8006774:	4770      	bx	lr

08006776 <_realloc_r>:
 8006776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006778:	4607      	mov	r7, r0
 800677a:	4614      	mov	r4, r2
 800677c:	460e      	mov	r6, r1
 800677e:	b921      	cbnz	r1, 800678a <_realloc_r+0x14>
 8006780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006784:	4611      	mov	r1, r2
 8006786:	f7ff be0d 	b.w	80063a4 <_malloc_r>
 800678a:	b922      	cbnz	r2, 8006796 <_realloc_r+0x20>
 800678c:	f7ff fdbe 	bl	800630c <_free_r>
 8006790:	4625      	mov	r5, r4
 8006792:	4628      	mov	r0, r5
 8006794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006796:	f000 f821 	bl	80067dc <_malloc_usable_size_r>
 800679a:	42a0      	cmp	r0, r4
 800679c:	d20f      	bcs.n	80067be <_realloc_r+0x48>
 800679e:	4621      	mov	r1, r4
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff fdff 	bl	80063a4 <_malloc_r>
 80067a6:	4605      	mov	r5, r0
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d0f2      	beq.n	8006792 <_realloc_r+0x1c>
 80067ac:	4631      	mov	r1, r6
 80067ae:	4622      	mov	r2, r4
 80067b0:	f7fd ffda 	bl	8004768 <memcpy>
 80067b4:	4631      	mov	r1, r6
 80067b6:	4638      	mov	r0, r7
 80067b8:	f7ff fda8 	bl	800630c <_free_r>
 80067bc:	e7e9      	b.n	8006792 <_realloc_r+0x1c>
 80067be:	4635      	mov	r5, r6
 80067c0:	e7e7      	b.n	8006792 <_realloc_r+0x1c>

080067c2 <__ascii_wctomb>:
 80067c2:	b149      	cbz	r1, 80067d8 <__ascii_wctomb+0x16>
 80067c4:	2aff      	cmp	r2, #255	; 0xff
 80067c6:	bf8b      	itete	hi
 80067c8:	238a      	movhi	r3, #138	; 0x8a
 80067ca:	700a      	strbls	r2, [r1, #0]
 80067cc:	6003      	strhi	r3, [r0, #0]
 80067ce:	2001      	movls	r0, #1
 80067d0:	bf88      	it	hi
 80067d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80067d6:	4770      	bx	lr
 80067d8:	4608      	mov	r0, r1
 80067da:	4770      	bx	lr

080067dc <_malloc_usable_size_r>:
 80067dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e0:	1f18      	subs	r0, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bfbc      	itt	lt
 80067e6:	580b      	ldrlt	r3, [r1, r0]
 80067e8:	18c0      	addlt	r0, r0, r3
 80067ea:	4770      	bx	lr

080067ec <_init>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr

080067f8 <_fini>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr
