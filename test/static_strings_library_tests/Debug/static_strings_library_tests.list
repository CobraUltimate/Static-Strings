
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f98  080065c8  080065c8  000165c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007560  08007560  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007560  08007560  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007560  08007560  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ac  200001dc  08007744  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001888  08007744  00021888  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a24  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c3  00000000  00000000  00028c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  0002a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000658  00000000  00000000  0002a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013efd  00000000  00000000  0002b028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000653b  00000000  00000000  0003ef25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b7a7  00000000  00000000  00045460  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  000b0c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080065ac 	.word	0x080065ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080065ac 	.word	0x080065ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	f5ad 5de2 	sub.w	sp, sp, #7232	; 0x1c40
 8000a8e:	b081      	sub	sp, #4
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f001 fe07 	bl	80026a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  static_strings_init();
 8000a96:	f002 fecb 	bl	8003830 <static_strings_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f001 fc33 	bl	8002304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9e:	f001 fca1 	bl	80023e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aa2:	f001 fc75 	bl	8002390 <MX_USART1_UART_Init>

  //test 1

  uint8_t very_long_string[700];
  uint16_t i;
  for(i = 0; i < 699; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000aac:	f102 021e 	add.w	r2, r2, #30
 8000ab0:	8013      	strh	r3, [r2, #0]
 8000ab2:	e015      	b.n	8000ae0 <main+0x58>
	  very_long_string[i] = 'a';
 8000ab4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000ab8:	f103 031e 	add.w	r3, r3, #30
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000ac2:	f102 0210 	add.w	r2, r2, #16
 8000ac6:	2161      	movs	r1, #97	; 0x61
 8000ac8:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 699; i++){
 8000aca:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000ace:	f103 031e 	add.w	r3, r3, #30
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000ada:	f102 021e 	add.w	r2, r2, #30
 8000ade:	8013      	strh	r3, [r2, #0]
 8000ae0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000ae4:	f103 031e 	add.w	r3, r3, #30
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d9e0      	bls.n	8000ab4 <main+0x2c>
  }
  very_long_string[699] = '\0';
 8000af2:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000af6:	f103 0310 	add.w	r3, r3, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
  static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 8000b00:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b04:	f103 0310 	add.w	r3, r3, #16
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f8f9 	bl	8003d00 <static_strings_save>
 8000b0e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b12:	f103 0310 	add.w	r3, r3, #16
 8000b16:	6018      	str	r0, [r3, #0]
  char length[6];
  sprintf(length,"%04d",very_long_string_descriptor->length);
 8000b18:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b1c:	f103 0310 	add.w	r3, r3, #16
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	889b      	ldrh	r3, [r3, #4]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b2a:	f103 0308 	add.w	r3, r3, #8
 8000b2e:	49a4      	ldr	r1, [pc, #656]	; (8000dc0 <main+0x338>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 f95b 	bl	8004dec <siprintf>
  length[4] = '\r';
 8000b36:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b3a:	f103 0308 	add.w	r3, r3, #8
 8000b3e:	220d      	movs	r2, #13
 8000b40:	711a      	strb	r2, [r3, #4]
  length[5] = '\n';
 8000b42:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b46:	f103 0308 	add.w	r3, r3, #8
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	715a      	strb	r2, [r3, #5]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000b4e:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000b52:	f101 0108 	add.w	r1, r1, #8
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	4899      	ldr	r0, [pc, #612]	; (8000dc4 <main+0x33c>)
 8000b5e:	f002 fcaa 	bl	80034b6 <HAL_UART_Transmit>
  char type[3];
  type[0] = very_long_string_descriptor->type + 48;
 8000b62:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b66:	f103 0310 	add.w	r3, r3, #16
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	3330      	adds	r3, #48	; 0x30
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b76:	f103 0304 	add.w	r3, r3, #4
 8000b7a:	701a      	strb	r2, [r3, #0]
  type[1] = '\r';
 8000b7c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b80:	f103 0304 	add.w	r3, r3, #4
 8000b84:	220d      	movs	r2, #13
 8000b86:	705a      	strb	r2, [r3, #1]
  type[2] = '\n';
 8000b88:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b8c:	f103 0304 	add.w	r3, r3, #4
 8000b90:	220a      	movs	r2, #10
 8000b92:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000b94:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000b98:	f101 0104 	add.w	r1, r1, #4
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4888      	ldr	r0, [pc, #544]	; (8000dc4 <main+0x33c>)
 8000ba4:	f002 fc87 	bl	80034b6 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000ba8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000bac:	f103 0310 	add.w	r3, r3, #16
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000bb8:	f103 0310 	add.w	r3, r3, #16
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	889a      	ldrh	r2, [r3, #4]
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	487f      	ldr	r0, [pc, #508]	; (8000dc4 <main+0x33c>)
 8000bc6:	f002 fc76 	bl	80034b6 <HAL_UART_Transmit>

  static_strings_deallocate(very_long_string_descriptor);
 8000bca:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000bce:	f103 0310 	add.w	r3, r3, #16
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f003 f8d8 	bl	8003d88 <static_strings_deallocate>

  uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000bd8:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000bdc:	f103 0310 	add.w	r3, r3, #16
 8000be0:	4a79      	ldr	r2, [pc, #484]	; (8000dc8 <main+0x340>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	4611      	mov	r1, r2
 8000be6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bea:	461a      	mov	r2, r3
 8000bec:	f003 fc9c 	bl	8004528 <memcpy>
  uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 8000bf0:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000bf4:	f103 0318 	add.w	r3, r3, #24
 8000bf8:	4a74      	ldr	r2, [pc, #464]	; (8000dcc <main+0x344>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c02:	461a      	mov	r2, r3
 8000c04:	f003 fc90 	bl	8004528 <memcpy>
  uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 8000c08:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8000c0c:	f103 0308 	add.w	r3, r3, #8
 8000c10:	4a6f      	ldr	r2, [pc, #444]	; (8000dd0 <main+0x348>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	4611      	mov	r1, r2
 8000c16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f003 fc84 	bl	8004528 <memcpy>
  uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 8000c20:	f507 5489 	add.w	r4, r7, #4384	; 0x1120
 8000c24:	f104 0414 	add.w	r4, r4, #20
 8000c28:	4b6a      	ldr	r3, [pc, #424]	; (8000dd4 <main+0x34c>)
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f240 1361 	movw	r3, #353	; 0x161
 8000c32:	461a      	mov	r2, r3
 8000c34:	f003 fc78 	bl	8004528 <memcpy>
 8000c38:	f204 1361 	addw	r3, r4, #353	; 0x161
 8000c3c:	2293      	movs	r2, #147	; 0x93
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fc7c 	bl	800453e <memset>
  uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 8000c46:	f607 544c 	addw	r4, r7, #3404	; 0xd4c
 8000c4a:	4b63      	ldr	r3, [pc, #396]	; (8000dd8 <main+0x350>)
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f240 235b 	movw	r3, #603	; 0x25b
 8000c54:	461a      	mov	r2, r3
 8000c56:	f003 fc67 	bl	8004528 <memcpy>
 8000c5a:	f204 235b 	addw	r3, r4, #603	; 0x25b
 8000c5e:	f240 128d 	movw	r2, #397	; 0x18d
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fc6a 	bl	800453e <memset>

  static_strings_string_descriptor *string_descriptor;

  //test 2

  string_descriptor = static_strings_save(test_very_long_string);
 8000c6a:	f607 534c 	addw	r3, r7, #3404	; 0xd4c
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f846 	bl	8003d00 <static_strings_save>
 8000c74:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000c78:	f103 0318 	add.w	r3, r3, #24
 8000c7c:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000c7e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000c82:	f103 0318 	add.w	r3, r3, #24
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	889b      	ldrh	r3, [r3, #4]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000c90:	f103 0308 	add.w	r3, r3, #8
 8000c94:	494a      	ldr	r1, [pc, #296]	; (8000dc0 <main+0x338>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 f8a8 	bl	8004dec <siprintf>
  length[4] = '\r';
 8000c9c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ca0:	f103 0308 	add.w	r3, r3, #8
 8000ca4:	220d      	movs	r2, #13
 8000ca6:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000ca8:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000cac:	f101 0108 	add.w	r1, r1, #8
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	4843      	ldr	r0, [pc, #268]	; (8000dc4 <main+0x33c>)
 8000cb8:	f002 fbfd 	bl	80034b6 <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000cbc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000cc0:	f103 0318 	add.w	r3, r3, #24
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	799b      	ldrb	r3, [r3, #6]
 8000cc8:	3330      	adds	r3, #48	; 0x30
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000cd0:	f103 0304 	add.w	r3, r3, #4
 8000cd4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000cd6:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000cda:	f101 0104 	add.w	r1, r1, #4
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	4837      	ldr	r0, [pc, #220]	; (8000dc4 <main+0x33c>)
 8000ce6:	f002 fbe6 	bl	80034b6 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000cea:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000cee:	f103 0318 	add.w	r3, r3, #24
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6819      	ldr	r1, [r3, #0]
 8000cf6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000cfa:	f103 0318 	add.w	r3, r3, #24
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	889a      	ldrh	r2, [r3, #4]
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <main+0x33c>)
 8000d08:	f002 fbd5 	bl	80034b6 <HAL_UART_Transmit>

  //test 3

  string_descriptor = static_strings_save(test_long_string);
 8000d0c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000d10:	f103 0314 	add.w	r3, r3, #20
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fff3 	bl	8003d00 <static_strings_save>
 8000d1a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000d1e:	f103 0318 	add.w	r3, r3, #24
 8000d22:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000d24:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000d28:	f103 0318 	add.w	r3, r3, #24
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	889b      	ldrh	r3, [r3, #4]
 8000d30:	461a      	mov	r2, r3
 8000d32:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d36:	f103 0308 	add.w	r3, r3, #8
 8000d3a:	4921      	ldr	r1, [pc, #132]	; (8000dc0 <main+0x338>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 f855 	bl	8004dec <siprintf>
  length[4] = '\r';
 8000d42:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d46:	f103 0308 	add.w	r3, r3, #8
 8000d4a:	220d      	movs	r2, #13
 8000d4c:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000d4e:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000d52:	f101 0108 	add.w	r1, r1, #8
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <main+0x33c>)
 8000d5e:	f002 fbaa 	bl	80034b6 <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000d62:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000d66:	f103 0318 	add.w	r3, r3, #24
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	799b      	ldrb	r3, [r3, #6]
 8000d6e:	3330      	adds	r3, #48	; 0x30
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d76:	f103 0304 	add.w	r3, r3, #4
 8000d7a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000d7c:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000d80:	f101 0104 	add.w	r1, r1, #4
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	2203      	movs	r2, #3
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <main+0x33c>)
 8000d8c:	f002 fb93 	bl	80034b6 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000d90:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000d94:	f103 0318 	add.w	r3, r3, #24
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000da0:	f103 0318 	add.w	r3, r3, #24
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	889a      	ldrh	r2, [r3, #4]
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <main+0x33c>)
 8000dae:	f002 fb82 	bl	80034b6 <HAL_UART_Transmit>

  //test 4,5

  for(i = 0; i < 2; i++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000db8:	f102 021e 	add.w	r2, r2, #30
 8000dbc:	8013      	strh	r3, [r2, #0]
 8000dbe:	e074      	b.n	8000eaa <main+0x422>
 8000dc0:	080065c8 	.word	0x080065c8
 8000dc4:	20001670 	.word	0x20001670
 8000dc8:	08006688 	.word	0x08006688
 8000dcc:	0800687c 	.word	0x0800687c
 8000dd0:	08006ad4 	.word	0x08006ad4
 8000dd4:	08006c64 	.word	0x08006c64
 8000dd8:	08006e58 	.word	0x08006e58
  	  string_descriptor = static_strings_save(test_medium_strings[i]);
 8000ddc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000de0:	f103 031e 	add.w	r3, r3, #30
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8000dea:	f102 0208 	add.w	r2, r2, #8
 8000dee:	21c8      	movs	r1, #200	; 0xc8
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 ff82 	bl	8003d00 <static_strings_save>
 8000dfc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000e00:	f103 0318 	add.w	r3, r3, #24
 8000e04:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000e06:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000e0a:	f103 0318 	add.w	r3, r3, #24
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	461a      	mov	r2, r3
 8000e14:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000e18:	f103 0308 	add.w	r3, r3, #8
 8000e1c:	4967      	ldr	r1, [pc, #412]	; (8000fbc <main+0x534>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 ffe4 	bl	8004dec <siprintf>
  	  length[4] = '\r';
 8000e24:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000e28:	f103 0308 	add.w	r3, r3, #8
 8000e2c:	220d      	movs	r2, #13
 8000e2e:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000e30:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000e34:	f101 0108 	add.w	r1, r1, #8
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	2206      	movs	r2, #6
 8000e3e:	4860      	ldr	r0, [pc, #384]	; (8000fc0 <main+0x538>)
 8000e40:	f002 fb39 	bl	80034b6 <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000e44:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000e48:	f103 0318 	add.w	r3, r3, #24
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	799b      	ldrb	r3, [r3, #6]
 8000e50:	3330      	adds	r3, #48	; 0x30
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000e58:	f103 0304 	add.w	r3, r3, #4
 8000e5c:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000e5e:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000e62:	f101 0104 	add.w	r1, r1, #4
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	4854      	ldr	r0, [pc, #336]	; (8000fc0 <main+0x538>)
 8000e6e:	f002 fb22 	bl	80034b6 <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000e72:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000e76:	f103 0318 	add.w	r3, r3, #24
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6819      	ldr	r1, [r3, #0]
 8000e7e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000e82:	f103 0318 	add.w	r3, r3, #24
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	889a      	ldrh	r2, [r3, #4]
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	484c      	ldr	r0, [pc, #304]	; (8000fc0 <main+0x538>)
 8000e90:	f002 fb11 	bl	80034b6 <HAL_UART_Transmit>
  for(i = 0; i < 2; i++){
 8000e94:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000e98:	f103 031e 	add.w	r3, r3, #30
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000ea4:	f102 021e 	add.w	r2, r2, #30
 8000ea8:	8013      	strh	r3, [r2, #0]
 8000eaa:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000eae:	f103 031e 	add.w	r3, r3, #30
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d991      	bls.n	8000ddc <main+0x354>
  }

  //test 6-11

  for(i = 0; i < 6; i++){
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000ebe:	f102 021e 	add.w	r2, r2, #30
 8000ec2:	8013      	strh	r3, [r2, #0]
 8000ec4:	e066      	b.n	8000f94 <main+0x50c>
  	  string_descriptor = static_strings_save(test_short_strings[i]);
 8000ec6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000eca:	f103 031e 	add.w	r3, r3, #30
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	f507 52a5 	add.w	r2, r7, #5280	; 0x14a0
 8000ed4:	f102 0218 	add.w	r2, r2, #24
 8000ed8:	2164      	movs	r1, #100	; 0x64
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 ff0d 	bl	8003d00 <static_strings_save>
 8000ee6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000eea:	f103 0318 	add.w	r3, r3, #24
 8000eee:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000ef0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000ef4:	f103 0318 	add.w	r3, r3, #24
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	889b      	ldrh	r3, [r3, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000f02:	f103 0308 	add.w	r3, r3, #8
 8000f06:	492d      	ldr	r1, [pc, #180]	; (8000fbc <main+0x534>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 ff6f 	bl	8004dec <siprintf>
  	  length[4] = '\r';
 8000f0e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000f12:	f103 0308 	add.w	r3, r3, #8
 8000f16:	220d      	movs	r2, #13
 8000f18:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000f1a:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000f1e:	f101 0108 	add.w	r1, r1, #8
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	2206      	movs	r2, #6
 8000f28:	4825      	ldr	r0, [pc, #148]	; (8000fc0 <main+0x538>)
 8000f2a:	f002 fac4 	bl	80034b6 <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000f2e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000f32:	f103 0318 	add.w	r3, r3, #24
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	799b      	ldrb	r3, [r3, #6]
 8000f3a:	3330      	adds	r3, #48	; 0x30
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000f42:	f103 0304 	add.w	r3, r3, #4
 8000f46:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000f48:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000f4c:	f101 0104 	add.w	r1, r1, #4
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	2203      	movs	r2, #3
 8000f56:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <main+0x538>)
 8000f58:	f002 faad 	bl	80034b6 <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000f5c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000f60:	f103 0318 	add.w	r3, r3, #24
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000f6c:	f103 0318 	add.w	r3, r3, #24
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	889a      	ldrh	r2, [r3, #4]
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <main+0x538>)
 8000f7a:	f002 fa9c 	bl	80034b6 <HAL_UART_Transmit>
  for(i = 0; i < 6; i++){
 8000f7e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000f82:	f103 031e 	add.w	r3, r3, #30
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000f8e:	f102 021e 	add.w	r2, r2, #30
 8000f92:	8013      	strh	r3, [r2, #0]
 8000f94:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000f98:	f103 031e 	add.w	r3, r3, #30
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d991      	bls.n	8000ec6 <main+0x43e>
  }

  //test 12-21

  static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000fa8:	f102 0214 	add.w	r2, r2, #20
 8000fac:	6013      	str	r3, [r2, #0]
  for(i = 0; i < 10; i++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000fb4:	f102 021e 	add.w	r2, r2, #30
 8000fb8:	8013      	strh	r3, [r2, #0]
 8000fba:	e07b      	b.n	80010b4 <main+0x62c>
 8000fbc:	080065c8 	.word	0x080065c8
 8000fc0:	20001670 	.word	0x20001670
	  string_descriptor = static_strings_save(test_very_short_strings[i]);
 8000fc4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000fc8:	f103 031e 	add.w	r3, r3, #30
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	f507 52b8 	add.w	r2, r7, #5888	; 0x1700
 8000fd2:	f102 0210 	add.w	r2, r2, #16
 8000fd6:	2132      	movs	r1, #50	; 0x32
 8000fd8:	fb01 f303 	mul.w	r3, r1, r3
 8000fdc:	4413      	add	r3, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fe8e 	bl	8003d00 <static_strings_save>
 8000fe4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000fe8:	f103 0318 	add.w	r3, r3, #24
 8000fec:	6018      	str	r0, [r3, #0]
	  if(i == 6){
 8000fee:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000ff2:	f103 031e 	add.w	r3, r3, #30
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2b06      	cmp	r3, #6
 8000ffa:	d109      	bne.n	8001010 <main+0x588>
		  string_descriptor_deallocate = string_descriptor;
 8000ffc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001000:	f103 0318 	add.w	r3, r3, #24
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 800100a:	f102 0214 	add.w	r2, r2, #20
 800100e:	6013      	str	r3, [r2, #0]
	  }
	  sprintf(length,"%04d",string_descriptor->length);
 8001010:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001014:	f103 0318 	add.w	r3, r3, #24
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001022:	f103 0308 	add.w	r3, r3, #8
 8001026:	49d3      	ldr	r1, [pc, #844]	; (8001374 <main+0x8ec>)
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fedf 	bl	8004dec <siprintf>
	  length[4] = '\r';
 800102e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001032:	f103 0308 	add.w	r3, r3, #8
 8001036:	220d      	movs	r2, #13
 8001038:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 800103a:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 800103e:	f101 0108 	add.w	r1, r1, #8
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	2206      	movs	r2, #6
 8001048:	48cb      	ldr	r0, [pc, #812]	; (8001378 <main+0x8f0>)
 800104a:	f002 fa34 	bl	80034b6 <HAL_UART_Transmit>
	  type[0] = string_descriptor->type + 48;
 800104e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001052:	f103 0318 	add.w	r3, r3, #24
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	799b      	ldrb	r3, [r3, #6]
 800105a:	3330      	adds	r3, #48	; 0x30
 800105c:	b2da      	uxtb	r2, r3
 800105e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001062:	f103 0304 	add.w	r3, r3, #4
 8001066:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8001068:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 800106c:	f101 0104 	add.w	r1, r1, #4
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	2203      	movs	r2, #3
 8001076:	48c0      	ldr	r0, [pc, #768]	; (8001378 <main+0x8f0>)
 8001078:	f002 fa1d 	bl	80034b6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 800107c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001080:	f103 0318 	add.w	r3, r3, #24
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800108c:	f103 0318 	add.w	r3, r3, #24
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	889a      	ldrh	r2, [r3, #4]
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	48b7      	ldr	r0, [pc, #732]	; (8001378 <main+0x8f0>)
 800109a:	f002 fa0c 	bl	80034b6 <HAL_UART_Transmit>
  for(i = 0; i < 10; i++){
 800109e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80010a2:	f103 031e 	add.w	r3, r3, #30
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80010ae:	f102 021e 	add.w	r2, r2, #30
 80010b2:	8013      	strh	r3, [r2, #0]
 80010b4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80010b8:	f103 031e 	add.w	r3, r3, #30
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	2b09      	cmp	r3, #9
 80010c0:	d980      	bls.n	8000fc4 <main+0x53c>
  }

  //test 22

  static_strings_deallocate(string_descriptor_deallocate);
 80010c2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80010c6:	f103 0314 	add.w	r3, r3, #20
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	f002 fe5c 	bl	8003d88 <static_strings_deallocate>
  uint8_t test_short_string[50] = "reallocate_test\r\n";
 80010d0:	f607 5618 	addw	r6, r7, #3352	; 0xd18
 80010d4:	4ba9      	ldr	r3, [pc, #676]	; (800137c <main+0x8f4>)
 80010d6:	4634      	mov	r4, r6
 80010d8:	461d      	mov	r5, r3
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	8023      	strh	r3, [r4, #0]
 80010e2:	f106 0312 	add.w	r3, r6, #18
 80010e6:	2220      	movs	r2, #32
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fa27 	bl	800453e <memset>
  string_descriptor = static_strings_save(test_short_string);
 80010f0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fe03 	bl	8003d00 <static_strings_save>
 80010fa:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80010fe:	f103 0318 	add.w	r3, r3, #24
 8001102:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8001104:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001108:	f103 0318 	add.w	r3, r3, #24
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	889b      	ldrh	r3, [r3, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001116:	f103 0308 	add.w	r3, r3, #8
 800111a:	4996      	ldr	r1, [pc, #600]	; (8001374 <main+0x8ec>)
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fe65 	bl	8004dec <siprintf>
  length[4] = '\r';
 8001122:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001126:	f103 0308 	add.w	r3, r3, #8
 800112a:	220d      	movs	r2, #13
 800112c:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 800112e:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8001132:	f101 0108 	add.w	r1, r1, #8
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	2206      	movs	r2, #6
 800113c:	488e      	ldr	r0, [pc, #568]	; (8001378 <main+0x8f0>)
 800113e:	f002 f9ba 	bl	80034b6 <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8001142:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001146:	f103 0318 	add.w	r3, r3, #24
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	799b      	ldrb	r3, [r3, #6]
 800114e:	3330      	adds	r3, #48	; 0x30
 8001150:	b2da      	uxtb	r2, r3
 8001152:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001156:	f103 0304 	add.w	r3, r3, #4
 800115a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 800115c:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8001160:	f101 0104 	add.w	r1, r1, #4
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	2203      	movs	r2, #3
 800116a:	4883      	ldr	r0, [pc, #524]	; (8001378 <main+0x8f0>)
 800116c:	f002 f9a3 	bl	80034b6 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001170:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001174:	f103 0318 	add.w	r3, r3, #24
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001180:	f103 0318 	add.w	r3, r3, #24
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	889a      	ldrh	r2, [r3, #4]
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	487a      	ldr	r0, [pc, #488]	; (8001378 <main+0x8f0>)
 800118e:	f002 f992 	bl	80034b6 <HAL_UART_Transmit>

  //test 23

  uint8_t pointer[12];
  sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 8001192:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 8001196:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 800119a:	f102 0214 	add.w	r2, r2, #20
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	4977      	ldr	r1, [pc, #476]	; (8001380 <main+0x8f8>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fe22 	bl	8004dec <siprintf>
  pointer[10] = '\r';
 80011a8:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 80011ac:	220d      	movs	r2, #13
 80011ae:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 80011b0:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 80011b4:	220a      	movs	r2, #10
 80011b6:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80011b8:	f607 510c 	addw	r1, r7, #3340	; 0xd0c
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	220c      	movs	r2, #12
 80011c2:	486d      	ldr	r0, [pc, #436]	; (8001378 <main+0x8f0>)
 80011c4:	f002 f977 	bl	80034b6 <HAL_UART_Transmit>

  sprintf((char *)pointer,"%10p",string_descriptor);
 80011c8:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 80011cc:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80011d0:	f102 0218 	add.w	r2, r2, #24
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	496a      	ldr	r1, [pc, #424]	; (8001380 <main+0x8f8>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 fe07 	bl	8004dec <siprintf>
  pointer[10] = '\r';
 80011de:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 80011e2:	220d      	movs	r2, #13
 80011e4:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 80011e6:	f607 530c 	addw	r3, r7, #3340	; 0xd0c
 80011ea:	220a      	movs	r2, #10
 80011ec:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80011ee:	f607 510c 	addw	r1, r7, #3340	; 0xd0c
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	220c      	movs	r2, #12
 80011f8:	485f      	ldr	r0, [pc, #380]	; (8001378 <main+0x8f0>)
 80011fa:	f002 f95c 	bl	80034b6 <HAL_UART_Transmit>

  uint8_t error_code_char;

  //test 24

  string_descriptor = static_strings_save((uint8_t *)"useless_string");
 80011fe:	4861      	ldr	r0, [pc, #388]	; (8001384 <main+0x8fc>)
 8001200:	f002 fd7e 	bl	8003d00 <static_strings_save>
 8001204:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001208:	f103 0318 	add.w	r3, r3, #24
 800120c:	6018      	str	r0, [r3, #0]
  while(string_descriptor != NULL){
 800120e:	e007      	b.n	8001220 <main+0x798>
	  string_descriptor = static_strings_save((uint8_t *)"useless_string");
 8001210:	485c      	ldr	r0, [pc, #368]	; (8001384 <main+0x8fc>)
 8001212:	f002 fd75 	bl	8003d00 <static_strings_save>
 8001216:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800121a:	f103 0318 	add.w	r3, r3, #24
 800121e:	6018      	str	r0, [r3, #0]
  while(string_descriptor != NULL){
 8001220:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001224:	f103 0318 	add.w	r3, r3, #24
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <main+0x788>
  }

  uint8_t no_memory_string[800];
  for(i = 0; i < 798; i++){
 800122e:	2300      	movs	r3, #0
 8001230:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001234:	f102 021e 	add.w	r2, r2, #30
 8001238:	8013      	strh	r3, [r2, #0]
 800123a:	e014      	b.n	8001266 <main+0x7de>
	  no_memory_string[i] = 'a';
 800123c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001240:	f103 031e 	add.w	r3, r3, #30
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800124a:	3b18      	subs	r3, #24
 800124c:	2161      	movs	r1, #97	; 0x61
 800124e:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 798; i++){
 8001250:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001254:	f103 031e 	add.w	r3, r3, #30
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001260:	f102 021e 	add.w	r2, r2, #30
 8001264:	8013      	strh	r3, [r2, #0]
 8001266:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800126a:	f103 031e 	add.w	r3, r3, #30
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	f240 321d 	movw	r2, #797	; 0x31d
 8001274:	4293      	cmp	r3, r2
 8001276:	d9e1      	bls.n	800123c <main+0x7b4>
  }
  no_memory_string[798] = '\r';
 8001278:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800127c:	3b18      	subs	r3, #24
 800127e:	220d      	movs	r2, #13
 8001280:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  no_memory_string[799] = '\n';
 8001284:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8001288:	3b18      	subs	r3, #24
 800128a:	220a      	movs	r2, #10
 800128c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  string_descriptor = static_strings_save(no_memory_string);
 8001290:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8001294:	3b18      	subs	r3, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fd32 	bl	8003d00 <static_strings_save>
 800129c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80012a0:	f103 0318 	add.w	r3, r3, #24
 80012a4:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 80012a6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80012aa:	f103 0318 	add.w	r3, r3, #24
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d107      	bne.n	80012c4 <main+0x83c>
	  error_code_char = static_strings_error_code + 48;
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <main+0x900>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3330      	adds	r3, #48	; 0x30
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e003      	b.n	80012cc <main+0x844>
  }
  else{
	  error_code_char = '3';
 80012c4:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 80012c8:	2233      	movs	r2, #51	; 0x33
 80012ca:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80012cc:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	2201      	movs	r2, #1
 80012d6:	4828      	ldr	r0, [pc, #160]	; (8001378 <main+0x8f0>)
 80012d8:	f002 f8ed 	bl	80034b6 <HAL_UART_Transmit>

  static_strings_init();
 80012dc:	f002 faa8 	bl	8003830 <static_strings_init>

  //test 25

  uint8_t unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100];
  for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100; i++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80012e6:	f102 021e 	add.w	r2, r2, #30
 80012ea:	8013      	strh	r3, [r2, #0]
 80012ec:	e014      	b.n	8001318 <main+0x890>
	  unallocable_invalid_string[i] = 'a';
 80012ee:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80012f2:	f103 031e 	add.w	r3, r3, #30
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80012fc:	3b18      	subs	r3, #24
 80012fe:	2161      	movs	r1, #97	; 0x61
 8001300:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100; i++){
 8001302:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001306:	f103 031e 	add.w	r3, r3, #30
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001312:	f102 021e 	add.w	r2, r2, #30
 8001316:	8013      	strh	r3, [r2, #0]
 8001318:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800131c:	f103 031e 	add.w	r3, r3, #30
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001326:	d3e2      	bcc.n	80012ee <main+0x866>
  }
  unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100 - 2] = '\r';
 8001328:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800132c:	3b18      	subs	r3, #24
 800132e:	220d      	movs	r2, #13
 8001330:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
  unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100 - 1] = '\n';
 8001334:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001338:	3b18      	subs	r3, #24
 800133a:	220a      	movs	r2, #10
 800133c:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
  string_descriptor = static_strings_save(unallocable_invalid_string);
 8001340:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001344:	3b18      	subs	r3, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fcda 	bl	8003d00 <static_strings_save>
 800134c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001350:	f103 0318 	add.w	r3, r3, #24
 8001354:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8001356:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800135a:	f103 0318 	add.w	r3, r3, #24
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d113      	bne.n	800138c <main+0x904>
	  error_code_char = static_strings_error_code + 48;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <main+0x900>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3330      	adds	r3, #48	; 0x30
 800136a:	b2da      	uxtb	r2, r3
 800136c:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e00f      	b.n	8001394 <main+0x90c>
 8001374:	080065c8 	.word	0x080065c8
 8001378:	20001670 	.word	0x20001670
 800137c:	08007240 	.word	0x08007240
 8001380:	080065d0 	.word	0x080065d0
 8001384:	080065d8 	.word	0x080065d8
 8001388:	2000066c 	.word	0x2000066c
  }
  else{
	  error_code_char = '4';
 800138c:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 8001390:	2234      	movs	r2, #52	; 0x34
 8001392:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001394:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	2201      	movs	r2, #1
 800139e:	4892      	ldr	r0, [pc, #584]	; (80015e8 <main+0xb60>)
 80013a0:	f002 f889 	bl	80034b6 <HAL_UART_Transmit>

  //test 26 deprecated

  uint8_t no_line_end_invalid_string[800];
  for(i = 0; i < 800; i++){
 80013a4:	2300      	movs	r3, #0
 80013a6:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80013aa:	f102 021e 	add.w	r2, r2, #30
 80013ae:	8013      	strh	r3, [r2, #0]
 80013b0:	e014      	b.n	80013dc <main+0x954>
	  no_line_end_invalid_string[i] = 'a';
 80013b2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80013b6:	f103 031e 	add.w	r3, r3, #30
 80013ba:	881a      	ldrh	r2, [r3, #0]
 80013bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013c0:	3b18      	subs	r3, #24
 80013c2:	2161      	movs	r1, #97	; 0x61
 80013c4:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 800; i++){
 80013c6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80013ca:	f103 031e 	add.w	r3, r3, #30
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80013d6:	f102 021e 	add.w	r2, r2, #30
 80013da:	8013      	strh	r3, [r2, #0]
 80013dc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80013e0:	f103 031e 	add.w	r3, r3, #30
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013ea:	d3e2      	bcc.n	80013b2 <main+0x92a>
  }
  string_descriptor = static_strings_save(no_line_end_invalid_string);
 80013ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013f0:	3b18      	subs	r3, #24
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fc84 	bl	8003d00 <static_strings_save>
 80013f8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80013fc:	f103 0318 	add.w	r3, r3, #24
 8001400:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8001402:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001406:	f103 0318 	add.w	r3, r3, #24
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <main+0x998>
	  error_code_char = static_strings_error_code + 48;
 8001410:	4b76      	ldr	r3, [pc, #472]	; (80015ec <main+0xb64>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3330      	adds	r3, #48	; 0x30
 8001416:	b2da      	uxtb	r2, r3
 8001418:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <main+0x9a0>
  }
  else{
	  error_code_char = '5';
 8001420:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 8001424:	2235      	movs	r2, #53	; 0x35
 8001426:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001428:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	2201      	movs	r2, #1
 8001432:	486d      	ldr	r0, [pc, #436]	; (80015e8 <main+0xb60>)
 8001434:	f002 f83f 	bl	80034b6 <HAL_UART_Transmit>

  //test 27 deprecated

  string_descriptor = static_strings_allocate(1200);
 8001438:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800143c:	f002 fb58 	bl	8003af0 <static_strings_allocate>
 8001440:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001444:	f103 0318 	add.w	r3, r3, #24
 8001448:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800144a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800144e:	f103 0318 	add.w	r3, r3, #24
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d107      	bne.n	8001468 <main+0x9e0>
  	  error_code_char = static_strings_error_code + 48;
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <main+0xb64>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	b2da      	uxtb	r2, r3
 8001460:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	e003      	b.n	8001470 <main+0x9e8>
  }
  else{
  	  error_code_char = '6';
 8001468:	f607 530b 	addw	r3, r7, #3339	; 0xd0b
 800146c:	2236      	movs	r2, #54	; 0x36
 800146e:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001470:	f607 510b 	addw	r1, r7, #3339	; 0xd0b
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	2201      	movs	r2, #1
 800147a:	485b      	ldr	r0, [pc, #364]	; (80015e8 <main+0xb60>)
 800147c:	f002 f81b 	bl	80034b6 <HAL_UART_Transmit>

  //test 28

  uint8_t custom[10] = "123,56,89\0";
 8001480:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001484:	3b04      	subs	r3, #4
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <main+0xb68>)
 8001488:	ca07      	ldmia	r2, {r0, r1, r2}
 800148a:	c303      	stmia	r3!, {r0, r1}
 800148c:	801a      	strh	r2, [r3, #0]
  static_strings_string_descriptor custom_string_descriptor;
  string_descriptor = &custom_string_descriptor;
 800148e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001492:	3b0c      	subs	r3, #12
 8001494:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001498:	f102 0218 	add.w	r2, r2, #24
 800149c:	6013      	str	r3, [r2, #0]
  static_strings_create_custom_string(string_descriptor,custom);
 800149e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014a2:	3b04      	subs	r3, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014aa:	f103 0318 	add.w	r3, r3, #24
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	f002 fc4d 	bl	8003d4e <static_strings_create_custom_string>
  HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80014b4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014b8:	f103 0318 	add.w	r3, r3, #24
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014c4:	f103 0318 	add.w	r3, r3, #24
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	889a      	ldrh	r2, [r3, #4]
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	4845      	ldr	r0, [pc, #276]	; (80015e8 <main+0xb60>)
 80014d2:	f001 fff0 	bl	80034b6 <HAL_UART_Transmit>

  // test 29

  if(static_strings_is_line(string_descriptor)){
 80014d6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014da:	f103 0318 	add.w	r3, r3, #24
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f002 fc62 	bl	8003da8 <static_strings_is_line>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <main+0xa72>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	2203      	movs	r2, #3
 80014f0:	4940      	ldr	r1, [pc, #256]	; (80015f4 <main+0xb6c>)
 80014f2:	483d      	ldr	r0, [pc, #244]	; (80015e8 <main+0xb60>)
 80014f4:	f001 ffdf 	bl	80034b6 <HAL_UART_Transmit>
 80014f8:	e006      	b.n	8001508 <main+0xa80>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	2203      	movs	r2, #3
 8001500:	493d      	ldr	r1, [pc, #244]	; (80015f8 <main+0xb70>)
 8001502:	4839      	ldr	r0, [pc, #228]	; (80015e8 <main+0xb60>)
 8001504:	f001 ffd7 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 30

  uint8_t custom_line[10] = "123,56,8\r\n";
 8001508:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800150c:	3b18      	subs	r3, #24
 800150e:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <main+0xb74>)
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	c303      	stmia	r3!, {r0, r1}
 8001514:	801a      	strh	r2, [r3, #0]
  static_strings_create_custom_string(string_descriptor,custom_line);
 8001516:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800151a:	3b18      	subs	r3, #24
 800151c:	4619      	mov	r1, r3
 800151e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001522:	f103 0318 	add.w	r3, r3, #24
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	f002 fc11 	bl	8003d4e <static_strings_create_custom_string>

  if(static_strings_is_line(string_descriptor)){
 800152c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001530:	f103 0318 	add.w	r3, r3, #24
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f002 fc37 	bl	8003da8 <static_strings_is_line>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <main+0xac8>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	2203      	movs	r2, #3
 8001546:	492b      	ldr	r1, [pc, #172]	; (80015f4 <main+0xb6c>)
 8001548:	4827      	ldr	r0, [pc, #156]	; (80015e8 <main+0xb60>)
 800154a:	f001 ffb4 	bl	80034b6 <HAL_UART_Transmit>
 800154e:	e006      	b.n	800155e <main+0xad6>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2203      	movs	r2, #3
 8001556:	4928      	ldr	r1, [pc, #160]	; (80015f8 <main+0xb70>)
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <main+0xb60>)
 800155a:	f001 ffac 	bl	80034b6 <HAL_UART_Transmit>
  }

  // reset all descriptors
  static_strings_init();
 800155e:	f002 f967 	bl	8003830 <static_strings_init>

  // test 31-33

  static_strings_string_descriptor *token;
  static_strings_string_splitter_set_parameters(string_descriptor,',');
 8001562:	212c      	movs	r1, #44	; 0x2c
 8001564:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001568:	f103 0318 	add.w	r3, r3, #24
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	f002 fc79 	bl	8003e64 <static_strings_string_splitter_set_parameters>
  while(static_strings_string_splitter_get_next_token(&token)){
 8001572:	e015      	b.n	80015a0 <main+0xb18>
	  HAL_UART_Transmit(&huart1,token->string,token->length,HAL_MAX_DELAY);
 8001574:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001578:	3b1c      	subs	r3, #28
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001582:	3b1c      	subs	r3, #28
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	889a      	ldrh	r2, [r3, #4]
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	4816      	ldr	r0, [pc, #88]	; (80015e8 <main+0xb60>)
 800158e:	f001 ff92 	bl	80034b6 <HAL_UART_Transmit>
	  static_strings_deallocate(token);
 8001592:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001596:	3b1c      	subs	r3, #28
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fbf4 	bl	8003d88 <static_strings_deallocate>
  while(static_strings_string_splitter_get_next_token(&token)){
 80015a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015a4:	3b1c      	subs	r3, #28
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fc74 	bl	8003e94 <static_strings_string_splitter_get_next_token>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e0      	bne.n	8001574 <main+0xaec>
  }

  // test 34

  int next_token_result = static_strings_string_splitter_get_next_token(&token);
 80015b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015b6:	3b1c      	subs	r3, #28
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fc6b 	bl	8003e94 <static_strings_string_splitter_get_next_token>
 80015be:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015c2:	f103 030c 	add.w	r3, r3, #12
 80015c6:	6018      	str	r0, [r3, #0]
  if(next_token_result){
 80015c8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015cc:	f103 030c 	add.w	r3, r3, #12
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d014      	beq.n	8001600 <main+0xb78>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	2203      	movs	r2, #3
 80015dc:	4905      	ldr	r1, [pc, #20]	; (80015f4 <main+0xb6c>)
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <main+0xb60>)
 80015e0:	f001 ff69 	bl	80034b6 <HAL_UART_Transmit>
 80015e4:	e013      	b.n	800160e <main+0xb86>
 80015e6:	bf00      	nop
 80015e8:	20001670 	.word	0x20001670
 80015ec:	2000066c 	.word	0x2000066c
 80015f0:	08007274 	.word	0x08007274
 80015f4:	080065e8 	.word	0x080065e8
 80015f8:	080065ec 	.word	0x080065ec
 80015fc:	08007280 	.word	0x08007280
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	2203      	movs	r2, #3
 8001606:	49ca      	ldr	r1, [pc, #808]	; (8001930 <main+0xea8>)
 8001608:	48ca      	ldr	r0, [pc, #808]	; (8001934 <main+0xeac>)
 800160a:	f001 ff54 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 35

  static_strings_create_custom_string(string_descriptor,custom);
 800160e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001612:	3b04      	subs	r3, #4
 8001614:	4619      	mov	r1, r3
 8001616:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800161a:	f103 0318 	add.w	r3, r3, #24
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	f002 fb95 	bl	8003d4e <static_strings_create_custom_string>
  static_strings_string_descriptor *substring = static_strings_substring(string_descriptor,2,8);
 8001624:	2208      	movs	r2, #8
 8001626:	2102      	movs	r1, #2
 8001628:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800162c:	f103 0318 	add.w	r3, r3, #24
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	f002 fc8d 	bl	8003f50 <static_strings_substring>
 8001636:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800163a:	f103 0308 	add.w	r3, r3, #8
 800163e:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 8001640:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001644:	f103 0308 	add.w	r3, r3, #8
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d017      	beq.n	800167e <main+0xbf6>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 800164e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001652:	f103 0308 	add.w	r3, r3, #8
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800165e:	f103 0308 	add.w	r3, r3, #8
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	889a      	ldrh	r2, [r3, #4]
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	48b2      	ldr	r0, [pc, #712]	; (8001934 <main+0xeac>)
 800166c:	f001 ff23 	bl	80034b6 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8001670:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001674:	f103 0308 	add.w	r3, r3, #8
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f002 fb85 	bl	8003d88 <static_strings_deallocate>
  }

  // test 36

  substring = static_strings_substring(string_descriptor,0,string_descriptor->length);
 800167e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001682:	f103 0318 	add.w	r3, r3, #24
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	889b      	ldrh	r3, [r3, #4]
 800168a:	461a      	mov	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001692:	f103 0318 	add.w	r3, r3, #24
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f002 fc5a 	bl	8003f50 <static_strings_substring>
 800169c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016a0:	f103 0308 	add.w	r3, r3, #8
 80016a4:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 80016a6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016aa:	f103 0308 	add.w	r3, r3, #8
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d017      	beq.n	80016e4 <main+0xc5c>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 80016b4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016b8:	f103 0308 	add.w	r3, r3, #8
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016c4:	f103 0308 	add.w	r3, r3, #8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	889a      	ldrh	r2, [r3, #4]
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
 80016d0:	4898      	ldr	r0, [pc, #608]	; (8001934 <main+0xeac>)
 80016d2:	f001 fef0 	bl	80034b6 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 80016d6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016da:	f103 0308 	add.w	r3, r3, #8
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	f002 fb52 	bl	8003d88 <static_strings_deallocate>
  }

  // test 37

  substring = static_strings_substring(string_descriptor,0,12);
 80016e4:	220c      	movs	r2, #12
 80016e6:	2100      	movs	r1, #0
 80016e8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016ec:	f103 0318 	add.w	r3, r3, #24
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	f002 fc2d 	bl	8003f50 <static_strings_substring>
 80016f6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016fa:	f103 0308 	add.w	r3, r3, #8
 80016fe:	6018      	str	r0, [r3, #0]
  if (substring != NULL) {
 8001700:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001704:	f103 0308 	add.w	r3, r3, #8
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00e      	beq.n	800172c <main+0xca4>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	2203      	movs	r2, #3
 8001714:	4988      	ldr	r1, [pc, #544]	; (8001938 <main+0xeb0>)
 8001716:	4887      	ldr	r0, [pc, #540]	; (8001934 <main+0xeac>)
 8001718:	f001 fecd 	bl	80034b6 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 800171c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001720:	f103 0308 	add.w	r3, r3, #8
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	f002 fb2f 	bl	8003d88 <static_strings_deallocate>
 800172a:	e006      	b.n	800173a <main+0xcb2>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2203      	movs	r2, #3
 8001732:	497f      	ldr	r1, [pc, #508]	; (8001930 <main+0xea8>)
 8001734:	487f      	ldr	r0, [pc, #508]	; (8001934 <main+0xeac>)
 8001736:	f001 febe 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 38

  substring = static_strings_substring(string_descriptor,-2,5);
 800173a:	2205      	movs	r2, #5
 800173c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001740:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001744:	f103 0318 	add.w	r3, r3, #24
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	f002 fc01 	bl	8003f50 <static_strings_substring>
 800174e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001752:	f103 0308 	add.w	r3, r3, #8
 8001756:	6018      	str	r0, [r3, #0]
  if (substring != NULL){
 8001758:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800175c:	f103 0308 	add.w	r3, r3, #8
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00e      	beq.n	8001784 <main+0xcfc>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	2203      	movs	r2, #3
 800176c:	4972      	ldr	r1, [pc, #456]	; (8001938 <main+0xeb0>)
 800176e:	4871      	ldr	r0, [pc, #452]	; (8001934 <main+0xeac>)
 8001770:	f001 fea1 	bl	80034b6 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8001774:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001778:	f103 0308 	add.w	r3, r3, #8
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f002 fb03 	bl	8003d88 <static_strings_deallocate>
 8001782:	e006      	b.n	8001792 <main+0xd0a>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	2203      	movs	r2, #3
 800178a:	4969      	ldr	r1, [pc, #420]	; (8001930 <main+0xea8>)
 800178c:	4869      	ldr	r0, [pc, #420]	; (8001934 <main+0xeac>)
 800178e:	f001 fe92 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 39

  uint8_t concatenate_at_memory[] = "Hello \0";
 8001792:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001796:	3b04      	subs	r3, #4
 8001798:	4a68      	ldr	r2, [pc, #416]	; (800193c <main+0xeb4>)
 800179a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800179e:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate_at;
  static_strings_create_custom_string(&concatenate_at,concatenate_at_memory);
 80017a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017a6:	3a04      	subs	r2, #4
 80017a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ac:	3b0c      	subs	r3, #12
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 facc 	bl	8003d4e <static_strings_create_custom_string>
  uint8_t concatenate_memory[] = "World\r\n";
 80017b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ba:	3b14      	subs	r3, #20
 80017bc:	4a60      	ldr	r2, [pc, #384]	; (8001940 <main+0xeb8>)
 80017be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c2:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate;
  static_strings_create_custom_string(&concatenate,concatenate_memory);
 80017c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017ca:	3a14      	subs	r2, #20
 80017cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017d0:	3b1c      	subs	r3, #28
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 faba 	bl	8003d4e <static_strings_create_custom_string>
  static_strings_string_descriptor *concatenated;
  concatenated = static_strings_concatenate(&concatenate_at,&concatenate);
 80017da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017de:	3a1c      	subs	r2, #28
 80017e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017e4:	3b0c      	subs	r3, #12
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 fbf3 	bl	8003fd4 <static_strings_concatenate>
 80017ee:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80017f2:	f103 0304 	add.w	r3, r3, #4
 80017f6:	6018      	str	r0, [r3, #0]
  if (concatenated != NULL) {
 80017f8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80017fc:	f103 0304 	add.w	r3, r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d017      	beq.n	8001836 <main+0xdae>
  	  HAL_UART_Transmit(&huart1,concatenated->string,concatenated->length,HAL_MAX_DELAY);
 8001806:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800180a:	f103 0304 	add.w	r3, r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001816:	f103 0304 	add.w	r3, r3, #4
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	889a      	ldrh	r2, [r3, #4]
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	4844      	ldr	r0, [pc, #272]	; (8001934 <main+0xeac>)
 8001824:	f001 fe47 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(concatenated);
 8001828:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800182c:	f103 0304 	add.w	r3, r3, #4
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f002 faa9 	bl	8003d88 <static_strings_deallocate>
  }

  // test 40

  if(static_strings_contains_string(concatenated,&concatenate_at)){
 8001836:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800183a:	3b0c      	subs	r3, #12
 800183c:	4619      	mov	r1, r3
 800183e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001842:	f103 0304 	add.w	r3, r3, #4
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	f002 fc3f 	bl	80040ca <static_strings_contains_string>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <main+0xdda>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	2203      	movs	r2, #3
 8001858:	4937      	ldr	r1, [pc, #220]	; (8001938 <main+0xeb0>)
 800185a:	4836      	ldr	r0, [pc, #216]	; (8001934 <main+0xeac>)
 800185c:	f001 fe2b 	bl	80034b6 <HAL_UART_Transmit>
 8001860:	e006      	b.n	8001870 <main+0xde8>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	2203      	movs	r2, #3
 8001868:	4931      	ldr	r1, [pc, #196]	; (8001930 <main+0xea8>)
 800186a:	4832      	ldr	r0, [pc, #200]	; (8001934 <main+0xeac>)
 800186c:	f001 fe23 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 41

  if(static_strings_contains_string(concatenated,&concatenate)){
 8001870:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001874:	3b1c      	subs	r3, #28
 8001876:	4619      	mov	r1, r3
 8001878:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800187c:	f103 0304 	add.w	r3, r3, #4
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f002 fc22 	bl	80040ca <static_strings_contains_string>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <main+0xe14>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	2203      	movs	r2, #3
 8001892:	4929      	ldr	r1, [pc, #164]	; (8001938 <main+0xeb0>)
 8001894:	4827      	ldr	r0, [pc, #156]	; (8001934 <main+0xeac>)
 8001896:	f001 fe0e 	bl	80034b6 <HAL_UART_Transmit>
 800189a:	e006      	b.n	80018aa <main+0xe22>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	2203      	movs	r2, #3
 80018a2:	4923      	ldr	r1, [pc, #140]	; (8001930 <main+0xea8>)
 80018a4:	4823      	ldr	r0, [pc, #140]	; (8001934 <main+0xeac>)
 80018a6:	f001 fe06 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 42

  uint8_t non_contained_memory[] = "Hill\0";
 80018aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ae:	3b04      	subs	r3, #4
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <main+0xebc>)
 80018b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b6:	6018      	str	r0, [r3, #0]
 80018b8:	3304      	adds	r3, #4
 80018ba:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor non_contained;
  static_strings_create_custom_string(&non_contained,non_contained_memory);
 80018bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018c0:	3a04      	subs	r2, #4
 80018c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c6:	3b0c      	subs	r3, #12
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fa3f 	bl	8003d4e <static_strings_create_custom_string>
  if(static_strings_contains_string(concatenated,&non_contained)){
 80018d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d4:	3b0c      	subs	r3, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80018dc:	f103 0304 	add.w	r3, r3, #4
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	f002 fbf2 	bl	80040ca <static_strings_contains_string>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <main+0xe74>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	2203      	movs	r2, #3
 80018f2:	4911      	ldr	r1, [pc, #68]	; (8001938 <main+0xeb0>)
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <main+0xeac>)
 80018f6:	f001 fdde 	bl	80034b6 <HAL_UART_Transmit>
 80018fa:	e006      	b.n	800190a <main+0xe82>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	2203      	movs	r2, #3
 8001902:	490b      	ldr	r1, [pc, #44]	; (8001930 <main+0xea8>)
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <main+0xeac>)
 8001906:	f001 fdd6 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 43

  if(static_strings_contains_char(concatenated,'W')){
 800190a:	2157      	movs	r1, #87	; 0x57
 800190c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001910:	f103 0304 	add.w	r3, r3, #4
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	f002 fc1f 	bl	8004158 <static_strings_contains_char>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <main+0xec0>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	2203      	movs	r2, #3
 8001926:	4904      	ldr	r1, [pc, #16]	; (8001938 <main+0xeb0>)
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <main+0xeac>)
 800192a:	f001 fdc4 	bl	80034b6 <HAL_UART_Transmit>
 800192e:	e012      	b.n	8001956 <main+0xece>
 8001930:	080065ec 	.word	0x080065ec
 8001934:	20001670 	.word	0x20001670
 8001938:	080065e8 	.word	0x080065e8
 800193c:	0800728c 	.word	0x0800728c
 8001940:	08007294 	.word	0x08007294
 8001944:	0800729c 	.word	0x0800729c
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	2203      	movs	r2, #3
 800194e:	4951      	ldr	r1, [pc, #324]	; (8001a94 <main+0x100c>)
 8001950:	4851      	ldr	r0, [pc, #324]	; (8001a98 <main+0x1010>)
 8001952:	f001 fdb0 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 44

  if(static_strings_contains_char(concatenated,'e')){
 8001956:	2165      	movs	r1, #101	; 0x65
 8001958:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800195c:	f103 0304 	add.w	r3, r3, #4
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	f002 fbf9 	bl	8004158 <static_strings_contains_char>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <main+0xef4>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	2203      	movs	r2, #3
 8001972:	494a      	ldr	r1, [pc, #296]	; (8001a9c <main+0x1014>)
 8001974:	4848      	ldr	r0, [pc, #288]	; (8001a98 <main+0x1010>)
 8001976:	f001 fd9e 	bl	80034b6 <HAL_UART_Transmit>
 800197a:	e006      	b.n	800198a <main+0xf02>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	2203      	movs	r2, #3
 8001982:	4944      	ldr	r1, [pc, #272]	; (8001a94 <main+0x100c>)
 8001984:	4844      	ldr	r0, [pc, #272]	; (8001a98 <main+0x1010>)
 8001986:	f001 fd96 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 45

  if(static_strings_contains_char(concatenated,'m')){
 800198a:	216d      	movs	r1, #109	; 0x6d
 800198c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001990:	f103 0304 	add.w	r3, r3, #4
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	f002 fbdf 	bl	8004158 <static_strings_contains_char>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <main+0xf28>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	2203      	movs	r2, #3
 80019a6:	493d      	ldr	r1, [pc, #244]	; (8001a9c <main+0x1014>)
 80019a8:	483b      	ldr	r0, [pc, #236]	; (8001a98 <main+0x1010>)
 80019aa:	f001 fd84 	bl	80034b6 <HAL_UART_Transmit>
 80019ae:	e006      	b.n	80019be <main+0xf36>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
 80019b4:	2203      	movs	r2, #3
 80019b6:	4937      	ldr	r1, [pc, #220]	; (8001a94 <main+0x100c>)
 80019b8:	4837      	ldr	r0, [pc, #220]	; (8001a98 <main+0x1010>)
 80019ba:	f001 fd7c 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 46

  uint8_t equal_a_memory[] = "Hall\0";
 80019be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c2:	3b14      	subs	r3, #20
 80019c4:	4a36      	ldr	r2, [pc, #216]	; (8001aa0 <main+0x1018>)
 80019c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ca:	6018      	str	r0, [r3, #0]
 80019cc:	3304      	adds	r3, #4
 80019ce:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_a;
  uint8_t equal_b_memory[] = "Hall\0";
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	3b04      	subs	r3, #4
 80019d6:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <main+0x1018>)
 80019d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019dc:	6018      	str	r0, [r3, #0]
 80019de:	3304      	adds	r3, #4
 80019e0:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_b;
  uint8_t non_equal_memory[] = "oil\0";
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	3b14      	subs	r3, #20
 80019e8:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <main+0x101c>)
 80019ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ee:	6018      	str	r0, [r3, #0]
 80019f0:	3304      	adds	r3, #4
 80019f2:	7019      	strb	r1, [r3, #0]
  static_strings_string_descriptor non_equal;
  static_strings_create_custom_string(&equal_a,equal_a_memory);
 80019f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019f8:	3a14      	subs	r2, #20
 80019fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019fe:	3b1c      	subs	r3, #28
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 f9a3 	bl	8003d4e <static_strings_create_custom_string>
  static_strings_create_custom_string(&equal_b,equal_b_memory);
 8001a08:	f107 0220 	add.w	r2, r7, #32
 8001a0c:	3a04      	subs	r2, #4
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	3b0c      	subs	r3, #12
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 f999 	bl	8003d4e <static_strings_create_custom_string>
  static_strings_create_custom_string(&non_equal,non_equal_memory);
 8001a1c:	f107 0220 	add.w	r2, r7, #32
 8001a20:	3a14      	subs	r2, #20
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	3b1c      	subs	r3, #28
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 f98f 	bl	8003d4e <static_strings_create_custom_string>

  if(static_strings_compare(&equal_a,&equal_b)){
 8001a30:	f107 0220 	add.w	r2, r7, #32
 8001a34:	3a0c      	subs	r2, #12
 8001a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3a:	3b1c      	subs	r3, #28
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fbac 	bl	800419c <static_strings_compare>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <main+0xfd2>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	2203      	movs	r2, #3
 8001a50:	4912      	ldr	r1, [pc, #72]	; (8001a9c <main+0x1014>)
 8001a52:	4811      	ldr	r0, [pc, #68]	; (8001a98 <main+0x1010>)
 8001a54:	f001 fd2f 	bl	80034b6 <HAL_UART_Transmit>
 8001a58:	e006      	b.n	8001a68 <main+0xfe0>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	2203      	movs	r2, #3
 8001a60:	490c      	ldr	r1, [pc, #48]	; (8001a94 <main+0x100c>)
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <main+0x1010>)
 8001a64:	f001 fd27 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 47

  if(static_strings_compare(&equal_a,&non_equal)){
 8001a68:	f107 0220 	add.w	r2, r7, #32
 8001a6c:	3a1c      	subs	r2, #28
 8001a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a72:	3b1c      	subs	r3, #28
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fb90 	bl	800419c <static_strings_compare>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <main+0x1020>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	2203      	movs	r2, #3
 8001a88:	4904      	ldr	r1, [pc, #16]	; (8001a9c <main+0x1014>)
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <main+0x1010>)
 8001a8c:	f001 fd13 	bl	80034b6 <HAL_UART_Transmit>
 8001a90:	e011      	b.n	8001ab6 <main+0x102e>
 8001a92:	bf00      	nop
 8001a94:	080065ec 	.word	0x080065ec
 8001a98:	20001670 	.word	0x20001670
 8001a9c:	080065e8 	.word	0x080065e8
 8001aa0:	080072a4 	.word	0x080072a4
 8001aa4:	080072ac 	.word	0x080072ac
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	2203      	movs	r2, #3
 8001aae:	49ce      	ldr	r1, [pc, #824]	; (8001de8 <main+0x1360>)
 8001ab0:	48ce      	ldr	r0, [pc, #824]	; (8001dec <main+0x1364>)
 8001ab2:	f001 fd00 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 48

  static_strings_string_descriptor *var_string;
  uint8_t uint8 = 200;
 8001ab6:	23c8      	movs	r3, #200	; 0xc8
 8001ab8:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001abc:	f102 0203 	add.w	r2, r2, #3
 8001ac0:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_uint8_to_string(uint8);
 8001ac2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ac6:	f103 0303 	add.w	r3, r3, #3
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fb93 	bl	80041f8 <static_strings_uint8_to_string>
 8001ad2:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001ad6:	f103 031c 	add.w	r3, r3, #28
 8001ada:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001adc:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001ae0:	f103 031c 	add.w	r3, r3, #28
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d017      	beq.n	8001b1a <main+0x1092>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001aea:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001aee:	f103 031c 	add.w	r3, r3, #28
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001afa:	f103 031c 	add.w	r3, r3, #28
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	889a      	ldrh	r2, [r3, #4]
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	48b9      	ldr	r0, [pc, #740]	; (8001dec <main+0x1364>)
 8001b08:	f001 fcd5 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001b0c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b10:	f103 031c 	add.w	r3, r3, #28
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f002 f937 	bl	8003d88 <static_strings_deallocate>
  }

  // test 49

  uint16_t uint16 = 64200;
 8001b1a:	f64f 23c8 	movw	r3, #64200	; 0xfac8
 8001b1e:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001b22:	f102 021a 	add.w	r2, r2, #26
 8001b26:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_uint16_to_string(uint16);
 8001b28:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b2c:	f103 031a 	add.w	r3, r3, #26
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fb94 	bl	8004260 <static_strings_uint16_to_string>
 8001b38:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b3c:	f103 031c 	add.w	r3, r3, #28
 8001b40:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001b42:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b46:	f103 031c 	add.w	r3, r3, #28
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d017      	beq.n	8001b80 <main+0x10f8>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b50:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b54:	f103 031c 	add.w	r3, r3, #28
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b60:	f103 031c 	add.w	r3, r3, #28
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	889a      	ldrh	r2, [r3, #4]
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	489f      	ldr	r0, [pc, #636]	; (8001dec <main+0x1364>)
 8001b6e:	f001 fca2 	bl	80034b6 <HAL_UART_Transmit>
	  static_strings_deallocate(var_string);
 8001b72:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b76:	f103 031c 	add.w	r3, r3, #28
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	f002 f904 	bl	8003d88 <static_strings_deallocate>
  }

  // test 50

  uint32_t uint32 = 1000064200;
 8001b80:	4b9b      	ldr	r3, [pc, #620]	; (8001df0 <main+0x1368>)
 8001b82:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001b86:	f102 0214 	add.w	r2, r2, #20
 8001b8a:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(uint32);
 8001b8c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b90:	f103 0314 	add.w	r3, r3, #20
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	f002 fb97 	bl	80042c8 <static_strings_uint32_to_string>
 8001b9a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b9e:	f103 031c 	add.w	r3, r3, #28
 8001ba2:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001ba4:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001ba8:	f103 031c 	add.w	r3, r3, #28
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d017      	beq.n	8001be2 <main+0x115a>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001bb2:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001bb6:	f103 031c 	add.w	r3, r3, #28
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001bc2:	f103 031c 	add.w	r3, r3, #28
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	889a      	ldrh	r2, [r3, #4]
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	4887      	ldr	r0, [pc, #540]	; (8001dec <main+0x1364>)
 8001bd0:	f001 fc71 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001bd4:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001bd8:	f103 031c 	add.w	r3, r3, #28
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f002 f8d3 	bl	8003d88 <static_strings_deallocate>
  }

  // test 51

  int8_t int8 = 100;
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001be8:	f102 0213 	add.w	r2, r2, #19
 8001bec:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_int8_to_string(int8);
 8001bee:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001bf2:	f103 0313 	add.w	r3, r3, #19
 8001bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fb96 	bl	800432c <static_strings_int8_to_string>
 8001c00:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c04:	f103 031c 	add.w	r3, r3, #28
 8001c08:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c0a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c0e:	f103 031c 	add.w	r3, r3, #28
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d017      	beq.n	8001c48 <main+0x11c0>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c18:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c1c:	f103 031c 	add.w	r3, r3, #28
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c28:	f103 031c 	add.w	r3, r3, #28
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	889a      	ldrh	r2, [r3, #4]
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	486d      	ldr	r0, [pc, #436]	; (8001dec <main+0x1364>)
 8001c36:	f001 fc3e 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001c3a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c3e:	f103 031c 	add.w	r3, r3, #28
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	f002 f8a0 	bl	8003d88 <static_strings_deallocate>
  }

  // test 52

  int16_t int16 = -32100;
 8001c48:	f248 239c 	movw	r3, #33436	; 0x829c
 8001c4c:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001c50:	f102 0210 	add.w	r2, r2, #16
 8001c54:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_int16_to_string(int16);
 8001c56:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c5a:	f103 0310 	add.w	r3, r3, #16
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fb96 	bl	8004394 <static_strings_int16_to_string>
 8001c68:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c6c:	f103 031c 	add.w	r3, r3, #28
 8001c70:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c72:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c76:	f103 031c 	add.w	r3, r3, #28
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d017      	beq.n	8001cb0 <main+0x1228>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c80:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c84:	f103 031c 	add.w	r3, r3, #28
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c90:	f103 031c 	add.w	r3, r3, #28
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	889a      	ldrh	r2, [r3, #4]
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	4853      	ldr	r0, [pc, #332]	; (8001dec <main+0x1364>)
 8001c9e:	f001 fc0a 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001ca2:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001ca6:	f103 031c 	add.w	r3, r3, #28
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f002 f86c 	bl	8003d88 <static_strings_deallocate>
  }

  // test 53

  int32_t int32 = 500032100;
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <main+0x136c>)
 8001cb2:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001cb6:	f102 020c 	add.w	r2, r2, #12
 8001cba:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(int32);
 8001cbc:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001cc0:	f103 030c 	add.w	r3, r3, #12
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fafe 	bl	80042c8 <static_strings_uint32_to_string>
 8001ccc:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001cd0:	f103 031c 	add.w	r3, r3, #28
 8001cd4:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001cd6:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001cda:	f103 031c 	add.w	r3, r3, #28
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d017      	beq.n	8001d14 <main+0x128c>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001ce4:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001ce8:	f103 031c 	add.w	r3, r3, #28
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001cf4:	f103 031c 	add.w	r3, r3, #28
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	889a      	ldrh	r2, [r3, #4]
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	483a      	ldr	r0, [pc, #232]	; (8001dec <main+0x1364>)
 8001d02:	f001 fbd8 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001d06:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d0a:	f103 031c 	add.w	r3, r3, #28
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	f002 f83a 	bl	8003d88 <static_strings_deallocate>
  }

  // test 54

  float float_number = 19.60232;
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <main+0x1370>)
 8001d16:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001d1a:	f102 0208 	add.w	r2, r2, #8
 8001d1e:	6013      	str	r3, [r2, #0]
  var_string = static_strings_float_to_string(float_number);
 8001d20:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d24:	f103 0308 	add.w	r3, r3, #8
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	f002 fb67 	bl	80043fc <static_strings_float_to_string>
 8001d2e:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d32:	f103 031c 	add.w	r3, r3, #28
 8001d36:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001d38:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d3c:	f103 031c 	add.w	r3, r3, #28
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d017      	beq.n	8001d76 <main+0x12ee>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001d46:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d4a:	f103 031c 	add.w	r3, r3, #28
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d56:	f103 031c 	add.w	r3, r3, #28
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	889a      	ldrh	r2, [r3, #4]
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	4822      	ldr	r0, [pc, #136]	; (8001dec <main+0x1364>)
 8001d64:	f001 fba7 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001d68:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d6c:	f103 031c 	add.w	r3, r3, #28
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	f002 f809 	bl	8003d88 <static_strings_deallocate>
  }

  // test 55

  double double_number = -1924.2342;
 8001d76:	a41a      	add	r4, pc, #104	; (adr r4, 8001de0 <main+0x1358>)
 8001d78:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d7c:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001d80:	e9c2 3400 	strd	r3, r4, [r2]
  var_string = static_strings_double_to_string(double_number);
 8001d84:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d8c:	f002 fb6e 	bl	800446c <static_strings_double_to_string>
 8001d90:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d94:	f103 031c 	add.w	r3, r3, #28
 8001d98:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001d9a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d9e:	f103 031c 	add.w	r3, r3, #28
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d017      	beq.n	8001dd8 <main+0x1350>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001da8:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001dac:	f103 031c 	add.w	r3, r3, #28
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001db8:	f103 031c 	add.w	r3, r3, #28
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	889a      	ldrh	r2, [r3, #4]
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <main+0x1364>)
 8001dc6:	f001 fb76 	bl	80034b6 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001dca:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001dce:	f103 031c 	add.w	r3, r3, #28
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	f001 ffd8 	bl	8003d88 <static_strings_deallocate>
  }

  // test 56

  static_strings_string_descriptor *copy_test_source_string = static_strings_save((uint8_t *)"I am a copy test\r\n");
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <main+0x1374>)
 8001dda:	f001 ff91 	bl	8003d00 <static_strings_save>
 8001dde:	e00f      	b.n	8001e00 <main+0x1378>
 8001de0:	d21ff2e5 	.word	0xd21ff2e5
 8001de4:	c09e10ef 	.word	0xc09e10ef
 8001de8:	080065ec 	.word	0x080065ec
 8001dec:	20001670 	.word	0x20001670
 8001df0:	3b9bc4c8 	.word	0x3b9bc4c8
 8001df4:	1dcde264 	.word	0x1dcde264
 8001df8:	419cd18d 	.word	0x419cd18d
 8001dfc:	080065f0 	.word	0x080065f0
 8001e00:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e04:	f103 031c 	add.w	r3, r3, #28
 8001e08:	6018      	str	r0, [r3, #0]
  if(copy_test_source_string != NULL){
 8001e0a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e0e:	f103 031c 	add.w	r3, r3, #28
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d046      	beq.n	8001ea6 <main+0x141e>
	  static_strings_string_descriptor *copy_test_target_string = static_strings_allocate(100);
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	f001 fe69 	bl	8003af0 <static_strings_allocate>
 8001e1e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e22:	f103 0318 	add.w	r3, r3, #24
 8001e26:	6018      	str	r0, [r3, #0]
	  if(static_strings_copy(copy_test_target_string,copy_test_source_string,0) != NULL){
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e2e:	f103 031c 	add.w	r3, r3, #28
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e38:	f103 0318 	add.w	r3, r3, #24
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	f001 fddf 	bl	8003a00 <static_strings_copy>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01f      	beq.n	8001e88 <main+0x1400>
		  HAL_UART_Transmit(&huart1,copy_test_target_string->string,copy_test_target_string->length,HAL_MAX_DELAY);
 8001e48:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e4c:	f103 0318 	add.w	r3, r3, #24
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e58:	f103 0318 	add.w	r3, r3, #24
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	889a      	ldrh	r2, [r3, #4]
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	48bb      	ldr	r0, [pc, #748]	; (8002154 <main+0x16cc>)
 8001e66:	f001 fb26 	bl	80034b6 <HAL_UART_Transmit>
		  static_strings_deallocate(copy_test_source_string);
 8001e6a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e6e:	f103 031c 	add.w	r3, r3, #28
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	f001 ff88 	bl	8003d88 <static_strings_deallocate>
		  static_strings_deallocate(copy_test_target_string);
 8001e78:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e7c:	f103 0318 	add.w	r3, r3, #24
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f001 ff81 	bl	8003d88 <static_strings_deallocate>
 8001e86:	e01c      	b.n	8001ec2 <main+0x143a>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	49b2      	ldr	r1, [pc, #712]	; (8002158 <main+0x16d0>)
 8001e90:	48b0      	ldr	r0, [pc, #704]	; (8002154 <main+0x16cc>)
 8001e92:	f001 fb10 	bl	80034b6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	49af      	ldr	r1, [pc, #700]	; (800215c <main+0x16d4>)
 8001e9e:	48ad      	ldr	r0, [pc, #692]	; (8002154 <main+0x16cc>)
 8001ea0:	f001 fb09 	bl	80034b6 <HAL_UART_Transmit>
 8001ea4:	e00d      	b.n	8001ec2 <main+0x143a>
	  }
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	2208      	movs	r2, #8
 8001eac:	49ac      	ldr	r1, [pc, #688]	; (8002160 <main+0x16d8>)
 8001eae:	48a9      	ldr	r0, [pc, #676]	; (8002154 <main+0x16cc>)
 8001eb0:	f001 fb01 	bl	80034b6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	2201      	movs	r2, #1
 8001eba:	49a8      	ldr	r1, [pc, #672]	; (800215c <main+0x16d4>)
 8001ebc:	48a5      	ldr	r0, [pc, #660]	; (8002154 <main+0x16cc>)
 8001ebe:	f001 fafa 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 57

  static_strings_string_descriptor *clone_test_source_string = static_strings_save((uint8_t *)"I am a clone test\r\n");
 8001ec2:	48a8      	ldr	r0, [pc, #672]	; (8002164 <main+0x16dc>)
 8001ec4:	f001 ff1c 	bl	8003d00 <static_strings_save>
 8001ec8:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ecc:	f103 0314 	add.w	r3, r3, #20
 8001ed0:	6018      	str	r0, [r3, #0]
  if(copy_test_source_string != NULL){
 8001ed2:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ed6:	f103 031c 	add.w	r3, r3, #28
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d041      	beq.n	8001f64 <main+0x14dc>
	  static_strings_string_descriptor *clone_test_target_string = static_strings_clone(clone_test_source_string);
 8001ee0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ee4:	f103 0314 	add.w	r3, r3, #20
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	f001 fddb 	bl	8003aa4 <static_strings_clone>
 8001eee:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ef2:	f103 0310 	add.w	r3, r3, #16
 8001ef6:	6018      	str	r0, [r3, #0]
	  if(clone_test_target_string != NULL){
 8001ef8:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001efc:	f103 0310 	add.w	r3, r3, #16
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01f      	beq.n	8001f46 <main+0x14be>
		  HAL_UART_Transmit(&huart1,clone_test_target_string->string,clone_test_target_string->length,HAL_MAX_DELAY);
 8001f06:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f0a:	f103 0310 	add.w	r3, r3, #16
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f16:	f103 0310 	add.w	r3, r3, #16
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	889a      	ldrh	r2, [r3, #4]
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	488c      	ldr	r0, [pc, #560]	; (8002154 <main+0x16cc>)
 8001f24:	f001 fac7 	bl	80034b6 <HAL_UART_Transmit>
		  static_strings_deallocate(clone_test_source_string);
 8001f28:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f2c:	f103 0314 	add.w	r3, r3, #20
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f001 ff29 	bl	8003d88 <static_strings_deallocate>
		  static_strings_deallocate(clone_test_target_string);
 8001f36:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f3a:	f103 0310 	add.w	r3, r3, #16
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	f001 ff22 	bl	8003d88 <static_strings_deallocate>
 8001f44:	e01c      	b.n	8001f80 <main+0x14f8>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4982      	ldr	r1, [pc, #520]	; (8002158 <main+0x16d0>)
 8001f4e:	4881      	ldr	r0, [pc, #516]	; (8002154 <main+0x16cc>)
 8001f50:	f001 fab1 	bl	80034b6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4980      	ldr	r1, [pc, #512]	; (800215c <main+0x16d4>)
 8001f5c:	487d      	ldr	r0, [pc, #500]	; (8002154 <main+0x16cc>)
 8001f5e:	f001 faaa 	bl	80034b6 <HAL_UART_Transmit>
 8001f62:	e00d      	b.n	8001f80 <main+0x14f8>
	  }
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	2208      	movs	r2, #8
 8001f6a:	497d      	ldr	r1, [pc, #500]	; (8002160 <main+0x16d8>)
 8001f6c:	4879      	ldr	r0, [pc, #484]	; (8002154 <main+0x16cc>)
 8001f6e:	f001 faa2 	bl	80034b6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	2201      	movs	r2, #1
 8001f78:	4978      	ldr	r1, [pc, #480]	; (800215c <main+0x16d4>)
 8001f7a:	4876      	ldr	r0, [pc, #472]	; (8002154 <main+0x16cc>)
 8001f7c:	f001 fa9b 	bl	80034b6 <HAL_UART_Transmit>
  }

  // test 58

	static_strings_string_descriptor *move_test_source_string = static_strings_save((uint8_t *)"I am a move test\r\n");
 8001f80:	4879      	ldr	r0, [pc, #484]	; (8002168 <main+0x16e0>)
 8001f82:	f001 febd 	bl	8003d00 <static_strings_save>
 8001f86:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f8a:	f103 030c 	add.w	r3, r3, #12
 8001f8e:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001f90:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f94:	f103 031c 	add.w	r3, r3, #28
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d057      	beq.n	800204e <main+0x15c6>
	  static_strings_string_descriptor *move_test_target_string = static_strings_allocate(100);
 8001f9e:	2064      	movs	r0, #100	; 0x64
 8001fa0:	f001 fda6 	bl	8003af0 <static_strings_allocate>
 8001fa4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fa8:	f103 0308 	add.w	r3, r3, #8
 8001fac:	6018      	str	r0, [r3, #0]
	  *move_test_target_string->string = '.';
 8001fae:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fb2:	f103 0308 	add.w	r3, r3, #8
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	222e      	movs	r2, #46	; 0x2e
 8001fbc:	701a      	strb	r2, [r3, #0]
	  if(static_strings_move(move_test_target_string,move_test_source_string,1) != NULL){
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fc4:	f103 030c 	add.w	r3, r3, #12
 8001fc8:	6819      	ldr	r1, [r3, #0]
 8001fca:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fce:	f103 0308 	add.w	r3, r3, #8
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	f001 fd4c 	bl	8003a70 <static_strings_move>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <main+0x15a8>
		  if(move_test_source_string->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8001fde:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fe2:	f103 030c 	add.w	r3, r3, #12
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	79db      	ldrb	r3, [r3, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d111      	bne.n	8002012 <main+0x158a>
			HAL_UART_Transmit(&huart1,move_test_target_string->string,move_test_target_string->length,HAL_MAX_DELAY);
 8001fee:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ff2:	f103 0308 	add.w	r3, r3, #8
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ffe:	f103 0308 	add.w	r3, r3, #8
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	889a      	ldrh	r2, [r3, #4]
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	4852      	ldr	r0, [pc, #328]	; (8002154 <main+0x16cc>)
 800200c:	f001 fa53 	bl	80034b6 <HAL_UART_Transmit>
 8002010:	e006      	b.n	8002020 <main+0x1598>
		  }
		  else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	2208      	movs	r2, #8
 8002018:	4954      	ldr	r1, [pc, #336]	; (800216c <main+0x16e4>)
 800201a:	484e      	ldr	r0, [pc, #312]	; (8002154 <main+0x16cc>)
 800201c:	f001 fa4b 	bl	80034b6 <HAL_UART_Transmit>
		  }
		  static_strings_deallocate(move_test_source_string);
 8002020:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002024:	f103 030c 	add.w	r3, r3, #12
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	f001 fead 	bl	8003d88 <static_strings_deallocate>
 800202e:	e01c      	b.n	800206a <main+0x15e2>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	2208      	movs	r2, #8
 8002036:	4948      	ldr	r1, [pc, #288]	; (8002158 <main+0x16d0>)
 8002038:	4846      	ldr	r0, [pc, #280]	; (8002154 <main+0x16cc>)
 800203a:	f001 fa3c 	bl	80034b6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	2201      	movs	r2, #1
 8002044:	4945      	ldr	r1, [pc, #276]	; (800215c <main+0x16d4>)
 8002046:	4843      	ldr	r0, [pc, #268]	; (8002154 <main+0x16cc>)
 8002048:	f001 fa35 	bl	80034b6 <HAL_UART_Transmit>
 800204c:	e00d      	b.n	800206a <main+0x15e2>
	  }
	}
	else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	2208      	movs	r2, #8
 8002054:	4942      	ldr	r1, [pc, #264]	; (8002160 <main+0x16d8>)
 8002056:	483f      	ldr	r0, [pc, #252]	; (8002154 <main+0x16cc>)
 8002058:	f001 fa2d 	bl	80034b6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	2201      	movs	r2, #1
 8002062:	493e      	ldr	r1, [pc, #248]	; (800215c <main+0x16d4>)
 8002064:	483b      	ldr	r0, [pc, #236]	; (8002154 <main+0x16cc>)
 8002066:	f001 fa26 	bl	80034b6 <HAL_UART_Transmit>
	}

	// test 59

	static_strings_string_descriptor *concatenate_and_clean_concatenate_at_test = static_strings_save((uint8_t *)"I am a ");
 800206a:	4841      	ldr	r0, [pc, #260]	; (8002170 <main+0x16e8>)
 800206c:	f001 fe48 	bl	8003d00 <static_strings_save>
 8002070:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002074:	f103 0304 	add.w	r3, r3, #4
 8002078:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_and_clean_concatenate_test = static_strings_save((uint8_t *)"concatenate test\r\n");
 800207a:	483e      	ldr	r0, [pc, #248]	; (8002174 <main+0x16ec>)
 800207c:	f001 fe40 	bl	8003d00 <static_strings_save>
 8002080:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002084:	6018      	str	r0, [r3, #0]
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8002086:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800208a:	f103 0304 	add.w	r3, r3, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d071      	beq.n	8002178 <main+0x16f0>
 8002094:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d06c      	beq.n	8002178 <main+0x16f0>
	  static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean(concatenate_and_clean_concatenate_at_test,concatenate_and_clean_concatenate_test);
 800209e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80020a8:	f103 0304 	add.w	r3, r3, #4
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	f001 ffcb 	bl	8004048 <static_strings_concatenate_and_clean>
 80020b2:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020b6:	f103 031c 	add.w	r3, r3, #28
 80020ba:	6018      	str	r0, [r3, #0]
	  if(concatenated_string != NULL){
 80020bc:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020c0:	f103 031c 	add.w	r3, r3, #28
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d034      	beq.n	8002134 <main+0x16ac>
		  if(concatenate_and_clean_concatenate_at_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80020ca:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80020ce:	f103 0304 	add.w	r3, r3, #4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	79db      	ldrb	r3, [r3, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d111      	bne.n	80020fe <main+0x1676>
			  HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 80020da:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020de:	f103 031c 	add.w	r3, r3, #28
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020ea:	f103 031c 	add.w	r3, r3, #28
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	889a      	ldrh	r2, [r3, #4]
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	4817      	ldr	r0, [pc, #92]	; (8002154 <main+0x16cc>)
 80020f8:	f001 f9dd 	bl	80034b6 <HAL_UART_Transmit>
 80020fc:	e006      	b.n	800210c <main+0x1684>
		  }
		  else{
			  HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	2208      	movs	r2, #8
 8002104:	4919      	ldr	r1, [pc, #100]	; (800216c <main+0x16e4>)
 8002106:	4813      	ldr	r0, [pc, #76]	; (8002154 <main+0x16cc>)
 8002108:	f001 f9d5 	bl	80034b6 <HAL_UART_Transmit>
		  }
		  static_strings_deallocate(concatenate_and_clean_concatenate_at_test);
 800210c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002110:	f103 0304 	add.w	r3, r3, #4
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	f001 fe37 	bl	8003d88 <static_strings_deallocate>
		  static_strings_deallocate(concatenate_and_clean_concatenate_test);
 800211a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	f001 fe32 	bl	8003d88 <static_strings_deallocate>
		  static_strings_deallocate(concatenated_string);
 8002124:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002128:	f103 031c 	add.w	r3, r3, #28
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f001 fe2b 	bl	8003d88 <static_strings_deallocate>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8002132:	e02f      	b.n	8002194 <main+0x170c>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	2208      	movs	r2, #8
 800213a:	4907      	ldr	r1, [pc, #28]	; (8002158 <main+0x16d0>)
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <main+0x16cc>)
 800213e:	f001 f9ba 	bl	80034b6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	2201      	movs	r2, #1
 8002148:	4904      	ldr	r1, [pc, #16]	; (800215c <main+0x16d4>)
 800214a:	4802      	ldr	r0, [pc, #8]	; (8002154 <main+0x16cc>)
 800214c:	f001 f9b3 	bl	80034b6 <HAL_UART_Transmit>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8002150:	e020      	b.n	8002194 <main+0x170c>
 8002152:	bf00      	nop
 8002154:	20001670 	.word	0x20001670
 8002158:	08006604 	.word	0x08006604
 800215c:	2000066c 	.word	0x2000066c
 8002160:	08006610 	.word	0x08006610
 8002164:	0800661c 	.word	0x0800661c
 8002168:	08006630 	.word	0x08006630
 800216c:	08006644 	.word	0x08006644
 8002170:	08006650 	.word	0x08006650
 8002174:	08006658 	.word	0x08006658
	  }
	}
	else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	2208      	movs	r2, #8
 800217e:	4959      	ldr	r1, [pc, #356]	; (80022e4 <main+0x185c>)
 8002180:	4859      	ldr	r0, [pc, #356]	; (80022e8 <main+0x1860>)
 8002182:	f001 f998 	bl	80034b6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	2201      	movs	r2, #1
 800218c:	4957      	ldr	r1, [pc, #348]	; (80022ec <main+0x1864>)
 800218e:	4856      	ldr	r0, [pc, #344]	; (80022e8 <main+0x1860>)
 8002190:	f001 f991 	bl	80034b6 <HAL_UART_Transmit>
	}

	// test 60

	static_strings_string_descriptor *concatenate_all_test_one = static_strings_save((uint8_t *)"I am a ");
 8002194:	4856      	ldr	r0, [pc, #344]	; (80022f0 <main+0x1868>)
 8002196:	f001 fdb3 	bl	8003d00 <static_strings_save>
 800219a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800219e:	f103 0318 	add.w	r3, r3, #24
 80021a2:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_two = static_strings_save((uint8_t *)"concatenate all ");
 80021a4:	4853      	ldr	r0, [pc, #332]	; (80022f4 <main+0x186c>)
 80021a6:	f001 fdab 	bl	8003d00 <static_strings_save>
 80021aa:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021ae:	f103 0314 	add.w	r3, r3, #20
 80021b2:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_three = static_strings_save((uint8_t *)"test\r\n");
 80021b4:	4850      	ldr	r0, [pc, #320]	; (80022f8 <main+0x1870>)
 80021b6:	f001 fda3 	bl	8003d00 <static_strings_save>
 80021ba:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021be:	f103 0310 	add.w	r3, r3, #16
 80021c2:	6018      	str	r0, [r3, #0]
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 80021c4:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021c8:	f103 0318 	add.w	r3, r3, #24
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d078      	beq.n	80022c4 <main+0x183c>
 80021d2:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021d6:	f103 0314 	add.w	r3, r3, #20
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d071      	beq.n	80022c4 <main+0x183c>
 80021e0:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021e4:	f103 0310 	add.w	r3, r3, #16
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06a      	beq.n	80022c4 <main+0x183c>
	  static_strings_string_descriptor *concatenated_string = static_strings_concatenate_all(3,concatenate_all_test_one,concatenate_all_test_two,concatenate_all_test_three);
 80021ee:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021f2:	f103 0310 	add.w	r3, r3, #16
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f507 52de 	add.w	r2, r7, #7104	; 0x1bc0
 80021fc:	f102 0214 	add.w	r2, r2, #20
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	f507 51de 	add.w	r1, r7, #7104	; 0x1bc0
 8002206:	f101 0118 	add.w	r1, r1, #24
 800220a:	6809      	ldr	r1, [r1, #0]
 800220c:	2003      	movs	r0, #3
 800220e:	f001 ff32 	bl	8004076 <static_strings_concatenate_all>
 8002212:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002216:	f103 030c 	add.w	r3, r3, #12
 800221a:	6018      	str	r0, [r3, #0]
	  if(concatenated_string != NULL){
 800221c:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002220:	f103 030c 	add.w	r3, r3, #12
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03d      	beq.n	80022a6 <main+0x181e>
		  if(concatenate_all_test_one->status == STATIC_STRINGS_STRING_STATUS_ALLOCATED){
 800222a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800222e:	f103 0318 	add.w	r3, r3, #24
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	79db      	ldrb	r3, [r3, #7]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d111      	bne.n	800225e <main+0x17d6>
			HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 800223a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800223e:	f103 030c 	add.w	r3, r3, #12
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800224a:	f103 030c 	add.w	r3, r3, #12
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	889a      	ldrh	r2, [r3, #4]
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	4824      	ldr	r0, [pc, #144]	; (80022e8 <main+0x1860>)
 8002258:	f001 f92d 	bl	80034b6 <HAL_UART_Transmit>
 800225c:	e006      	b.n	800226c <main+0x17e4>
		  }
		  else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	2208      	movs	r2, #8
 8002264:	4925      	ldr	r1, [pc, #148]	; (80022fc <main+0x1874>)
 8002266:	4820      	ldr	r0, [pc, #128]	; (80022e8 <main+0x1860>)
 8002268:	f001 f925 	bl	80034b6 <HAL_UART_Transmit>
		  }
		  static_strings_deallocate(concatenate_all_test_one);
 800226c:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002270:	f103 0318 	add.w	r3, r3, #24
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f001 fd87 	bl	8003d88 <static_strings_deallocate>
		  static_strings_deallocate(concatenate_all_test_two);
 800227a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800227e:	f103 0314 	add.w	r3, r3, #20
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	f001 fd80 	bl	8003d88 <static_strings_deallocate>
		  static_strings_deallocate(concatenate_all_test_three);
 8002288:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800228c:	f103 0310 	add.w	r3, r3, #16
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f001 fd79 	bl	8003d88 <static_strings_deallocate>
		  static_strings_deallocate(concatenated_string);
 8002296:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800229a:	f103 030c 	add.w	r3, r3, #12
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f001 fd72 	bl	8003d88 <static_strings_deallocate>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 80022a4:	e01c      	b.n	80022e0 <main+0x1858>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	2208      	movs	r2, #8
 80022ac:	4914      	ldr	r1, [pc, #80]	; (8002300 <main+0x1878>)
 80022ae:	480e      	ldr	r0, [pc, #56]	; (80022e8 <main+0x1860>)
 80022b0:	f001 f901 	bl	80034b6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
 80022b8:	2201      	movs	r2, #1
 80022ba:	490c      	ldr	r1, [pc, #48]	; (80022ec <main+0x1864>)
 80022bc:	480a      	ldr	r0, [pc, #40]	; (80022e8 <main+0x1860>)
 80022be:	f001 f8fa 	bl	80034b6 <HAL_UART_Transmit>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 80022c2:	e00d      	b.n	80022e0 <main+0x1858>
	  }
	}
	else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	2208      	movs	r2, #8
 80022ca:	4906      	ldr	r1, [pc, #24]	; (80022e4 <main+0x185c>)
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <main+0x1860>)
 80022ce:	f001 f8f2 	bl	80034b6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	2201      	movs	r2, #1
 80022d8:	4904      	ldr	r1, [pc, #16]	; (80022ec <main+0x1864>)
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <main+0x1860>)
 80022dc:	f001 f8eb 	bl	80034b6 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <main+0x1858>
 80022e2:	bf00      	nop
 80022e4:	08006610 	.word	0x08006610
 80022e8:	20001670 	.word	0x20001670
 80022ec:	2000066c 	.word	0x2000066c
 80022f0:	08006650 	.word	0x08006650
 80022f4:	0800666c 	.word	0x0800666c
 80022f8:	08006680 	.word	0x08006680
 80022fc:	08006644 	.word	0x08006644
 8002300:	08006604 	.word	0x08006604

08002304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b090      	sub	sp, #64	; 0x40
 8002308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	2228      	movs	r2, #40	; 0x28
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f002 f913 	bl	800453e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800232a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800232e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002334:	2301      	movs	r3, #1
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002338:	2302      	movs	r3, #2
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800233c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002342:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002348:	f107 0318 	add.w	r3, r7, #24
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fc49 	bl	8002be4 <HAL_RCC_OscConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002358:	f000 f866 	bl	8002428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235c:	230f      	movs	r3, #15
 800235e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002360:	2302      	movs	r3, #2
 8002362:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f000 feb4 	bl	80030e4 <HAL_RCC_ClockConfig>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002382:	f000 f851 	bl	8002428 <Error_Handler>
  }
}
 8002386:	bf00      	nop
 8002388:	3740      	adds	r7, #64	; 0x40
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <MX_USART1_UART_Init+0x50>)
 8002398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 800239c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023b6:	220c      	movs	r2, #12
 80023b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_USART1_UART_Init+0x4c>)
 80023c8:	f001 f828 	bl	800341c <HAL_UART_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023d2:	f000 f829 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20001670 	.word	0x20001670
 80023e0:	40013800 	.word	0x40013800

080023e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_GPIO_Init+0x40>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <MX_GPIO_Init+0x40>)
 80023f0:	f043 0320 	orr.w	r3, r3, #32
 80023f4:	6193      	str	r3, [r2, #24]
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_GPIO_Init+0x40>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_GPIO_Init+0x40>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <MX_GPIO_Init+0x40>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6193      	str	r3, [r2, #24]
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <MX_GPIO_Init+0x40>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]

}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000

08002428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_MspInit+0x5c>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_MspInit+0x5c>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6193      	str	r3, [r2, #24]
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_MspInit+0x5c>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_MspInit+0x5c>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_MspInit+0x5c>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_MspInit+0x5c>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_MspInit+0x60>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_MspInit+0x60>)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000

08002498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_UART_MspInit+0x8c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d131      	bne.n	800251c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_UART_MspInit+0x90>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4619      	mov	r1, r3
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <HAL_UART_MspInit+0x94>)
 80024fe:	f000 fa17 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4619      	mov	r1, r3
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <HAL_UART_MspInit+0x94>)
 8002518:	f000 fa0a 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40013800 	.word	0x40013800
 8002528:	40021000 	.word	0x40021000
 800252c:	40010800 	.word	0x40010800

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <HardFault_Handler+0x4>

08002542 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <MemManage_Handler+0x4>

08002548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <BusFault_Handler+0x4>

0800254e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <UsageFault_Handler+0x4>

08002554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f000 f8d8 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <_sbrk+0x5c>)
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <_sbrk+0x60>)
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <_sbrk+0x64>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <_sbrk+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b4:	f001 ff8e 	bl	80044d4 <__errno>
 80025b8:	4602      	mov	r2, r0
 80025ba:	230c      	movs	r3, #12
 80025bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e009      	b.n	80025d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <_sbrk+0x64>)
 80025d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20005000 	.word	0x20005000
 80025e4:	00000400 	.word	0x00000400
 80025e8:	200001f8 	.word	0x200001f8
 80025ec:	20001888 	.word	0x20001888

080025f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <SystemInit+0x5c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <SystemInit+0x5c>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <SystemInit+0x5c>)
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4911      	ldr	r1, [pc, #68]	; (800264c <SystemInit+0x5c>)
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <SystemInit+0x60>)
 8002608:	4013      	ands	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <SystemInit+0x5c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <SystemInit+0x5c>)
 8002612:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <SystemInit+0x5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SystemInit+0x5c>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <SystemInit+0x5c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <SystemInit+0x5c>)
 800262e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002632:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SystemInit+0x5c>)
 8002636:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800263a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SystemInit+0x64>)
 800263e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002642:	609a      	str	r2, [r3, #8]
#endif 
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000
 8002650:	f8ff0000 	.word	0xf8ff0000
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002658:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800265a:	e003      	b.n	8002664 <LoopCopyDataInit>

0800265c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800265e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002660:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002662:	3104      	adds	r1, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002664:	480a      	ldr	r0, [pc, #40]	; (8002690 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002668:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800266a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800266c:	d3f6      	bcc.n	800265c <CopyDataInit>
  ldr r2, =_sbss
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002670:	e002      	b.n	8002678 <LoopFillZerobss>

08002672 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002674:	f842 3b04 	str.w	r3, [r2], #4

08002678 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800267a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800267c:	d3f9      	bcc.n	8002672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800267e:	f7ff ffb7 	bl	80025f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002682:	f001 ff2d 	bl	80044e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002686:	f7fe f9ff 	bl	8000a88 <main>
  bx lr
 800268a:	4770      	bx	lr
  ldr r3, =_sidata
 800268c:	08007568 	.word	0x08007568
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002694:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002698:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800269c:	20001888 	.word	0x20001888

080026a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC1_2_IRQHandler>
	...

080026a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_Init+0x28>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_Init+0x28>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f000 f907 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f000 f808 	bl	80026d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c0:	f7ff feb8 	bl	8002434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x54>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_InitTick+0x58>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f911 	bl	8002916 <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f000 f8e7 	bl	80028de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_InitTick+0x5c>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000000 	.word	0x20000000
 8002728:	20000008 	.word	0x20000008
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_IncTick+0x1c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_IncTick+0x20>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_IncTick+0x20>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	20000008 	.word	0x20000008
 8002750:	20001880 	.word	0x20001880

08002754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b02      	ldr	r3, [pc, #8]	; (8002764 <HAL_GetTick+0x10>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	20001880 	.word	0x20001880

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff90 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff49 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff5e 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff90 	bl	8002820 <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5f 	bl	80027cc <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffb0 	bl	8002884 <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b08b      	sub	sp, #44	; 0x2c
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002942:	e127      	b.n	8002b94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002944:	2201      	movs	r2, #1
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	429a      	cmp	r2, r3
 800295e:	f040 8116 	bne.w	8002b8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b12      	cmp	r3, #18
 8002968:	d034      	beq.n	80029d4 <HAL_GPIO_Init+0xa4>
 800296a:	2b12      	cmp	r3, #18
 800296c:	d80d      	bhi.n	800298a <HAL_GPIO_Init+0x5a>
 800296e:	2b02      	cmp	r3, #2
 8002970:	d02b      	beq.n	80029ca <HAL_GPIO_Init+0x9a>
 8002972:	2b02      	cmp	r3, #2
 8002974:	d804      	bhi.n	8002980 <HAL_GPIO_Init+0x50>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d031      	beq.n	80029de <HAL_GPIO_Init+0xae>
 800297a:	2b01      	cmp	r3, #1
 800297c:	d01c      	beq.n	80029b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297e:	e048      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002980:	2b03      	cmp	r3, #3
 8002982:	d043      	beq.n	8002a0c <HAL_GPIO_Init+0xdc>
 8002984:	2b11      	cmp	r3, #17
 8002986:	d01b      	beq.n	80029c0 <HAL_GPIO_Init+0x90>
          break;
 8002988:	e043      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800298a:	4a89      	ldr	r2, [pc, #548]	; (8002bb0 <HAL_GPIO_Init+0x280>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d026      	beq.n	80029de <HAL_GPIO_Init+0xae>
 8002990:	4a87      	ldr	r2, [pc, #540]	; (8002bb0 <HAL_GPIO_Init+0x280>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d806      	bhi.n	80029a4 <HAL_GPIO_Init+0x74>
 8002996:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_GPIO_Init+0x284>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d020      	beq.n	80029de <HAL_GPIO_Init+0xae>
 800299c:	4a86      	ldr	r2, [pc, #536]	; (8002bb8 <HAL_GPIO_Init+0x288>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_GPIO_Init+0xae>
          break;
 80029a2:	e036      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80029a4:	4a85      	ldr	r2, [pc, #532]	; (8002bbc <HAL_GPIO_Init+0x28c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d019      	beq.n	80029de <HAL_GPIO_Init+0xae>
 80029aa:	4a85      	ldr	r2, [pc, #532]	; (8002bc0 <HAL_GPIO_Init+0x290>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d016      	beq.n	80029de <HAL_GPIO_Init+0xae>
 80029b0:	4a84      	ldr	r2, [pc, #528]	; (8002bc4 <HAL_GPIO_Init+0x294>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0xae>
          break;
 80029b6:	e02c      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	623b      	str	r3, [r7, #32]
          break;
 80029be:	e028      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	3304      	adds	r3, #4
 80029c6:	623b      	str	r3, [r7, #32]
          break;
 80029c8:	e023      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	3308      	adds	r3, #8
 80029d0:	623b      	str	r3, [r7, #32]
          break;
 80029d2:	e01e      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	330c      	adds	r3, #12
 80029da:	623b      	str	r3, [r7, #32]
          break;
 80029dc:	e019      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029e6:	2304      	movs	r3, #4
 80029e8:	623b      	str	r3, [r7, #32]
          break;
 80029ea:	e012      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f4:	2308      	movs	r3, #8
 80029f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	611a      	str	r2, [r3, #16]
          break;
 80029fe:	e008      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a00:	2308      	movs	r3, #8
 8002a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	615a      	str	r2, [r3, #20]
          break;
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
          break;
 8002a10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2bff      	cmp	r3, #255	; 0xff
 8002a16:	d801      	bhi.n	8002a1c <HAL_GPIO_Init+0xec>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	e001      	b.n	8002a20 <HAL_GPIO_Init+0xf0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2bff      	cmp	r3, #255	; 0xff
 8002a26:	d802      	bhi.n	8002a2e <HAL_GPIO_Init+0xfe>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x104>
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	3b08      	subs	r3, #8
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	401a      	ands	r2, r3
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8096 	beq.w	8002b8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a62:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_GPIO_Init+0x298>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_GPIO_Init+0x298>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6193      	str	r3, [r2, #24]
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_GPIO_Init+0x298>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a7a:	4a54      	ldr	r2, [pc, #336]	; (8002bcc <HAL_GPIO_Init+0x29c>)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4b      	ldr	r2, [pc, #300]	; (8002bd0 <HAL_GPIO_Init+0x2a0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_GPIO_Init+0x19e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	; (8002bd4 <HAL_GPIO_Init+0x2a4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00d      	beq.n	8002aca <HAL_GPIO_Init+0x19a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a49      	ldr	r2, [pc, #292]	; (8002bd8 <HAL_GPIO_Init+0x2a8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <HAL_GPIO_Init+0x196>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a48      	ldr	r2, [pc, #288]	; (8002bdc <HAL_GPIO_Init+0x2ac>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_GPIO_Init+0x192>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x1a0>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e004      	b.n	8002ad0 <HAL_GPIO_Init+0x1a0>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x1a0>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x1a0>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	f002 0203 	and.w	r2, r2, #3
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ae0:	493a      	ldr	r1, [pc, #232]	; (8002bcc <HAL_GPIO_Init+0x29c>)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4938      	ldr	r1, [pc, #224]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
 8002b06:	e006      	b.n	8002b16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b08:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	4933      	ldr	r1, [pc, #204]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b22:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	492e      	ldr	r1, [pc, #184]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
 8002b2e:	e006      	b.n	8002b3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	4929      	ldr	r1, [pc, #164]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b4a:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	4924      	ldr	r1, [pc, #144]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
 8002b56:	e006      	b.n	8002b66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	491f      	ldr	r1, [pc, #124]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	491a      	ldr	r1, [pc, #104]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60cb      	str	r3, [r1, #12]
 8002b7e:	e006      	b.n	8002b8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	4915      	ldr	r1, [pc, #84]	; (8002be0 <HAL_GPIO_Init+0x2b0>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	3301      	adds	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f aed0 	bne.w	8002944 <HAL_GPIO_Init+0x14>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	372c      	adds	r7, #44	; 0x2c
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	10210000 	.word	0x10210000
 8002bb4:	10110000 	.word	0x10110000
 8002bb8:	10120000 	.word	0x10120000
 8002bbc:	10310000 	.word	0x10310000
 8002bc0:	10320000 	.word	0x10320000
 8002bc4:	10220000 	.word	0x10220000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40010800 	.word	0x40010800
 8002bd4:	40010c00 	.word	0x40010c00
 8002bd8:	40011000 	.word	0x40011000
 8002bdc:	40011400 	.word	0x40011400
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e26c      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8087 	beq.w	8002d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d00c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c10:	4b8f      	ldr	r3, [pc, #572]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d112      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
 8002c1c:	4b8c      	ldr	r3, [pc, #560]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x12c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d168      	bne.n	8002d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e246      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x76>
 8002c4c:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7f      	ldr	r2, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e02e      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x98>
 8002c62:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xbc>
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6e      	ldr	r2, [pc, #440]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6a      	ldr	r2, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a67      	ldr	r2, [pc, #412]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff fd48 	bl	8002754 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff fd44 	bl	8002754 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1fa      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe4>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7ff fd34 	bl	8002754 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7ff fd30 	bl	8002754 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1e6      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x10c>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1ba      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4939      	ldr	r1, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7ff fce9 	bl	8002754 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d86:	f7ff fce5 	bl	8002754 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e19b      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4927      	ldr	r1, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fcc8 	bl	8002754 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7ff fcc4 	bl	8002754 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e17a      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d03a      	beq.n	8002e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d019      	beq.n	8002e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e00:	f7ff fca8 	bl	8002754 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7ff fca4 	bl	8002754 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e15a      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f000 fada 	bl	80033e0 <RCC_Delay>
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7ff fc8e 	bl	8002754 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3a:	e00f      	b.n	8002e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7ff fc8a 	bl	8002754 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d908      	bls.n	8002e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e140      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	42420000 	.word	0x42420000
 8002e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b9e      	ldr	r3, [pc, #632]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e9      	bne.n	8002e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a6 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b97      	ldr	r3, [pc, #604]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b94      	ldr	r3, [pc, #592]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4a93      	ldr	r2, [pc, #588]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	61d3      	str	r3, [r2, #28]
 8002e92:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b8e      	ldr	r3, [pc, #568]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a8a      	ldr	r2, [pc, #552]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7ff fc4b 	bl	8002754 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7ff fc47 	bl	8002754 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b64      	cmp	r3, #100	; 0x64
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0fd      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	4b81      	ldr	r3, [pc, #516]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x312>
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a7a      	ldr	r2, [pc, #488]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e02d      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x334>
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a72      	ldr	r2, [pc, #456]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	e01c      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x356>
 8002f20:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a6c      	ldr	r2, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a69      	ldr	r2, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f3a:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a66      	ldr	r2, [pc, #408]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a63      	ldr	r2, [pc, #396]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff fbfb 	bl	8002754 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7ff fbf7 	bl	8002754 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0ab      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ee      	beq.n	8002f62 <HAL_RCC_OscConfig+0x37e>
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7ff fbe5 	bl	8002754 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7ff fbe1 	bl	8002754 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e095      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a47      	ldr	r2, [pc, #284]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8081 	beq.w	80030ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	4b42      	ldr	r3, [pc, #264]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d061      	beq.n	800309c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d146      	bne.n	800306e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_OscConfig+0x4fc>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7ff fbb5 	bl	8002754 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7ff fbb1 	bl	8002754 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e067      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d108      	bne.n	8003028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003016:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	492d      	ldr	r1, [pc, #180]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a19      	ldr	r1, [r3, #32]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	430b      	orrs	r3, r1
 800303a:	4927      	ldr	r1, [pc, #156]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x4fc>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7ff fb85 	bl	8002754 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7ff fb81 	bl	8002754 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e037      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x46a>
 800306c:	e02f      	b.n	80030ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_RCC_OscConfig+0x4fc>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff fb6e 	bl	8002754 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7ff fb6a 	bl	8002754 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e020      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x498>
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e013      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
 80030e0:	42420060 	.word	0x42420060

080030e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d0      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d910      	bls.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	4965      	ldr	r1, [pc, #404]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800314a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d040      	beq.n	8003204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d115      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e073      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4936      	ldr	r1, [pc, #216]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7ff fabe 	bl	8002754 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7ff faba 	bl	8002754 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e053      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d210      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4922      	ldr	r1, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4601      	mov	r1, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	fa21 f303 	lsr.w	r3, r1, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1cc>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fa1c 	bl	80026d0 <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	080072e8 	.word	0x080072e8
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b490      	push	{r4, r7}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032c0:	1d3c      	adds	r4, r7, #4
 80032c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e2:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x46>
 80032f6:	e02d      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f8:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	e02d      	b.n	800335a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	0c9b      	lsrs	r3, r3, #18
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800330a:	4413      	add	r3, r2
 800330c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003310:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c5b      	lsrs	r3, r3, #17
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800332a:	4413      	add	r3, r2
 800332c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003330:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003336:	fb02 f203 	mul.w	r2, r2, r3
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	e004      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	623b      	str	r3, [r7, #32]
      break;
 8003352:	e002      	b.n	800335a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003356:	623b      	str	r3, [r7, #32]
      break;
 8003358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335a:	6a3b      	ldr	r3, [r7, #32]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	; 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bc90      	pop	{r4, r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	080072b4 	.word	0x080072b4
 800336c:	080072c4 	.word	0x080072c4
 8003370:	40021000 	.word	0x40021000
 8003374:	007a1200 	.word	0x007a1200
 8003378:	003d0900 	.word	0x003d0900

0800337c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b02      	ldr	r3, [pc, #8]	; (800338c <HAL_RCC_GetHCLKFreq+0x10>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff2 	bl	800337c <HAL_RCC_GetHCLKFreq>
 8003398:	4601      	mov	r1, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4a03      	ldr	r2, [pc, #12]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	080072f8 	.word	0x080072f8

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffde 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c0:	4601      	mov	r1, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0adb      	lsrs	r3, r3, #11
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	080072f8 	.word	0x080072f8

080033e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <RCC_Delay+0x34>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <RCC_Delay+0x38>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0a5b      	lsrs	r3, r3, #9
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033fc:	bf00      	nop
  }
  while (Delay --);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f9      	bne.n	80033fc <RCC_Delay+0x1c>
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e03f      	b.n	80034ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff f828 	bl	8002498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f90b 	bl	800367c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af02      	add	r7, sp, #8
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	f040 8083 	bne.w	80035de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Transmit+0x2e>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e07b      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Transmit+0x40>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e074      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2221      	movs	r2, #33	; 0x21
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800350c:	f7ff f922 	bl	8002754 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800351e:	e042      	b.n	80035a6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	d122      	bne.n	800357e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2200      	movs	r2, #0
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f850 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e046      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3302      	adds	r3, #2
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	e017      	b.n	80035a6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3301      	adds	r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	e013      	b.n	80035a6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f82d 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e023      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	60ba      	str	r2, [r7, #8]
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1b7      	bne.n	8003520 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2140      	movs	r1, #64	; 0x40
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f814 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e00a      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f8:	e02c      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d028      	beq.n	8003654 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x30>
 8003608:	f7ff f8a4 	bl	8002754 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	429a      	cmp	r2, r3
 8003616:	d21d      	bcs.n	8003654 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003626:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e00f      	b.n	8003674 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d0c3      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036b6:	f023 030c 	bic.w	r3, r3, #12
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a52      	ldr	r2, [pc, #328]	; (8003828 <UART_SetConfig+0x1ac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d14e      	bne.n	8003782 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036e4:	f7ff fe68 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 80036e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009a      	lsls	r2, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	4a4a      	ldr	r2, [pc, #296]	; (800382c <UART_SetConfig+0x1b0>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	0119      	lsls	r1, r3, #4
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009a      	lsls	r2, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <UART_SetConfig+0x1b0>)
 8003722:	fba3 0302 	umull	r0, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2064      	movs	r0, #100	; 0x64
 800372a:	fb00 f303 	mul.w	r3, r0, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	3332      	adds	r3, #50	; 0x32
 8003734:	4a3d      	ldr	r2, [pc, #244]	; (800382c <UART_SetConfig+0x1b0>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003740:	4419      	add	r1, r3
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009a      	lsls	r2, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	fbb2 f2f3 	udiv	r2, r2, r3
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <UART_SetConfig+0x1b0>)
 800375a:	fba3 0302 	umull	r0, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2064      	movs	r0, #100	; 0x64
 8003762:	fb00 f303 	mul.w	r3, r0, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	3332      	adds	r3, #50	; 0x32
 800376c:	4a2f      	ldr	r2, [pc, #188]	; (800382c <UART_SetConfig+0x1b0>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	440a      	add	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003780:	e04d      	b.n	800381e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003782:	f7ff fe05 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8003786:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009a      	lsls	r2, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	4a23      	ldr	r2, [pc, #140]	; (800382c <UART_SetConfig+0x1b0>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	0119      	lsls	r1, r3, #4
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009a      	lsls	r2, r3, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <UART_SetConfig+0x1b0>)
 80037c0:	fba3 0302 	umull	r0, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2064      	movs	r0, #100	; 0x64
 80037c8:	fb00 f303 	mul.w	r3, r0, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a16      	ldr	r2, [pc, #88]	; (800382c <UART_SetConfig+0x1b0>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037de:	4419      	add	r1, r3
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009a      	lsls	r2, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <UART_SetConfig+0x1b0>)
 80037f8:	fba3 0302 	umull	r0, r3, r3, r2
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	2064      	movs	r0, #100	; 0x64
 8003800:	fb00 f303 	mul.w	r3, r0, r3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	3332      	adds	r3, #50	; 0x32
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <UART_SetConfig+0x1b0>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	440a      	add	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40013800 	.word	0x40013800
 800382c:	51eb851f 	.word	0x51eb851f

08003830 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e018      	b.n	800386e <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2232      	movs	r2, #50	; 0x32
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	4a4d      	ldr	r2, [pc, #308]	; (800397c <static_strings_init+0x14c>)
 8003846:	441a      	add	r2, r3
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <static_strings_init+0x150>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 8003850:	4a4b      	ldr	r2, [pc, #300]	; (8003980 <static_strings_init+0x150>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	2200      	movs	r2, #0
 800385a:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 800385c:	4a48      	ldr	r2, [pc, #288]	; (8003980 <static_strings_init+0x150>)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	2200      	movs	r2, #0
 8003866:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3301      	adds	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b09      	cmp	r3, #9
 8003872:	dde3      	ble.n	800383c <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003874:	2300      	movs	r3, #0
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	e018      	b.n	80038ac <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2264      	movs	r2, #100	; 0x64
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <static_strings_init+0x154>)
 8003884:	441a      	add	r2, r3
 8003886:	4940      	ldr	r1, [pc, #256]	; (8003988 <static_strings_init+0x158>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 800388e:	4a3e      	ldr	r2, [pc, #248]	; (8003988 <static_strings_init+0x158>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	2201      	movs	r2, #1
 8003898:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 800389a:	4a3b      	ldr	r2, [pc, #236]	; (8003988 <static_strings_init+0x158>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	2200      	movs	r2, #0
 80038a4:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3301      	adds	r3, #1
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	dde3      	ble.n	800387a <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	e018      	b.n	80038ea <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	22c8      	movs	r2, #200	; 0xc8
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	4a32      	ldr	r2, [pc, #200]	; (800398c <static_strings_init+0x15c>)
 80038c2:	441a      	add	r2, r3
 80038c4:	4932      	ldr	r1, [pc, #200]	; (8003990 <static_strings_init+0x160>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 80038cc:	4a30      	ldr	r2, [pc, #192]	; (8003990 <static_strings_init+0x160>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	2202      	movs	r2, #2
 80038d6:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <static_strings_init+0x160>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	2200      	movs	r2, #0
 80038e2:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3301      	adds	r3, #1
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	dde3      	ble.n	80038b8 <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80038f0:	2300      	movs	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	e019      	b.n	800392a <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
 8003900:	4a24      	ldr	r2, [pc, #144]	; (8003994 <static_strings_init+0x164>)
 8003902:	441a      	add	r2, r3
 8003904:	4924      	ldr	r1, [pc, #144]	; (8003998 <static_strings_init+0x168>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 800390c:	4a22      	ldr	r2, [pc, #136]	; (8003998 <static_strings_init+0x168>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	2203      	movs	r2, #3
 8003916:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <static_strings_init+0x168>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	2200      	movs	r2, #0
 8003922:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3301      	adds	r3, #1
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b01      	cmp	r3, #1
 800392e:	dde2      	ble.n	80038f6 <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003930:	2300      	movs	r3, #0
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	e019      	b.n	800396a <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	4a16      	ldr	r2, [pc, #88]	; (800399c <static_strings_init+0x16c>)
 8003942:	441a      	add	r2, r3
 8003944:	4916      	ldr	r1, [pc, #88]	; (80039a0 <static_strings_init+0x170>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <static_strings_init+0x170>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	2204      	movs	r2, #4
 8003956:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <static_strings_init+0x170>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	2200      	movs	r2, #0
 8003962:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3301      	adds	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b01      	cmp	r3, #1
 800396e:	dde2      	ble.n	8003936 <static_strings_init+0x106>
	}
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000478 	.word	0x20000478
 8003980:	20001238 	.word	0x20001238
 8003984:	20000220 	.word	0x20000220
 8003988:	20001840 	.word	0x20001840
 800398c:	200016b0 	.word	0x200016b0
 8003990:	20001228 	.word	0x20001228
 8003994:	20001288 	.word	0x20001288
 8003998:	20001870 	.word	0x20001870
 800399c:	20000670 	.word	0x20000670
 80039a0:	20000210 	.word	0x20000210

080039a4 <static_strings_get_string_max_length>:

int static_strings_get_string_max_length(static_strings_string_descriptor *string){
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	if(string->type == STATIC_STRINGS_STRING_TYPE_CUSTOM){
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	799b      	ldrb	r3, [r3, #6]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d102      	bne.n	80039ba <static_strings_get_string_max_length+0x16>
		return string->length;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	889b      	ldrh	r3, [r3, #4]
 80039b8:	e01d      	b.n	80039f6 <static_strings_get_string_max_length+0x52>
	}
	else{
		switch(string->type){
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	799b      	ldrb	r3, [r3, #6]
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d818      	bhi.n	80039f4 <static_strings_get_string_max_length+0x50>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <static_strings_get_string_max_length+0x24>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039dd 	.word	0x080039dd
 80039cc:	080039e1 	.word	0x080039e1
 80039d0:	080039e5 	.word	0x080039e5
 80039d4:	080039e9 	.word	0x080039e9
 80039d8:	080039ef 	.word	0x080039ef
			case STATIC_STRINGS_STRING_TYPE_VERY_SHORT:
				return STATIC_STRINGS_VERY_SHORT_STRING_SIZE;
 80039dc:	2332      	movs	r3, #50	; 0x32
 80039de:	e00a      	b.n	80039f6 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_SHORT:
				return STATIC_STRINGS_SHORT_STRING_SIZE;
 80039e0:	2364      	movs	r3, #100	; 0x64
 80039e2:	e008      	b.n	80039f6 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_MEDIUM:
				return STATIC_STRINGS_MEDIUM_STRING_SIZE;
 80039e4:	23c8      	movs	r3, #200	; 0xc8
 80039e6:	e006      	b.n	80039f6 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_LONG:
				return STATIC_STRINGS_LONG_STRING_SIZE;
 80039e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039ec:	e003      	b.n	80039f6 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_VERY_LONG:
				return STATIC_STRINGS_VERY_LONG_STRING_SIZE;
 80039ee:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80039f2:	e000      	b.n	80039f6 <static_strings_get_string_max_length+0x52>
				break;
		}
	}
	return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <static_strings_copy>:

static_strings_string_descriptor *static_strings_copy(static_strings_string_descriptor *copy_to,static_strings_string_descriptor *copy_from,uint16_t copy_to_offset){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
	if(copy_to == NULL || copy_from == NULL){
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <static_strings_copy+0x1a>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <static_strings_copy+0x1e>
		return NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e022      	b.n	8003a64 <static_strings_copy+0x64>
	}
	if(static_strings_get_string_max_length(copy_to) <= copy_from->length + copy_to_offset){
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff ffc0 	bl	80039a4 <static_strings_get_string_max_length>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	889b      	ldrh	r3, [r3, #4]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	440b      	add	r3, r1
 8003a30:	429a      	cmp	r2, r3
 8003a32:	dc04      	bgt.n	8003a3e <static_strings_copy+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_OVERFLOW;
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <static_strings_copy+0x6c>)
 8003a36:	2206      	movs	r2, #6
 8003a38:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e012      	b.n	8003a64 <static_strings_copy+0x64>
	}
	memcpy(copy_to->string + copy_to_offset,copy_from->string,copy_from->length);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	18d0      	adds	r0, r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	889b      	ldrh	r3, [r3, #4]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f000 fd6a 	bl	8004528 <memcpy>
	copy_to->length = copy_from->length + copy_to_offset;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	889a      	ldrh	r2, [r3, #4]
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	809a      	strh	r2, [r3, #4]
	return copy_to;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000066c 	.word	0x2000066c

08003a70 <static_strings_move>:

static_strings_string_descriptor *static_strings_move(static_strings_string_descriptor *move_to,static_strings_string_descriptor *move_from,uint16_t move_to_offset){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
	if(static_strings_copy(move_to,move_from,move_to_offset) == NULL){
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	461a      	mov	r2, r3
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff ffbb 	bl	8003a00 <static_strings_copy>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <static_strings_move+0x24>
		return NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e003      	b.n	8003a9c <static_strings_move+0x2c>
	}
	static_strings_deallocate(move_from);
 8003a94:	68b8      	ldr	r0, [r7, #8]
 8003a96:	f000 f977 	bl	8003d88 <static_strings_deallocate>
	return move_to;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <static_strings_clone>:

static_strings_string_descriptor *static_strings_clone(static_strings_string_descriptor *clone_from){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	if(clone_from == NULL){
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <static_strings_clone+0x12>
		return NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e018      	b.n	8003ae8 <static_strings_clone+0x44>
	}
	static_strings_string_descriptor *cloned_string = static_strings_allocate(clone_from->length);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	889b      	ldrh	r3, [r3, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f818 	bl	8003af0 <static_strings_allocate>
 8003ac0:	60f8      	str	r0, [r7, #12]
	if(cloned_string == NULL){
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <static_strings_clone+0x28>
		return NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e00d      	b.n	8003ae8 <static_strings_clone+0x44>
	}
	memcpy(cloned_string->string,clone_from->string,clone_from->length);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	889b      	ldrh	r3, [r3, #4]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f000 fd25 	bl	8004528 <memcpy>
	cloned_string->length = clone_from->length;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	889a      	ldrh	r2, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	809a      	strh	r2, [r3, #4]
	return cloned_string;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	2b32      	cmp	r3, #50	; 0x32
 8003afe:	d829      	bhi.n	8003b54 <static_strings_allocate+0x64>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e023      	b.n	8003b4e <static_strings_allocate+0x5e>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003b06:	4a78      	ldr	r2, [pc, #480]	; (8003ce8 <static_strings_allocate+0x1f8>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	79db      	ldrb	r3, [r3, #7]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d119      	bne.n	8003b48 <static_strings_allocate+0x58>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003b14:	4a74      	ldr	r2, [pc, #464]	; (8003ce8 <static_strings_allocate+0x1f8>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	71da      	strb	r2, [r3, #7]
				static_strings_very_short_strings_descriptors[i].length = 0;
 8003b20:	4a71      	ldr	r2, [pc, #452]	; (8003ce8 <static_strings_allocate+0x1f8>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	2200      	movs	r2, #0
 8003b2a:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_short_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_SHORT_STRING_SIZE);
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ce8 <static_strings_allocate+0x1f8>)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b34:	2232      	movs	r2, #50	; 0x32
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fd00 	bl	800453e <memset>
				return &static_strings_very_short_strings_descriptors[i];
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4a69      	ldr	r2, [pc, #420]	; (8003ce8 <static_strings_allocate+0x1f8>)
 8003b44:	4413      	add	r3, r2
 8003b46:	e0cb      	b.n	8003ce0 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b09      	cmp	r3, #9
 8003b52:	ddd8      	ble.n	8003b06 <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d829      	bhi.n	8003bae <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e023      	b.n	8003ba8 <static_strings_allocate+0xb8>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003b60:	4a62      	ldr	r2, [pc, #392]	; (8003cec <static_strings_allocate+0x1fc>)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	79db      	ldrb	r3, [r3, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d119      	bne.n	8003ba2 <static_strings_allocate+0xb2>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003b6e:	4a5f      	ldr	r2, [pc, #380]	; (8003cec <static_strings_allocate+0x1fc>)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	2201      	movs	r2, #1
 8003b78:	71da      	strb	r2, [r3, #7]
				static_strings_short_strings_descriptors[i].length = 0;
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <static_strings_allocate+0x1fc>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	2200      	movs	r2, #0
 8003b84:	809a      	strh	r2, [r3, #4]
				memset(static_strings_short_strings_descriptors[i].string,0,STATIC_STRINGS_SHORT_STRING_SIZE);
 8003b86:	4a59      	ldr	r2, [pc, #356]	; (8003cec <static_strings_allocate+0x1fc>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b8e:	2264      	movs	r2, #100	; 0x64
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fcd3 	bl	800453e <memset>
				return &static_strings_short_strings_descriptors[i];
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4a53      	ldr	r2, [pc, #332]	; (8003cec <static_strings_allocate+0x1fc>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	e09e      	b.n	8003ce0 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	ddd8      	ble.n	8003b60 <static_strings_allocate+0x70>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2bc8      	cmp	r3, #200	; 0xc8
 8003bb2:	d829      	bhi.n	8003c08 <static_strings_allocate+0x118>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e023      	b.n	8003c02 <static_strings_allocate+0x112>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003bba:	4a4d      	ldr	r2, [pc, #308]	; (8003cf0 <static_strings_allocate+0x200>)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	79db      	ldrb	r3, [r3, #7]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d119      	bne.n	8003bfc <static_strings_allocate+0x10c>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003bc8:	4a49      	ldr	r2, [pc, #292]	; (8003cf0 <static_strings_allocate+0x200>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	71da      	strb	r2, [r3, #7]
				static_strings_medium_strings_descriptors[i].length = 0;
 8003bd4:	4a46      	ldr	r2, [pc, #280]	; (8003cf0 <static_strings_allocate+0x200>)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	2200      	movs	r2, #0
 8003bde:	809a      	strh	r2, [r3, #4]
				memset(static_strings_medium_strings_descriptors[i].string,0,STATIC_STRINGS_MEDIUM_STRING_SIZE);
 8003be0:	4a43      	ldr	r2, [pc, #268]	; (8003cf0 <static_strings_allocate+0x200>)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003be8:	22c8      	movs	r2, #200	; 0xc8
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fca6 	bl	800453e <memset>
				return &static_strings_medium_strings_descriptors[i];
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4a3e      	ldr	r2, [pc, #248]	; (8003cf0 <static_strings_allocate+0x200>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	e071      	b.n	8003ce0 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	ddd8      	ble.n	8003bba <static_strings_allocate+0xca>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c0e:	d82a      	bhi.n	8003c66 <static_strings_allocate+0x176>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e024      	b.n	8003c60 <static_strings_allocate+0x170>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003c16:	4a37      	ldr	r2, [pc, #220]	; (8003cf4 <static_strings_allocate+0x204>)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	79db      	ldrb	r3, [r3, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11a      	bne.n	8003c5a <static_strings_allocate+0x16a>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003c24:	4a33      	ldr	r2, [pc, #204]	; (8003cf4 <static_strings_allocate+0x204>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	71da      	strb	r2, [r3, #7]
				static_strings_long_strings_descriptors[i].length = 0;
 8003c30:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <static_strings_allocate+0x204>)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	2200      	movs	r2, #0
 8003c3a:	809a      	strh	r2, [r3, #4]
				memset(static_strings_long_strings_descriptors[i].string,0,STATIC_STRINGS_LONG_STRING_SIZE);
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <static_strings_allocate+0x204>)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fc77 	bl	800453e <memset>
				return &static_strings_long_strings_descriptors[i];
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <static_strings_allocate+0x204>)
 8003c56:	4413      	add	r3, r2
 8003c58:	e042      	b.n	8003ce0 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	ddd7      	ble.n	8003c16 <static_strings_allocate+0x126>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d82a      	bhi.n	8003cc6 <static_strings_allocate+0x1d6>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e024      	b.n	8003cc0 <static_strings_allocate+0x1d0>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003c76:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <static_strings_allocate+0x208>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	79db      	ldrb	r3, [r3, #7]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11a      	bne.n	8003cba <static_strings_allocate+0x1ca>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <static_strings_allocate+0x208>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	71da      	strb	r2, [r3, #7]
				static_strings_very_long_strings_descriptors[i].length = 0;
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <static_strings_allocate+0x208>)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	2200      	movs	r2, #0
 8003c9a:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_long_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_LONG_STRING_SIZE);
 8003c9c:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <static_strings_allocate+0x208>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ca4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fc47 	bl	800453e <memset>
				return &static_strings_very_long_strings_descriptors[i];
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <static_strings_allocate+0x208>)
 8003cb6:	4413      	add	r3, r2
 8003cb8:	e012      	b.n	8003ce0 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	ddd7      	ble.n	8003c76 <static_strings_allocate+0x186>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d803      	bhi.n	8003cd8 <static_strings_allocate+0x1e8>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <static_strings_allocate+0x20c>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e002      	b.n	8003cde <static_strings_allocate+0x1ee>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <static_strings_allocate+0x20c>)
 8003cda:	2203      	movs	r2, #3
 8003cdc:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20001238 	.word	0x20001238
 8003cec:	20001840 	.word	0x20001840
 8003cf0:	20001228 	.word	0x20001228
 8003cf4:	20001870 	.word	0x20001870
 8003cf8:	20000210 	.word	0x20000210
 8003cfc:	2000066c 	.word	0x2000066c

08003d00 <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f86b 	bl	8003de4 <static_strings_strlen>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 8003d12:	89fb      	ldrh	r3, [r7, #14]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e014      	b.n	8003d46 <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fee6 	bl	8003af0 <static_strings_allocate>
 8003d24:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <static_strings_save+0x30>
		return descriptor;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	e00a      	b.n	8003d46 <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	89fa      	ldrh	r2, [r7, #14]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fbf5 	bl	8004528 <memcpy>
	descriptor->length = string_length;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	89fa      	ldrh	r2, [r7, #14]
 8003d42:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8003d44:	68bb      	ldr	r3, [r7, #8]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2205      	movs	r2, #5
 8003d5c:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f838 	bl	8003de4 <static_strings_strlen>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	889b      	ldrh	r3, [r3, #4]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	if(string_descriptor->status != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	79db      	ldrb	r3, [r3, #7]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d002      	beq.n	8003d9e <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	71da      	strb	r2, [r3, #7]
	}
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	889b      	ldrh	r3, [r3, #4]
 8003db8:	3b02      	subs	r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b0d      	cmp	r3, #13
 8003dc0:	d008      	beq.n	8003dd4 <static_strings_is_line+0x2c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	889b      	ldrh	r3, [r3, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b0a      	cmp	r3, #10
 8003dd2:	d101      	bne.n	8003dd8 <static_strings_is_line+0x30>
		return 1;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <static_strings_is_line+0x32>
	}
	return 0;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003dec:	2300      	movs	r3, #0
 8003dee:	81fb      	strh	r3, [r7, #14]
 8003df0:	e01e      	b.n	8003e30 <static_strings_strlen+0x4c>
		if( *(string + length) == '\r' && length < STATIC_STRINGS_VERY_LONG_STRING_SIZE - 1){
 8003df2:	89fb      	ldrh	r3, [r7, #14]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b0d      	cmp	r3, #13
 8003dfc:	d10f      	bne.n	8003e1e <static_strings_strlen+0x3a>
 8003dfe:	89fb      	ldrh	r3, [r7, #14]
 8003e00:	f240 52da 	movw	r2, #1498	; 0x5da
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d80a      	bhi.n	8003e1e <static_strings_strlen+0x3a>
			if(*(string + length + 1) == '\n'){
 8003e08:	89fb      	ldrh	r3, [r7, #14]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b0a      	cmp	r3, #10
 8003e14:	d103      	bne.n	8003e1e <static_strings_strlen+0x3a>
				length += 2;
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	3302      	adds	r3, #2
 8003e1a:	81fb      	strh	r3, [r7, #14]
				break;
 8003e1c:	e00f      	b.n	8003e3e <static_strings_strlen+0x5a>
			}
		}
		if( *(string + length) == '\0'){
 8003e1e:	89fb      	ldrh	r3, [r7, #14]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <static_strings_strlen+0x58>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003e2a:	89fb      	ldrh	r3, [r7, #14]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	81fb      	strh	r3, [r7, #14]
 8003e30:	89fb      	ldrh	r3, [r7, #14]
 8003e32:	f240 52db 	movw	r2, #1499	; 0x5db
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d9db      	bls.n	8003df2 <static_strings_strlen+0xe>
 8003e3a:	e000      	b.n	8003e3e <static_strings_strlen+0x5a>
			break;
 8003e3c:	bf00      	nop
		}
	}
	if(length >= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	f240 52db 	movw	r2, #1499	; 0x5db
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d904      	bls.n	8003e52 <static_strings_strlen+0x6e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <static_strings_strlen+0x7c>)
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	701a      	strb	r2, [r3, #0]
		return 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <static_strings_strlen+0x70>
	}
	else{
		return length;
 8003e52:	89fb      	ldrh	r3, [r7, #14]
	}
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	2000066c 	.word	0x2000066c

08003e64 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 8003e70:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <static_strings_string_splitter_set_parameters+0x2c>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <static_strings_string_splitter_set_parameters+0x2c>)
 8003e7c:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 8003e7e:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <static_strings_string_splitter_set_parameters+0x2c>)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	7213      	strb	r3, [r2, #8]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	200001fc 	.word	0x200001fc

08003e94 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor **string_descriptor){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4929      	ldr	r1, [pc, #164]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003ea8:	6809      	ldr	r1, [r1, #0]
 8003eaa:	8889      	ldrh	r1, [r1, #4]
 8003eac:	440b      	add	r3, r1
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d101      	bne.n	8003eb6 <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e045      	b.n	8003f42 <static_strings_string_splitter_get_next_token+0xae>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 8003eb6:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 8003ebc:	bf00      	nop
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	60fa      	str	r2, [r7, #12]
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003ec8:	7a1b      	ldrb	r3, [r3, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d009      	beq.n	8003ee2 <static_strings_string_splitter_get_next_token+0x4e>
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	8892      	ldrh	r2, [r2, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d3ed      	bcc.n	8003ebe <static_strings_string_splitter_get_next_token+0x2a>

	int token_length;
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	8892      	ldrh	r2, [r2, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d105      	bne.n	8003f02 <static_strings_string_splitter_get_next_token+0x6e>
		token_length = current_position - static_strings_string_splitter.next_token_start;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003efa:	6852      	ldr	r2, [r2, #4]
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	e005      	b.n	8003f0e <static_strings_string_splitter_get_next_token+0x7a>
	}
	else{
		token_length = current_position - static_strings_string_splitter.next_token_start - 1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003f06:	6852      	ldr	r2, [r2, #4]
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
	}
	*string_descriptor = static_strings_allocate(token_length);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fdec 	bl	8003af0 <static_strings_allocate>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]
	memcpy((*string_descriptor)->string,static_strings_string_splitter.next_token_start,token_length);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f000 fafc 	bl	8004528 <memcpy>
	(*string_descriptor)->length = token_length;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	b292      	uxth	r2, r2
 8003f38:	809a      	strh	r2, [r3, #4]
	static_strings_string_splitter.next_token_start = current_position;
 8003f3a:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <static_strings_string_splitter_get_next_token+0xb8>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6053      	str	r3, [r2, #4]
	return 1;
 8003f40:	2301      	movs	r3, #1
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200001fc 	.word	0x200001fc

08003f50 <static_strings_substring>:

static_strings_string_descriptor *static_strings_substring(static_strings_string_descriptor* string,uint16_t start_index,uint16_t finish_index){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	807b      	strh	r3, [r7, #2]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	803b      	strh	r3, [r7, #0]
	if(start_index < 0 || start_index >= string->length){
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	889b      	ldrh	r3, [r3, #4]
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d304      	bcc.n	8003f74 <static_strings_substring+0x24>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_START_INDEX_OUT_OF_RANGE;
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <static_strings_substring+0x80>)
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e028      	b.n	8003fc6 <static_strings_substring+0x76>
	}
	if(finish_index <= 0 || finish_index > string->length){
 8003f74:	883b      	ldrh	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <static_strings_substring+0x34>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	889b      	ldrh	r3, [r3, #4]
 8003f7e:	883a      	ldrh	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d904      	bls.n	8003f8e <static_strings_substring+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_FINISH_INDEX_OUT_OF_RANGE;
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <static_strings_substring+0x80>)
 8003f86:	2205      	movs	r2, #5
 8003f88:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e01b      	b.n	8003fc6 <static_strings_substring+0x76>
	}
	uint16_t substring_length = finish_index - start_index;
 8003f8e:	883a      	ldrh	r2, [r7, #0]
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	81fb      	strh	r3, [r7, #14]
	static_strings_string_descriptor *substring = static_strings_allocate(substring_length);
 8003f96:	89fb      	ldrh	r3, [r7, #14]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fda9 	bl	8003af0 <static_strings_allocate>
 8003f9e:	60b8      	str	r0, [r7, #8]
	if(substring == NULL){
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <static_strings_substring+0x5a>
		return substring;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	e00d      	b.n	8003fc6 <static_strings_substring+0x76>
	}
	memcpy(substring->string,string->string + start_index,substring_length);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	89fa      	ldrh	r2, [r7, #14]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f000 fab5 	bl	8004528 <memcpy>
	substring->length = substring_length;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	89fa      	ldrh	r2, [r7, #14]
 8003fc2:	809a      	strh	r2, [r3, #4]
	return substring;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2000066c 	.word	0x2000066c

08003fd4 <static_strings_concatenate>:

static_strings_string_descriptor *static_strings_concatenate(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	int concatenated_string_length = concatenate_at->length + concatenate->length;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	889b      	ldrh	r3, [r3, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	889b      	ldrh	r3, [r3, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(concatenated_string_length);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fd7d 	bl	8003af0 <static_strings_allocate>
 8003ff6:	60b8      	str	r0, [r7, #8]
	if(concatenated_string == NULL){
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <static_strings_concatenate+0x34>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <static_strings_concatenate+0x70>)
 8004000:	2203      	movs	r2, #3
 8004002:	701a      	strb	r2, [r3, #0]
		return concatenated_string;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	e019      	b.n	800403c <static_strings_concatenate+0x68>
	}
	memcpy(concatenated_string->string,concatenate_at->string,concatenate_at->length);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	889b      	ldrh	r3, [r3, #4]
 8004014:	461a      	mov	r2, r3
 8004016:	f000 fa87 	bl	8004528 <memcpy>
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	8892      	ldrh	r2, [r2, #4]
 8004022:	1898      	adds	r0, r3, r2
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	889b      	ldrh	r3, [r3, #4]
 800402c:	461a      	mov	r2, r3
 800402e:	f000 fa7b 	bl	8004528 <memcpy>
	concatenated_string->length = concatenated_string_length;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	b29a      	uxth	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	809a      	strh	r2, [r3, #4]
	return concatenated_string;
 800403a:	68bb      	ldr	r3, [r7, #8]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000066c 	.word	0x2000066c

08004048 <static_strings_concatenate_and_clean>:

static_strings_string_descriptor *static_strings_concatenate_and_clean(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	static_strings_string_descriptor* concatenated_string = static_strings_concatenate(concatenate_at,concatenate);
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ffbd 	bl	8003fd4 <static_strings_concatenate>
 800405a:	60f8      	str	r0, [r7, #12]
	if(concatenated_string == NULL){
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <static_strings_concatenate_and_clean+0x1e>
		return concatenated_string;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	e003      	b.n	800406e <static_strings_concatenate_and_clean+0x26>
	}
	static_strings_deallocate(concatenate_at);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fe8e 	bl	8003d88 <static_strings_deallocate>
	return concatenated_string;
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <static_strings_concatenate_all>:
	static_strings_deallocate(concatenate_at);
	static_strings_deallocate(concatenate);
	return concatenated_string;
}

static_strings_string_descriptor *static_strings_concatenate_all(uint16_t arguments_quantity,...){
 8004076:	b40f      	push	{r0, r1, r2, r3}
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
	va_list arguments_list;
	int i;
	va_start(arguments_list, arguments_quantity);
 800407e:	f107 031c 	add.w	r3, r7, #28
 8004082:	603b      	str	r3, [r7, #0]
	static_strings_string_descriptor *next_string_to_concatenate;
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(0);
 8004084:	2000      	movs	r0, #0
 8004086:	f7ff fd33 	bl	8003af0 <static_strings_allocate>
 800408a:	60b8      	str	r0, [r7, #8]
	concatenated_string->length = 0;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < arguments_quantity;i++){
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e00c      	b.n	80040b2 <static_strings_concatenate_all+0x3c>
		next_string_to_concatenate = va_arg(arguments_list, static_strings_string_descriptor *);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1d1a      	adds	r2, r3, #4
 800409c:	603a      	str	r2, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	607b      	str	r3, [r7, #4]
		concatenated_string = static_strings_concatenate_and_clean(concatenated_string,next_string_to_concatenate);
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	f7ff ffcf 	bl	8004048 <static_strings_concatenate_and_clean>
 80040aa:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < arguments_quantity;i++){
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3301      	adds	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	8b3b      	ldrh	r3, [r7, #24]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	dbee      	blt.n	8004098 <static_strings_concatenate_all+0x22>
	}
	va_end(arguments_list);
	return concatenated_string;
 80040ba:	68bb      	ldr	r3, [r7, #8]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c6:	b004      	add	sp, #16
 80040c8:	4770      	bx	lr

080040ca <static_strings_contains_string>:
	}
	va_end(arguments_list);
	return concatenated_string;
}

int static_strings_contains_string(static_strings_string_descriptor* search_in,static_strings_string_descriptor* search_for){
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
	if(search_in->length < search_for->length){
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	889a      	ldrh	r2, [r3, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	889b      	ldrh	r3, [r3, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d201      	bcs.n	80040e4 <static_strings_contains_string+0x1a>
		return 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e034      	b.n	800414e <static_strings_contains_string+0x84>
	}
	int i,j;
	int searched_string_found;
	for(i = 0;search_for->length <= search_in->length - i;i++){
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	e026      	b.n	8004138 <static_strings_contains_string+0x6e>
		searched_string_found = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < search_for->length;j++){
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e013      	b.n	800411c <static_strings_contains_string+0x52>
			if( *(search_in->string + i + j) != *(search_for->string + j) ){
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	440b      	add	r3, r1
 80040fe:	4413      	add	r3, r2
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6819      	ldr	r1, [r3, #0]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	440b      	add	r3, r1
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d002      	beq.n	8004116 <static_strings_contains_string+0x4c>
				searched_string_found = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
				break;
 8004114:	e008      	b.n	8004128 <static_strings_contains_string+0x5e>
		for(j = 0; j < search_for->length;j++){
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3301      	adds	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	889b      	ldrh	r3, [r3, #4]
 8004120:	461a      	mov	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4293      	cmp	r3, r2
 8004126:	dbe5      	blt.n	80040f4 <static_strings_contains_string+0x2a>
			}
		}
		if(searched_string_found){
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <static_strings_contains_string+0x68>
			return 1;
 800412e:	2301      	movs	r3, #1
 8004130:	e00d      	b.n	800414e <static_strings_contains_string+0x84>
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	889b      	ldrh	r3, [r3, #4]
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	889b      	ldrh	r3, [r3, #4]
 8004142:	4619      	mov	r1, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1acb      	subs	r3, r1, r3
 8004148:	429a      	cmp	r2, r3
 800414a:	ddce      	ble.n	80040ea <static_strings_contains_string+0x20>
		}
	}
	return 0;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <static_strings_contains_char>:

int static_strings_contains_char(static_strings_string_descriptor* search_in,uint8_t search_for){
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i = 0;i < search_in->length;i++){
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e00c      	b.n	8004184 <static_strings_contains_char+0x2c>
		if( *(search_in->string + i) == search_for){
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	429a      	cmp	r2, r3
 8004178:	d101      	bne.n	800417e <static_strings_contains_char+0x26>
			return 1;
 800417a:	2301      	movs	r3, #1
 800417c:	e009      	b.n	8004192 <static_strings_contains_char+0x3a>
	for(i = 0;i < search_in->length;i++){
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	889b      	ldrh	r3, [r3, #4]
 8004188:	461a      	mov	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4293      	cmp	r3, r2
 800418e:	dbec      	blt.n	800416a <static_strings_contains_char+0x12>
		}
	}
	return 0;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <static_strings_compare>:

int static_strings_compare(static_strings_string_descriptor* compare_string_one,static_strings_string_descriptor* compare_string_two){
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	if(compare_string_one->length != compare_string_two->length){
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	889a      	ldrh	r2, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	889b      	ldrh	r3, [r3, #4]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <static_strings_compare+0x1a>
		return 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e01a      	b.n	80041ec <static_strings_compare+0x50>
	}
	int i;
	for(i = 0;i < compare_string_one->length;i++){
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e010      	b.n	80041de <static_strings_compare+0x42>
		if(*(compare_string_one->string + i) != *(compare_string_two->string + i)){
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	440b      	add	r3, r1
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <static_strings_compare+0x3c>
			return 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e009      	b.n	80041ec <static_strings_compare+0x50>
	for(i = 0;i < compare_string_one->length;i++){
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	889b      	ldrh	r3, [r3, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	dbe8      	blt.n	80041bc <static_strings_compare+0x20>
		}
	}
	return 1;
 80041ea:	2301      	movs	r3, #1
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
	...

080041f8 <static_strings_uint8_to_string>:

static_strings_string_descriptor *static_strings_uint8_to_string(uint8_t uint8){
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b092      	sub	sp, #72	; 0x48
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
	uint8_t uint8_temp_string[50];
	sprintf((char *)uint8_temp_string,"%" PRIu8,uint8);
 8004202:	79fa      	ldrb	r2, [r7, #7]
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	4914      	ldr	r1, [pc, #80]	; (800425c <static_strings_uint8_to_string+0x64>)
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fdee 	bl	8004dec <siprintf>
	uint16_t uint8_string_length = static_strings_strlen(uint8_temp_string);
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fde5 	bl	8003de4 <static_strings_strlen>
 800421a:	4603      	mov	r3, r0
 800421c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint8_string = static_strings_allocate(uint8_string_length);
 8004220:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fc63 	bl	8003af0 <static_strings_allocate>
 800422a:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint8_string == NULL){
 800422c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <static_strings_uint8_to_string+0x3e>
		return uint8_string;
 8004232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004234:	e00d      	b.n	8004252 <static_strings_uint8_to_string+0x5a>
	}
	memcpy(uint8_string->string,uint8_temp_string,uint8_string_length);
 8004236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800423e:	f107 010c 	add.w	r1, r7, #12
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f970 	bl	8004528 <memcpy>
	uint8_string->length = uint8_string_length;
 8004248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800424e:	809a      	strh	r2, [r3, #4]
	return uint8_string;
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004252:	4618      	mov	r0, r3
 8004254:	3748      	adds	r7, #72	; 0x48
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	080072c8 	.word	0x080072c8

08004260 <static_strings_uint16_to_string>:

static_strings_string_descriptor *static_strings_uint16_to_string(uint16_t uint16){
 8004260:	b580      	push	{r7, lr}
 8004262:	b092      	sub	sp, #72	; 0x48
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	80fb      	strh	r3, [r7, #6]
	uint8_t uint16_temp_string[50];
	sprintf((char *)uint16_temp_string,"%" PRIu16,uint16);
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	f107 030c 	add.w	r3, r7, #12
 8004270:	4914      	ldr	r1, [pc, #80]	; (80042c4 <static_strings_uint16_to_string+0x64>)
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fdba 	bl	8004dec <siprintf>
	uint16_t uint16_string_length = static_strings_strlen(uint16_temp_string);
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fdb1 	bl	8003de4 <static_strings_strlen>
 8004282:	4603      	mov	r3, r0
 8004284:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint16_string = static_strings_allocate(uint16_string_length);
 8004288:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fc2f 	bl	8003af0 <static_strings_allocate>
 8004292:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint16_string == NULL){
 8004294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <static_strings_uint16_to_string+0x3e>
		return uint16_string;
 800429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429c:	e00d      	b.n	80042ba <static_strings_uint16_to_string+0x5a>
	}
	memcpy(uint16_string->string,uint16_temp_string,uint16_string_length);
 800429e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80042a6:	f107 010c 	add.w	r1, r7, #12
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f93c 	bl	8004528 <memcpy>
	uint16_string->length = uint16_string_length;
 80042b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80042b6:	809a      	strh	r2, [r3, #4]
	return uint16_string;
 80042b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3748      	adds	r7, #72	; 0x48
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	080072cc 	.word	0x080072cc

080042c8 <static_strings_uint32_to_string>:

static_strings_string_descriptor *static_strings_uint32_to_string(uint32_t uint32){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b092      	sub	sp, #72	; 0x48
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	uint8_t uint32_temp_string[50];
	sprintf((char *)uint32_temp_string,"%" PRIu32,uint32);
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4914      	ldr	r1, [pc, #80]	; (8004328 <static_strings_uint32_to_string+0x60>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fd87 	bl	8004dec <siprintf>
	uint16_t uint32_string_length = static_strings_strlen(uint32_temp_string);
 80042de:	f107 030c 	add.w	r3, r7, #12
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fd7e 	bl	8003de4 <static_strings_strlen>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint32_string = static_strings_allocate(uint32_string_length);
 80042ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fbfc 	bl	8003af0 <static_strings_allocate>
 80042f8:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint32_string == NULL){
 80042fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <static_strings_uint32_to_string+0x3c>
		return uint32_string;
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	e00d      	b.n	8004320 <static_strings_uint32_to_string+0x58>
	}
	memcpy(uint32_string->string,uint32_temp_string,uint32_string_length);
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800430c:	f107 010c 	add.w	r1, r7, #12
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f909 	bl	8004528 <memcpy>
	uint32_string->length = uint32_string_length;
 8004316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004318:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800431c:	809a      	strh	r2, [r3, #4]
	return uint32_string;
 800431e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004320:	4618      	mov	r0, r3
 8004322:	3748      	adds	r7, #72	; 0x48
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	080072d0 	.word	0x080072d0

0800432c <static_strings_int8_to_string>:

static_strings_string_descriptor *static_strings_int8_to_string(int8_t int8){
 800432c:	b580      	push	{r7, lr}
 800432e:	b092      	sub	sp, #72	; 0x48
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
	uint8_t int8_temp_string[50];
	sprintf((char *)int8_temp_string,"%" PRId8,int8);
 8004336:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800433a:	f107 030c 	add.w	r3, r7, #12
 800433e:	4914      	ldr	r1, [pc, #80]	; (8004390 <static_strings_int8_to_string+0x64>)
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd53 	bl	8004dec <siprintf>
	uint16_t int8_string_length = static_strings_strlen(int8_temp_string);
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fd4a 	bl	8003de4 <static_strings_strlen>
 8004350:	4603      	mov	r3, r0
 8004352:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int8_string = static_strings_allocate(int8_string_length);
 8004356:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fbc8 	bl	8003af0 <static_strings_allocate>
 8004360:	6438      	str	r0, [r7, #64]	; 0x40
	if(int8_string == NULL){
 8004362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <static_strings_int8_to_string+0x40>
		return int8_string;
 8004368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436a:	e00d      	b.n	8004388 <static_strings_int8_to_string+0x5c>
	}
	memcpy(int8_string->string,int8_temp_string,int8_string_length);
 800436c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004374:	f107 010c 	add.w	r1, r7, #12
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f8d5 	bl	8004528 <memcpy>
	int8_string->length = int8_string_length;
 800437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004380:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004384:	809a      	strh	r2, [r3, #4]
	return int8_string;
 8004386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004388:	4618      	mov	r0, r3
 800438a:	3748      	adds	r7, #72	; 0x48
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	080072d4 	.word	0x080072d4

08004394 <static_strings_int16_to_string>:

static_strings_string_descriptor *static_strings_int16_to_string(int16_t int16){
 8004394:	b580      	push	{r7, lr}
 8004396:	b092      	sub	sp, #72	; 0x48
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
	uint8_t int16_temp_string[50];
	sprintf((char *)int16_temp_string,"%" PRId16,int16);
 800439e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043a2:	f107 030c 	add.w	r3, r7, #12
 80043a6:	4914      	ldr	r1, [pc, #80]	; (80043f8 <static_strings_int16_to_string+0x64>)
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fd1f 	bl	8004dec <siprintf>
	int16_t int16_string_length = static_strings_strlen(int16_temp_string);
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fd16 	bl	8003de4 <static_strings_strlen>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int16_string = static_strings_allocate(int16_string_length);
 80043be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fb94 	bl	8003af0 <static_strings_allocate>
 80043c8:	6438      	str	r0, [r7, #64]	; 0x40
	if(int16_string == NULL){
 80043ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <static_strings_int16_to_string+0x40>
		return int16_string;
 80043d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d2:	e00d      	b.n	80043f0 <static_strings_int16_to_string+0x5c>
	}
	memcpy(int16_string->string,int16_temp_string,int16_string_length);
 80043d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80043dc:	f107 010c 	add.w	r1, r7, #12
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f8a1 	bl	8004528 <memcpy>
	int16_string->length = int16_string_length;
 80043e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80043ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ec:	809a      	strh	r2, [r3, #4]
	return int16_string;
 80043ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3748      	adds	r7, #72	; 0x48
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	080072d8 	.word	0x080072d8

080043fc <static_strings_float_to_string>:
	memcpy(int32_string->string,int32_temp_string,int32_string_length);
	int32_string->length = int32_string_length;
	return int32_string;
}

static_strings_string_descriptor *static_strings_float_to_string(float float_arg){
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b093      	sub	sp, #76	; 0x4c
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	uint8_t float_temp_string[50];
	sprintf((char *)float_temp_string,"%f",float_arg);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fc f80f 	bl	8000428 <__aeabi_f2d>
 800440a:	4603      	mov	r3, r0
 800440c:	460c      	mov	r4, r1
 800440e:	f107 000c 	add.w	r0, r7, #12
 8004412:	461a      	mov	r2, r3
 8004414:	4623      	mov	r3, r4
 8004416:	4914      	ldr	r1, [pc, #80]	; (8004468 <static_strings_float_to_string+0x6c>)
 8004418:	f000 fce8 	bl	8004dec <siprintf>
	int16_t float_string_length = static_strings_strlen(float_temp_string);
 800441c:	f107 030c 	add.w	r3, r7, #12
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fcdf 	bl	8003de4 <static_strings_strlen>
 8004426:	4603      	mov	r3, r0
 8004428:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *float_string = static_strings_allocate(float_string_length);
 800442c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fb5d 	bl	8003af0 <static_strings_allocate>
 8004436:	6438      	str	r0, [r7, #64]	; 0x40
	if(float_string == NULL){
 8004438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <static_strings_float_to_string+0x46>
		return float_string;
 800443e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004440:	e00d      	b.n	800445e <static_strings_float_to_string+0x62>
	}
	memcpy(float_string->string,float_temp_string,float_string_length);
 8004442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800444a:	f107 010c 	add.w	r1, r7, #12
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f86a 	bl	8004528 <memcpy>
	float_string->length = float_string_length;
 8004454:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445a:	809a      	strh	r2, [r3, #4]
	return float_string;
 800445c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800445e:	4618      	mov	r0, r3
 8004460:	374c      	adds	r7, #76	; 0x4c
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}
 8004466:	bf00      	nop
 8004468:	080072e0 	.word	0x080072e0

0800446c <static_strings_double_to_string>:

static_strings_string_descriptor *static_strings_double_to_string(double double_arg){
 800446c:	b580      	push	{r7, lr}
 800446e:	b092      	sub	sp, #72	; 0x48
 8004470:	af00      	add	r7, sp, #0
 8004472:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t double_temp_string[50];
	sprintf((char *)double_temp_string,"%lf",double_arg);
 8004476:	f107 000c 	add.w	r0, r7, #12
 800447a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800447e:	4914      	ldr	r1, [pc, #80]	; (80044d0 <static_strings_double_to_string+0x64>)
 8004480:	f000 fcb4 	bl	8004dec <siprintf>
	int16_t double_string_length = static_strings_strlen(double_temp_string);
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fcab 	bl	8003de4 <static_strings_strlen>
 800448e:	4603      	mov	r3, r0
 8004490:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *double_string = static_strings_allocate(double_string_length);
 8004494:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fb29 	bl	8003af0 <static_strings_allocate>
 800449e:	6438      	str	r0, [r7, #64]	; 0x40
	if(double_string == NULL){
 80044a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <static_strings_double_to_string+0x3e>
		return double_string;
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	e00d      	b.n	80044c6 <static_strings_double_to_string+0x5a>
	}
	memcpy(double_string->string,double_temp_string,double_string_length);
 80044aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80044b2:	f107 010c 	add.w	r1, r7, #12
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f836 	bl	8004528 <memcpy>
	double_string->length = double_string_length;
 80044bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80044c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c2:	809a      	strh	r2, [r3, #4]
	return double_string;
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3748      	adds	r7, #72	; 0x48
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	080072e4 	.word	0x080072e4

080044d4 <__errno>:
 80044d4:	4b01      	ldr	r3, [pc, #4]	; (80044dc <__errno+0x8>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <__libc_init_array>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	2500      	movs	r5, #0
 80044e4:	4e0c      	ldr	r6, [pc, #48]	; (8004518 <__libc_init_array+0x38>)
 80044e6:	4c0d      	ldr	r4, [pc, #52]	; (800451c <__libc_init_array+0x3c>)
 80044e8:	1ba4      	subs	r4, r4, r6
 80044ea:	10a4      	asrs	r4, r4, #2
 80044ec:	42a5      	cmp	r5, r4
 80044ee:	d109      	bne.n	8004504 <__libc_init_array+0x24>
 80044f0:	f002 f85c 	bl	80065ac <_init>
 80044f4:	2500      	movs	r5, #0
 80044f6:	4e0a      	ldr	r6, [pc, #40]	; (8004520 <__libc_init_array+0x40>)
 80044f8:	4c0a      	ldr	r4, [pc, #40]	; (8004524 <__libc_init_array+0x44>)
 80044fa:	1ba4      	subs	r4, r4, r6
 80044fc:	10a4      	asrs	r4, r4, #2
 80044fe:	42a5      	cmp	r5, r4
 8004500:	d105      	bne.n	800450e <__libc_init_array+0x2e>
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004508:	4798      	blx	r3
 800450a:	3501      	adds	r5, #1
 800450c:	e7ee      	b.n	80044ec <__libc_init_array+0xc>
 800450e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004512:	4798      	blx	r3
 8004514:	3501      	adds	r5, #1
 8004516:	e7f2      	b.n	80044fe <__libc_init_array+0x1e>
 8004518:	08007560 	.word	0x08007560
 800451c:	08007560 	.word	0x08007560
 8004520:	08007560 	.word	0x08007560
 8004524:	08007564 	.word	0x08007564

08004528 <memcpy>:
 8004528:	b510      	push	{r4, lr}
 800452a:	1e43      	subs	r3, r0, #1
 800452c:	440a      	add	r2, r1
 800452e:	4291      	cmp	r1, r2
 8004530:	d100      	bne.n	8004534 <memcpy+0xc>
 8004532:	bd10      	pop	{r4, pc}
 8004534:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800453c:	e7f7      	b.n	800452e <memcpy+0x6>

0800453e <memset>:
 800453e:	4603      	mov	r3, r0
 8004540:	4402      	add	r2, r0
 8004542:	4293      	cmp	r3, r2
 8004544:	d100      	bne.n	8004548 <memset+0xa>
 8004546:	4770      	bx	lr
 8004548:	f803 1b01 	strb.w	r1, [r3], #1
 800454c:	e7f9      	b.n	8004542 <memset+0x4>

0800454e <__cvt>:
 800454e:	2b00      	cmp	r3, #0
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	461e      	mov	r6, r3
 8004556:	bfbb      	ittet	lt
 8004558:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800455c:	461e      	movlt	r6, r3
 800455e:	2300      	movge	r3, #0
 8004560:	232d      	movlt	r3, #45	; 0x2d
 8004562:	b088      	sub	sp, #32
 8004564:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004566:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800456a:	f027 0720 	bic.w	r7, r7, #32
 800456e:	2f46      	cmp	r7, #70	; 0x46
 8004570:	4614      	mov	r4, r2
 8004572:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004574:	700b      	strb	r3, [r1, #0]
 8004576:	d004      	beq.n	8004582 <__cvt+0x34>
 8004578:	2f45      	cmp	r7, #69	; 0x45
 800457a:	d100      	bne.n	800457e <__cvt+0x30>
 800457c:	3501      	adds	r5, #1
 800457e:	2302      	movs	r3, #2
 8004580:	e000      	b.n	8004584 <__cvt+0x36>
 8004582:	2303      	movs	r3, #3
 8004584:	aa07      	add	r2, sp, #28
 8004586:	9204      	str	r2, [sp, #16]
 8004588:	aa06      	add	r2, sp, #24
 800458a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800458e:	e9cd 3500 	strd	r3, r5, [sp]
 8004592:	4622      	mov	r2, r4
 8004594:	4633      	mov	r3, r6
 8004596:	f000 fcd7 	bl	8004f48 <_dtoa_r>
 800459a:	2f47      	cmp	r7, #71	; 0x47
 800459c:	4680      	mov	r8, r0
 800459e:	d102      	bne.n	80045a6 <__cvt+0x58>
 80045a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045a2:	07db      	lsls	r3, r3, #31
 80045a4:	d526      	bpl.n	80045f4 <__cvt+0xa6>
 80045a6:	2f46      	cmp	r7, #70	; 0x46
 80045a8:	eb08 0905 	add.w	r9, r8, r5
 80045ac:	d111      	bne.n	80045d2 <__cvt+0x84>
 80045ae:	f898 3000 	ldrb.w	r3, [r8]
 80045b2:	2b30      	cmp	r3, #48	; 0x30
 80045b4:	d10a      	bne.n	80045cc <__cvt+0x7e>
 80045b6:	2200      	movs	r2, #0
 80045b8:	2300      	movs	r3, #0
 80045ba:	4620      	mov	r0, r4
 80045bc:	4631      	mov	r1, r6
 80045be:	f7fc f9f3 	bl	80009a8 <__aeabi_dcmpeq>
 80045c2:	b918      	cbnz	r0, 80045cc <__cvt+0x7e>
 80045c4:	f1c5 0501 	rsb	r5, r5, #1
 80045c8:	f8ca 5000 	str.w	r5, [sl]
 80045cc:	f8da 3000 	ldr.w	r3, [sl]
 80045d0:	4499      	add	r9, r3
 80045d2:	2200      	movs	r2, #0
 80045d4:	2300      	movs	r3, #0
 80045d6:	4620      	mov	r0, r4
 80045d8:	4631      	mov	r1, r6
 80045da:	f7fc f9e5 	bl	80009a8 <__aeabi_dcmpeq>
 80045de:	b938      	cbnz	r0, 80045f0 <__cvt+0xa2>
 80045e0:	2230      	movs	r2, #48	; 0x30
 80045e2:	9b07      	ldr	r3, [sp, #28]
 80045e4:	454b      	cmp	r3, r9
 80045e6:	d205      	bcs.n	80045f4 <__cvt+0xa6>
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	9107      	str	r1, [sp, #28]
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e7f8      	b.n	80045e2 <__cvt+0x94>
 80045f0:	f8cd 901c 	str.w	r9, [sp, #28]
 80045f4:	4640      	mov	r0, r8
 80045f6:	9b07      	ldr	r3, [sp, #28]
 80045f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045fa:	eba3 0308 	sub.w	r3, r3, r8
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	b008      	add	sp, #32
 8004602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004606 <__exponent>:
 8004606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004608:	2900      	cmp	r1, #0
 800460a:	bfb4      	ite	lt
 800460c:	232d      	movlt	r3, #45	; 0x2d
 800460e:	232b      	movge	r3, #43	; 0x2b
 8004610:	4604      	mov	r4, r0
 8004612:	bfb8      	it	lt
 8004614:	4249      	neglt	r1, r1
 8004616:	2909      	cmp	r1, #9
 8004618:	f804 2b02 	strb.w	r2, [r4], #2
 800461c:	7043      	strb	r3, [r0, #1]
 800461e:	dd21      	ble.n	8004664 <__exponent+0x5e>
 8004620:	f10d 0307 	add.w	r3, sp, #7
 8004624:	461f      	mov	r7, r3
 8004626:	260a      	movs	r6, #10
 8004628:	fb91 f5f6 	sdiv	r5, r1, r6
 800462c:	fb06 1115 	mls	r1, r6, r5, r1
 8004630:	2d09      	cmp	r5, #9
 8004632:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004636:	f803 1c01 	strb.w	r1, [r3, #-1]
 800463a:	f103 32ff 	add.w	r2, r3, #4294967295
 800463e:	4629      	mov	r1, r5
 8004640:	dc09      	bgt.n	8004656 <__exponent+0x50>
 8004642:	3130      	adds	r1, #48	; 0x30
 8004644:	3b02      	subs	r3, #2
 8004646:	f802 1c01 	strb.w	r1, [r2, #-1]
 800464a:	42bb      	cmp	r3, r7
 800464c:	4622      	mov	r2, r4
 800464e:	d304      	bcc.n	800465a <__exponent+0x54>
 8004650:	1a10      	subs	r0, r2, r0
 8004652:	b003      	add	sp, #12
 8004654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004656:	4613      	mov	r3, r2
 8004658:	e7e6      	b.n	8004628 <__exponent+0x22>
 800465a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800465e:	f804 2b01 	strb.w	r2, [r4], #1
 8004662:	e7f2      	b.n	800464a <__exponent+0x44>
 8004664:	2330      	movs	r3, #48	; 0x30
 8004666:	4419      	add	r1, r3
 8004668:	7083      	strb	r3, [r0, #2]
 800466a:	1d02      	adds	r2, r0, #4
 800466c:	70c1      	strb	r1, [r0, #3]
 800466e:	e7ef      	b.n	8004650 <__exponent+0x4a>

08004670 <_printf_float>:
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	b091      	sub	sp, #68	; 0x44
 8004676:	460c      	mov	r4, r1
 8004678:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800467a:	4693      	mov	fp, r2
 800467c:	461e      	mov	r6, r3
 800467e:	4605      	mov	r5, r0
 8004680:	f001 fa16 	bl	8005ab0 <_localeconv_r>
 8004684:	6803      	ldr	r3, [r0, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	9309      	str	r3, [sp, #36]	; 0x24
 800468a:	f7fb fd61 	bl	8000150 <strlen>
 800468e:	2300      	movs	r3, #0
 8004690:	930e      	str	r3, [sp, #56]	; 0x38
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	900a      	str	r0, [sp, #40]	; 0x28
 8004696:	3307      	adds	r3, #7
 8004698:	f023 0307 	bic.w	r3, r3, #7
 800469c:	f103 0208 	add.w	r2, r3, #8
 80046a0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80046a4:	f8d4 a000 	ldr.w	sl, [r4]
 80046a8:	603a      	str	r2, [r7, #0]
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046b2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80046b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	4ba6      	ldr	r3, [pc, #664]	; (800495c <_printf_float+0x2ec>)
 80046c2:	4638      	mov	r0, r7
 80046c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046c6:	f7fc f9a1 	bl	8000a0c <__aeabi_dcmpun>
 80046ca:	bb68      	cbnz	r0, 8004728 <_printf_float+0xb8>
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	4ba2      	ldr	r3, [pc, #648]	; (800495c <_printf_float+0x2ec>)
 80046d2:	4638      	mov	r0, r7
 80046d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046d6:	f7fc f97b 	bl	80009d0 <__aeabi_dcmple>
 80046da:	bb28      	cbnz	r0, 8004728 <_printf_float+0xb8>
 80046dc:	2200      	movs	r2, #0
 80046de:	2300      	movs	r3, #0
 80046e0:	4638      	mov	r0, r7
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fc f96a 	bl	80009bc <__aeabi_dcmplt>
 80046e8:	b110      	cbz	r0, 80046f0 <_printf_float+0x80>
 80046ea:	232d      	movs	r3, #45	; 0x2d
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f0:	4f9b      	ldr	r7, [pc, #620]	; (8004960 <_printf_float+0x2f0>)
 80046f2:	4b9c      	ldr	r3, [pc, #624]	; (8004964 <_printf_float+0x2f4>)
 80046f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046f8:	bf98      	it	ls
 80046fa:	461f      	movls	r7, r3
 80046fc:	2303      	movs	r3, #3
 80046fe:	f04f 0900 	mov.w	r9, #0
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	f02a 0304 	bic.w	r3, sl, #4
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	9600      	str	r6, [sp, #0]
 800470c:	465b      	mov	r3, fp
 800470e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004710:	4621      	mov	r1, r4
 8004712:	4628      	mov	r0, r5
 8004714:	f000 f9e2 	bl	8004adc <_printf_common>
 8004718:	3001      	adds	r0, #1
 800471a:	f040 8090 	bne.w	800483e <_printf_float+0x1ce>
 800471e:	f04f 30ff 	mov.w	r0, #4294967295
 8004722:	b011      	add	sp, #68	; 0x44
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004728:	463a      	mov	r2, r7
 800472a:	464b      	mov	r3, r9
 800472c:	4638      	mov	r0, r7
 800472e:	4649      	mov	r1, r9
 8004730:	f7fc f96c 	bl	8000a0c <__aeabi_dcmpun>
 8004734:	b110      	cbz	r0, 800473c <_printf_float+0xcc>
 8004736:	4f8c      	ldr	r7, [pc, #560]	; (8004968 <_printf_float+0x2f8>)
 8004738:	4b8c      	ldr	r3, [pc, #560]	; (800496c <_printf_float+0x2fc>)
 800473a:	e7db      	b.n	80046f4 <_printf_float+0x84>
 800473c:	6863      	ldr	r3, [r4, #4]
 800473e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	a80d      	add	r0, sp, #52	; 0x34
 8004746:	a90e      	add	r1, sp, #56	; 0x38
 8004748:	d140      	bne.n	80047cc <_printf_float+0x15c>
 800474a:	2306      	movs	r3, #6
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	f04f 0c00 	mov.w	ip, #0
 8004752:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004756:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	6022      	str	r2, [r4, #0]
 800475e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	463a      	mov	r2, r7
 8004766:	464b      	mov	r3, r9
 8004768:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800476c:	4628      	mov	r0, r5
 800476e:	f7ff feee 	bl	800454e <__cvt>
 8004772:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004776:	2b47      	cmp	r3, #71	; 0x47
 8004778:	4607      	mov	r7, r0
 800477a:	d109      	bne.n	8004790 <_printf_float+0x120>
 800477c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800477e:	1cd8      	adds	r0, r3, #3
 8004780:	db02      	blt.n	8004788 <_printf_float+0x118>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	4293      	cmp	r3, r2
 8004786:	dd47      	ble.n	8004818 <_printf_float+0x1a8>
 8004788:	f1a8 0802 	sub.w	r8, r8, #2
 800478c:	fa5f f888 	uxtb.w	r8, r8
 8004790:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004794:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004796:	d824      	bhi.n	80047e2 <_printf_float+0x172>
 8004798:	3901      	subs	r1, #1
 800479a:	4642      	mov	r2, r8
 800479c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047a0:	910d      	str	r1, [sp, #52]	; 0x34
 80047a2:	f7ff ff30 	bl	8004606 <__exponent>
 80047a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047a8:	4681      	mov	r9, r0
 80047aa:	1813      	adds	r3, r2, r0
 80047ac:	2a01      	cmp	r2, #1
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	dc02      	bgt.n	80047b8 <_printf_float+0x148>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	07d1      	lsls	r1, r2, #31
 80047b6:	d501      	bpl.n	80047bc <_printf_float+0x14c>
 80047b8:	3301      	adds	r3, #1
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0a2      	beq.n	800470a <_printf_float+0x9a>
 80047c4:	232d      	movs	r3, #45	; 0x2d
 80047c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ca:	e79e      	b.n	800470a <_printf_float+0x9a>
 80047cc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80047d0:	f000 816e 	beq.w	8004ab0 <_printf_float+0x440>
 80047d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047d8:	d1b9      	bne.n	800474e <_printf_float+0xde>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1b7      	bne.n	800474e <_printf_float+0xde>
 80047de:	2301      	movs	r3, #1
 80047e0:	e7b4      	b.n	800474c <_printf_float+0xdc>
 80047e2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80047e6:	d119      	bne.n	800481c <_printf_float+0x1ac>
 80047e8:	2900      	cmp	r1, #0
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	dd0c      	ble.n	8004808 <_printf_float+0x198>
 80047ee:	6121      	str	r1, [r4, #16]
 80047f0:	b913      	cbnz	r3, 80047f8 <_printf_float+0x188>
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	07d2      	lsls	r2, r2, #31
 80047f6:	d502      	bpl.n	80047fe <_printf_float+0x18e>
 80047f8:	3301      	adds	r3, #1
 80047fa:	440b      	add	r3, r1
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004800:	f04f 0900 	mov.w	r9, #0
 8004804:	65a3      	str	r3, [r4, #88]	; 0x58
 8004806:	e7d9      	b.n	80047bc <_printf_float+0x14c>
 8004808:	b913      	cbnz	r3, 8004810 <_printf_float+0x1a0>
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	07d0      	lsls	r0, r2, #31
 800480e:	d501      	bpl.n	8004814 <_printf_float+0x1a4>
 8004810:	3302      	adds	r3, #2
 8004812:	e7f3      	b.n	80047fc <_printf_float+0x18c>
 8004814:	2301      	movs	r3, #1
 8004816:	e7f1      	b.n	80047fc <_printf_float+0x18c>
 8004818:	f04f 0867 	mov.w	r8, #103	; 0x67
 800481c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004820:	4293      	cmp	r3, r2
 8004822:	db05      	blt.n	8004830 <_printf_float+0x1c0>
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	6123      	str	r3, [r4, #16]
 8004828:	07d1      	lsls	r1, r2, #31
 800482a:	d5e8      	bpl.n	80047fe <_printf_float+0x18e>
 800482c:	3301      	adds	r3, #1
 800482e:	e7e5      	b.n	80047fc <_printf_float+0x18c>
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfcc      	ite	gt
 8004834:	2301      	movgt	r3, #1
 8004836:	f1c3 0302 	rsble	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	e7de      	b.n	80047fc <_printf_float+0x18c>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	055a      	lsls	r2, r3, #21
 8004842:	d407      	bmi.n	8004854 <_printf_float+0x1e4>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	463a      	mov	r2, r7
 8004848:	4659      	mov	r1, fp
 800484a:	4628      	mov	r0, r5
 800484c:	47b0      	blx	r6
 800484e:	3001      	adds	r0, #1
 8004850:	d129      	bne.n	80048a6 <_printf_float+0x236>
 8004852:	e764      	b.n	800471e <_printf_float+0xae>
 8004854:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004858:	f240 80d7 	bls.w	8004a0a <_printf_float+0x39a>
 800485c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004860:	2200      	movs	r2, #0
 8004862:	2300      	movs	r3, #0
 8004864:	f7fc f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8004868:	b388      	cbz	r0, 80048ce <_printf_float+0x25e>
 800486a:	2301      	movs	r3, #1
 800486c:	4a40      	ldr	r2, [pc, #256]	; (8004970 <_printf_float+0x300>)
 800486e:	4659      	mov	r1, fp
 8004870:	4628      	mov	r0, r5
 8004872:	47b0      	blx	r6
 8004874:	3001      	adds	r0, #1
 8004876:	f43f af52 	beq.w	800471e <_printf_float+0xae>
 800487a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800487e:	429a      	cmp	r2, r3
 8004880:	db02      	blt.n	8004888 <_printf_float+0x218>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	07d8      	lsls	r0, r3, #31
 8004886:	d50e      	bpl.n	80048a6 <_printf_float+0x236>
 8004888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800488c:	4659      	mov	r1, fp
 800488e:	4628      	mov	r0, r5
 8004890:	47b0      	blx	r6
 8004892:	3001      	adds	r0, #1
 8004894:	f43f af43 	beq.w	800471e <_printf_float+0xae>
 8004898:	2700      	movs	r7, #0
 800489a:	f104 081a 	add.w	r8, r4, #26
 800489e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a0:	3b01      	subs	r3, #1
 80048a2:	42bb      	cmp	r3, r7
 80048a4:	dc09      	bgt.n	80048ba <_printf_float+0x24a>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	079f      	lsls	r7, r3, #30
 80048aa:	f100 80fd 	bmi.w	8004aa8 <_printf_float+0x438>
 80048ae:	68e0      	ldr	r0, [r4, #12]
 80048b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048b2:	4298      	cmp	r0, r3
 80048b4:	bfb8      	it	lt
 80048b6:	4618      	movlt	r0, r3
 80048b8:	e733      	b.n	8004722 <_printf_float+0xb2>
 80048ba:	2301      	movs	r3, #1
 80048bc:	4642      	mov	r2, r8
 80048be:	4659      	mov	r1, fp
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b0      	blx	r6
 80048c4:	3001      	adds	r0, #1
 80048c6:	f43f af2a 	beq.w	800471e <_printf_float+0xae>
 80048ca:	3701      	adds	r7, #1
 80048cc:	e7e7      	b.n	800489e <_printf_float+0x22e>
 80048ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dc2b      	bgt.n	800492c <_printf_float+0x2bc>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <_printf_float+0x300>)
 80048d8:	4659      	mov	r1, fp
 80048da:	4628      	mov	r0, r5
 80048dc:	47b0      	blx	r6
 80048de:	3001      	adds	r0, #1
 80048e0:	f43f af1d 	beq.w	800471e <_printf_float+0xae>
 80048e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048e6:	b923      	cbnz	r3, 80048f2 <_printf_float+0x282>
 80048e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ea:	b913      	cbnz	r3, 80048f2 <_printf_float+0x282>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	07d9      	lsls	r1, r3, #31
 80048f0:	d5d9      	bpl.n	80048a6 <_printf_float+0x236>
 80048f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f6:	4659      	mov	r1, fp
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b0      	blx	r6
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f af0e 	beq.w	800471e <_printf_float+0xae>
 8004902:	f04f 0800 	mov.w	r8, #0
 8004906:	f104 091a 	add.w	r9, r4, #26
 800490a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800490c:	425b      	negs	r3, r3
 800490e:	4543      	cmp	r3, r8
 8004910:	dc01      	bgt.n	8004916 <_printf_float+0x2a6>
 8004912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004914:	e797      	b.n	8004846 <_printf_float+0x1d6>
 8004916:	2301      	movs	r3, #1
 8004918:	464a      	mov	r2, r9
 800491a:	4659      	mov	r1, fp
 800491c:	4628      	mov	r0, r5
 800491e:	47b0      	blx	r6
 8004920:	3001      	adds	r0, #1
 8004922:	f43f aefc 	beq.w	800471e <_printf_float+0xae>
 8004926:	f108 0801 	add.w	r8, r8, #1
 800492a:	e7ee      	b.n	800490a <_printf_float+0x29a>
 800492c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800492e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004930:	429a      	cmp	r2, r3
 8004932:	bfa8      	it	ge
 8004934:	461a      	movge	r2, r3
 8004936:	2a00      	cmp	r2, #0
 8004938:	4690      	mov	r8, r2
 800493a:	dd07      	ble.n	800494c <_printf_float+0x2dc>
 800493c:	4613      	mov	r3, r2
 800493e:	4659      	mov	r1, fp
 8004940:	463a      	mov	r2, r7
 8004942:	4628      	mov	r0, r5
 8004944:	47b0      	blx	r6
 8004946:	3001      	adds	r0, #1
 8004948:	f43f aee9 	beq.w	800471e <_printf_float+0xae>
 800494c:	f104 031a 	add.w	r3, r4, #26
 8004950:	f04f 0a00 	mov.w	sl, #0
 8004954:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004958:	930b      	str	r3, [sp, #44]	; 0x2c
 800495a:	e015      	b.n	8004988 <_printf_float+0x318>
 800495c:	7fefffff 	.word	0x7fefffff
 8004960:	08007304 	.word	0x08007304
 8004964:	08007300 	.word	0x08007300
 8004968:	0800730c 	.word	0x0800730c
 800496c:	08007308 	.word	0x08007308
 8004970:	08007310 	.word	0x08007310
 8004974:	2301      	movs	r3, #1
 8004976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004978:	4659      	mov	r1, fp
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	3001      	adds	r0, #1
 8004980:	f43f aecd 	beq.w	800471e <_printf_float+0xae>
 8004984:	f10a 0a01 	add.w	sl, sl, #1
 8004988:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800498c:	eba9 0308 	sub.w	r3, r9, r8
 8004990:	4553      	cmp	r3, sl
 8004992:	dcef      	bgt.n	8004974 <_printf_float+0x304>
 8004994:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004998:	429a      	cmp	r2, r3
 800499a:	444f      	add	r7, r9
 800499c:	db14      	blt.n	80049c8 <_printf_float+0x358>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	07da      	lsls	r2, r3, #31
 80049a2:	d411      	bmi.n	80049c8 <_printf_float+0x358>
 80049a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049a8:	eba3 0209 	sub.w	r2, r3, r9
 80049ac:	eba3 0901 	sub.w	r9, r3, r1
 80049b0:	4591      	cmp	r9, r2
 80049b2:	bfa8      	it	ge
 80049b4:	4691      	movge	r9, r2
 80049b6:	f1b9 0f00 	cmp.w	r9, #0
 80049ba:	dc0d      	bgt.n	80049d8 <_printf_float+0x368>
 80049bc:	2700      	movs	r7, #0
 80049be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049c2:	f104 081a 	add.w	r8, r4, #26
 80049c6:	e018      	b.n	80049fa <_printf_float+0x38a>
 80049c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049cc:	4659      	mov	r1, fp
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b0      	blx	r6
 80049d2:	3001      	adds	r0, #1
 80049d4:	d1e6      	bne.n	80049a4 <_printf_float+0x334>
 80049d6:	e6a2      	b.n	800471e <_printf_float+0xae>
 80049d8:	464b      	mov	r3, r9
 80049da:	463a      	mov	r2, r7
 80049dc:	4659      	mov	r1, fp
 80049de:	4628      	mov	r0, r5
 80049e0:	47b0      	blx	r6
 80049e2:	3001      	adds	r0, #1
 80049e4:	d1ea      	bne.n	80049bc <_printf_float+0x34c>
 80049e6:	e69a      	b.n	800471e <_printf_float+0xae>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4642      	mov	r2, r8
 80049ec:	4659      	mov	r1, fp
 80049ee:	4628      	mov	r0, r5
 80049f0:	47b0      	blx	r6
 80049f2:	3001      	adds	r0, #1
 80049f4:	f43f ae93 	beq.w	800471e <_printf_float+0xae>
 80049f8:	3701      	adds	r7, #1
 80049fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	eba3 0309 	sub.w	r3, r3, r9
 8004a04:	42bb      	cmp	r3, r7
 8004a06:	dcef      	bgt.n	80049e8 <_printf_float+0x378>
 8004a08:	e74d      	b.n	80048a6 <_printf_float+0x236>
 8004a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a0c:	2a01      	cmp	r2, #1
 8004a0e:	dc01      	bgt.n	8004a14 <_printf_float+0x3a4>
 8004a10:	07db      	lsls	r3, r3, #31
 8004a12:	d538      	bpl.n	8004a86 <_printf_float+0x416>
 8004a14:	2301      	movs	r3, #1
 8004a16:	463a      	mov	r2, r7
 8004a18:	4659      	mov	r1, fp
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b0      	blx	r6
 8004a1e:	3001      	adds	r0, #1
 8004a20:	f43f ae7d 	beq.w	800471e <_printf_float+0xae>
 8004a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a28:	4659      	mov	r1, fp
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b0      	blx	r6
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f107 0701 	add.w	r7, r7, #1
 8004a34:	f43f ae73 	beq.w	800471e <_printf_float+0xae>
 8004a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f103 38ff 	add.w	r8, r3, #4294967295
 8004a44:	2300      	movs	r3, #0
 8004a46:	f7fb ffaf 	bl	80009a8 <__aeabi_dcmpeq>
 8004a4a:	b9c0      	cbnz	r0, 8004a7e <_printf_float+0x40e>
 8004a4c:	4643      	mov	r3, r8
 8004a4e:	463a      	mov	r2, r7
 8004a50:	4659      	mov	r1, fp
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b0      	blx	r6
 8004a56:	3001      	adds	r0, #1
 8004a58:	d10d      	bne.n	8004a76 <_printf_float+0x406>
 8004a5a:	e660      	b.n	800471e <_printf_float+0xae>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	4642      	mov	r2, r8
 8004a60:	4659      	mov	r1, fp
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b0      	blx	r6
 8004a66:	3001      	adds	r0, #1
 8004a68:	f43f ae59 	beq.w	800471e <_printf_float+0xae>
 8004a6c:	3701      	adds	r7, #1
 8004a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a70:	3b01      	subs	r3, #1
 8004a72:	42bb      	cmp	r3, r7
 8004a74:	dcf2      	bgt.n	8004a5c <_printf_float+0x3ec>
 8004a76:	464b      	mov	r3, r9
 8004a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a7c:	e6e4      	b.n	8004848 <_printf_float+0x1d8>
 8004a7e:	2700      	movs	r7, #0
 8004a80:	f104 081a 	add.w	r8, r4, #26
 8004a84:	e7f3      	b.n	8004a6e <_printf_float+0x3fe>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e7e1      	b.n	8004a4e <_printf_float+0x3de>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	4659      	mov	r1, fp
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b0      	blx	r6
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f ae42 	beq.w	800471e <_printf_float+0xae>
 8004a9a:	3701      	adds	r7, #1
 8004a9c:	68e3      	ldr	r3, [r4, #12]
 8004a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	42bb      	cmp	r3, r7
 8004aa4:	dcf1      	bgt.n	8004a8a <_printf_float+0x41a>
 8004aa6:	e702      	b.n	80048ae <_printf_float+0x23e>
 8004aa8:	2700      	movs	r7, #0
 8004aaa:	f104 0819 	add.w	r8, r4, #25
 8004aae:	e7f5      	b.n	8004a9c <_printf_float+0x42c>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f43f ae94 	beq.w	80047de <_printf_float+0x16e>
 8004ab6:	f04f 0c00 	mov.w	ip, #0
 8004aba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004abe:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004ac2:	6022      	str	r2, [r4, #0]
 8004ac4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004ac8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	463a      	mov	r2, r7
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f7ff fd3b 	bl	800454e <__cvt>
 8004ad8:	4607      	mov	r7, r0
 8004ada:	e64f      	b.n	800477c <_printf_float+0x10c>

08004adc <_printf_common>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	4691      	mov	r9, r2
 8004ae2:	461f      	mov	r7, r3
 8004ae4:	688a      	ldr	r2, [r1, #8]
 8004ae6:	690b      	ldr	r3, [r1, #16]
 8004ae8:	4606      	mov	r6, r0
 8004aea:	4293      	cmp	r3, r2
 8004aec:	bfb8      	it	lt
 8004aee:	4613      	movlt	r3, r2
 8004af0:	f8c9 3000 	str.w	r3, [r9]
 8004af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af8:	460c      	mov	r4, r1
 8004afa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004afe:	b112      	cbz	r2, 8004b06 <_printf_common+0x2a>
 8004b00:	3301      	adds	r3, #1
 8004b02:	f8c9 3000 	str.w	r3, [r9]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	0699      	lsls	r1, r3, #26
 8004b0a:	bf42      	ittt	mi
 8004b0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b10:	3302      	addmi	r3, #2
 8004b12:	f8c9 3000 	strmi.w	r3, [r9]
 8004b16:	6825      	ldr	r5, [r4, #0]
 8004b18:	f015 0506 	ands.w	r5, r5, #6
 8004b1c:	d107      	bne.n	8004b2e <_printf_common+0x52>
 8004b1e:	f104 0a19 	add.w	sl, r4, #25
 8004b22:	68e3      	ldr	r3, [r4, #12]
 8004b24:	f8d9 2000 	ldr.w	r2, [r9]
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	42ab      	cmp	r3, r5
 8004b2c:	dc29      	bgt.n	8004b82 <_printf_common+0xa6>
 8004b2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	3300      	adds	r3, #0
 8004b36:	bf18      	it	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	0692      	lsls	r2, r2, #26
 8004b3c:	d42e      	bmi.n	8004b9c <_printf_common+0xc0>
 8004b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b42:	4639      	mov	r1, r7
 8004b44:	4630      	mov	r0, r6
 8004b46:	47c0      	blx	r8
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d021      	beq.n	8004b90 <_printf_common+0xb4>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	68e5      	ldr	r5, [r4, #12]
 8004b50:	f003 0306 	and.w	r3, r3, #6
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	bf18      	it	ne
 8004b58:	2500      	movne	r5, #0
 8004b5a:	f8d9 2000 	ldr.w	r2, [r9]
 8004b5e:	f04f 0900 	mov.w	r9, #0
 8004b62:	bf08      	it	eq
 8004b64:	1aad      	subeq	r5, r5, r2
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	6922      	ldr	r2, [r4, #16]
 8004b6a:	bf08      	it	eq
 8004b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b70:	4293      	cmp	r3, r2
 8004b72:	bfc4      	itt	gt
 8004b74:	1a9b      	subgt	r3, r3, r2
 8004b76:	18ed      	addgt	r5, r5, r3
 8004b78:	341a      	adds	r4, #26
 8004b7a:	454d      	cmp	r5, r9
 8004b7c:	d11a      	bne.n	8004bb4 <_printf_common+0xd8>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e008      	b.n	8004b94 <_printf_common+0xb8>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4652      	mov	r2, sl
 8004b86:	4639      	mov	r1, r7
 8004b88:	4630      	mov	r0, r6
 8004b8a:	47c0      	blx	r8
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d103      	bne.n	8004b98 <_printf_common+0xbc>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	3501      	adds	r5, #1
 8004b9a:	e7c2      	b.n	8004b22 <_printf_common+0x46>
 8004b9c:	2030      	movs	r0, #48	; 0x30
 8004b9e:	18e1      	adds	r1, r4, r3
 8004ba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004baa:	4422      	add	r2, r4
 8004bac:	3302      	adds	r3, #2
 8004bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bb2:	e7c4      	b.n	8004b3e <_printf_common+0x62>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	4639      	mov	r1, r7
 8004bba:	4630      	mov	r0, r6
 8004bbc:	47c0      	blx	r8
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d0e6      	beq.n	8004b90 <_printf_common+0xb4>
 8004bc2:	f109 0901 	add.w	r9, r9, #1
 8004bc6:	e7d8      	b.n	8004b7a <_printf_common+0x9e>

08004bc8 <_printf_i>:
 8004bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	7e09      	ldrb	r1, [r1, #24]
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	296e      	cmp	r1, #110	; 0x6e
 8004bd8:	4617      	mov	r7, r2
 8004bda:	4606      	mov	r6, r0
 8004bdc:	4698      	mov	r8, r3
 8004bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004be0:	f000 80b3 	beq.w	8004d4a <_printf_i+0x182>
 8004be4:	d822      	bhi.n	8004c2c <_printf_i+0x64>
 8004be6:	2963      	cmp	r1, #99	; 0x63
 8004be8:	d036      	beq.n	8004c58 <_printf_i+0x90>
 8004bea:	d80a      	bhi.n	8004c02 <_printf_i+0x3a>
 8004bec:	2900      	cmp	r1, #0
 8004bee:	f000 80b9 	beq.w	8004d64 <_printf_i+0x19c>
 8004bf2:	2958      	cmp	r1, #88	; 0x58
 8004bf4:	f000 8083 	beq.w	8004cfe <_printf_i+0x136>
 8004bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c00:	e032      	b.n	8004c68 <_printf_i+0xa0>
 8004c02:	2964      	cmp	r1, #100	; 0x64
 8004c04:	d001      	beq.n	8004c0a <_printf_i+0x42>
 8004c06:	2969      	cmp	r1, #105	; 0x69
 8004c08:	d1f6      	bne.n	8004bf8 <_printf_i+0x30>
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	6813      	ldr	r3, [r2, #0]
 8004c0e:	0605      	lsls	r5, r0, #24
 8004c10:	f103 0104 	add.w	r1, r3, #4
 8004c14:	d52a      	bpl.n	8004c6c <_printf_i+0xa4>
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da03      	bge.n	8004c26 <_printf_i+0x5e>
 8004c1e:	222d      	movs	r2, #45	; 0x2d
 8004c20:	425b      	negs	r3, r3
 8004c22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c26:	486f      	ldr	r0, [pc, #444]	; (8004de4 <_printf_i+0x21c>)
 8004c28:	220a      	movs	r2, #10
 8004c2a:	e039      	b.n	8004ca0 <_printf_i+0xd8>
 8004c2c:	2973      	cmp	r1, #115	; 0x73
 8004c2e:	f000 809d 	beq.w	8004d6c <_printf_i+0x1a4>
 8004c32:	d808      	bhi.n	8004c46 <_printf_i+0x7e>
 8004c34:	296f      	cmp	r1, #111	; 0x6f
 8004c36:	d020      	beq.n	8004c7a <_printf_i+0xb2>
 8004c38:	2970      	cmp	r1, #112	; 0x70
 8004c3a:	d1dd      	bne.n	8004bf8 <_printf_i+0x30>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	e003      	b.n	8004c4e <_printf_i+0x86>
 8004c46:	2975      	cmp	r1, #117	; 0x75
 8004c48:	d017      	beq.n	8004c7a <_printf_i+0xb2>
 8004c4a:	2978      	cmp	r1, #120	; 0x78
 8004c4c:	d1d4      	bne.n	8004bf8 <_printf_i+0x30>
 8004c4e:	2378      	movs	r3, #120	; 0x78
 8004c50:	4865      	ldr	r0, [pc, #404]	; (8004de8 <_printf_i+0x220>)
 8004c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c56:	e055      	b.n	8004d04 <_printf_i+0x13c>
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c5e:	1d19      	adds	r1, r3, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6011      	str	r1, [r2, #0]
 8004c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e08c      	b.n	8004d86 <_printf_i+0x1be>
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c72:	6011      	str	r1, [r2, #0]
 8004c74:	bf18      	it	ne
 8004c76:	b21b      	sxthne	r3, r3
 8004c78:	e7cf      	b.n	8004c1a <_printf_i+0x52>
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	6825      	ldr	r5, [r4, #0]
 8004c7e:	1d18      	adds	r0, r3, #4
 8004c80:	6010      	str	r0, [r2, #0]
 8004c82:	0628      	lsls	r0, r5, #24
 8004c84:	d501      	bpl.n	8004c8a <_printf_i+0xc2>
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	e002      	b.n	8004c90 <_printf_i+0xc8>
 8004c8a:	0668      	lsls	r0, r5, #25
 8004c8c:	d5fb      	bpl.n	8004c86 <_printf_i+0xbe>
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	296f      	cmp	r1, #111	; 0x6f
 8004c92:	bf14      	ite	ne
 8004c94:	220a      	movne	r2, #10
 8004c96:	2208      	moveq	r2, #8
 8004c98:	4852      	ldr	r0, [pc, #328]	; (8004de4 <_printf_i+0x21c>)
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ca0:	6865      	ldr	r5, [r4, #4]
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	60a5      	str	r5, [r4, #8]
 8004ca6:	f2c0 8095 	blt.w	8004dd4 <_printf_i+0x20c>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	f021 0104 	bic.w	r1, r1, #4
 8004cb0:	6021      	str	r1, [r4, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d13d      	bne.n	8004d32 <_printf_i+0x16a>
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	f040 808e 	bne.w	8004dd8 <_printf_i+0x210>
 8004cbc:	4665      	mov	r5, ip
 8004cbe:	2a08      	cmp	r2, #8
 8004cc0:	d10b      	bne.n	8004cda <_printf_i+0x112>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	07db      	lsls	r3, r3, #31
 8004cc6:	d508      	bpl.n	8004cda <_printf_i+0x112>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	bfde      	ittt	le
 8004cd0:	2330      	movle	r3, #48	; 0x30
 8004cd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cda:	ebac 0305 	sub.w	r3, ip, r5
 8004cde:	6123      	str	r3, [r4, #16]
 8004ce0:	f8cd 8000 	str.w	r8, [sp]
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	aa03      	add	r2, sp, #12
 8004ce8:	4621      	mov	r1, r4
 8004cea:	4630      	mov	r0, r6
 8004cec:	f7ff fef6 	bl	8004adc <_printf_common>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d14d      	bne.n	8004d90 <_printf_i+0x1c8>
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	b005      	add	sp, #20
 8004cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cfe:	4839      	ldr	r0, [pc, #228]	; (8004de4 <_printf_i+0x21c>)
 8004d00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d04:	6813      	ldr	r3, [r2, #0]
 8004d06:	6821      	ldr	r1, [r4, #0]
 8004d08:	1d1d      	adds	r5, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6015      	str	r5, [r2, #0]
 8004d0e:	060a      	lsls	r2, r1, #24
 8004d10:	d50b      	bpl.n	8004d2a <_printf_i+0x162>
 8004d12:	07ca      	lsls	r2, r1, #31
 8004d14:	bf44      	itt	mi
 8004d16:	f041 0120 	orrmi.w	r1, r1, #32
 8004d1a:	6021      	strmi	r1, [r4, #0]
 8004d1c:	b91b      	cbnz	r3, 8004d26 <_printf_i+0x15e>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	f022 0220 	bic.w	r2, r2, #32
 8004d24:	6022      	str	r2, [r4, #0]
 8004d26:	2210      	movs	r2, #16
 8004d28:	e7b7      	b.n	8004c9a <_printf_i+0xd2>
 8004d2a:	064d      	lsls	r5, r1, #25
 8004d2c:	bf48      	it	mi
 8004d2e:	b29b      	uxthmi	r3, r3
 8004d30:	e7ef      	b.n	8004d12 <_printf_i+0x14a>
 8004d32:	4665      	mov	r5, ip
 8004d34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d38:	fb02 3311 	mls	r3, r2, r1, r3
 8004d3c:	5cc3      	ldrb	r3, [r0, r3]
 8004d3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d42:	460b      	mov	r3, r1
 8004d44:	2900      	cmp	r1, #0
 8004d46:	d1f5      	bne.n	8004d34 <_printf_i+0x16c>
 8004d48:	e7b9      	b.n	8004cbe <_printf_i+0xf6>
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	6825      	ldr	r5, [r4, #0]
 8004d4e:	1d18      	adds	r0, r3, #4
 8004d50:	6961      	ldr	r1, [r4, #20]
 8004d52:	6010      	str	r0, [r2, #0]
 8004d54:	0628      	lsls	r0, r5, #24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	d501      	bpl.n	8004d5e <_printf_i+0x196>
 8004d5a:	6019      	str	r1, [r3, #0]
 8004d5c:	e002      	b.n	8004d64 <_printf_i+0x19c>
 8004d5e:	066a      	lsls	r2, r5, #25
 8004d60:	d5fb      	bpl.n	8004d5a <_printf_i+0x192>
 8004d62:	8019      	strh	r1, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	4665      	mov	r5, ip
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	e7b9      	b.n	8004ce0 <_printf_i+0x118>
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	1d19      	adds	r1, r3, #4
 8004d70:	6011      	str	r1, [r2, #0]
 8004d72:	681d      	ldr	r5, [r3, #0]
 8004d74:	6862      	ldr	r2, [r4, #4]
 8004d76:	2100      	movs	r1, #0
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f000 feaf 	bl	8005adc <memchr>
 8004d7e:	b108      	cbz	r0, 8004d84 <_printf_i+0x1bc>
 8004d80:	1b40      	subs	r0, r0, r5
 8004d82:	6060      	str	r0, [r4, #4]
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d8e:	e7a7      	b.n	8004ce0 <_printf_i+0x118>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	462a      	mov	r2, r5
 8004d94:	4639      	mov	r1, r7
 8004d96:	4630      	mov	r0, r6
 8004d98:	47c0      	blx	r8
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d0aa      	beq.n	8004cf4 <_printf_i+0x12c>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	079b      	lsls	r3, r3, #30
 8004da2:	d413      	bmi.n	8004dcc <_printf_i+0x204>
 8004da4:	68e0      	ldr	r0, [r4, #12]
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	4298      	cmp	r0, r3
 8004daa:	bfb8      	it	lt
 8004dac:	4618      	movlt	r0, r3
 8004dae:	e7a3      	b.n	8004cf8 <_printf_i+0x130>
 8004db0:	2301      	movs	r3, #1
 8004db2:	464a      	mov	r2, r9
 8004db4:	4639      	mov	r1, r7
 8004db6:	4630      	mov	r0, r6
 8004db8:	47c0      	blx	r8
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d09a      	beq.n	8004cf4 <_printf_i+0x12c>
 8004dbe:	3501      	adds	r5, #1
 8004dc0:	68e3      	ldr	r3, [r4, #12]
 8004dc2:	9a03      	ldr	r2, [sp, #12]
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	42ab      	cmp	r3, r5
 8004dc8:	dcf2      	bgt.n	8004db0 <_printf_i+0x1e8>
 8004dca:	e7eb      	b.n	8004da4 <_printf_i+0x1dc>
 8004dcc:	2500      	movs	r5, #0
 8004dce:	f104 0919 	add.w	r9, r4, #25
 8004dd2:	e7f5      	b.n	8004dc0 <_printf_i+0x1f8>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ac      	bne.n	8004d32 <_printf_i+0x16a>
 8004dd8:	7803      	ldrb	r3, [r0, #0]
 8004dda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de2:	e76c      	b.n	8004cbe <_printf_i+0xf6>
 8004de4:	08007312 	.word	0x08007312
 8004de8:	08007323 	.word	0x08007323

08004dec <siprintf>:
 8004dec:	b40e      	push	{r1, r2, r3}
 8004dee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004df2:	b500      	push	{lr}
 8004df4:	b09c      	sub	sp, #112	; 0x70
 8004df6:	ab1d      	add	r3, sp, #116	; 0x74
 8004df8:	9002      	str	r0, [sp, #8]
 8004dfa:	9006      	str	r0, [sp, #24]
 8004dfc:	9107      	str	r1, [sp, #28]
 8004dfe:	9104      	str	r1, [sp, #16]
 8004e00:	4808      	ldr	r0, [pc, #32]	; (8004e24 <siprintf+0x38>)
 8004e02:	4909      	ldr	r1, [pc, #36]	; (8004e28 <siprintf+0x3c>)
 8004e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e08:	9105      	str	r1, [sp, #20]
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	a902      	add	r1, sp, #8
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	f001 fa5c 	bl	80062cc <_svfiprintf_r>
 8004e14:	2200      	movs	r2, #0
 8004e16:	9b02      	ldr	r3, [sp, #8]
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	b01c      	add	sp, #112	; 0x70
 8004e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e20:	b003      	add	sp, #12
 8004e22:	4770      	bx	lr
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	ffff0208 	.word	0xffff0208

08004e2c <quorem>:
 8004e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	6903      	ldr	r3, [r0, #16]
 8004e32:	690c      	ldr	r4, [r1, #16]
 8004e34:	4680      	mov	r8, r0
 8004e36:	42a3      	cmp	r3, r4
 8004e38:	f2c0 8084 	blt.w	8004f44 <quorem+0x118>
 8004e3c:	3c01      	subs	r4, #1
 8004e3e:	f101 0714 	add.w	r7, r1, #20
 8004e42:	f100 0614 	add.w	r6, r0, #20
 8004e46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e4e:	3501      	adds	r5, #1
 8004e50:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e54:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e58:	eb06 030c 	add.w	r3, r6, ip
 8004e5c:	eb07 090c 	add.w	r9, r7, ip
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	b39d      	cbz	r5, 8004ecc <quorem+0xa0>
 8004e64:	f04f 0a00 	mov.w	sl, #0
 8004e68:	4638      	mov	r0, r7
 8004e6a:	46b6      	mov	lr, r6
 8004e6c:	46d3      	mov	fp, sl
 8004e6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e72:	b293      	uxth	r3, r2
 8004e74:	fb05 a303 	mla	r3, r5, r3, sl
 8004e78:	0c12      	lsrs	r2, r2, #16
 8004e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e7e:	fb05 a202 	mla	r2, r5, r2, sl
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	ebab 0303 	sub.w	r3, fp, r3
 8004e88:	f8de b000 	ldr.w	fp, [lr]
 8004e8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e90:	fa1f fb8b 	uxth.w	fp, fp
 8004e94:	445b      	add	r3, fp
 8004e96:	fa1f fb82 	uxth.w	fp, r2
 8004e9a:	f8de 2000 	ldr.w	r2, [lr]
 8004e9e:	4581      	cmp	r9, r0
 8004ea0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004eb2:	f84e 3b04 	str.w	r3, [lr], #4
 8004eb6:	d2da      	bcs.n	8004e6e <quorem+0x42>
 8004eb8:	f856 300c 	ldr.w	r3, [r6, ip]
 8004ebc:	b933      	cbnz	r3, 8004ecc <quorem+0xa0>
 8004ebe:	9b01      	ldr	r3, [sp, #4]
 8004ec0:	3b04      	subs	r3, #4
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	d331      	bcc.n	8004f2c <quorem+0x100>
 8004ec8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ecc:	4640      	mov	r0, r8
 8004ece:	f001 f827 	bl	8005f20 <__mcmp>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	db26      	blt.n	8004f24 <quorem+0xf8>
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f04f 0c00 	mov.w	ip, #0
 8004edc:	3501      	adds	r5, #1
 8004ede:	f857 1b04 	ldr.w	r1, [r7], #4
 8004ee2:	f8d0 e000 	ldr.w	lr, [r0]
 8004ee6:	b28b      	uxth	r3, r1
 8004ee8:	ebac 0303 	sub.w	r3, ip, r3
 8004eec:	fa1f f28e 	uxth.w	r2, lr
 8004ef0:	4413      	add	r3, r2
 8004ef2:	0c0a      	lsrs	r2, r1, #16
 8004ef4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f02:	45b9      	cmp	r9, r7
 8004f04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f08:	f840 3b04 	str.w	r3, [r0], #4
 8004f0c:	d2e7      	bcs.n	8004ede <quorem+0xb2>
 8004f0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004f12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004f16:	b92a      	cbnz	r2, 8004f24 <quorem+0xf8>
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	429e      	cmp	r6, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	d30b      	bcc.n	8004f38 <quorem+0x10c>
 8004f20:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f24:	4628      	mov	r0, r5
 8004f26:	b003      	add	sp, #12
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d1c9      	bne.n	8004ec8 <quorem+0x9c>
 8004f34:	3c01      	subs	r4, #1
 8004f36:	e7c4      	b.n	8004ec2 <quorem+0x96>
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	3b04      	subs	r3, #4
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	d1ef      	bne.n	8004f20 <quorem+0xf4>
 8004f40:	3c01      	subs	r4, #1
 8004f42:	e7ea      	b.n	8004f1a <quorem+0xee>
 8004f44:	2000      	movs	r0, #0
 8004f46:	e7ee      	b.n	8004f26 <quorem+0xfa>

08004f48 <_dtoa_r>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	4616      	mov	r6, r2
 8004f4e:	461f      	mov	r7, r3
 8004f50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f52:	b095      	sub	sp, #84	; 0x54
 8004f54:	4604      	mov	r4, r0
 8004f56:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004f5a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f5e:	b93d      	cbnz	r5, 8004f70 <_dtoa_r+0x28>
 8004f60:	2010      	movs	r0, #16
 8004f62:	f000 fdb3 	bl	8005acc <malloc>
 8004f66:	6260      	str	r0, [r4, #36]	; 0x24
 8004f68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f6c:	6005      	str	r5, [r0, #0]
 8004f6e:	60c5      	str	r5, [r0, #12]
 8004f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	b151      	cbz	r1, 8004f8c <_dtoa_r+0x44>
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4093      	lsls	r3, r2
 8004f7c:	604a      	str	r2, [r1, #4]
 8004f7e:	608b      	str	r3, [r1, #8]
 8004f80:	4620      	mov	r0, r4
 8004f82:	f000 fded 	bl	8005b60 <_Bfree>
 8004f86:	2200      	movs	r2, #0
 8004f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	1e3b      	subs	r3, r7, #0
 8004f8e:	bfaf      	iteee	ge
 8004f90:	2300      	movge	r3, #0
 8004f92:	2201      	movlt	r2, #1
 8004f94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	9303      	strlt	r3, [sp, #12]
 8004f9a:	bfac      	ite	ge
 8004f9c:	f8c8 3000 	strge.w	r3, [r8]
 8004fa0:	f8c8 2000 	strlt.w	r2, [r8]
 8004fa4:	4bae      	ldr	r3, [pc, #696]	; (8005260 <_dtoa_r+0x318>)
 8004fa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004faa:	ea33 0308 	bics.w	r3, r3, r8
 8004fae:	d11b      	bne.n	8004fe8 <_dtoa_r+0xa0>
 8004fb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	9b02      	ldr	r3, [sp, #8]
 8004fba:	b923      	cbnz	r3, 8004fc6 <_dtoa_r+0x7e>
 8004fbc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f000 8545 	beq.w	8005a50 <_dtoa_r+0xb08>
 8004fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc8:	b953      	cbnz	r3, 8004fe0 <_dtoa_r+0x98>
 8004fca:	4ba6      	ldr	r3, [pc, #664]	; (8005264 <_dtoa_r+0x31c>)
 8004fcc:	e021      	b.n	8005012 <_dtoa_r+0xca>
 8004fce:	4ba6      	ldr	r3, [pc, #664]	; (8005268 <_dtoa_r+0x320>)
 8004fd0:	9306      	str	r3, [sp, #24]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	9806      	ldr	r0, [sp, #24]
 8004fda:	b015      	add	sp, #84	; 0x54
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	4ba0      	ldr	r3, [pc, #640]	; (8005264 <_dtoa_r+0x31c>)
 8004fe2:	9306      	str	r3, [sp, #24]
 8004fe4:	3303      	adds	r3, #3
 8004fe6:	e7f5      	b.n	8004fd4 <_dtoa_r+0x8c>
 8004fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	f7fb fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff8:	4682      	mov	sl, r0
 8004ffa:	b160      	cbz	r0, 8005016 <_dtoa_r+0xce>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8520 	beq.w	8005a4a <_dtoa_r+0xb02>
 800500a:	4b98      	ldr	r3, [pc, #608]	; (800526c <_dtoa_r+0x324>)
 800500c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	3b01      	subs	r3, #1
 8005012:	9306      	str	r3, [sp, #24]
 8005014:	e7e0      	b.n	8004fd8 <_dtoa_r+0x90>
 8005016:	ab12      	add	r3, sp, #72	; 0x48
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	ab13      	add	r3, sp, #76	; 0x4c
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	4632      	mov	r2, r6
 8005020:	463b      	mov	r3, r7
 8005022:	4620      	mov	r0, r4
 8005024:	f000 fff4 	bl	8006010 <__d2b>
 8005028:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800502c:	4683      	mov	fp, r0
 800502e:	2d00      	cmp	r5, #0
 8005030:	d07d      	beq.n	800512e <_dtoa_r+0x1e6>
 8005032:	46b0      	mov	r8, r6
 8005034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005038:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800503c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005040:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005044:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005048:	2200      	movs	r2, #0
 800504a:	4b89      	ldr	r3, [pc, #548]	; (8005270 <_dtoa_r+0x328>)
 800504c:	4640      	mov	r0, r8
 800504e:	4649      	mov	r1, r9
 8005050:	f7fb f88a 	bl	8000168 <__aeabi_dsub>
 8005054:	a37c      	add	r3, pc, #496	; (adr r3, 8005248 <_dtoa_r+0x300>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f7fb fa3d 	bl	80004d8 <__aeabi_dmul>
 800505e:	a37c      	add	r3, pc, #496	; (adr r3, 8005250 <_dtoa_r+0x308>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb f882 	bl	800016c <__adddf3>
 8005068:	4606      	mov	r6, r0
 800506a:	4628      	mov	r0, r5
 800506c:	460f      	mov	r7, r1
 800506e:	f7fb f9c9 	bl	8000404 <__aeabi_i2d>
 8005072:	a379      	add	r3, pc, #484	; (adr r3, 8005258 <_dtoa_r+0x310>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fa2e 	bl	80004d8 <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4630      	mov	r0, r6
 8005082:	4639      	mov	r1, r7
 8005084:	f7fb f872 	bl	800016c <__adddf3>
 8005088:	4606      	mov	r6, r0
 800508a:	460f      	mov	r7, r1
 800508c:	f7fb fcd4 	bl	8000a38 <__aeabi_d2iz>
 8005090:	2200      	movs	r2, #0
 8005092:	4682      	mov	sl, r0
 8005094:	2300      	movs	r3, #0
 8005096:	4630      	mov	r0, r6
 8005098:	4639      	mov	r1, r7
 800509a:	f7fb fc8f 	bl	80009bc <__aeabi_dcmplt>
 800509e:	b148      	cbz	r0, 80050b4 <_dtoa_r+0x16c>
 80050a0:	4650      	mov	r0, sl
 80050a2:	f7fb f9af 	bl	8000404 <__aeabi_i2d>
 80050a6:	4632      	mov	r2, r6
 80050a8:	463b      	mov	r3, r7
 80050aa:	f7fb fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80050ae:	b908      	cbnz	r0, 80050b4 <_dtoa_r+0x16c>
 80050b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050b4:	f1ba 0f16 	cmp.w	sl, #22
 80050b8:	d85a      	bhi.n	8005170 <_dtoa_r+0x228>
 80050ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050be:	496d      	ldr	r1, [pc, #436]	; (8005274 <_dtoa_r+0x32c>)
 80050c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80050c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050c8:	f7fb fc96 	bl	80009f8 <__aeabi_dcmpgt>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d051      	beq.n	8005174 <_dtoa_r+0x22c>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050d6:	930d      	str	r3, [sp, #52]	; 0x34
 80050d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050da:	1b5d      	subs	r5, r3, r5
 80050dc:	1e6b      	subs	r3, r5, #1
 80050de:	9307      	str	r3, [sp, #28]
 80050e0:	bf43      	ittte	mi
 80050e2:	2300      	movmi	r3, #0
 80050e4:	f1c5 0901 	rsbmi	r9, r5, #1
 80050e8:	9307      	strmi	r3, [sp, #28]
 80050ea:	f04f 0900 	movpl.w	r9, #0
 80050ee:	f1ba 0f00 	cmp.w	sl, #0
 80050f2:	db41      	blt.n	8005178 <_dtoa_r+0x230>
 80050f4:	9b07      	ldr	r3, [sp, #28]
 80050f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80050fa:	4453      	add	r3, sl
 80050fc:	9307      	str	r3, [sp, #28]
 80050fe:	2300      	movs	r3, #0
 8005100:	9308      	str	r3, [sp, #32]
 8005102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005104:	2b09      	cmp	r3, #9
 8005106:	f200 808f 	bhi.w	8005228 <_dtoa_r+0x2e0>
 800510a:	2b05      	cmp	r3, #5
 800510c:	bfc4      	itt	gt
 800510e:	3b04      	subgt	r3, #4
 8005110:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005114:	bfc8      	it	gt
 8005116:	2500      	movgt	r5, #0
 8005118:	f1a3 0302 	sub.w	r3, r3, #2
 800511c:	bfd8      	it	le
 800511e:	2501      	movle	r5, #1
 8005120:	2b03      	cmp	r3, #3
 8005122:	f200 808d 	bhi.w	8005240 <_dtoa_r+0x2f8>
 8005126:	e8df f003 	tbb	[pc, r3]
 800512a:	7d7b      	.short	0x7d7b
 800512c:	6f2f      	.short	0x6f2f
 800512e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005132:	441d      	add	r5, r3
 8005134:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005138:	2820      	cmp	r0, #32
 800513a:	dd13      	ble.n	8005164 <_dtoa_r+0x21c>
 800513c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005140:	9b02      	ldr	r3, [sp, #8]
 8005142:	fa08 f800 	lsl.w	r8, r8, r0
 8005146:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800514a:	fa23 f000 	lsr.w	r0, r3, r0
 800514e:	ea48 0000 	orr.w	r0, r8, r0
 8005152:	f7fb f947 	bl	80003e4 <__aeabi_ui2d>
 8005156:	2301      	movs	r3, #1
 8005158:	4680      	mov	r8, r0
 800515a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800515e:	3d01      	subs	r5, #1
 8005160:	9310      	str	r3, [sp, #64]	; 0x40
 8005162:	e771      	b.n	8005048 <_dtoa_r+0x100>
 8005164:	9b02      	ldr	r3, [sp, #8]
 8005166:	f1c0 0020 	rsb	r0, r0, #32
 800516a:	fa03 f000 	lsl.w	r0, r3, r0
 800516e:	e7f0      	b.n	8005152 <_dtoa_r+0x20a>
 8005170:	2301      	movs	r3, #1
 8005172:	e7b0      	b.n	80050d6 <_dtoa_r+0x18e>
 8005174:	900d      	str	r0, [sp, #52]	; 0x34
 8005176:	e7af      	b.n	80050d8 <_dtoa_r+0x190>
 8005178:	f1ca 0300 	rsb	r3, sl, #0
 800517c:	9308      	str	r3, [sp, #32]
 800517e:	2300      	movs	r3, #0
 8005180:	eba9 090a 	sub.w	r9, r9, sl
 8005184:	930c      	str	r3, [sp, #48]	; 0x30
 8005186:	e7bc      	b.n	8005102 <_dtoa_r+0x1ba>
 8005188:	2301      	movs	r3, #1
 800518a:	9309      	str	r3, [sp, #36]	; 0x24
 800518c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800518e:	2b00      	cmp	r3, #0
 8005190:	dd74      	ble.n	800527c <_dtoa_r+0x334>
 8005192:	4698      	mov	r8, r3
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	2200      	movs	r2, #0
 8005198:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800519a:	6072      	str	r2, [r6, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	f102 0014 	add.w	r0, r2, #20
 80051a2:	4298      	cmp	r0, r3
 80051a4:	6871      	ldr	r1, [r6, #4]
 80051a6:	d96e      	bls.n	8005286 <_dtoa_r+0x33e>
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 fca5 	bl	8005af8 <_Balloc>
 80051ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b0:	6030      	str	r0, [r6, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b8 0f0e 	cmp.w	r8, #14
 80051b8:	9306      	str	r3, [sp, #24]
 80051ba:	f200 80ed 	bhi.w	8005398 <_dtoa_r+0x450>
 80051be:	2d00      	cmp	r5, #0
 80051c0:	f000 80ea 	beq.w	8005398 <_dtoa_r+0x450>
 80051c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051c8:	f1ba 0f00 	cmp.w	sl, #0
 80051cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80051d0:	dd77      	ble.n	80052c2 <_dtoa_r+0x37a>
 80051d2:	4a28      	ldr	r2, [pc, #160]	; (8005274 <_dtoa_r+0x32c>)
 80051d4:	f00a 030f 	and.w	r3, sl, #15
 80051d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80051dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051e0:	06f0      	lsls	r0, r6, #27
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051ea:	d568      	bpl.n	80052be <_dtoa_r+0x376>
 80051ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <_dtoa_r+0x330>)
 80051f2:	2503      	movs	r5, #3
 80051f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051f8:	f7fb fa98 	bl	800072c <__aeabi_ddiv>
 80051fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005200:	f006 060f 	and.w	r6, r6, #15
 8005204:	4f1c      	ldr	r7, [pc, #112]	; (8005278 <_dtoa_r+0x330>)
 8005206:	e04f      	b.n	80052a8 <_dtoa_r+0x360>
 8005208:	2301      	movs	r3, #1
 800520a:	9309      	str	r3, [sp, #36]	; 0x24
 800520c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800520e:	4453      	add	r3, sl
 8005210:	f103 0801 	add.w	r8, r3, #1
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	4643      	mov	r3, r8
 8005218:	2b01      	cmp	r3, #1
 800521a:	bfb8      	it	lt
 800521c:	2301      	movlt	r3, #1
 800521e:	e7ba      	b.n	8005196 <_dtoa_r+0x24e>
 8005220:	2300      	movs	r3, #0
 8005222:	e7b2      	b.n	800518a <_dtoa_r+0x242>
 8005224:	2300      	movs	r3, #0
 8005226:	e7f0      	b.n	800520a <_dtoa_r+0x2c2>
 8005228:	2501      	movs	r5, #1
 800522a:	2300      	movs	r3, #0
 800522c:	9509      	str	r5, [sp, #36]	; 0x24
 800522e:	931e      	str	r3, [sp, #120]	; 0x78
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
 8005234:	2200      	movs	r2, #0
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	4698      	mov	r8, r3
 800523a:	2312      	movs	r3, #18
 800523c:	921f      	str	r2, [sp, #124]	; 0x7c
 800523e:	e7aa      	b.n	8005196 <_dtoa_r+0x24e>
 8005240:	2301      	movs	r3, #1
 8005242:	9309      	str	r3, [sp, #36]	; 0x24
 8005244:	e7f4      	b.n	8005230 <_dtoa_r+0x2e8>
 8005246:	bf00      	nop
 8005248:	636f4361 	.word	0x636f4361
 800524c:	3fd287a7 	.word	0x3fd287a7
 8005250:	8b60c8b3 	.word	0x8b60c8b3
 8005254:	3fc68a28 	.word	0x3fc68a28
 8005258:	509f79fb 	.word	0x509f79fb
 800525c:	3fd34413 	.word	0x3fd34413
 8005260:	7ff00000 	.word	0x7ff00000
 8005264:	0800733d 	.word	0x0800733d
 8005268:	08007334 	.word	0x08007334
 800526c:	08007311 	.word	0x08007311
 8005270:	3ff80000 	.word	0x3ff80000
 8005274:	08007370 	.word	0x08007370
 8005278:	08007348 	.word	0x08007348
 800527c:	2301      	movs	r3, #1
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	4698      	mov	r8, r3
 8005282:	461a      	mov	r2, r3
 8005284:	e7da      	b.n	800523c <_dtoa_r+0x2f4>
 8005286:	3101      	adds	r1, #1
 8005288:	6071      	str	r1, [r6, #4]
 800528a:	0052      	lsls	r2, r2, #1
 800528c:	e787      	b.n	800519e <_dtoa_r+0x256>
 800528e:	07f1      	lsls	r1, r6, #31
 8005290:	d508      	bpl.n	80052a4 <_dtoa_r+0x35c>
 8005292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529a:	f7fb f91d 	bl	80004d8 <__aeabi_dmul>
 800529e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052a2:	3501      	adds	r5, #1
 80052a4:	1076      	asrs	r6, r6, #1
 80052a6:	3708      	adds	r7, #8
 80052a8:	2e00      	cmp	r6, #0
 80052aa:	d1f0      	bne.n	800528e <_dtoa_r+0x346>
 80052ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b4:	f7fb fa3a 	bl	800072c <__aeabi_ddiv>
 80052b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052bc:	e01b      	b.n	80052f6 <_dtoa_r+0x3ae>
 80052be:	2502      	movs	r5, #2
 80052c0:	e7a0      	b.n	8005204 <_dtoa_r+0x2bc>
 80052c2:	f000 80a4 	beq.w	800540e <_dtoa_r+0x4c6>
 80052c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80052ca:	f1ca 0600 	rsb	r6, sl, #0
 80052ce:	4ba0      	ldr	r3, [pc, #640]	; (8005550 <_dtoa_r+0x608>)
 80052d0:	f006 020f 	and.w	r2, r6, #15
 80052d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f7fb f8fc 	bl	80004d8 <__aeabi_dmul>
 80052e0:	2502      	movs	r5, #2
 80052e2:	2300      	movs	r3, #0
 80052e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052e8:	4f9a      	ldr	r7, [pc, #616]	; (8005554 <_dtoa_r+0x60c>)
 80052ea:	1136      	asrs	r6, r6, #4
 80052ec:	2e00      	cmp	r6, #0
 80052ee:	f040 8083 	bne.w	80053f8 <_dtoa_r+0x4b0>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e0      	bne.n	80052b8 <_dtoa_r+0x370>
 80052f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 808a 	beq.w	8005412 <_dtoa_r+0x4ca>
 80052fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005302:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800530a:	2200      	movs	r2, #0
 800530c:	4b92      	ldr	r3, [pc, #584]	; (8005558 <_dtoa_r+0x610>)
 800530e:	f7fb fb55 	bl	80009bc <__aeabi_dcmplt>
 8005312:	2800      	cmp	r0, #0
 8005314:	d07d      	beq.n	8005412 <_dtoa_r+0x4ca>
 8005316:	f1b8 0f00 	cmp.w	r8, #0
 800531a:	d07a      	beq.n	8005412 <_dtoa_r+0x4ca>
 800531c:	9b04      	ldr	r3, [sp, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	dd36      	ble.n	8005390 <_dtoa_r+0x448>
 8005322:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005326:	2200      	movs	r2, #0
 8005328:	4b8c      	ldr	r3, [pc, #560]	; (800555c <_dtoa_r+0x614>)
 800532a:	f7fb f8d5 	bl	80004d8 <__aeabi_dmul>
 800532e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005332:	9e04      	ldr	r6, [sp, #16]
 8005334:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005338:	3501      	adds	r5, #1
 800533a:	4628      	mov	r0, r5
 800533c:	f7fb f862 	bl	8000404 <__aeabi_i2d>
 8005340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005344:	f7fb f8c8 	bl	80004d8 <__aeabi_dmul>
 8005348:	2200      	movs	r2, #0
 800534a:	4b85      	ldr	r3, [pc, #532]	; (8005560 <_dtoa_r+0x618>)
 800534c:	f7fa ff0e 	bl	800016c <__adddf3>
 8005350:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005354:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005358:	950b      	str	r5, [sp, #44]	; 0x2c
 800535a:	2e00      	cmp	r6, #0
 800535c:	d15c      	bne.n	8005418 <_dtoa_r+0x4d0>
 800535e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	4b7f      	ldr	r3, [pc, #508]	; (8005564 <_dtoa_r+0x61c>)
 8005366:	f7fa feff 	bl	8000168 <__aeabi_dsub>
 800536a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800536c:	462b      	mov	r3, r5
 800536e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005372:	f7fb fb41 	bl	80009f8 <__aeabi_dcmpgt>
 8005376:	2800      	cmp	r0, #0
 8005378:	f040 8281 	bne.w	800587e <_dtoa_r+0x936>
 800537c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005382:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005386:	f7fb fb19 	bl	80009bc <__aeabi_dcmplt>
 800538a:	2800      	cmp	r0, #0
 800538c:	f040 8275 	bne.w	800587a <_dtoa_r+0x932>
 8005390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800539a:	2b00      	cmp	r3, #0
 800539c:	f2c0 814b 	blt.w	8005636 <_dtoa_r+0x6ee>
 80053a0:	f1ba 0f0e 	cmp.w	sl, #14
 80053a4:	f300 8147 	bgt.w	8005636 <_dtoa_r+0x6ee>
 80053a8:	4b69      	ldr	r3, [pc, #420]	; (8005550 <_dtoa_r+0x608>)
 80053aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f280 80d7 	bge.w	800556c <_dtoa_r+0x624>
 80053be:	f1b8 0f00 	cmp.w	r8, #0
 80053c2:	f300 80d3 	bgt.w	800556c <_dtoa_r+0x624>
 80053c6:	f040 8257 	bne.w	8005878 <_dtoa_r+0x930>
 80053ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053ce:	2200      	movs	r2, #0
 80053d0:	4b64      	ldr	r3, [pc, #400]	; (8005564 <_dtoa_r+0x61c>)
 80053d2:	f7fb f881 	bl	80004d8 <__aeabi_dmul>
 80053d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053da:	f7fb fb03 	bl	80009e4 <__aeabi_dcmpge>
 80053de:	4646      	mov	r6, r8
 80053e0:	4647      	mov	r7, r8
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f040 822d 	bne.w	8005842 <_dtoa_r+0x8fa>
 80053e8:	9b06      	ldr	r3, [sp, #24]
 80053ea:	9a06      	ldr	r2, [sp, #24]
 80053ec:	1c5d      	adds	r5, r3, #1
 80053ee:	2331      	movs	r3, #49	; 0x31
 80053f0:	f10a 0a01 	add.w	sl, sl, #1
 80053f4:	7013      	strb	r3, [r2, #0]
 80053f6:	e228      	b.n	800584a <_dtoa_r+0x902>
 80053f8:	07f2      	lsls	r2, r6, #31
 80053fa:	d505      	bpl.n	8005408 <_dtoa_r+0x4c0>
 80053fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005400:	f7fb f86a 	bl	80004d8 <__aeabi_dmul>
 8005404:	2301      	movs	r3, #1
 8005406:	3501      	adds	r5, #1
 8005408:	1076      	asrs	r6, r6, #1
 800540a:	3708      	adds	r7, #8
 800540c:	e76e      	b.n	80052ec <_dtoa_r+0x3a4>
 800540e:	2502      	movs	r5, #2
 8005410:	e771      	b.n	80052f6 <_dtoa_r+0x3ae>
 8005412:	4657      	mov	r7, sl
 8005414:	4646      	mov	r6, r8
 8005416:	e790      	b.n	800533a <_dtoa_r+0x3f2>
 8005418:	4b4d      	ldr	r3, [pc, #308]	; (8005550 <_dtoa_r+0x608>)
 800541a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800541e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d048      	beq.n	80054ba <_dtoa_r+0x572>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	2000      	movs	r0, #0
 800542e:	494e      	ldr	r1, [pc, #312]	; (8005568 <_dtoa_r+0x620>)
 8005430:	f7fb f97c 	bl	800072c <__aeabi_ddiv>
 8005434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005438:	f7fa fe96 	bl	8000168 <__aeabi_dsub>
 800543c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005440:	9d06      	ldr	r5, [sp, #24]
 8005442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005446:	f7fb faf7 	bl	8000a38 <__aeabi_d2iz>
 800544a:	9011      	str	r0, [sp, #68]	; 0x44
 800544c:	f7fa ffda 	bl	8000404 <__aeabi_i2d>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005458:	f7fa fe86 	bl	8000168 <__aeabi_dsub>
 800545c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800545e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005462:	3330      	adds	r3, #48	; 0x30
 8005464:	f805 3b01 	strb.w	r3, [r5], #1
 8005468:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800546c:	f7fb faa6 	bl	80009bc <__aeabi_dcmplt>
 8005470:	2800      	cmp	r0, #0
 8005472:	d163      	bne.n	800553c <_dtoa_r+0x5f4>
 8005474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005478:	2000      	movs	r0, #0
 800547a:	4937      	ldr	r1, [pc, #220]	; (8005558 <_dtoa_r+0x610>)
 800547c:	f7fa fe74 	bl	8000168 <__aeabi_dsub>
 8005480:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005484:	f7fb fa9a 	bl	80009bc <__aeabi_dcmplt>
 8005488:	2800      	cmp	r0, #0
 800548a:	f040 80b5 	bne.w	80055f8 <_dtoa_r+0x6b0>
 800548e:	9b06      	ldr	r3, [sp, #24]
 8005490:	1aeb      	subs	r3, r5, r3
 8005492:	429e      	cmp	r6, r3
 8005494:	f77f af7c 	ble.w	8005390 <_dtoa_r+0x448>
 8005498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800549c:	2200      	movs	r2, #0
 800549e:	4b2f      	ldr	r3, [pc, #188]	; (800555c <_dtoa_r+0x614>)
 80054a0:	f7fb f81a 	bl	80004d8 <__aeabi_dmul>
 80054a4:	2200      	movs	r2, #0
 80054a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ae:	4b2b      	ldr	r3, [pc, #172]	; (800555c <_dtoa_r+0x614>)
 80054b0:	f7fb f812 	bl	80004d8 <__aeabi_dmul>
 80054b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b8:	e7c3      	b.n	8005442 <_dtoa_r+0x4fa>
 80054ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054be:	f7fb f80b 	bl	80004d8 <__aeabi_dmul>
 80054c2:	9b06      	ldr	r3, [sp, #24]
 80054c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054c8:	199d      	adds	r5, r3, r6
 80054ca:	461e      	mov	r6, r3
 80054cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d0:	f7fb fab2 	bl	8000a38 <__aeabi_d2iz>
 80054d4:	9011      	str	r0, [sp, #68]	; 0x44
 80054d6:	f7fa ff95 	bl	8000404 <__aeabi_i2d>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e2:	f7fa fe41 	bl	8000168 <__aeabi_dsub>
 80054e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054ec:	3330      	adds	r3, #48	; 0x30
 80054ee:	f806 3b01 	strb.w	r3, [r6], #1
 80054f2:	42ae      	cmp	r6, r5
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	d124      	bne.n	8005544 <_dtoa_r+0x5fc>
 80054fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054fe:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <_dtoa_r+0x620>)
 8005500:	f7fa fe34 	bl	800016c <__adddf3>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800550c:	f7fb fa74 	bl	80009f8 <__aeabi_dcmpgt>
 8005510:	2800      	cmp	r0, #0
 8005512:	d171      	bne.n	80055f8 <_dtoa_r+0x6b0>
 8005514:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005518:	2000      	movs	r0, #0
 800551a:	4913      	ldr	r1, [pc, #76]	; (8005568 <_dtoa_r+0x620>)
 800551c:	f7fa fe24 	bl	8000168 <__aeabi_dsub>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005528:	f7fb fa48 	bl	80009bc <__aeabi_dcmplt>
 800552c:	2800      	cmp	r0, #0
 800552e:	f43f af2f 	beq.w	8005390 <_dtoa_r+0x448>
 8005532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005536:	1e6a      	subs	r2, r5, #1
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d001      	beq.n	8005540 <_dtoa_r+0x5f8>
 800553c:	46ba      	mov	sl, r7
 800553e:	e04a      	b.n	80055d6 <_dtoa_r+0x68e>
 8005540:	4615      	mov	r5, r2
 8005542:	e7f6      	b.n	8005532 <_dtoa_r+0x5ea>
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <_dtoa_r+0x614>)
 8005546:	f7fa ffc7 	bl	80004d8 <__aeabi_dmul>
 800554a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800554e:	e7bd      	b.n	80054cc <_dtoa_r+0x584>
 8005550:	08007370 	.word	0x08007370
 8005554:	08007348 	.word	0x08007348
 8005558:	3ff00000 	.word	0x3ff00000
 800555c:	40240000 	.word	0x40240000
 8005560:	401c0000 	.word	0x401c0000
 8005564:	40140000 	.word	0x40140000
 8005568:	3fe00000 	.word	0x3fe00000
 800556c:	9d06      	ldr	r5, [sp, #24]
 800556e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	f7fb f8d7 	bl	800072c <__aeabi_ddiv>
 800557e:	f7fb fa5b 	bl	8000a38 <__aeabi_d2iz>
 8005582:	4681      	mov	r9, r0
 8005584:	f7fa ff3e 	bl	8000404 <__aeabi_i2d>
 8005588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800558c:	f7fa ffa4 	bl	80004d8 <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4630      	mov	r0, r6
 8005596:	4639      	mov	r1, r7
 8005598:	f7fa fde6 	bl	8000168 <__aeabi_dsub>
 800559c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80055a0:	f805 6b01 	strb.w	r6, [r5], #1
 80055a4:	9e06      	ldr	r6, [sp, #24]
 80055a6:	4602      	mov	r2, r0
 80055a8:	1bae      	subs	r6, r5, r6
 80055aa:	45b0      	cmp	r8, r6
 80055ac:	460b      	mov	r3, r1
 80055ae:	d135      	bne.n	800561c <_dtoa_r+0x6d4>
 80055b0:	f7fa fddc 	bl	800016c <__adddf3>
 80055b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	f7fb fa1c 	bl	80009f8 <__aeabi_dcmpgt>
 80055c0:	b9c8      	cbnz	r0, 80055f6 <_dtoa_r+0x6ae>
 80055c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fb f9ed 	bl	80009a8 <__aeabi_dcmpeq>
 80055ce:	b110      	cbz	r0, 80055d6 <_dtoa_r+0x68e>
 80055d0:	f019 0f01 	tst.w	r9, #1
 80055d4:	d10f      	bne.n	80055f6 <_dtoa_r+0x6ae>
 80055d6:	4659      	mov	r1, fp
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fac1 	bl	8005b60 <_Bfree>
 80055de:	2300      	movs	r3, #0
 80055e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055e2:	702b      	strb	r3, [r5, #0]
 80055e4:	f10a 0301 	add.w	r3, sl, #1
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f43f acf3 	beq.w	8004fd8 <_dtoa_r+0x90>
 80055f2:	601d      	str	r5, [r3, #0]
 80055f4:	e4f0      	b.n	8004fd8 <_dtoa_r+0x90>
 80055f6:	4657      	mov	r7, sl
 80055f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055fc:	1e6b      	subs	r3, r5, #1
 80055fe:	2a39      	cmp	r2, #57	; 0x39
 8005600:	d106      	bne.n	8005610 <_dtoa_r+0x6c8>
 8005602:	9a06      	ldr	r2, [sp, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	d107      	bne.n	8005618 <_dtoa_r+0x6d0>
 8005608:	2330      	movs	r3, #48	; 0x30
 800560a:	7013      	strb	r3, [r2, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	3701      	adds	r7, #1
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	3201      	adds	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	e791      	b.n	800553c <_dtoa_r+0x5f4>
 8005618:	461d      	mov	r5, r3
 800561a:	e7ed      	b.n	80055f8 <_dtoa_r+0x6b0>
 800561c:	2200      	movs	r2, #0
 800561e:	4b99      	ldr	r3, [pc, #612]	; (8005884 <_dtoa_r+0x93c>)
 8005620:	f7fa ff5a 	bl	80004d8 <__aeabi_dmul>
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	4606      	mov	r6, r0
 800562a:	460f      	mov	r7, r1
 800562c:	f7fb f9bc 	bl	80009a8 <__aeabi_dcmpeq>
 8005630:	2800      	cmp	r0, #0
 8005632:	d09e      	beq.n	8005572 <_dtoa_r+0x62a>
 8005634:	e7cf      	b.n	80055d6 <_dtoa_r+0x68e>
 8005636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005638:	2a00      	cmp	r2, #0
 800563a:	f000 8088 	beq.w	800574e <_dtoa_r+0x806>
 800563e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005640:	2a01      	cmp	r2, #1
 8005642:	dc6d      	bgt.n	8005720 <_dtoa_r+0x7d8>
 8005644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005646:	2a00      	cmp	r2, #0
 8005648:	d066      	beq.n	8005718 <_dtoa_r+0x7d0>
 800564a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800564e:	464d      	mov	r5, r9
 8005650:	9e08      	ldr	r6, [sp, #32]
 8005652:	9a07      	ldr	r2, [sp, #28]
 8005654:	2101      	movs	r1, #1
 8005656:	441a      	add	r2, r3
 8005658:	4620      	mov	r0, r4
 800565a:	4499      	add	r9, r3
 800565c:	9207      	str	r2, [sp, #28]
 800565e:	f000 fb1f 	bl	8005ca0 <__i2b>
 8005662:	4607      	mov	r7, r0
 8005664:	2d00      	cmp	r5, #0
 8005666:	dd0b      	ble.n	8005680 <_dtoa_r+0x738>
 8005668:	9b07      	ldr	r3, [sp, #28]
 800566a:	2b00      	cmp	r3, #0
 800566c:	dd08      	ble.n	8005680 <_dtoa_r+0x738>
 800566e:	42ab      	cmp	r3, r5
 8005670:	bfa8      	it	ge
 8005672:	462b      	movge	r3, r5
 8005674:	9a07      	ldr	r2, [sp, #28]
 8005676:	eba9 0903 	sub.w	r9, r9, r3
 800567a:	1aed      	subs	r5, r5, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	9b08      	ldr	r3, [sp, #32]
 8005682:	b1eb      	cbz	r3, 80056c0 <_dtoa_r+0x778>
 8005684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d065      	beq.n	8005756 <_dtoa_r+0x80e>
 800568a:	b18e      	cbz	r6, 80056b0 <_dtoa_r+0x768>
 800568c:	4639      	mov	r1, r7
 800568e:	4632      	mov	r2, r6
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fba3 	bl	8005ddc <__pow5mult>
 8005696:	465a      	mov	r2, fp
 8005698:	4601      	mov	r1, r0
 800569a:	4607      	mov	r7, r0
 800569c:	4620      	mov	r0, r4
 800569e:	f000 fb08 	bl	8005cb2 <__multiply>
 80056a2:	4659      	mov	r1, fp
 80056a4:	900a      	str	r0, [sp, #40]	; 0x28
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fa5a 	bl	8005b60 <_Bfree>
 80056ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ae:	469b      	mov	fp, r3
 80056b0:	9b08      	ldr	r3, [sp, #32]
 80056b2:	1b9a      	subs	r2, r3, r6
 80056b4:	d004      	beq.n	80056c0 <_dtoa_r+0x778>
 80056b6:	4659      	mov	r1, fp
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 fb8f 	bl	8005ddc <__pow5mult>
 80056be:	4683      	mov	fp, r0
 80056c0:	2101      	movs	r1, #1
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 faec 	bl	8005ca0 <__i2b>
 80056c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056ca:	4606      	mov	r6, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 81c6 	beq.w	8005a5e <_dtoa_r+0xb16>
 80056d2:	461a      	mov	r2, r3
 80056d4:	4601      	mov	r1, r0
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 fb80 	bl	8005ddc <__pow5mult>
 80056dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056de:	4606      	mov	r6, r0
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	dc3e      	bgt.n	8005762 <_dtoa_r+0x81a>
 80056e4:	9b02      	ldr	r3, [sp, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d137      	bne.n	800575a <_dtoa_r+0x812>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d134      	bne.n	800575e <_dtoa_r+0x816>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056fa:	0d1b      	lsrs	r3, r3, #20
 80056fc:	051b      	lsls	r3, r3, #20
 80056fe:	b12b      	cbz	r3, 800570c <_dtoa_r+0x7c4>
 8005700:	9b07      	ldr	r3, [sp, #28]
 8005702:	f109 0901 	add.w	r9, r9, #1
 8005706:	3301      	adds	r3, #1
 8005708:	9307      	str	r3, [sp, #28]
 800570a:	2301      	movs	r3, #1
 800570c:	9308      	str	r3, [sp, #32]
 800570e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005710:	2b00      	cmp	r3, #0
 8005712:	d128      	bne.n	8005766 <_dtoa_r+0x81e>
 8005714:	2001      	movs	r0, #1
 8005716:	e02e      	b.n	8005776 <_dtoa_r+0x82e>
 8005718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800571a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800571e:	e796      	b.n	800564e <_dtoa_r+0x706>
 8005720:	9b08      	ldr	r3, [sp, #32]
 8005722:	f108 36ff 	add.w	r6, r8, #4294967295
 8005726:	42b3      	cmp	r3, r6
 8005728:	bfb7      	itett	lt
 800572a:	9b08      	ldrlt	r3, [sp, #32]
 800572c:	1b9e      	subge	r6, r3, r6
 800572e:	1af2      	sublt	r2, r6, r3
 8005730:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005732:	bfbf      	itttt	lt
 8005734:	9608      	strlt	r6, [sp, #32]
 8005736:	189b      	addlt	r3, r3, r2
 8005738:	930c      	strlt	r3, [sp, #48]	; 0x30
 800573a:	2600      	movlt	r6, #0
 800573c:	f1b8 0f00 	cmp.w	r8, #0
 8005740:	bfb9      	ittee	lt
 8005742:	eba9 0508 	sublt.w	r5, r9, r8
 8005746:	2300      	movlt	r3, #0
 8005748:	464d      	movge	r5, r9
 800574a:	4643      	movge	r3, r8
 800574c:	e781      	b.n	8005652 <_dtoa_r+0x70a>
 800574e:	9e08      	ldr	r6, [sp, #32]
 8005750:	464d      	mov	r5, r9
 8005752:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005754:	e786      	b.n	8005664 <_dtoa_r+0x71c>
 8005756:	9a08      	ldr	r2, [sp, #32]
 8005758:	e7ad      	b.n	80056b6 <_dtoa_r+0x76e>
 800575a:	2300      	movs	r3, #0
 800575c:	e7d6      	b.n	800570c <_dtoa_r+0x7c4>
 800575e:	9b02      	ldr	r3, [sp, #8]
 8005760:	e7d4      	b.n	800570c <_dtoa_r+0x7c4>
 8005762:	2300      	movs	r3, #0
 8005764:	9308      	str	r3, [sp, #32]
 8005766:	6933      	ldr	r3, [r6, #16]
 8005768:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800576c:	6918      	ldr	r0, [r3, #16]
 800576e:	f000 fa49 	bl	8005c04 <__hi0bits>
 8005772:	f1c0 0020 	rsb	r0, r0, #32
 8005776:	9b07      	ldr	r3, [sp, #28]
 8005778:	4418      	add	r0, r3
 800577a:	f010 001f 	ands.w	r0, r0, #31
 800577e:	d047      	beq.n	8005810 <_dtoa_r+0x8c8>
 8005780:	f1c0 0320 	rsb	r3, r0, #32
 8005784:	2b04      	cmp	r3, #4
 8005786:	dd3b      	ble.n	8005800 <_dtoa_r+0x8b8>
 8005788:	9b07      	ldr	r3, [sp, #28]
 800578a:	f1c0 001c 	rsb	r0, r0, #28
 800578e:	4481      	add	r9, r0
 8005790:	4405      	add	r5, r0
 8005792:	4403      	add	r3, r0
 8005794:	9307      	str	r3, [sp, #28]
 8005796:	f1b9 0f00 	cmp.w	r9, #0
 800579a:	dd05      	ble.n	80057a8 <_dtoa_r+0x860>
 800579c:	4659      	mov	r1, fp
 800579e:	464a      	mov	r2, r9
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 fb69 	bl	8005e78 <__lshift>
 80057a6:	4683      	mov	fp, r0
 80057a8:	9b07      	ldr	r3, [sp, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dd05      	ble.n	80057ba <_dtoa_r+0x872>
 80057ae:	4631      	mov	r1, r6
 80057b0:	461a      	mov	r2, r3
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 fb60 	bl	8005e78 <__lshift>
 80057b8:	4606      	mov	r6, r0
 80057ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057bc:	b353      	cbz	r3, 8005814 <_dtoa_r+0x8cc>
 80057be:	4631      	mov	r1, r6
 80057c0:	4658      	mov	r0, fp
 80057c2:	f000 fbad 	bl	8005f20 <__mcmp>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	da24      	bge.n	8005814 <_dtoa_r+0x8cc>
 80057ca:	2300      	movs	r3, #0
 80057cc:	4659      	mov	r1, fp
 80057ce:	220a      	movs	r2, #10
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 f9dc 	bl	8005b8e <__multadd>
 80057d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057dc:	4683      	mov	fp, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8144 	beq.w	8005a6c <_dtoa_r+0xb24>
 80057e4:	2300      	movs	r3, #0
 80057e6:	4639      	mov	r1, r7
 80057e8:	220a      	movs	r2, #10
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 f9cf 	bl	8005b8e <__multadd>
 80057f0:	9b04      	ldr	r3, [sp, #16]
 80057f2:	4607      	mov	r7, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	dc4d      	bgt.n	8005894 <_dtoa_r+0x94c>
 80057f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	dd4a      	ble.n	8005894 <_dtoa_r+0x94c>
 80057fe:	e011      	b.n	8005824 <_dtoa_r+0x8dc>
 8005800:	d0c9      	beq.n	8005796 <_dtoa_r+0x84e>
 8005802:	9a07      	ldr	r2, [sp, #28]
 8005804:	331c      	adds	r3, #28
 8005806:	441a      	add	r2, r3
 8005808:	4499      	add	r9, r3
 800580a:	441d      	add	r5, r3
 800580c:	4613      	mov	r3, r2
 800580e:	e7c1      	b.n	8005794 <_dtoa_r+0x84c>
 8005810:	4603      	mov	r3, r0
 8005812:	e7f6      	b.n	8005802 <_dtoa_r+0x8ba>
 8005814:	f1b8 0f00 	cmp.w	r8, #0
 8005818:	dc36      	bgt.n	8005888 <_dtoa_r+0x940>
 800581a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800581c:	2b02      	cmp	r3, #2
 800581e:	dd33      	ble.n	8005888 <_dtoa_r+0x940>
 8005820:	f8cd 8010 	str.w	r8, [sp, #16]
 8005824:	9b04      	ldr	r3, [sp, #16]
 8005826:	b963      	cbnz	r3, 8005842 <_dtoa_r+0x8fa>
 8005828:	4631      	mov	r1, r6
 800582a:	2205      	movs	r2, #5
 800582c:	4620      	mov	r0, r4
 800582e:	f000 f9ae 	bl	8005b8e <__multadd>
 8005832:	4601      	mov	r1, r0
 8005834:	4606      	mov	r6, r0
 8005836:	4658      	mov	r0, fp
 8005838:	f000 fb72 	bl	8005f20 <__mcmp>
 800583c:	2800      	cmp	r0, #0
 800583e:	f73f add3 	bgt.w	80053e8 <_dtoa_r+0x4a0>
 8005842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005844:	9d06      	ldr	r5, [sp, #24]
 8005846:	ea6f 0a03 	mvn.w	sl, r3
 800584a:	f04f 0900 	mov.w	r9, #0
 800584e:	4631      	mov	r1, r6
 8005850:	4620      	mov	r0, r4
 8005852:	f000 f985 	bl	8005b60 <_Bfree>
 8005856:	2f00      	cmp	r7, #0
 8005858:	f43f aebd 	beq.w	80055d6 <_dtoa_r+0x68e>
 800585c:	f1b9 0f00 	cmp.w	r9, #0
 8005860:	d005      	beq.n	800586e <_dtoa_r+0x926>
 8005862:	45b9      	cmp	r9, r7
 8005864:	d003      	beq.n	800586e <_dtoa_r+0x926>
 8005866:	4649      	mov	r1, r9
 8005868:	4620      	mov	r0, r4
 800586a:	f000 f979 	bl	8005b60 <_Bfree>
 800586e:	4639      	mov	r1, r7
 8005870:	4620      	mov	r0, r4
 8005872:	f000 f975 	bl	8005b60 <_Bfree>
 8005876:	e6ae      	b.n	80055d6 <_dtoa_r+0x68e>
 8005878:	2600      	movs	r6, #0
 800587a:	4637      	mov	r7, r6
 800587c:	e7e1      	b.n	8005842 <_dtoa_r+0x8fa>
 800587e:	46ba      	mov	sl, r7
 8005880:	4637      	mov	r7, r6
 8005882:	e5b1      	b.n	80053e8 <_dtoa_r+0x4a0>
 8005884:	40240000 	.word	0x40240000
 8005888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588a:	f8cd 8010 	str.w	r8, [sp, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80f3 	beq.w	8005a7a <_dtoa_r+0xb32>
 8005894:	2d00      	cmp	r5, #0
 8005896:	dd05      	ble.n	80058a4 <_dtoa_r+0x95c>
 8005898:	4639      	mov	r1, r7
 800589a:	462a      	mov	r2, r5
 800589c:	4620      	mov	r0, r4
 800589e:	f000 faeb 	bl	8005e78 <__lshift>
 80058a2:	4607      	mov	r7, r0
 80058a4:	9b08      	ldr	r3, [sp, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04c      	beq.n	8005944 <_dtoa_r+0x9fc>
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 f923 	bl	8005af8 <_Balloc>
 80058b2:	4605      	mov	r5, r0
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	f107 010c 	add.w	r1, r7, #12
 80058ba:	3202      	adds	r2, #2
 80058bc:	0092      	lsls	r2, r2, #2
 80058be:	300c      	adds	r0, #12
 80058c0:	f7fe fe32 	bl	8004528 <memcpy>
 80058c4:	2201      	movs	r2, #1
 80058c6:	4629      	mov	r1, r5
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fad5 	bl	8005e78 <__lshift>
 80058ce:	46b9      	mov	r9, r7
 80058d0:	4607      	mov	r7, r0
 80058d2:	9b06      	ldr	r3, [sp, #24]
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	9b02      	ldr	r3, [sp, #8]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	9308      	str	r3, [sp, #32]
 80058de:	4631      	mov	r1, r6
 80058e0:	4658      	mov	r0, fp
 80058e2:	f7ff faa3 	bl	8004e2c <quorem>
 80058e6:	4649      	mov	r1, r9
 80058e8:	4605      	mov	r5, r0
 80058ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058ee:	4658      	mov	r0, fp
 80058f0:	f000 fb16 	bl	8005f20 <__mcmp>
 80058f4:	463a      	mov	r2, r7
 80058f6:	9002      	str	r0, [sp, #8]
 80058f8:	4631      	mov	r1, r6
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fb2a 	bl	8005f54 <__mdiff>
 8005900:	68c3      	ldr	r3, [r0, #12]
 8005902:	4602      	mov	r2, r0
 8005904:	bb03      	cbnz	r3, 8005948 <_dtoa_r+0xa00>
 8005906:	4601      	mov	r1, r0
 8005908:	9009      	str	r0, [sp, #36]	; 0x24
 800590a:	4658      	mov	r0, fp
 800590c:	f000 fb08 	bl	8005f20 <__mcmp>
 8005910:	4603      	mov	r3, r0
 8005912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005914:	4611      	mov	r1, r2
 8005916:	4620      	mov	r0, r4
 8005918:	9309      	str	r3, [sp, #36]	; 0x24
 800591a:	f000 f921 	bl	8005b60 <_Bfree>
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	b9a3      	cbnz	r3, 800594c <_dtoa_r+0xa04>
 8005922:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005924:	b992      	cbnz	r2, 800594c <_dtoa_r+0xa04>
 8005926:	9a08      	ldr	r2, [sp, #32]
 8005928:	b982      	cbnz	r2, 800594c <_dtoa_r+0xa04>
 800592a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800592e:	d029      	beq.n	8005984 <_dtoa_r+0xa3c>
 8005930:	9b02      	ldr	r3, [sp, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	dd01      	ble.n	800593a <_dtoa_r+0x9f2>
 8005936:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800593a:	9b07      	ldr	r3, [sp, #28]
 800593c:	1c5d      	adds	r5, r3, #1
 800593e:	f883 8000 	strb.w	r8, [r3]
 8005942:	e784      	b.n	800584e <_dtoa_r+0x906>
 8005944:	4638      	mov	r0, r7
 8005946:	e7c2      	b.n	80058ce <_dtoa_r+0x986>
 8005948:	2301      	movs	r3, #1
 800594a:	e7e3      	b.n	8005914 <_dtoa_r+0x9cc>
 800594c:	9a02      	ldr	r2, [sp, #8]
 800594e:	2a00      	cmp	r2, #0
 8005950:	db04      	blt.n	800595c <_dtoa_r+0xa14>
 8005952:	d123      	bne.n	800599c <_dtoa_r+0xa54>
 8005954:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005956:	bb0a      	cbnz	r2, 800599c <_dtoa_r+0xa54>
 8005958:	9a08      	ldr	r2, [sp, #32]
 800595a:	b9fa      	cbnz	r2, 800599c <_dtoa_r+0xa54>
 800595c:	2b00      	cmp	r3, #0
 800595e:	ddec      	ble.n	800593a <_dtoa_r+0x9f2>
 8005960:	4659      	mov	r1, fp
 8005962:	2201      	movs	r2, #1
 8005964:	4620      	mov	r0, r4
 8005966:	f000 fa87 	bl	8005e78 <__lshift>
 800596a:	4631      	mov	r1, r6
 800596c:	4683      	mov	fp, r0
 800596e:	f000 fad7 	bl	8005f20 <__mcmp>
 8005972:	2800      	cmp	r0, #0
 8005974:	dc03      	bgt.n	800597e <_dtoa_r+0xa36>
 8005976:	d1e0      	bne.n	800593a <_dtoa_r+0x9f2>
 8005978:	f018 0f01 	tst.w	r8, #1
 800597c:	d0dd      	beq.n	800593a <_dtoa_r+0x9f2>
 800597e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005982:	d1d8      	bne.n	8005936 <_dtoa_r+0x9ee>
 8005984:	9b07      	ldr	r3, [sp, #28]
 8005986:	9a07      	ldr	r2, [sp, #28]
 8005988:	1c5d      	adds	r5, r3, #1
 800598a:	2339      	movs	r3, #57	; 0x39
 800598c:	7013      	strb	r3, [r2, #0]
 800598e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005992:	1e6a      	subs	r2, r5, #1
 8005994:	2b39      	cmp	r3, #57	; 0x39
 8005996:	d04d      	beq.n	8005a34 <_dtoa_r+0xaec>
 8005998:	3301      	adds	r3, #1
 800599a:	e052      	b.n	8005a42 <_dtoa_r+0xafa>
 800599c:	9a07      	ldr	r2, [sp, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f102 0501 	add.w	r5, r2, #1
 80059a4:	dd06      	ble.n	80059b4 <_dtoa_r+0xa6c>
 80059a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059aa:	d0eb      	beq.n	8005984 <_dtoa_r+0xa3c>
 80059ac:	f108 0801 	add.w	r8, r8, #1
 80059b0:	9b07      	ldr	r3, [sp, #28]
 80059b2:	e7c4      	b.n	800593e <_dtoa_r+0x9f6>
 80059b4:	9b06      	ldr	r3, [sp, #24]
 80059b6:	9a04      	ldr	r2, [sp, #16]
 80059b8:	1aeb      	subs	r3, r5, r3
 80059ba:	4293      	cmp	r3, r2
 80059bc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80059c0:	d021      	beq.n	8005a06 <_dtoa_r+0xabe>
 80059c2:	4659      	mov	r1, fp
 80059c4:	2300      	movs	r3, #0
 80059c6:	220a      	movs	r2, #10
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 f8e0 	bl	8005b8e <__multadd>
 80059ce:	45b9      	cmp	r9, r7
 80059d0:	4683      	mov	fp, r0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	f04f 020a 	mov.w	r2, #10
 80059da:	4649      	mov	r1, r9
 80059dc:	4620      	mov	r0, r4
 80059de:	d105      	bne.n	80059ec <_dtoa_r+0xaa4>
 80059e0:	f000 f8d5 	bl	8005b8e <__multadd>
 80059e4:	4681      	mov	r9, r0
 80059e6:	4607      	mov	r7, r0
 80059e8:	9507      	str	r5, [sp, #28]
 80059ea:	e778      	b.n	80058de <_dtoa_r+0x996>
 80059ec:	f000 f8cf 	bl	8005b8e <__multadd>
 80059f0:	4639      	mov	r1, r7
 80059f2:	4681      	mov	r9, r0
 80059f4:	2300      	movs	r3, #0
 80059f6:	220a      	movs	r2, #10
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f8c8 	bl	8005b8e <__multadd>
 80059fe:	4607      	mov	r7, r0
 8005a00:	e7f2      	b.n	80059e8 <_dtoa_r+0xaa0>
 8005a02:	f04f 0900 	mov.w	r9, #0
 8005a06:	4659      	mov	r1, fp
 8005a08:	2201      	movs	r2, #1
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f000 fa34 	bl	8005e78 <__lshift>
 8005a10:	4631      	mov	r1, r6
 8005a12:	4683      	mov	fp, r0
 8005a14:	f000 fa84 	bl	8005f20 <__mcmp>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	dcb8      	bgt.n	800598e <_dtoa_r+0xa46>
 8005a1c:	d102      	bne.n	8005a24 <_dtoa_r+0xadc>
 8005a1e:	f018 0f01 	tst.w	r8, #1
 8005a22:	d1b4      	bne.n	800598e <_dtoa_r+0xa46>
 8005a24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a28:	1e6a      	subs	r2, r5, #1
 8005a2a:	2b30      	cmp	r3, #48	; 0x30
 8005a2c:	f47f af0f 	bne.w	800584e <_dtoa_r+0x906>
 8005a30:	4615      	mov	r5, r2
 8005a32:	e7f7      	b.n	8005a24 <_dtoa_r+0xadc>
 8005a34:	9b06      	ldr	r3, [sp, #24]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d105      	bne.n	8005a46 <_dtoa_r+0xafe>
 8005a3a:	2331      	movs	r3, #49	; 0x31
 8005a3c:	9a06      	ldr	r2, [sp, #24]
 8005a3e:	f10a 0a01 	add.w	sl, sl, #1
 8005a42:	7013      	strb	r3, [r2, #0]
 8005a44:	e703      	b.n	800584e <_dtoa_r+0x906>
 8005a46:	4615      	mov	r5, r2
 8005a48:	e7a1      	b.n	800598e <_dtoa_r+0xa46>
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <_dtoa_r+0xb60>)
 8005a4c:	f7ff bae1 	b.w	8005012 <_dtoa_r+0xca>
 8005a50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f47f aabb 	bne.w	8004fce <_dtoa_r+0x86>
 8005a58:	4b14      	ldr	r3, [pc, #80]	; (8005aac <_dtoa_r+0xb64>)
 8005a5a:	f7ff bada 	b.w	8005012 <_dtoa_r+0xca>
 8005a5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f77f ae3f 	ble.w	80056e4 <_dtoa_r+0x79c>
 8005a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a68:	9308      	str	r3, [sp, #32]
 8005a6a:	e653      	b.n	8005714 <_dtoa_r+0x7cc>
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dc03      	bgt.n	8005a7a <_dtoa_r+0xb32>
 8005a72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	f73f aed5 	bgt.w	8005824 <_dtoa_r+0x8dc>
 8005a7a:	9d06      	ldr	r5, [sp, #24]
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4658      	mov	r0, fp
 8005a80:	f7ff f9d4 	bl	8004e2c <quorem>
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a8a:	f805 8b01 	strb.w	r8, [r5], #1
 8005a8e:	9a04      	ldr	r2, [sp, #16]
 8005a90:	1aeb      	subs	r3, r5, r3
 8005a92:	429a      	cmp	r2, r3
 8005a94:	ddb5      	ble.n	8005a02 <_dtoa_r+0xaba>
 8005a96:	4659      	mov	r1, fp
 8005a98:	2300      	movs	r3, #0
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 f876 	bl	8005b8e <__multadd>
 8005aa2:	4683      	mov	fp, r0
 8005aa4:	e7ea      	b.n	8005a7c <_dtoa_r+0xb34>
 8005aa6:	bf00      	nop
 8005aa8:	08007310 	.word	0x08007310
 8005aac:	08007334 	.word	0x08007334

08005ab0 <_localeconv_r>:
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <_localeconv_r+0x14>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a18      	ldr	r0, [r3, #32]
 8005ab6:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <_localeconv_r+0x18>)
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	bf08      	it	eq
 8005abc:	4618      	moveq	r0, r3
 8005abe:	30f0      	adds	r0, #240	; 0xf0
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	2000000c 	.word	0x2000000c
 8005ac8:	20000070 	.word	0x20000070

08005acc <malloc>:
 8005acc:	4b02      	ldr	r3, [pc, #8]	; (8005ad8 <malloc+0xc>)
 8005ace:	4601      	mov	r1, r0
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	f000 bb47 	b.w	8006164 <_malloc_r>
 8005ad6:	bf00      	nop
 8005ad8:	2000000c 	.word	0x2000000c

08005adc <memchr>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	b2c9      	uxtb	r1, r1
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4290      	cmp	r0, r2
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	d101      	bne.n	8005aec <memchr+0x10>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e003      	b.n	8005af4 <memchr+0x18>
 8005aec:	781c      	ldrb	r4, [r3, #0]
 8005aee:	3001      	adds	r0, #1
 8005af0:	428c      	cmp	r4, r1
 8005af2:	d1f6      	bne.n	8005ae2 <memchr+0x6>
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd10      	pop	{r4, pc}

08005af8 <_Balloc>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005afc:	4604      	mov	r4, r0
 8005afe:	460e      	mov	r6, r1
 8005b00:	b93d      	cbnz	r5, 8005b12 <_Balloc+0x1a>
 8005b02:	2010      	movs	r0, #16
 8005b04:	f7ff ffe2 	bl	8005acc <malloc>
 8005b08:	6260      	str	r0, [r4, #36]	; 0x24
 8005b0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b0e:	6005      	str	r5, [r0, #0]
 8005b10:	60c5      	str	r5, [r0, #12]
 8005b12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b14:	68eb      	ldr	r3, [r5, #12]
 8005b16:	b183      	cbz	r3, 8005b3a <_Balloc+0x42>
 8005b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b20:	b9b8      	cbnz	r0, 8005b52 <_Balloc+0x5a>
 8005b22:	2101      	movs	r1, #1
 8005b24:	fa01 f506 	lsl.w	r5, r1, r6
 8005b28:	1d6a      	adds	r2, r5, #5
 8005b2a:	0092      	lsls	r2, r2, #2
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fabe 	bl	80060ae <_calloc_r>
 8005b32:	b160      	cbz	r0, 8005b4e <_Balloc+0x56>
 8005b34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b38:	e00e      	b.n	8005b58 <_Balloc+0x60>
 8005b3a:	2221      	movs	r2, #33	; 0x21
 8005b3c:	2104      	movs	r1, #4
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 fab5 	bl	80060ae <_calloc_r>
 8005b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b46:	60e8      	str	r0, [r5, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e4      	bne.n	8005b18 <_Balloc+0x20>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	bd70      	pop	{r4, r5, r6, pc}
 8005b52:	6802      	ldr	r2, [r0, #0]
 8005b54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b5e:	e7f7      	b.n	8005b50 <_Balloc+0x58>

08005b60 <_Bfree>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b64:	4606      	mov	r6, r0
 8005b66:	460d      	mov	r5, r1
 8005b68:	b93c      	cbnz	r4, 8005b7a <_Bfree+0x1a>
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	f7ff ffae 	bl	8005acc <malloc>
 8005b70:	6270      	str	r0, [r6, #36]	; 0x24
 8005b72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b76:	6004      	str	r4, [r0, #0]
 8005b78:	60c4      	str	r4, [r0, #12]
 8005b7a:	b13d      	cbz	r5, 8005b8c <_Bfree+0x2c>
 8005b7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b7e:	686a      	ldr	r2, [r5, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b86:	6029      	str	r1, [r5, #0]
 8005b88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}

08005b8e <__multadd>:
 8005b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	461f      	mov	r7, r3
 8005b94:	4606      	mov	r6, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	690d      	ldr	r5, [r1, #16]
 8005b9c:	f101 0c14 	add.w	ip, r1, #20
 8005ba0:	f8dc 0000 	ldr.w	r0, [ip]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	b281      	uxth	r1, r0
 8005ba8:	fb02 7101 	mla	r1, r2, r1, r7
 8005bac:	0c00      	lsrs	r0, r0, #16
 8005bae:	0c0f      	lsrs	r7, r1, #16
 8005bb0:	fb02 7000 	mla	r0, r2, r0, r7
 8005bb4:	b289      	uxth	r1, r1
 8005bb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005bba:	429d      	cmp	r5, r3
 8005bbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005bc0:	f84c 1b04 	str.w	r1, [ip], #4
 8005bc4:	dcec      	bgt.n	8005ba0 <__multadd+0x12>
 8005bc6:	b1d7      	cbz	r7, 8005bfe <__multadd+0x70>
 8005bc8:	68a3      	ldr	r3, [r4, #8]
 8005bca:	42ab      	cmp	r3, r5
 8005bcc:	dc12      	bgt.n	8005bf4 <__multadd+0x66>
 8005bce:	6861      	ldr	r1, [r4, #4]
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	3101      	adds	r1, #1
 8005bd4:	f7ff ff90 	bl	8005af8 <_Balloc>
 8005bd8:	4680      	mov	r8, r0
 8005bda:	6922      	ldr	r2, [r4, #16]
 8005bdc:	f104 010c 	add.w	r1, r4, #12
 8005be0:	3202      	adds	r2, #2
 8005be2:	0092      	lsls	r2, r2, #2
 8005be4:	300c      	adds	r0, #12
 8005be6:	f7fe fc9f 	bl	8004528 <memcpy>
 8005bea:	4621      	mov	r1, r4
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff ffb7 	bl	8005b60 <_Bfree>
 8005bf2:	4644      	mov	r4, r8
 8005bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bf8:	3501      	adds	r5, #1
 8005bfa:	615f      	str	r7, [r3, #20]
 8005bfc:	6125      	str	r5, [r4, #16]
 8005bfe:	4620      	mov	r0, r4
 8005c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c04 <__hi0bits>:
 8005c04:	0c02      	lsrs	r2, r0, #16
 8005c06:	0412      	lsls	r2, r2, #16
 8005c08:	4603      	mov	r3, r0
 8005c0a:	b9b2      	cbnz	r2, 8005c3a <__hi0bits+0x36>
 8005c0c:	0403      	lsls	r3, r0, #16
 8005c0e:	2010      	movs	r0, #16
 8005c10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c14:	bf04      	itt	eq
 8005c16:	021b      	lsleq	r3, r3, #8
 8005c18:	3008      	addeq	r0, #8
 8005c1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c1e:	bf04      	itt	eq
 8005c20:	011b      	lsleq	r3, r3, #4
 8005c22:	3004      	addeq	r0, #4
 8005c24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c28:	bf04      	itt	eq
 8005c2a:	009b      	lsleq	r3, r3, #2
 8005c2c:	3002      	addeq	r0, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	db06      	blt.n	8005c40 <__hi0bits+0x3c>
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	d503      	bpl.n	8005c3e <__hi0bits+0x3a>
 8005c36:	3001      	adds	r0, #1
 8005c38:	4770      	bx	lr
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e7e8      	b.n	8005c10 <__hi0bits+0xc>
 8005c3e:	2020      	movs	r0, #32
 8005c40:	4770      	bx	lr

08005c42 <__lo0bits>:
 8005c42:	6803      	ldr	r3, [r0, #0]
 8005c44:	4601      	mov	r1, r0
 8005c46:	f013 0207 	ands.w	r2, r3, #7
 8005c4a:	d00b      	beq.n	8005c64 <__lo0bits+0x22>
 8005c4c:	07da      	lsls	r2, r3, #31
 8005c4e:	d423      	bmi.n	8005c98 <__lo0bits+0x56>
 8005c50:	0798      	lsls	r0, r3, #30
 8005c52:	bf49      	itett	mi
 8005c54:	085b      	lsrmi	r3, r3, #1
 8005c56:	089b      	lsrpl	r3, r3, #2
 8005c58:	2001      	movmi	r0, #1
 8005c5a:	600b      	strmi	r3, [r1, #0]
 8005c5c:	bf5c      	itt	pl
 8005c5e:	600b      	strpl	r3, [r1, #0]
 8005c60:	2002      	movpl	r0, #2
 8005c62:	4770      	bx	lr
 8005c64:	b298      	uxth	r0, r3
 8005c66:	b9a8      	cbnz	r0, 8005c94 <__lo0bits+0x52>
 8005c68:	2010      	movs	r0, #16
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c70:	bf04      	itt	eq
 8005c72:	0a1b      	lsreq	r3, r3, #8
 8005c74:	3008      	addeq	r0, #8
 8005c76:	071a      	lsls	r2, r3, #28
 8005c78:	bf04      	itt	eq
 8005c7a:	091b      	lsreq	r3, r3, #4
 8005c7c:	3004      	addeq	r0, #4
 8005c7e:	079a      	lsls	r2, r3, #30
 8005c80:	bf04      	itt	eq
 8005c82:	089b      	lsreq	r3, r3, #2
 8005c84:	3002      	addeq	r0, #2
 8005c86:	07da      	lsls	r2, r3, #31
 8005c88:	d402      	bmi.n	8005c90 <__lo0bits+0x4e>
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	d006      	beq.n	8005c9c <__lo0bits+0x5a>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	600b      	str	r3, [r1, #0]
 8005c92:	4770      	bx	lr
 8005c94:	4610      	mov	r0, r2
 8005c96:	e7e9      	b.n	8005c6c <__lo0bits+0x2a>
 8005c98:	2000      	movs	r0, #0
 8005c9a:	4770      	bx	lr
 8005c9c:	2020      	movs	r0, #32
 8005c9e:	4770      	bx	lr

08005ca0 <__i2b>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	f7ff ff27 	bl	8005af8 <_Balloc>
 8005caa:	2201      	movs	r2, #1
 8005cac:	6144      	str	r4, [r0, #20]
 8005cae:	6102      	str	r2, [r0, #16]
 8005cb0:	bd10      	pop	{r4, pc}

08005cb2 <__multiply>:
 8005cb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb6:	4614      	mov	r4, r2
 8005cb8:	690a      	ldr	r2, [r1, #16]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	4688      	mov	r8, r1
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	bfbe      	ittt	lt
 8005cc2:	460b      	movlt	r3, r1
 8005cc4:	46a0      	movlt	r8, r4
 8005cc6:	461c      	movlt	r4, r3
 8005cc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ccc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005cd8:	eb07 0609 	add.w	r6, r7, r9
 8005cdc:	42b3      	cmp	r3, r6
 8005cde:	bfb8      	it	lt
 8005ce0:	3101      	addlt	r1, #1
 8005ce2:	f7ff ff09 	bl	8005af8 <_Balloc>
 8005ce6:	f100 0514 	add.w	r5, r0, #20
 8005cea:	462b      	mov	r3, r5
 8005cec:	2200      	movs	r2, #0
 8005cee:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005cf2:	4573      	cmp	r3, lr
 8005cf4:	d316      	bcc.n	8005d24 <__multiply+0x72>
 8005cf6:	f104 0214 	add.w	r2, r4, #20
 8005cfa:	f108 0114 	add.w	r1, r8, #20
 8005cfe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	9b00      	ldr	r3, [sp, #0]
 8005d0a:	9201      	str	r2, [sp, #4]
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d80c      	bhi.n	8005d2a <__multiply+0x78>
 8005d10:	2e00      	cmp	r6, #0
 8005d12:	dd03      	ble.n	8005d1c <__multiply+0x6a>
 8005d14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d05d      	beq.n	8005dd8 <__multiply+0x126>
 8005d1c:	6106      	str	r6, [r0, #16]
 8005d1e:	b003      	add	sp, #12
 8005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	f843 2b04 	str.w	r2, [r3], #4
 8005d28:	e7e3      	b.n	8005cf2 <__multiply+0x40>
 8005d2a:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d2e:	f1bb 0f00 	cmp.w	fp, #0
 8005d32:	d023      	beq.n	8005d7c <__multiply+0xca>
 8005d34:	4689      	mov	r9, r1
 8005d36:	46ac      	mov	ip, r5
 8005d38:	f04f 0800 	mov.w	r8, #0
 8005d3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d40:	f8dc a000 	ldr.w	sl, [ip]
 8005d44:	b2a3      	uxth	r3, r4
 8005d46:	fa1f fa8a 	uxth.w	sl, sl
 8005d4a:	fb0b a303 	mla	r3, fp, r3, sl
 8005d4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d52:	f8dc 4000 	ldr.w	r4, [ip]
 8005d56:	4443      	add	r3, r8
 8005d58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d5c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d60:	46e2      	mov	sl, ip
 8005d62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d6c:	454f      	cmp	r7, r9
 8005d6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d72:	f84a 3b04 	str.w	r3, [sl], #4
 8005d76:	d82b      	bhi.n	8005dd0 <__multiply+0x11e>
 8005d78:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	3204      	adds	r2, #4
 8005d80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d84:	f1ba 0f00 	cmp.w	sl, #0
 8005d88:	d020      	beq.n	8005dcc <__multiply+0x11a>
 8005d8a:	4689      	mov	r9, r1
 8005d8c:	46a8      	mov	r8, r5
 8005d8e:	f04f 0b00 	mov.w	fp, #0
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	f8b9 c000 	ldrh.w	ip, [r9]
 8005d98:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	fb0a 440c 	mla	r4, sl, ip, r4
 8005da2:	46c4      	mov	ip, r8
 8005da4:	445c      	add	r4, fp
 8005da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005daa:	f84c 3b04 	str.w	r3, [ip], #4
 8005dae:	f859 3b04 	ldr.w	r3, [r9], #4
 8005db2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	fb0a b303 	mla	r3, sl, r3, fp
 8005dbc:	454f      	cmp	r7, r9
 8005dbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005dc2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005dc6:	d805      	bhi.n	8005dd4 <__multiply+0x122>
 8005dc8:	f8c8 3004 	str.w	r3, [r8, #4]
 8005dcc:	3504      	adds	r5, #4
 8005dce:	e79b      	b.n	8005d08 <__multiply+0x56>
 8005dd0:	46d4      	mov	ip, sl
 8005dd2:	e7b3      	b.n	8005d3c <__multiply+0x8a>
 8005dd4:	46e0      	mov	r8, ip
 8005dd6:	e7dd      	b.n	8005d94 <__multiply+0xe2>
 8005dd8:	3e01      	subs	r6, #1
 8005dda:	e799      	b.n	8005d10 <__multiply+0x5e>

08005ddc <__pow5mult>:
 8005ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de0:	4615      	mov	r5, r2
 8005de2:	f012 0203 	ands.w	r2, r2, #3
 8005de6:	4606      	mov	r6, r0
 8005de8:	460f      	mov	r7, r1
 8005dea:	d007      	beq.n	8005dfc <__pow5mult+0x20>
 8005dec:	4c21      	ldr	r4, [pc, #132]	; (8005e74 <__pow5mult+0x98>)
 8005dee:	3a01      	subs	r2, #1
 8005df0:	2300      	movs	r3, #0
 8005df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005df6:	f7ff feca 	bl	8005b8e <__multadd>
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	10ad      	asrs	r5, r5, #2
 8005dfe:	d035      	beq.n	8005e6c <__pow5mult+0x90>
 8005e00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e02:	b93c      	cbnz	r4, 8005e14 <__pow5mult+0x38>
 8005e04:	2010      	movs	r0, #16
 8005e06:	f7ff fe61 	bl	8005acc <malloc>
 8005e0a:	6270      	str	r0, [r6, #36]	; 0x24
 8005e0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e10:	6004      	str	r4, [r0, #0]
 8005e12:	60c4      	str	r4, [r0, #12]
 8005e14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e1c:	b94c      	cbnz	r4, 8005e32 <__pow5mult+0x56>
 8005e1e:	f240 2171 	movw	r1, #625	; 0x271
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ff3c 	bl	8005ca0 <__i2b>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e30:	6003      	str	r3, [r0, #0]
 8005e32:	f04f 0800 	mov.w	r8, #0
 8005e36:	07eb      	lsls	r3, r5, #31
 8005e38:	d50a      	bpl.n	8005e50 <__pow5mult+0x74>
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7ff ff37 	bl	8005cb2 <__multiply>
 8005e44:	4681      	mov	r9, r0
 8005e46:	4639      	mov	r1, r7
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7ff fe89 	bl	8005b60 <_Bfree>
 8005e4e:	464f      	mov	r7, r9
 8005e50:	106d      	asrs	r5, r5, #1
 8005e52:	d00b      	beq.n	8005e6c <__pow5mult+0x90>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	b938      	cbnz	r0, 8005e68 <__pow5mult+0x8c>
 8005e58:	4622      	mov	r2, r4
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7ff ff28 	bl	8005cb2 <__multiply>
 8005e62:	6020      	str	r0, [r4, #0]
 8005e64:	f8c0 8000 	str.w	r8, [r0]
 8005e68:	4604      	mov	r4, r0
 8005e6a:	e7e4      	b.n	8005e36 <__pow5mult+0x5a>
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e72:	bf00      	nop
 8005e74:	08007438 	.word	0x08007438

08005e78 <__lshift>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	4607      	mov	r7, r0
 8005e80:	4616      	mov	r6, r2
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e88:	eb0a 0903 	add.w	r9, sl, r3
 8005e8c:	6849      	ldr	r1, [r1, #4]
 8005e8e:	68a3      	ldr	r3, [r4, #8]
 8005e90:	f109 0501 	add.w	r5, r9, #1
 8005e94:	42ab      	cmp	r3, r5
 8005e96:	db32      	blt.n	8005efe <__lshift+0x86>
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff fe2d 	bl	8005af8 <_Balloc>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f100 0114 	add.w	r1, r0, #20
 8005ea8:	4553      	cmp	r3, sl
 8005eaa:	db2b      	blt.n	8005f04 <__lshift+0x8c>
 8005eac:	6920      	ldr	r0, [r4, #16]
 8005eae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005eb2:	f104 0314 	add.w	r3, r4, #20
 8005eb6:	f016 021f 	ands.w	r2, r6, #31
 8005eba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ebe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ec2:	d025      	beq.n	8005f10 <__lshift+0x98>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f1c2 0e20 	rsb	lr, r2, #32
 8005eca:	468a      	mov	sl, r1
 8005ecc:	681e      	ldr	r6, [r3, #0]
 8005ece:	4096      	lsls	r6, r2
 8005ed0:	4330      	orrs	r0, r6
 8005ed2:	f84a 0b04 	str.w	r0, [sl], #4
 8005ed6:	f853 0b04 	ldr.w	r0, [r3], #4
 8005eda:	459c      	cmp	ip, r3
 8005edc:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ee0:	d814      	bhi.n	8005f0c <__lshift+0x94>
 8005ee2:	6048      	str	r0, [r1, #4]
 8005ee4:	b108      	cbz	r0, 8005eea <__lshift+0x72>
 8005ee6:	f109 0502 	add.w	r5, r9, #2
 8005eea:	3d01      	subs	r5, #1
 8005eec:	4638      	mov	r0, r7
 8005eee:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	f7ff fe34 	bl	8005b60 <_Bfree>
 8005ef8:	4640      	mov	r0, r8
 8005efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efe:	3101      	adds	r1, #1
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	e7c7      	b.n	8005e94 <__lshift+0x1c>
 8005f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	e7cd      	b.n	8005ea8 <__lshift+0x30>
 8005f0c:	4651      	mov	r1, sl
 8005f0e:	e7dc      	b.n	8005eca <__lshift+0x52>
 8005f10:	3904      	subs	r1, #4
 8005f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f16:	459c      	cmp	ip, r3
 8005f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f1c:	d8f9      	bhi.n	8005f12 <__lshift+0x9a>
 8005f1e:	e7e4      	b.n	8005eea <__lshift+0x72>

08005f20 <__mcmp>:
 8005f20:	6903      	ldr	r3, [r0, #16]
 8005f22:	690a      	ldr	r2, [r1, #16]
 8005f24:	b530      	push	{r4, r5, lr}
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	d10c      	bne.n	8005f44 <__mcmp+0x24>
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	3014      	adds	r0, #20
 8005f2e:	3114      	adds	r1, #20
 8005f30:	1884      	adds	r4, r0, r2
 8005f32:	4411      	add	r1, r2
 8005f34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f3c:	4295      	cmp	r5, r2
 8005f3e:	d003      	beq.n	8005f48 <__mcmp+0x28>
 8005f40:	d305      	bcc.n	8005f4e <__mcmp+0x2e>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd30      	pop	{r4, r5, pc}
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d3f3      	bcc.n	8005f34 <__mcmp+0x14>
 8005f4c:	e7fa      	b.n	8005f44 <__mcmp+0x24>
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f52:	e7f7      	b.n	8005f44 <__mcmp+0x24>

08005f54 <__mdiff>:
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	460d      	mov	r5, r1
 8005f5a:	4607      	mov	r7, r0
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4628      	mov	r0, r5
 8005f60:	4614      	mov	r4, r2
 8005f62:	f7ff ffdd 	bl	8005f20 <__mcmp>
 8005f66:	1e06      	subs	r6, r0, #0
 8005f68:	d108      	bne.n	8005f7c <__mdiff+0x28>
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f7ff fdc3 	bl	8005af8 <_Balloc>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7c:	bfa4      	itt	ge
 8005f7e:	4623      	movge	r3, r4
 8005f80:	462c      	movge	r4, r5
 8005f82:	4638      	mov	r0, r7
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	bfa6      	itte	ge
 8005f88:	461d      	movge	r5, r3
 8005f8a:	2600      	movge	r6, #0
 8005f8c:	2601      	movlt	r6, #1
 8005f8e:	f7ff fdb3 	bl	8005af8 <_Balloc>
 8005f92:	f04f 0e00 	mov.w	lr, #0
 8005f96:	60c6      	str	r6, [r0, #12]
 8005f98:	692b      	ldr	r3, [r5, #16]
 8005f9a:	6926      	ldr	r6, [r4, #16]
 8005f9c:	f104 0214 	add.w	r2, r4, #20
 8005fa0:	f105 0914 	add.w	r9, r5, #20
 8005fa4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005fa8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005fac:	f100 0114 	add.w	r1, r0, #20
 8005fb0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005fb4:	f859 5b04 	ldr.w	r5, [r9], #4
 8005fb8:	fa1f f38a 	uxth.w	r3, sl
 8005fbc:	4473      	add	r3, lr
 8005fbe:	b2ac      	uxth	r4, r5
 8005fc0:	1b1b      	subs	r3, r3, r4
 8005fc2:	0c2c      	lsrs	r4, r5, #16
 8005fc4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005fc8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005fd2:	45c8      	cmp	r8, r9
 8005fd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005fd8:	4694      	mov	ip, r2
 8005fda:	f841 4b04 	str.w	r4, [r1], #4
 8005fde:	d8e7      	bhi.n	8005fb0 <__mdiff+0x5c>
 8005fe0:	45bc      	cmp	ip, r7
 8005fe2:	d304      	bcc.n	8005fee <__mdiff+0x9a>
 8005fe4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fe8:	b183      	cbz	r3, 800600c <__mdiff+0xb8>
 8005fea:	6106      	str	r6, [r0, #16]
 8005fec:	e7c4      	b.n	8005f78 <__mdiff+0x24>
 8005fee:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005ff2:	b2a2      	uxth	r2, r4
 8005ff4:	4472      	add	r2, lr
 8005ff6:	1413      	asrs	r3, r2, #16
 8005ff8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ffc:	b292      	uxth	r2, r2
 8005ffe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006002:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006006:	f841 2b04 	str.w	r2, [r1], #4
 800600a:	e7e9      	b.n	8005fe0 <__mdiff+0x8c>
 800600c:	3e01      	subs	r6, #1
 800600e:	e7e9      	b.n	8005fe4 <__mdiff+0x90>

08006010 <__d2b>:
 8006010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006014:	461c      	mov	r4, r3
 8006016:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800601a:	2101      	movs	r1, #1
 800601c:	4690      	mov	r8, r2
 800601e:	f7ff fd6b 	bl	8005af8 <_Balloc>
 8006022:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006026:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800602a:	4607      	mov	r7, r0
 800602c:	bb34      	cbnz	r4, 800607c <__d2b+0x6c>
 800602e:	9201      	str	r2, [sp, #4]
 8006030:	f1b8 0200 	subs.w	r2, r8, #0
 8006034:	d027      	beq.n	8006086 <__d2b+0x76>
 8006036:	a802      	add	r0, sp, #8
 8006038:	f840 2d08 	str.w	r2, [r0, #-8]!
 800603c:	f7ff fe01 	bl	8005c42 <__lo0bits>
 8006040:	9900      	ldr	r1, [sp, #0]
 8006042:	b1f0      	cbz	r0, 8006082 <__d2b+0x72>
 8006044:	9a01      	ldr	r2, [sp, #4]
 8006046:	f1c0 0320 	rsb	r3, r0, #32
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	430b      	orrs	r3, r1
 8006050:	40c2      	lsrs	r2, r0
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	9201      	str	r2, [sp, #4]
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf14      	ite	ne
 800605c:	2102      	movne	r1, #2
 800605e:	2101      	moveq	r1, #1
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	6139      	str	r1, [r7, #16]
 8006064:	b1c4      	cbz	r4, 8006098 <__d2b+0x88>
 8006066:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800606a:	4404      	add	r4, r0
 800606c:	6034      	str	r4, [r6, #0]
 800606e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006072:	6028      	str	r0, [r5, #0]
 8006074:	4638      	mov	r0, r7
 8006076:	b002      	add	sp, #8
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006080:	e7d5      	b.n	800602e <__d2b+0x1e>
 8006082:	6179      	str	r1, [r7, #20]
 8006084:	e7e7      	b.n	8006056 <__d2b+0x46>
 8006086:	a801      	add	r0, sp, #4
 8006088:	f7ff fddb 	bl	8005c42 <__lo0bits>
 800608c:	2101      	movs	r1, #1
 800608e:	9b01      	ldr	r3, [sp, #4]
 8006090:	6139      	str	r1, [r7, #16]
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	3020      	adds	r0, #32
 8006096:	e7e5      	b.n	8006064 <__d2b+0x54>
 8006098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800609c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80060a0:	6030      	str	r0, [r6, #0]
 80060a2:	6918      	ldr	r0, [r3, #16]
 80060a4:	f7ff fdae 	bl	8005c04 <__hi0bits>
 80060a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80060ac:	e7e1      	b.n	8006072 <__d2b+0x62>

080060ae <_calloc_r>:
 80060ae:	b538      	push	{r3, r4, r5, lr}
 80060b0:	fb02 f401 	mul.w	r4, r2, r1
 80060b4:	4621      	mov	r1, r4
 80060b6:	f000 f855 	bl	8006164 <_malloc_r>
 80060ba:	4605      	mov	r5, r0
 80060bc:	b118      	cbz	r0, 80060c6 <_calloc_r+0x18>
 80060be:	4622      	mov	r2, r4
 80060c0:	2100      	movs	r1, #0
 80060c2:	f7fe fa3c 	bl	800453e <memset>
 80060c6:	4628      	mov	r0, r5
 80060c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080060cc <_free_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4605      	mov	r5, r0
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d043      	beq.n	800615c <_free_r+0x90>
 80060d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d8:	1f0c      	subs	r4, r1, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bfb8      	it	lt
 80060de:	18e4      	addlt	r4, r4, r3
 80060e0:	f000 fa27 	bl	8006532 <__malloc_lock>
 80060e4:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <_free_r+0x94>)
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	4610      	mov	r0, r2
 80060ea:	b933      	cbnz	r3, 80060fa <_free_r+0x2e>
 80060ec:	6063      	str	r3, [r4, #4]
 80060ee:	6014      	str	r4, [r2, #0]
 80060f0:	4628      	mov	r0, r5
 80060f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f6:	f000 ba1d 	b.w	8006534 <__malloc_unlock>
 80060fa:	42a3      	cmp	r3, r4
 80060fc:	d90b      	bls.n	8006116 <_free_r+0x4a>
 80060fe:	6821      	ldr	r1, [r4, #0]
 8006100:	1862      	adds	r2, r4, r1
 8006102:	4293      	cmp	r3, r2
 8006104:	bf01      	itttt	eq
 8006106:	681a      	ldreq	r2, [r3, #0]
 8006108:	685b      	ldreq	r3, [r3, #4]
 800610a:	1852      	addeq	r2, r2, r1
 800610c:	6022      	streq	r2, [r4, #0]
 800610e:	6063      	str	r3, [r4, #4]
 8006110:	6004      	str	r4, [r0, #0]
 8006112:	e7ed      	b.n	80060f0 <_free_r+0x24>
 8006114:	4613      	mov	r3, r2
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	b10a      	cbz	r2, 800611e <_free_r+0x52>
 800611a:	42a2      	cmp	r2, r4
 800611c:	d9fa      	bls.n	8006114 <_free_r+0x48>
 800611e:	6819      	ldr	r1, [r3, #0]
 8006120:	1858      	adds	r0, r3, r1
 8006122:	42a0      	cmp	r0, r4
 8006124:	d10b      	bne.n	800613e <_free_r+0x72>
 8006126:	6820      	ldr	r0, [r4, #0]
 8006128:	4401      	add	r1, r0
 800612a:	1858      	adds	r0, r3, r1
 800612c:	4282      	cmp	r2, r0
 800612e:	6019      	str	r1, [r3, #0]
 8006130:	d1de      	bne.n	80060f0 <_free_r+0x24>
 8006132:	6810      	ldr	r0, [r2, #0]
 8006134:	6852      	ldr	r2, [r2, #4]
 8006136:	4401      	add	r1, r0
 8006138:	6019      	str	r1, [r3, #0]
 800613a:	605a      	str	r2, [r3, #4]
 800613c:	e7d8      	b.n	80060f0 <_free_r+0x24>
 800613e:	d902      	bls.n	8006146 <_free_r+0x7a>
 8006140:	230c      	movs	r3, #12
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	e7d4      	b.n	80060f0 <_free_r+0x24>
 8006146:	6820      	ldr	r0, [r4, #0]
 8006148:	1821      	adds	r1, r4, r0
 800614a:	428a      	cmp	r2, r1
 800614c:	bf01      	itttt	eq
 800614e:	6811      	ldreq	r1, [r2, #0]
 8006150:	6852      	ldreq	r2, [r2, #4]
 8006152:	1809      	addeq	r1, r1, r0
 8006154:	6021      	streq	r1, [r4, #0]
 8006156:	6062      	str	r2, [r4, #4]
 8006158:	605c      	str	r4, [r3, #4]
 800615a:	e7c9      	b.n	80060f0 <_free_r+0x24>
 800615c:	bd38      	pop	{r3, r4, r5, pc}
 800615e:	bf00      	nop
 8006160:	20000208 	.word	0x20000208

08006164 <_malloc_r>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	1ccd      	adds	r5, r1, #3
 8006168:	f025 0503 	bic.w	r5, r5, #3
 800616c:	3508      	adds	r5, #8
 800616e:	2d0c      	cmp	r5, #12
 8006170:	bf38      	it	cc
 8006172:	250c      	movcc	r5, #12
 8006174:	2d00      	cmp	r5, #0
 8006176:	4606      	mov	r6, r0
 8006178:	db01      	blt.n	800617e <_malloc_r+0x1a>
 800617a:	42a9      	cmp	r1, r5
 800617c:	d903      	bls.n	8006186 <_malloc_r+0x22>
 800617e:	230c      	movs	r3, #12
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	2000      	movs	r0, #0
 8006184:	bd70      	pop	{r4, r5, r6, pc}
 8006186:	f000 f9d4 	bl	8006532 <__malloc_lock>
 800618a:	4a21      	ldr	r2, [pc, #132]	; (8006210 <_malloc_r+0xac>)
 800618c:	6814      	ldr	r4, [r2, #0]
 800618e:	4621      	mov	r1, r4
 8006190:	b991      	cbnz	r1, 80061b8 <_malloc_r+0x54>
 8006192:	4c20      	ldr	r4, [pc, #128]	; (8006214 <_malloc_r+0xb0>)
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	b91b      	cbnz	r3, 80061a0 <_malloc_r+0x3c>
 8006198:	4630      	mov	r0, r6
 800619a:	f000 f98f 	bl	80064bc <_sbrk_r>
 800619e:	6020      	str	r0, [r4, #0]
 80061a0:	4629      	mov	r1, r5
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 f98a 	bl	80064bc <_sbrk_r>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d124      	bne.n	80061f6 <_malloc_r+0x92>
 80061ac:	230c      	movs	r3, #12
 80061ae:	4630      	mov	r0, r6
 80061b0:	6033      	str	r3, [r6, #0]
 80061b2:	f000 f9bf 	bl	8006534 <__malloc_unlock>
 80061b6:	e7e4      	b.n	8006182 <_malloc_r+0x1e>
 80061b8:	680b      	ldr	r3, [r1, #0]
 80061ba:	1b5b      	subs	r3, r3, r5
 80061bc:	d418      	bmi.n	80061f0 <_malloc_r+0x8c>
 80061be:	2b0b      	cmp	r3, #11
 80061c0:	d90f      	bls.n	80061e2 <_malloc_r+0x7e>
 80061c2:	600b      	str	r3, [r1, #0]
 80061c4:	18cc      	adds	r4, r1, r3
 80061c6:	50cd      	str	r5, [r1, r3]
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f9b3 	bl	8006534 <__malloc_unlock>
 80061ce:	f104 000b 	add.w	r0, r4, #11
 80061d2:	1d23      	adds	r3, r4, #4
 80061d4:	f020 0007 	bic.w	r0, r0, #7
 80061d8:	1ac3      	subs	r3, r0, r3
 80061da:	d0d3      	beq.n	8006184 <_malloc_r+0x20>
 80061dc:	425a      	negs	r2, r3
 80061de:	50e2      	str	r2, [r4, r3]
 80061e0:	e7d0      	b.n	8006184 <_malloc_r+0x20>
 80061e2:	684b      	ldr	r3, [r1, #4]
 80061e4:	428c      	cmp	r4, r1
 80061e6:	bf16      	itet	ne
 80061e8:	6063      	strne	r3, [r4, #4]
 80061ea:	6013      	streq	r3, [r2, #0]
 80061ec:	460c      	movne	r4, r1
 80061ee:	e7eb      	b.n	80061c8 <_malloc_r+0x64>
 80061f0:	460c      	mov	r4, r1
 80061f2:	6849      	ldr	r1, [r1, #4]
 80061f4:	e7cc      	b.n	8006190 <_malloc_r+0x2c>
 80061f6:	1cc4      	adds	r4, r0, #3
 80061f8:	f024 0403 	bic.w	r4, r4, #3
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d005      	beq.n	800620c <_malloc_r+0xa8>
 8006200:	1a21      	subs	r1, r4, r0
 8006202:	4630      	mov	r0, r6
 8006204:	f000 f95a 	bl	80064bc <_sbrk_r>
 8006208:	3001      	adds	r0, #1
 800620a:	d0cf      	beq.n	80061ac <_malloc_r+0x48>
 800620c:	6025      	str	r5, [r4, #0]
 800620e:	e7db      	b.n	80061c8 <_malloc_r+0x64>
 8006210:	20000208 	.word	0x20000208
 8006214:	2000020c 	.word	0x2000020c

08006218 <__ssputs_r>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	688e      	ldr	r6, [r1, #8]
 800621e:	4682      	mov	sl, r0
 8006220:	429e      	cmp	r6, r3
 8006222:	460c      	mov	r4, r1
 8006224:	4690      	mov	r8, r2
 8006226:	4699      	mov	r9, r3
 8006228:	d837      	bhi.n	800629a <__ssputs_r+0x82>
 800622a:	898a      	ldrh	r2, [r1, #12]
 800622c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006230:	d031      	beq.n	8006296 <__ssputs_r+0x7e>
 8006232:	2302      	movs	r3, #2
 8006234:	6825      	ldr	r5, [r4, #0]
 8006236:	6909      	ldr	r1, [r1, #16]
 8006238:	1a6f      	subs	r7, r5, r1
 800623a:	6965      	ldr	r5, [r4, #20]
 800623c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006240:	fb95 f5f3 	sdiv	r5, r5, r3
 8006244:	f109 0301 	add.w	r3, r9, #1
 8006248:	443b      	add	r3, r7
 800624a:	429d      	cmp	r5, r3
 800624c:	bf38      	it	cc
 800624e:	461d      	movcc	r5, r3
 8006250:	0553      	lsls	r3, r2, #21
 8006252:	d530      	bpl.n	80062b6 <__ssputs_r+0x9e>
 8006254:	4629      	mov	r1, r5
 8006256:	f7ff ff85 	bl	8006164 <_malloc_r>
 800625a:	4606      	mov	r6, r0
 800625c:	b950      	cbnz	r0, 8006274 <__ssputs_r+0x5c>
 800625e:	230c      	movs	r3, #12
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	f8ca 3000 	str.w	r3, [sl]
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006274:	463a      	mov	r2, r7
 8006276:	6921      	ldr	r1, [r4, #16]
 8006278:	f7fe f956 	bl	8004528 <memcpy>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	6126      	str	r6, [r4, #16]
 800628a:	443e      	add	r6, r7
 800628c:	6026      	str	r6, [r4, #0]
 800628e:	464e      	mov	r6, r9
 8006290:	6165      	str	r5, [r4, #20]
 8006292:	1bed      	subs	r5, r5, r7
 8006294:	60a5      	str	r5, [r4, #8]
 8006296:	454e      	cmp	r6, r9
 8006298:	d900      	bls.n	800629c <__ssputs_r+0x84>
 800629a:	464e      	mov	r6, r9
 800629c:	4632      	mov	r2, r6
 800629e:	4641      	mov	r1, r8
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	f000 f92d 	bl	8006500 <memmove>
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	2000      	movs	r0, #0
 80062aa:	1b9b      	subs	r3, r3, r6
 80062ac:	60a3      	str	r3, [r4, #8]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	441e      	add	r6, r3
 80062b2:	6026      	str	r6, [r4, #0]
 80062b4:	e7dc      	b.n	8006270 <__ssputs_r+0x58>
 80062b6:	462a      	mov	r2, r5
 80062b8:	f000 f93d 	bl	8006536 <_realloc_r>
 80062bc:	4606      	mov	r6, r0
 80062be:	2800      	cmp	r0, #0
 80062c0:	d1e2      	bne.n	8006288 <__ssputs_r+0x70>
 80062c2:	6921      	ldr	r1, [r4, #16]
 80062c4:	4650      	mov	r0, sl
 80062c6:	f7ff ff01 	bl	80060cc <_free_r>
 80062ca:	e7c8      	b.n	800625e <__ssputs_r+0x46>

080062cc <_svfiprintf_r>:
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	461d      	mov	r5, r3
 80062d2:	898b      	ldrh	r3, [r1, #12]
 80062d4:	b09d      	sub	sp, #116	; 0x74
 80062d6:	061f      	lsls	r7, r3, #24
 80062d8:	4680      	mov	r8, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	4616      	mov	r6, r2
 80062de:	d50f      	bpl.n	8006300 <_svfiprintf_r+0x34>
 80062e0:	690b      	ldr	r3, [r1, #16]
 80062e2:	b96b      	cbnz	r3, 8006300 <_svfiprintf_r+0x34>
 80062e4:	2140      	movs	r1, #64	; 0x40
 80062e6:	f7ff ff3d 	bl	8006164 <_malloc_r>
 80062ea:	6020      	str	r0, [r4, #0]
 80062ec:	6120      	str	r0, [r4, #16]
 80062ee:	b928      	cbnz	r0, 80062fc <_svfiprintf_r+0x30>
 80062f0:	230c      	movs	r3, #12
 80062f2:	f8c8 3000 	str.w	r3, [r8]
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	e0c8      	b.n	800648e <_svfiprintf_r+0x1c2>
 80062fc:	2340      	movs	r3, #64	; 0x40
 80062fe:	6163      	str	r3, [r4, #20]
 8006300:	2300      	movs	r3, #0
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	2320      	movs	r3, #32
 8006306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800630a:	2330      	movs	r3, #48	; 0x30
 800630c:	f04f 0b01 	mov.w	fp, #1
 8006310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006314:	9503      	str	r5, [sp, #12]
 8006316:	4637      	mov	r7, r6
 8006318:	463d      	mov	r5, r7
 800631a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800631e:	b10b      	cbz	r3, 8006324 <_svfiprintf_r+0x58>
 8006320:	2b25      	cmp	r3, #37	; 0x25
 8006322:	d13e      	bne.n	80063a2 <_svfiprintf_r+0xd6>
 8006324:	ebb7 0a06 	subs.w	sl, r7, r6
 8006328:	d00b      	beq.n	8006342 <_svfiprintf_r+0x76>
 800632a:	4653      	mov	r3, sl
 800632c:	4632      	mov	r2, r6
 800632e:	4621      	mov	r1, r4
 8006330:	4640      	mov	r0, r8
 8006332:	f7ff ff71 	bl	8006218 <__ssputs_r>
 8006336:	3001      	adds	r0, #1
 8006338:	f000 80a4 	beq.w	8006484 <_svfiprintf_r+0x1b8>
 800633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633e:	4453      	add	r3, sl
 8006340:	9309      	str	r3, [sp, #36]	; 0x24
 8006342:	783b      	ldrb	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 809d 	beq.w	8006484 <_svfiprintf_r+0x1b8>
 800634a:	2300      	movs	r3, #0
 800634c:	f04f 32ff 	mov.w	r2, #4294967295
 8006350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800635c:	931a      	str	r3, [sp, #104]	; 0x68
 800635e:	462f      	mov	r7, r5
 8006360:	2205      	movs	r2, #5
 8006362:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006366:	4850      	ldr	r0, [pc, #320]	; (80064a8 <_svfiprintf_r+0x1dc>)
 8006368:	f7ff fbb8 	bl	8005adc <memchr>
 800636c:	9b04      	ldr	r3, [sp, #16]
 800636e:	b9d0      	cbnz	r0, 80063a6 <_svfiprintf_r+0xda>
 8006370:	06d9      	lsls	r1, r3, #27
 8006372:	bf44      	itt	mi
 8006374:	2220      	movmi	r2, #32
 8006376:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800637a:	071a      	lsls	r2, r3, #28
 800637c:	bf44      	itt	mi
 800637e:	222b      	movmi	r2, #43	; 0x2b
 8006380:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006384:	782a      	ldrb	r2, [r5, #0]
 8006386:	2a2a      	cmp	r2, #42	; 0x2a
 8006388:	d015      	beq.n	80063b6 <_svfiprintf_r+0xea>
 800638a:	462f      	mov	r7, r5
 800638c:	2000      	movs	r0, #0
 800638e:	250a      	movs	r5, #10
 8006390:	9a07      	ldr	r2, [sp, #28]
 8006392:	4639      	mov	r1, r7
 8006394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006398:	3b30      	subs	r3, #48	; 0x30
 800639a:	2b09      	cmp	r3, #9
 800639c:	d94d      	bls.n	800643a <_svfiprintf_r+0x16e>
 800639e:	b1b8      	cbz	r0, 80063d0 <_svfiprintf_r+0x104>
 80063a0:	e00f      	b.n	80063c2 <_svfiprintf_r+0xf6>
 80063a2:	462f      	mov	r7, r5
 80063a4:	e7b8      	b.n	8006318 <_svfiprintf_r+0x4c>
 80063a6:	4a40      	ldr	r2, [pc, #256]	; (80064a8 <_svfiprintf_r+0x1dc>)
 80063a8:	463d      	mov	r5, r7
 80063aa:	1a80      	subs	r0, r0, r2
 80063ac:	fa0b f000 	lsl.w	r0, fp, r0
 80063b0:	4318      	orrs	r0, r3
 80063b2:	9004      	str	r0, [sp, #16]
 80063b4:	e7d3      	b.n	800635e <_svfiprintf_r+0x92>
 80063b6:	9a03      	ldr	r2, [sp, #12]
 80063b8:	1d11      	adds	r1, r2, #4
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	9103      	str	r1, [sp, #12]
 80063be:	2a00      	cmp	r2, #0
 80063c0:	db01      	blt.n	80063c6 <_svfiprintf_r+0xfa>
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	e004      	b.n	80063d0 <_svfiprintf_r+0x104>
 80063c6:	4252      	negs	r2, r2
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	9207      	str	r2, [sp, #28]
 80063ce:	9304      	str	r3, [sp, #16]
 80063d0:	783b      	ldrb	r3, [r7, #0]
 80063d2:	2b2e      	cmp	r3, #46	; 0x2e
 80063d4:	d10c      	bne.n	80063f0 <_svfiprintf_r+0x124>
 80063d6:	787b      	ldrb	r3, [r7, #1]
 80063d8:	2b2a      	cmp	r3, #42	; 0x2a
 80063da:	d133      	bne.n	8006444 <_svfiprintf_r+0x178>
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	3702      	adds	r7, #2
 80063e0:	1d1a      	adds	r2, r3, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	9203      	str	r2, [sp, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	4d2e      	ldr	r5, [pc, #184]	; (80064ac <_svfiprintf_r+0x1e0>)
 80063f2:	2203      	movs	r2, #3
 80063f4:	7839      	ldrb	r1, [r7, #0]
 80063f6:	4628      	mov	r0, r5
 80063f8:	f7ff fb70 	bl	8005adc <memchr>
 80063fc:	b138      	cbz	r0, 800640e <_svfiprintf_r+0x142>
 80063fe:	2340      	movs	r3, #64	; 0x40
 8006400:	1b40      	subs	r0, r0, r5
 8006402:	fa03 f000 	lsl.w	r0, r3, r0
 8006406:	9b04      	ldr	r3, [sp, #16]
 8006408:	3701      	adds	r7, #1
 800640a:	4303      	orrs	r3, r0
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	7839      	ldrb	r1, [r7, #0]
 8006410:	2206      	movs	r2, #6
 8006412:	4827      	ldr	r0, [pc, #156]	; (80064b0 <_svfiprintf_r+0x1e4>)
 8006414:	1c7e      	adds	r6, r7, #1
 8006416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800641a:	f7ff fb5f 	bl	8005adc <memchr>
 800641e:	2800      	cmp	r0, #0
 8006420:	d038      	beq.n	8006494 <_svfiprintf_r+0x1c8>
 8006422:	4b24      	ldr	r3, [pc, #144]	; (80064b4 <_svfiprintf_r+0x1e8>)
 8006424:	bb13      	cbnz	r3, 800646c <_svfiprintf_r+0x1a0>
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	3307      	adds	r3, #7
 800642a:	f023 0307 	bic.w	r3, r3, #7
 800642e:	3308      	adds	r3, #8
 8006430:	9303      	str	r3, [sp, #12]
 8006432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006434:	444b      	add	r3, r9
 8006436:	9309      	str	r3, [sp, #36]	; 0x24
 8006438:	e76d      	b.n	8006316 <_svfiprintf_r+0x4a>
 800643a:	fb05 3202 	mla	r2, r5, r2, r3
 800643e:	2001      	movs	r0, #1
 8006440:	460f      	mov	r7, r1
 8006442:	e7a6      	b.n	8006392 <_svfiprintf_r+0xc6>
 8006444:	2300      	movs	r3, #0
 8006446:	250a      	movs	r5, #10
 8006448:	4619      	mov	r1, r3
 800644a:	3701      	adds	r7, #1
 800644c:	9305      	str	r3, [sp, #20]
 800644e:	4638      	mov	r0, r7
 8006450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006454:	3a30      	subs	r2, #48	; 0x30
 8006456:	2a09      	cmp	r2, #9
 8006458:	d903      	bls.n	8006462 <_svfiprintf_r+0x196>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0c8      	beq.n	80063f0 <_svfiprintf_r+0x124>
 800645e:	9105      	str	r1, [sp, #20]
 8006460:	e7c6      	b.n	80063f0 <_svfiprintf_r+0x124>
 8006462:	fb05 2101 	mla	r1, r5, r1, r2
 8006466:	2301      	movs	r3, #1
 8006468:	4607      	mov	r7, r0
 800646a:	e7f0      	b.n	800644e <_svfiprintf_r+0x182>
 800646c:	ab03      	add	r3, sp, #12
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	4622      	mov	r2, r4
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <_svfiprintf_r+0x1ec>)
 8006474:	a904      	add	r1, sp, #16
 8006476:	4640      	mov	r0, r8
 8006478:	f7fe f8fa 	bl	8004670 <_printf_float>
 800647c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006480:	4681      	mov	r9, r0
 8006482:	d1d6      	bne.n	8006432 <_svfiprintf_r+0x166>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	065b      	lsls	r3, r3, #25
 8006488:	f53f af35 	bmi.w	80062f6 <_svfiprintf_r+0x2a>
 800648c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800648e:	b01d      	add	sp, #116	; 0x74
 8006490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006494:	ab03      	add	r3, sp, #12
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4622      	mov	r2, r4
 800649a:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <_svfiprintf_r+0x1ec>)
 800649c:	a904      	add	r1, sp, #16
 800649e:	4640      	mov	r0, r8
 80064a0:	f7fe fb92 	bl	8004bc8 <_printf_i>
 80064a4:	e7ea      	b.n	800647c <_svfiprintf_r+0x1b0>
 80064a6:	bf00      	nop
 80064a8:	08007444 	.word	0x08007444
 80064ac:	0800744a 	.word	0x0800744a
 80064b0:	0800744e 	.word	0x0800744e
 80064b4:	08004671 	.word	0x08004671
 80064b8:	08006219 	.word	0x08006219

080064bc <_sbrk_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	2300      	movs	r3, #0
 80064c0:	4c05      	ldr	r4, [pc, #20]	; (80064d8 <_sbrk_r+0x1c>)
 80064c2:	4605      	mov	r5, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	f7fc f85c 	bl	8002584 <_sbrk>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_sbrk_r+0x1a>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_sbrk_r+0x1a>
 80064d4:	602b      	str	r3, [r5, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20001884 	.word	0x20001884

080064dc <__ascii_mbtowc>:
 80064dc:	b082      	sub	sp, #8
 80064de:	b901      	cbnz	r1, 80064e2 <__ascii_mbtowc+0x6>
 80064e0:	a901      	add	r1, sp, #4
 80064e2:	b142      	cbz	r2, 80064f6 <__ascii_mbtowc+0x1a>
 80064e4:	b14b      	cbz	r3, 80064fa <__ascii_mbtowc+0x1e>
 80064e6:	7813      	ldrb	r3, [r2, #0]
 80064e8:	600b      	str	r3, [r1, #0]
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	1c10      	adds	r0, r2, #0
 80064ee:	bf18      	it	ne
 80064f0:	2001      	movne	r0, #1
 80064f2:	b002      	add	sp, #8
 80064f4:	4770      	bx	lr
 80064f6:	4610      	mov	r0, r2
 80064f8:	e7fb      	b.n	80064f2 <__ascii_mbtowc+0x16>
 80064fa:	f06f 0001 	mvn.w	r0, #1
 80064fe:	e7f8      	b.n	80064f2 <__ascii_mbtowc+0x16>

08006500 <memmove>:
 8006500:	4288      	cmp	r0, r1
 8006502:	b510      	push	{r4, lr}
 8006504:	eb01 0302 	add.w	r3, r1, r2
 8006508:	d807      	bhi.n	800651a <memmove+0x1a>
 800650a:	1e42      	subs	r2, r0, #1
 800650c:	4299      	cmp	r1, r3
 800650e:	d00a      	beq.n	8006526 <memmove+0x26>
 8006510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006514:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006518:	e7f8      	b.n	800650c <memmove+0xc>
 800651a:	4283      	cmp	r3, r0
 800651c:	d9f5      	bls.n	800650a <memmove+0xa>
 800651e:	1881      	adds	r1, r0, r2
 8006520:	1ad2      	subs	r2, r2, r3
 8006522:	42d3      	cmn	r3, r2
 8006524:	d100      	bne.n	8006528 <memmove+0x28>
 8006526:	bd10      	pop	{r4, pc}
 8006528:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800652c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006530:	e7f7      	b.n	8006522 <memmove+0x22>

08006532 <__malloc_lock>:
 8006532:	4770      	bx	lr

08006534 <__malloc_unlock>:
 8006534:	4770      	bx	lr

08006536 <_realloc_r>:
 8006536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006538:	4607      	mov	r7, r0
 800653a:	4614      	mov	r4, r2
 800653c:	460e      	mov	r6, r1
 800653e:	b921      	cbnz	r1, 800654a <_realloc_r+0x14>
 8006540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006544:	4611      	mov	r1, r2
 8006546:	f7ff be0d 	b.w	8006164 <_malloc_r>
 800654a:	b922      	cbnz	r2, 8006556 <_realloc_r+0x20>
 800654c:	f7ff fdbe 	bl	80060cc <_free_r>
 8006550:	4625      	mov	r5, r4
 8006552:	4628      	mov	r0, r5
 8006554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006556:	f000 f821 	bl	800659c <_malloc_usable_size_r>
 800655a:	42a0      	cmp	r0, r4
 800655c:	d20f      	bcs.n	800657e <_realloc_r+0x48>
 800655e:	4621      	mov	r1, r4
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff fdff 	bl	8006164 <_malloc_r>
 8006566:	4605      	mov	r5, r0
 8006568:	2800      	cmp	r0, #0
 800656a:	d0f2      	beq.n	8006552 <_realloc_r+0x1c>
 800656c:	4631      	mov	r1, r6
 800656e:	4622      	mov	r2, r4
 8006570:	f7fd ffda 	bl	8004528 <memcpy>
 8006574:	4631      	mov	r1, r6
 8006576:	4638      	mov	r0, r7
 8006578:	f7ff fda8 	bl	80060cc <_free_r>
 800657c:	e7e9      	b.n	8006552 <_realloc_r+0x1c>
 800657e:	4635      	mov	r5, r6
 8006580:	e7e7      	b.n	8006552 <_realloc_r+0x1c>

08006582 <__ascii_wctomb>:
 8006582:	b149      	cbz	r1, 8006598 <__ascii_wctomb+0x16>
 8006584:	2aff      	cmp	r2, #255	; 0xff
 8006586:	bf8b      	itete	hi
 8006588:	238a      	movhi	r3, #138	; 0x8a
 800658a:	700a      	strbls	r2, [r1, #0]
 800658c:	6003      	strhi	r3, [r0, #0]
 800658e:	2001      	movls	r0, #1
 8006590:	bf88      	it	hi
 8006592:	f04f 30ff 	movhi.w	r0, #4294967295
 8006596:	4770      	bx	lr
 8006598:	4608      	mov	r0, r1
 800659a:	4770      	bx	lr

0800659c <_malloc_usable_size_r>:
 800659c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a0:	1f18      	subs	r0, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bfbc      	itt	lt
 80065a6:	580b      	ldrlt	r3, [r1, r0]
 80065a8:	18c0      	addlt	r0, r0, r3
 80065aa:	4770      	bx	lr

080065ac <_init>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr

080065b8 <_fini>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr
