
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f18  08005f90  08005f90  00015f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea8  08006ea8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006ea8  08006ea8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ea8  08006ea8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  200001dc  0800708c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  0800708c  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088be  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016b2  00000000  00000000  00028ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  0002a178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000610  00000000  00000000  0002a840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013ef1  00000000  00000000  0002ae50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006437  00000000  00000000  0003ed41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b513  00000000  00000000  00045178  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b068b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  000b0708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f74 	.word	0x08005f74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005f74 	.word	0x08005f74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	f5ad 5dd4 	sub.w	sp, sp, #6784	; 0x1a80
 8000a8e:	b081      	sub	sp, #4
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f001 fbbb 	bl	800220c <HAL_Init>

  /* USER CODE BEGIN Init */
  static_strings_init();
 8000a96:	f002 fc7f 	bl	8003398 <static_strings_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f001 f9e7 	bl	8001e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9e:	f001 fa55 	bl	8001f4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aa2:	f001 fa29 	bl	8001ef8 <MX_USART1_UART_Init>

  //test 1

  uint8_t very_long_string[700];
  uint16_t i;
  for(i = 0; i < 699; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000aac:	f102 021e 	add.w	r2, r2, #30
 8000ab0:	8013      	strh	r3, [r2, #0]
 8000ab2:	e015      	b.n	8000ae0 <main+0x58>
	  very_long_string[i] = 'a';
 8000ab4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ab8:	f103 031e 	add.w	r3, r3, #30
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000ac2:	f102 021c 	add.w	r2, r2, #28
 8000ac6:	2161      	movs	r1, #97	; 0x61
 8000ac8:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 699; i++){
 8000aca:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ace:	f103 031e 	add.w	r3, r3, #30
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000ada:	f102 021e 	add.w	r2, r2, #30
 8000ade:	8013      	strh	r3, [r2, #0]
 8000ae0:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ae4:	f103 031e 	add.w	r3, r3, #30
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d9e0      	bls.n	8000ab4 <main+0x2c>
  }
  very_long_string[699] = '\0';
 8000af2:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000af6:	f103 031c 	add.w	r3, r3, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
  static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 8000b00:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b04:	f103 031c 	add.w	r3, r3, #28
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fe23 	bl	8003754 <static_strings_save>
 8000b0e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000b12:	f103 0314 	add.w	r3, r3, #20
 8000b16:	6018      	str	r0, [r3, #0]
  char length[6];
  sprintf(length,"%04d",very_long_string_descriptor->length);
 8000b18:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000b1c:	f103 0314 	add.w	r3, r3, #20
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	889b      	ldrh	r3, [r3, #4]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b2a:	f103 0314 	add.w	r3, r3, #20
 8000b2e:	49a2      	ldr	r1, [pc, #648]	; (8000db8 <main+0x330>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fe3f 	bl	80047b4 <siprintf>
  length[4] = '\r';
 8000b36:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b3a:	f103 0314 	add.w	r3, r3, #20
 8000b3e:	220d      	movs	r2, #13
 8000b40:	711a      	strb	r2, [r3, #4]
  length[5] = '\n';
 8000b42:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b46:	f103 0314 	add.w	r3, r3, #20
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	715a      	strb	r2, [r3, #5]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000b4e:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000b52:	f101 0114 	add.w	r1, r1, #20
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	4897      	ldr	r0, [pc, #604]	; (8000dbc <main+0x334>)
 8000b5e:	f002 fa5e 	bl	800301e <HAL_UART_Transmit>
  char type[3];
  type[0] = very_long_string_descriptor->type + 48;
 8000b62:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000b66:	f103 0314 	add.w	r3, r3, #20
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	3330      	adds	r3, #48	; 0x30
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b76:	f103 0310 	add.w	r3, r3, #16
 8000b7a:	701a      	strb	r2, [r3, #0]
  type[1] = '\r';
 8000b7c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b80:	f103 0310 	add.w	r3, r3, #16
 8000b84:	220d      	movs	r2, #13
 8000b86:	705a      	strb	r2, [r3, #1]
  type[2] = '\n';
 8000b88:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b8c:	f103 0310 	add.w	r3, r3, #16
 8000b90:	220a      	movs	r2, #10
 8000b92:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000b94:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000b98:	f101 0110 	add.w	r1, r1, #16
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4886      	ldr	r0, [pc, #536]	; (8000dbc <main+0x334>)
 8000ba4:	f002 fa3b 	bl	800301e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000ba8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000bac:	f103 0314 	add.w	r3, r3, #20
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000bb8:	f103 0314 	add.w	r3, r3, #20
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	889a      	ldrh	r2, [r3, #4]
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	487d      	ldr	r0, [pc, #500]	; (8000dbc <main+0x334>)
 8000bc6:	f002 fa2a 	bl	800301e <HAL_UART_Transmit>

  static_strings_deallocate(very_long_string_descriptor);
 8000bca:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000bce:	f103 0314 	add.w	r3, r3, #20
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f002 fe02 	bl	80037dc <static_strings_deallocate>

  uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000bd8:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 8000bdc:	f103 031c 	add.w	r3, r3, #28
 8000be0:	4a77      	ldr	r2, [pc, #476]	; (8000dc0 <main+0x338>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	4611      	mov	r1, r2
 8000be6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bea:	461a      	mov	r2, r3
 8000bec:	f003 f980 	bl	8003ef0 <memcpy>
  uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 8000bf0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8000bf4:	f103 0304 	add.w	r3, r3, #4
 8000bf8:	4a72      	ldr	r2, [pc, #456]	; (8000dc4 <main+0x33c>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c02:	461a      	mov	r2, r3
 8000c04:	f003 f974 	bl	8003ef0 <memcpy>
  uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 8000c08:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8000c0c:	f103 0314 	add.w	r3, r3, #20
 8000c10:	4a6d      	ldr	r2, [pc, #436]	; (8000dc8 <main+0x340>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	4611      	mov	r1, r2
 8000c16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f003 f968 	bl	8003ef0 <memcpy>
  uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 8000c20:	f507 647a 	add.w	r4, r7, #4000	; 0xfa0
 8000c24:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <main+0x344>)
 8000c26:	4620      	mov	r0, r4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f240 1361 	movw	r3, #353	; 0x161
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f003 f95e 	bl	8003ef0 <memcpy>
 8000c34:	f204 1361 	addw	r3, r4, #353	; 0x161
 8000c38:	2293      	movs	r2, #147	; 0x93
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f962 	bl	8003f06 <memset>
  uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 8000c42:	f607 34b8 	addw	r4, r7, #3000	; 0xbb8
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <main+0x348>)
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f240 235b 	movw	r3, #603	; 0x25b
 8000c50:	461a      	mov	r2, r3
 8000c52:	f003 f94d 	bl	8003ef0 <memcpy>
 8000c56:	f204 235b 	addw	r3, r4, #603	; 0x25b
 8000c5a:	f240 128d 	movw	r2, #397	; 0x18d
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 f950 	bl	8003f06 <memset>

  static_strings_string_descriptor *string_descriptor;

  //test 2

  string_descriptor = static_strings_save(test_very_long_string);
 8000c66:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fd72 	bl	8003754 <static_strings_save>
 8000c70:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000c74:	f103 0310 	add.w	r3, r3, #16
 8000c78:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000c7a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000c7e:	f103 0310 	add.w	r3, r3, #16
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	889b      	ldrh	r3, [r3, #4]
 8000c86:	461a      	mov	r2, r3
 8000c88:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000c8c:	f103 0314 	add.w	r3, r3, #20
 8000c90:	4949      	ldr	r1, [pc, #292]	; (8000db8 <main+0x330>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fd8e 	bl	80047b4 <siprintf>
  length[4] = '\r';
 8000c98:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000c9c:	f103 0314 	add.w	r3, r3, #20
 8000ca0:	220d      	movs	r2, #13
 8000ca2:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000ca4:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000ca8:	f101 0114 	add.w	r1, r1, #20
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	2206      	movs	r2, #6
 8000cb2:	4842      	ldr	r0, [pc, #264]	; (8000dbc <main+0x334>)
 8000cb4:	f002 f9b3 	bl	800301e <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000cb8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000cbc:	f103 0310 	add.w	r3, r3, #16
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	799b      	ldrb	r3, [r3, #6]
 8000cc4:	3330      	adds	r3, #48	; 0x30
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000ccc:	f103 0310 	add.w	r3, r3, #16
 8000cd0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000cd2:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000cd6:	f101 0110 	add.w	r1, r1, #16
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	2203      	movs	r2, #3
 8000ce0:	4836      	ldr	r0, [pc, #216]	; (8000dbc <main+0x334>)
 8000ce2:	f002 f99c 	bl	800301e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000ce6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000cea:	f103 0310 	add.w	r3, r3, #16
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6819      	ldr	r1, [r3, #0]
 8000cf2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000cf6:	f103 0310 	add.w	r3, r3, #16
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	889a      	ldrh	r2, [r3, #4]
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	482e      	ldr	r0, [pc, #184]	; (8000dbc <main+0x334>)
 8000d04:	f002 f98b 	bl	800301e <HAL_UART_Transmit>

  //test 3

  string_descriptor = static_strings_save(test_long_string);
 8000d08:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fd21 	bl	8003754 <static_strings_save>
 8000d12:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d16:	f103 0310 	add.w	r3, r3, #16
 8000d1a:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000d1c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d20:	f103 0310 	add.w	r3, r3, #16
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	889b      	ldrh	r3, [r3, #4]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d2e:	f103 0314 	add.w	r3, r3, #20
 8000d32:	4921      	ldr	r1, [pc, #132]	; (8000db8 <main+0x330>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fd3d 	bl	80047b4 <siprintf>
  length[4] = '\r';
 8000d3a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d3e:	f103 0314 	add.w	r3, r3, #20
 8000d42:	220d      	movs	r2, #13
 8000d44:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000d46:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000d4a:	f101 0114 	add.w	r1, r1, #20
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	2206      	movs	r2, #6
 8000d54:	4819      	ldr	r0, [pc, #100]	; (8000dbc <main+0x334>)
 8000d56:	f002 f962 	bl	800301e <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000d5a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d5e:	f103 0310 	add.w	r3, r3, #16
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	799b      	ldrb	r3, [r3, #6]
 8000d66:	3330      	adds	r3, #48	; 0x30
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d6e:	f103 0310 	add.w	r3, r3, #16
 8000d72:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000d74:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000d78:	f101 0110 	add.w	r1, r1, #16
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d80:	2203      	movs	r2, #3
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <main+0x334>)
 8000d84:	f002 f94b 	bl	800301e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000d88:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d8c:	f103 0310 	add.w	r3, r3, #16
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000d98:	f103 0310 	add.w	r3, r3, #16
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	889a      	ldrh	r2, [r3, #4]
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <main+0x334>)
 8000da6:	f002 f93a 	bl	800301e <HAL_UART_Transmit>

  //test 4,5

  for(i = 0; i < 2; i++){
 8000daa:	2300      	movs	r3, #0
 8000dac:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000db0:	f102 021e 	add.w	r2, r2, #30
 8000db4:	8013      	strh	r3, [r2, #0]
 8000db6:	e074      	b.n	8000ea2 <main+0x41a>
 8000db8:	08005f90 	.word	0x08005f90
 8000dbc:	20000ca4 	.word	0x20000ca4
 8000dc0:	08005fd4 	.word	0x08005fd4
 8000dc4:	080061c8 	.word	0x080061c8
 8000dc8:	08006420 	.word	0x08006420
 8000dcc:	080065b0 	.word	0x080065b0
 8000dd0:	080067a4 	.word	0x080067a4
  	  string_descriptor = static_strings_save(test_medium_strings[i]);
 8000dd4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000dd8:	f103 031e 	add.w	r3, r3, #30
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8000de2:	f102 0214 	add.w	r2, r2, #20
 8000de6:	21c8      	movs	r1, #200	; 0xc8
 8000de8:	fb01 f303 	mul.w	r3, r1, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fcb0 	bl	8003754 <static_strings_save>
 8000df4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000df8:	f103 0310 	add.w	r3, r3, #16
 8000dfc:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000dfe:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e02:	f103 0310 	add.w	r3, r3, #16
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	889b      	ldrh	r3, [r3, #4]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000e10:	f103 0314 	add.w	r3, r3, #20
 8000e14:	4967      	ldr	r1, [pc, #412]	; (8000fb4 <main+0x52c>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fccc 	bl	80047b4 <siprintf>
  	  length[4] = '\r';
 8000e1c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000e20:	f103 0314 	add.w	r3, r3, #20
 8000e24:	220d      	movs	r2, #13
 8000e26:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000e28:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000e2c:	f101 0114 	add.w	r1, r1, #20
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	2206      	movs	r2, #6
 8000e36:	4860      	ldr	r0, [pc, #384]	; (8000fb8 <main+0x530>)
 8000e38:	f002 f8f1 	bl	800301e <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000e3c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e40:	f103 0310 	add.w	r3, r3, #16
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	799b      	ldrb	r3, [r3, #6]
 8000e48:	3330      	adds	r3, #48	; 0x30
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000e50:	f103 0310 	add.w	r3, r3, #16
 8000e54:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000e56:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000e5a:	f101 0110 	add.w	r1, r1, #16
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	2203      	movs	r2, #3
 8000e64:	4854      	ldr	r0, [pc, #336]	; (8000fb8 <main+0x530>)
 8000e66:	f002 f8da 	bl	800301e <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000e6a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e6e:	f103 0310 	add.w	r3, r3, #16
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e7a:	f103 0310 	add.w	r3, r3, #16
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	889a      	ldrh	r2, [r3, #4]
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	484c      	ldr	r0, [pc, #304]	; (8000fb8 <main+0x530>)
 8000e88:	f002 f8c9 	bl	800301e <HAL_UART_Transmit>
  for(i = 0; i < 2; i++){
 8000e8c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000e90:	f103 031e 	add.w	r3, r3, #30
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000e9c:	f102 021e 	add.w	r2, r2, #30
 8000ea0:	8013      	strh	r3, [r2, #0]
 8000ea2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ea6:	f103 031e 	add.w	r3, r3, #30
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d991      	bls.n	8000dd4 <main+0x34c>
  }

  //test 6-11

  for(i = 0; i < 6; i++){
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000eb6:	f102 021e 	add.w	r2, r2, #30
 8000eba:	8013      	strh	r3, [r2, #0]
 8000ebc:	e066      	b.n	8000f8c <main+0x504>
  	  string_descriptor = static_strings_save(test_short_strings[i]);
 8000ebe:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ec2:	f103 031e 	add.w	r3, r3, #30
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8000ecc:	f102 0204 	add.w	r2, r2, #4
 8000ed0:	2164      	movs	r1, #100	; 0x64
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fc3b 	bl	8003754 <static_strings_save>
 8000ede:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ee2:	f103 0310 	add.w	r3, r3, #16
 8000ee6:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000ee8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000eec:	f103 0310 	add.w	r3, r3, #16
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	889b      	ldrh	r3, [r3, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000efa:	f103 0314 	add.w	r3, r3, #20
 8000efe:	492d      	ldr	r1, [pc, #180]	; (8000fb4 <main+0x52c>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fc57 	bl	80047b4 <siprintf>
  	  length[4] = '\r';
 8000f06:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000f0a:	f103 0314 	add.w	r3, r3, #20
 8000f0e:	220d      	movs	r2, #13
 8000f10:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000f12:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000f16:	f101 0114 	add.w	r1, r1, #20
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	2206      	movs	r2, #6
 8000f20:	4825      	ldr	r0, [pc, #148]	; (8000fb8 <main+0x530>)
 8000f22:	f002 f87c 	bl	800301e <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000f26:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f2a:	f103 0310 	add.w	r3, r3, #16
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	799b      	ldrb	r3, [r3, #6]
 8000f32:	3330      	adds	r3, #48	; 0x30
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000f3a:	f103 0310 	add.w	r3, r3, #16
 8000f3e:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000f40:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000f44:	f101 0110 	add.w	r1, r1, #16
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <main+0x530>)
 8000f50:	f002 f865 	bl	800301e <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000f54:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f58:	f103 0310 	add.w	r3, r3, #16
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f64:	f103 0310 	add.w	r3, r3, #16
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	889a      	ldrh	r2, [r3, #4]
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <main+0x530>)
 8000f72:	f002 f854 	bl	800301e <HAL_UART_Transmit>
  for(i = 0; i < 6; i++){
 8000f76:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f7a:	f103 031e 	add.w	r3, r3, #30
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000f86:	f102 021e 	add.w	r2, r2, #30
 8000f8a:	8013      	strh	r3, [r2, #0]
 8000f8c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000f90:	f103 031e 	add.w	r3, r3, #30
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d991      	bls.n	8000ebe <main+0x436>
  }

  //test 12-21

  static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000fa0:	f102 0218 	add.w	r2, r2, #24
 8000fa4:	6013      	str	r3, [r2, #0]
  for(i = 0; i < 10; i++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8000fac:	f102 021e 	add.w	r2, r2, #30
 8000fb0:	8013      	strh	r3, [r2, #0]
 8000fb2:	e07b      	b.n	80010ac <main+0x624>
 8000fb4:	08005f90 	.word	0x08005f90
 8000fb8:	20000ca4 	.word	0x20000ca4
	  string_descriptor = static_strings_save(test_very_short_strings[i]);
 8000fbc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000fc0:	f103 031e 	add.w	r3, r3, #30
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	f507 52ab 	add.w	r2, r7, #5472	; 0x1560
 8000fca:	f102 021c 	add.w	r2, r2, #28
 8000fce:	2132      	movs	r1, #50	; 0x32
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fbbc 	bl	8003754 <static_strings_save>
 8000fdc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000fe0:	f103 0310 	add.w	r3, r3, #16
 8000fe4:	6018      	str	r0, [r3, #0]
	  if(i == 6){
 8000fe6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000fea:	f103 031e 	add.w	r3, r3, #30
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	d109      	bne.n	8001008 <main+0x580>
		  string_descriptor_deallocate = string_descriptor;
 8000ff4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8000ff8:	f103 0310 	add.w	r3, r3, #16
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001002:	f102 0218 	add.w	r2, r2, #24
 8001006:	6013      	str	r3, [r2, #0]
	  }
	  sprintf(length,"%04d",string_descriptor->length);
 8001008:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800100c:	f103 0310 	add.w	r3, r3, #16
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	889b      	ldrh	r3, [r3, #4]
 8001014:	461a      	mov	r2, r3
 8001016:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800101a:	f103 0314 	add.w	r3, r3, #20
 800101e:	49d0      	ldr	r1, [pc, #832]	; (8001360 <main+0x8d8>)
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fbc7 	bl	80047b4 <siprintf>
	  length[4] = '\r';
 8001026:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800102a:	f103 0314 	add.w	r3, r3, #20
 800102e:	220d      	movs	r2, #13
 8001030:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8001032:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8001036:	f101 0114 	add.w	r1, r1, #20
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2206      	movs	r2, #6
 8001040:	48c8      	ldr	r0, [pc, #800]	; (8001364 <main+0x8dc>)
 8001042:	f001 ffec 	bl	800301e <HAL_UART_Transmit>
	  type[0] = string_descriptor->type + 48;
 8001046:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800104a:	f103 0310 	add.w	r3, r3, #16
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	799b      	ldrb	r3, [r3, #6]
 8001052:	3330      	adds	r3, #48	; 0x30
 8001054:	b2da      	uxtb	r2, r3
 8001056:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800105a:	f103 0310 	add.w	r3, r3, #16
 800105e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8001060:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8001064:	f101 0110 	add.w	r1, r1, #16
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	2203      	movs	r2, #3
 800106e:	48bd      	ldr	r0, [pc, #756]	; (8001364 <main+0x8dc>)
 8001070:	f001 ffd5 	bl	800301e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001074:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001078:	f103 0310 	add.w	r3, r3, #16
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6819      	ldr	r1, [r3, #0]
 8001080:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001084:	f103 0310 	add.w	r3, r3, #16
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	889a      	ldrh	r2, [r3, #4]
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	48b4      	ldr	r0, [pc, #720]	; (8001364 <main+0x8dc>)
 8001092:	f001 ffc4 	bl	800301e <HAL_UART_Transmit>
  for(i = 0; i < 10; i++){
 8001096:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800109a:	f103 031e 	add.w	r3, r3, #30
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80010a6:	f102 021e 	add.w	r2, r2, #30
 80010aa:	8013      	strh	r3, [r2, #0]
 80010ac:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80010b0:	f103 031e 	add.w	r3, r3, #30
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	2b09      	cmp	r3, #9
 80010b8:	d980      	bls.n	8000fbc <main+0x534>
  }

  //test 22

  static_strings_deallocate(string_descriptor_deallocate);
 80010ba:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80010be:	f103 0318 	add.w	r3, r3, #24
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f002 fb8a 	bl	80037dc <static_strings_deallocate>
  uint8_t test_short_string[50] = "reallocate_test\r\n";
 80010c8:	f607 3684 	addw	r6, r7, #2948	; 0xb84
 80010cc:	4ba6      	ldr	r3, [pc, #664]	; (8001368 <main+0x8e0>)
 80010ce:	4634      	mov	r4, r6
 80010d0:	461d      	mov	r5, r3
 80010d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	8023      	strh	r3, [r4, #0]
 80010da:	f106 0312 	add.w	r3, r6, #18
 80010de:	2220      	movs	r2, #32
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 ff0f 	bl	8003f06 <memset>
  string_descriptor = static_strings_save(test_short_string);
 80010e8:	f607 3384 	addw	r3, r7, #2948	; 0xb84
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fb31 	bl	8003754 <static_strings_save>
 80010f2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80010f6:	f103 0310 	add.w	r3, r3, #16
 80010fa:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 80010fc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001100:	f103 0310 	add.w	r3, r3, #16
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	461a      	mov	r2, r3
 800110a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800110e:	f103 0314 	add.w	r3, r3, #20
 8001112:	4993      	ldr	r1, [pc, #588]	; (8001360 <main+0x8d8>)
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fb4d 	bl	80047b4 <siprintf>
  length[4] = '\r';
 800111a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800111e:	f103 0314 	add.w	r3, r3, #20
 8001122:	220d      	movs	r2, #13
 8001124:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8001126:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 800112a:	f101 0114 	add.w	r1, r1, #20
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	2206      	movs	r2, #6
 8001134:	488b      	ldr	r0, [pc, #556]	; (8001364 <main+0x8dc>)
 8001136:	f001 ff72 	bl	800301e <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 800113a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800113e:	f103 0310 	add.w	r3, r3, #16
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	799b      	ldrb	r3, [r3, #6]
 8001146:	3330      	adds	r3, #48	; 0x30
 8001148:	b2da      	uxtb	r2, r3
 800114a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800114e:	f103 0310 	add.w	r3, r3, #16
 8001152:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8001154:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8001158:	f101 0110 	add.w	r1, r1, #16
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	2203      	movs	r2, #3
 8001162:	4880      	ldr	r0, [pc, #512]	; (8001364 <main+0x8dc>)
 8001164:	f001 ff5b 	bl	800301e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001168:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800116c:	f103 0310 	add.w	r3, r3, #16
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6819      	ldr	r1, [r3, #0]
 8001174:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001178:	f103 0310 	add.w	r3, r3, #16
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	889a      	ldrh	r2, [r3, #4]
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	4877      	ldr	r0, [pc, #476]	; (8001364 <main+0x8dc>)
 8001186:	f001 ff4a 	bl	800301e <HAL_UART_Transmit>

  //test 23

  uint8_t pointer[12];
  sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 800118a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800118e:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001192:	f102 0218 	add.w	r2, r2, #24
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	4974      	ldr	r1, [pc, #464]	; (800136c <main+0x8e4>)
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fb0a 	bl	80047b4 <siprintf>
  pointer[10] = '\r';
 80011a0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011a4:	220d      	movs	r2, #13
 80011a6:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 80011a8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011ac:	220a      	movs	r2, #10
 80011ae:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80011b0:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	220c      	movs	r2, #12
 80011ba:	486a      	ldr	r0, [pc, #424]	; (8001364 <main+0x8dc>)
 80011bc:	f001 ff2f 	bl	800301e <HAL_UART_Transmit>

  sprintf((char *)pointer,"%10p",string_descriptor);
 80011c0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011c4:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80011c8:	f102 0210 	add.w	r2, r2, #16
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	4967      	ldr	r1, [pc, #412]	; (800136c <main+0x8e4>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 faef 	bl	80047b4 <siprintf>
  pointer[10] = '\r';
 80011d6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011da:	220d      	movs	r2, #13
 80011dc:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 80011de:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011e2:	220a      	movs	r2, #10
 80011e4:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80011e6:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	220c      	movs	r2, #12
 80011f0:	485c      	ldr	r0, [pc, #368]	; (8001364 <main+0x8dc>)
 80011f2:	f001 ff14 	bl	800301e <HAL_UART_Transmit>
  uint8_t error_code_char;

  //test 24

  uint8_t no_memory_string[800];
  for(i = 0; i < 798; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80011fc:	f102 021e 	add.w	r2, r2, #30
 8001200:	8013      	strh	r3, [r2, #0]
 8001202:	e014      	b.n	800122e <main+0x7a6>
	  no_memory_string[i] = 'a';
 8001204:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001208:	f103 031e 	add.w	r3, r3, #30
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8001212:	3b0c      	subs	r3, #12
 8001214:	2161      	movs	r1, #97	; 0x61
 8001216:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 798; i++){
 8001218:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800121c:	f103 031e 	add.w	r3, r3, #30
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001228:	f102 021e 	add.w	r2, r2, #30
 800122c:	8013      	strh	r3, [r2, #0]
 800122e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001232:	f103 031e 	add.w	r3, r3, #30
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	f240 321d 	movw	r2, #797	; 0x31d
 800123c:	4293      	cmp	r3, r2
 800123e:	d9e1      	bls.n	8001204 <main+0x77c>
  }
  no_memory_string[798] = '\r';
 8001240:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8001244:	3b0c      	subs	r3, #12
 8001246:	220d      	movs	r2, #13
 8001248:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  no_memory_string[799] = '\n';
 800124c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8001250:	3b0c      	subs	r3, #12
 8001252:	220a      	movs	r2, #10
 8001254:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  string_descriptor = static_strings_save(no_memory_string);
 8001258:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800125c:	3b0c      	subs	r3, #12
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fa78 	bl	8003754 <static_strings_save>
 8001264:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001268:	f103 0310 	add.w	r3, r3, #16
 800126c:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800126e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001272:	f103 0310 	add.w	r3, r3, #16
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <main+0x804>
	  error_code_char = static_strings_error_code + 48;
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <main+0x8e8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3330      	adds	r3, #48	; 0x30
 8001282:	b2da      	uxtb	r2, r3
 8001284:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e003      	b.n	8001294 <main+0x80c>
  }
  else{
	  error_code_char = '3';
 800128c:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001290:	2233      	movs	r2, #51	; 0x33
 8001292:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001294:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	2201      	movs	r2, #1
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <main+0x8dc>)
 80012a0:	f001 febd 	bl	800301e <HAL_UART_Transmit>

  //test 25

  uint8_t unallocable_invalid_string[1200];
  for(i = 0; i < 1198; i++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80012aa:	f102 021e 	add.w	r2, r2, #30
 80012ae:	8013      	strh	r3, [r2, #0]
 80012b0:	e014      	b.n	80012dc <main+0x854>
	  unallocable_invalid_string[i] = 'a';
 80012b2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80012b6:	f103 031e 	add.w	r3, r3, #30
 80012ba:	881a      	ldrh	r2, [r3, #0]
 80012bc:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80012c0:	3b1c      	subs	r3, #28
 80012c2:	2161      	movs	r1, #97	; 0x61
 80012c4:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 1198; i++){
 80012c6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80012ca:	f103 031e 	add.w	r3, r3, #30
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80012d6:	f102 021e 	add.w	r2, r2, #30
 80012da:	8013      	strh	r3, [r2, #0]
 80012dc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80012e0:	f103 031e 	add.w	r3, r3, #30
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	f240 42ad 	movw	r2, #1197	; 0x4ad
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d9e1      	bls.n	80012b2 <main+0x82a>
  }
  unallocable_invalid_string[1198] = '\r';
 80012ee:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80012f2:	3b1c      	subs	r3, #28
 80012f4:	220d      	movs	r2, #13
 80012f6:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
  unallocable_invalid_string[1199] = '\n';
 80012fa:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80012fe:	3b1c      	subs	r3, #28
 8001300:	220a      	movs	r2, #10
 8001302:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
  string_descriptor = static_strings_save(unallocable_invalid_string);
 8001306:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800130a:	3b1c      	subs	r3, #28
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fa21 	bl	8003754 <static_strings_save>
 8001312:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001316:	f103 0310 	add.w	r3, r3, #16
 800131a:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800131c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001320:	f103 0310 	add.w	r3, r3, #16
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d107      	bne.n	800133a <main+0x8b2>
	  error_code_char = static_strings_error_code + 48;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <main+0x8e8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3330      	adds	r3, #48	; 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e003      	b.n	8001342 <main+0x8ba>
  }
  else{
	  error_code_char = '4';
 800133a:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 800133e:	2234      	movs	r2, #52	; 0x34
 8001340:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001342:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	2201      	movs	r2, #1
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <main+0x8dc>)
 800134e:	f001 fe66 	bl	800301e <HAL_UART_Transmit>

  //test 26

  uint8_t no_line_end_invalid_string[800];
  for(i = 0; i < 800; i++){
 8001352:	2300      	movs	r3, #0
 8001354:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001358:	f102 021e 	add.w	r2, r2, #30
 800135c:	8013      	strh	r3, [r2, #0]
 800135e:	e01e      	b.n	800139e <main+0x916>
 8001360:	08005f90 	.word	0x08005f90
 8001364:	20000ca4 	.word	0x20000ca4
 8001368:	08006b8c 	.word	0x08006b8c
 800136c:	08005f98 	.word	0x08005f98
 8001370:	20000664 	.word	0x20000664
	  no_line_end_invalid_string[i] = 'a';
 8001374:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001378:	f103 031e 	add.w	r3, r3, #30
 800137c:	881a      	ldrh	r2, [r3, #0]
 800137e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001382:	3b1c      	subs	r3, #28
 8001384:	2161      	movs	r1, #97	; 0x61
 8001386:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 800; i++){
 8001388:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800138c:	f103 031e 	add.w	r3, r3, #30
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001398:	f102 021e 	add.w	r2, r2, #30
 800139c:	8013      	strh	r3, [r2, #0]
 800139e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80013a2:	f103 031e 	add.w	r3, r3, #30
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013ac:	d3e2      	bcc.n	8001374 <main+0x8ec>
  }
  string_descriptor = static_strings_save(no_line_end_invalid_string);
 80013ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013b2:	3b1c      	subs	r3, #28
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f9cd 	bl	8003754 <static_strings_save>
 80013ba:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80013be:	f103 0310 	add.w	r3, r3, #16
 80013c2:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 80013c4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80013c8:	f103 0310 	add.w	r3, r3, #16
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <main+0x95a>
	  error_code_char = static_strings_error_code + 48;
 80013d2:	4bbe      	ldr	r3, [pc, #760]	; (80016cc <main+0xc44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3330      	adds	r3, #48	; 0x30
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e003      	b.n	80013ea <main+0x962>
  }
  else{
	  error_code_char = '5';
 80013e2:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 80013e6:	2235      	movs	r2, #53	; 0x35
 80013e8:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80013ea:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2201      	movs	r2, #1
 80013f4:	48b6      	ldr	r0, [pc, #728]	; (80016d0 <main+0xc48>)
 80013f6:	f001 fe12 	bl	800301e <HAL_UART_Transmit>

  //test 27

  string_descriptor = static_strings_allocate(1200);
 80013fa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80013fe:	f002 f8ef 	bl	80035e0 <static_strings_allocate>
 8001402:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001406:	f103 0310 	add.w	r3, r3, #16
 800140a:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800140c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001410:	f103 0310 	add.w	r3, r3, #16
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <main+0x9a2>
  	  error_code_char = static_strings_error_code + 48;
 800141a:	4bac      	ldr	r3, [pc, #688]	; (80016cc <main+0xc44>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3330      	adds	r3, #48	; 0x30
 8001420:	b2da      	uxtb	r2, r3
 8001422:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e003      	b.n	8001432 <main+0x9aa>
  }
  else{
  	  error_code_char = '6';
 800142a:	f607 3377 	addw	r3, r7, #2935	; 0xb77
 800142e:	2236      	movs	r2, #54	; 0x36
 8001430:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001432:	f607 3177 	addw	r1, r7, #2935	; 0xb77
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	2201      	movs	r2, #1
 800143c:	48a4      	ldr	r0, [pc, #656]	; (80016d0 <main+0xc48>)
 800143e:	f001 fdee 	bl	800301e <HAL_UART_Transmit>

  //test 28

  uint8_t custom[10] = "123,56,89\0";
 8001442:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001446:	3b08      	subs	r3, #8
 8001448:	4aa2      	ldr	r2, [pc, #648]	; (80016d4 <main+0xc4c>)
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	c303      	stmia	r3!, {r0, r1}
 800144e:	801a      	strh	r2, [r3, #0]
  static_strings_string_descriptor custom_string_descriptor;
  string_descriptor = &custom_string_descriptor;
 8001450:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001454:	3b10      	subs	r3, #16
 8001456:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 800145a:	f102 0210 	add.w	r2, r2, #16
 800145e:	6013      	str	r3, [r2, #0]
  static_strings_create_custom_string(string_descriptor,custom);
 8001460:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001464:	3b08      	subs	r3, #8
 8001466:	4619      	mov	r1, r3
 8001468:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800146c:	f103 0310 	add.w	r3, r3, #16
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	f002 f996 	bl	80037a2 <static_strings_create_custom_string>
  HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8001476:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800147a:	f103 0310 	add.w	r3, r3, #16
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001486:	f103 0310 	add.w	r3, r3, #16
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	889a      	ldrh	r2, [r3, #4]
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	488f      	ldr	r0, [pc, #572]	; (80016d0 <main+0xc48>)
 8001494:	f001 fdc3 	bl	800301e <HAL_UART_Transmit>

  // test 29

  if(static_strings_is_line(string_descriptor)){
 8001498:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800149c:	f103 0310 	add.w	r3, r3, #16
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f002 f9ab 	bl	80037fc <static_strings_is_line>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <main+0xa34>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	2203      	movs	r2, #3
 80014b2:	4989      	ldr	r1, [pc, #548]	; (80016d8 <main+0xc50>)
 80014b4:	4886      	ldr	r0, [pc, #536]	; (80016d0 <main+0xc48>)
 80014b6:	f001 fdb2 	bl	800301e <HAL_UART_Transmit>
 80014ba:	e006      	b.n	80014ca <main+0xa42>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	2203      	movs	r2, #3
 80014c2:	4986      	ldr	r1, [pc, #536]	; (80016dc <main+0xc54>)
 80014c4:	4882      	ldr	r0, [pc, #520]	; (80016d0 <main+0xc48>)
 80014c6:	f001 fdaa 	bl	800301e <HAL_UART_Transmit>
  }

  // test 30

  uint8_t custom_line[10] = "123,56,8\r\n";
 80014ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014ce:	3b1c      	subs	r3, #28
 80014d0:	4a83      	ldr	r2, [pc, #524]	; (80016e0 <main+0xc58>)
 80014d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d4:	c303      	stmia	r3!, {r0, r1}
 80014d6:	801a      	strh	r2, [r3, #0]
  static_strings_create_custom_string(string_descriptor,custom_line);
 80014d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014dc:	3b1c      	subs	r3, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80014e4:	f103 0310 	add.w	r3, r3, #16
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	f002 f95a 	bl	80037a2 <static_strings_create_custom_string>

  if(static_strings_is_line(string_descriptor)){
 80014ee:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80014f2:	f103 0310 	add.w	r3, r3, #16
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	f002 f980 	bl	80037fc <static_strings_is_line>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <main+0xa8a>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2203      	movs	r2, #3
 8001508:	4973      	ldr	r1, [pc, #460]	; (80016d8 <main+0xc50>)
 800150a:	4871      	ldr	r0, [pc, #452]	; (80016d0 <main+0xc48>)
 800150c:	f001 fd87 	bl	800301e <HAL_UART_Transmit>
 8001510:	e006      	b.n	8001520 <main+0xa98>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	2203      	movs	r2, #3
 8001518:	4970      	ldr	r1, [pc, #448]	; (80016dc <main+0xc54>)
 800151a:	486d      	ldr	r0, [pc, #436]	; (80016d0 <main+0xc48>)
 800151c:	f001 fd7f 	bl	800301e <HAL_UART_Transmit>
  }

  // reset all descriptors
  static_strings_init();
 8001520:	f001 ff3a 	bl	8003398 <static_strings_init>

  // test 31-33

  static_strings_string_descriptor *token;
  static_strings_string_splitter_set_parameters(string_descriptor,',');
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800152a:	f103 0310 	add.w	r3, r3, #16
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f002 f9c2 	bl	80038b8 <static_strings_string_splitter_set_parameters>
  while(static_strings_string_splitter_get_next_token(&token)){
 8001534:	e012      	b.n	800155c <main+0xad4>
	  HAL_UART_Transmit(&huart1,token->string,token->length,HAL_MAX_DELAY);
 8001536:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	889a      	ldrh	r2, [r3, #4]
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	4861      	ldr	r0, [pc, #388]	; (80016d0 <main+0xc48>)
 800154c:	f001 fd67 	bl	800301e <HAL_UART_Transmit>
	  static_strings_deallocate(token);
 8001550:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 f940 	bl	80037dc <static_strings_deallocate>
  while(static_strings_string_splitter_get_next_token(&token)){
 800155c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f9c1 	bl	80038e8 <static_strings_string_splitter_get_next_token>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e4      	bne.n	8001536 <main+0xaae>
  }

  // test 34

  int next_token_result = static_strings_string_splitter_get_next_token(&token);
 800156c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001570:	4618      	mov	r0, r3
 8001572:	f002 f9b9 	bl	80038e8 <static_strings_string_splitter_get_next_token>
 8001576:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800157a:	f103 030c 	add.w	r3, r3, #12
 800157e:	6018      	str	r0, [r3, #0]
  if(next_token_result){
 8001580:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001584:	f103 030c 	add.w	r3, r3, #12
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <main+0xb16>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	2203      	movs	r2, #3
 8001594:	4950      	ldr	r1, [pc, #320]	; (80016d8 <main+0xc50>)
 8001596:	484e      	ldr	r0, [pc, #312]	; (80016d0 <main+0xc48>)
 8001598:	f001 fd41 	bl	800301e <HAL_UART_Transmit>
 800159c:	e006      	b.n	80015ac <main+0xb24>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	2203      	movs	r2, #3
 80015a4:	494d      	ldr	r1, [pc, #308]	; (80016dc <main+0xc54>)
 80015a6:	484a      	ldr	r0, [pc, #296]	; (80016d0 <main+0xc48>)
 80015a8:	f001 fd39 	bl	800301e <HAL_UART_Transmit>
  }

  // test 35

  static_strings_create_custom_string(string_descriptor,custom);
 80015ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015b0:	3b08      	subs	r3, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015b8:	f103 0310 	add.w	r3, r3, #16
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	f002 f8f0 	bl	80037a2 <static_strings_create_custom_string>
  static_strings_string_descriptor *substring = static_strings_substring(string_descriptor,2,8);
 80015c2:	2208      	movs	r2, #8
 80015c4:	2102      	movs	r1, #2
 80015c6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015ca:	f103 0310 	add.w	r3, r3, #16
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	f002 f9e8 	bl	80039a4 <static_strings_substring>
 80015d4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015d8:	f103 0308 	add.w	r3, r3, #8
 80015dc:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 80015de:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015e2:	f103 0308 	add.w	r3, r3, #8
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d017      	beq.n	800161c <main+0xb94>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 80015ec:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015f0:	f103 0308 	add.w	r3, r3, #8
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80015fc:	f103 0308 	add.w	r3, r3, #8
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	889a      	ldrh	r2, [r3, #4]
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	4831      	ldr	r0, [pc, #196]	; (80016d0 <main+0xc48>)
 800160a:	f001 fd08 	bl	800301e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 800160e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001612:	f103 0308 	add.w	r3, r3, #8
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	f002 f8e0 	bl	80037dc <static_strings_deallocate>
  }

  // test 36

  substring = static_strings_substring(string_descriptor,0,string_descriptor->length);
 800161c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001620:	f103 0310 	add.w	r3, r3, #16
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	461a      	mov	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001630:	f103 0310 	add.w	r3, r3, #16
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f002 f9b5 	bl	80039a4 <static_strings_substring>
 800163a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800163e:	f103 0308 	add.w	r3, r3, #8
 8001642:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 8001644:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001648:	f103 0308 	add.w	r3, r3, #8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d017      	beq.n	8001682 <main+0xbfa>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 8001652:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001656:	f103 0308 	add.w	r3, r3, #8
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001662:	f103 0308 	add.w	r3, r3, #8
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	889a      	ldrh	r2, [r3, #4]
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <main+0xc48>)
 8001670:	f001 fcd5 	bl	800301e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8001674:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001678:	f103 0308 	add.w	r3, r3, #8
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	f002 f8ad 	bl	80037dc <static_strings_deallocate>
  }

  // test 37

  substring = static_strings_substring(string_descriptor,0,12);
 8001682:	220c      	movs	r2, #12
 8001684:	2100      	movs	r1, #0
 8001686:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800168a:	f103 0310 	add.w	r3, r3, #16
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	f002 f988 	bl	80039a4 <static_strings_substring>
 8001694:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001698:	f103 0308 	add.w	r3, r3, #8
 800169c:	6018      	str	r0, [r3, #0]
  if (substring != NULL) {
 800169e:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80016a2:	f103 0308 	add.w	r3, r3, #8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01b      	beq.n	80016e4 <main+0xc5c>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	2203      	movs	r2, #3
 80016b2:	4909      	ldr	r1, [pc, #36]	; (80016d8 <main+0xc50>)
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <main+0xc48>)
 80016b6:	f001 fcb2 	bl	800301e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 80016ba:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80016be:	f103 0308 	add.w	r3, r3, #8
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	f002 f88a 	bl	80037dc <static_strings_deallocate>
 80016c8:	e013      	b.n	80016f2 <main+0xc6a>
 80016ca:	bf00      	nop
 80016cc:	20000664 	.word	0x20000664
 80016d0:	20000ca4 	.word	0x20000ca4
 80016d4:	08006bc0 	.word	0x08006bc0
 80016d8:	08005fa0 	.word	0x08005fa0
 80016dc:	08005fa4 	.word	0x08005fa4
 80016e0:	08006bcc 	.word	0x08006bcc
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	2203      	movs	r2, #3
 80016ea:	49cd      	ldr	r1, [pc, #820]	; (8001a20 <main+0xf98>)
 80016ec:	48cd      	ldr	r0, [pc, #820]	; (8001a24 <main+0xf9c>)
 80016ee:	f001 fc96 	bl	800301e <HAL_UART_Transmit>
  }

  // test 38

  substring = static_strings_substring(string_descriptor,-2,5);
 80016f2:	2205      	movs	r2, #5
 80016f4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80016f8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80016fc:	f103 0310 	add.w	r3, r3, #16
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f002 f94f 	bl	80039a4 <static_strings_substring>
 8001706:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800170a:	f103 0308 	add.w	r3, r3, #8
 800170e:	6018      	str	r0, [r3, #0]
  if (substring != NULL){
 8001710:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001714:	f103 0308 	add.w	r3, r3, #8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00e      	beq.n	800173c <main+0xcb4>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	2203      	movs	r2, #3
 8001724:	49c0      	ldr	r1, [pc, #768]	; (8001a28 <main+0xfa0>)
 8001726:	48bf      	ldr	r0, [pc, #764]	; (8001a24 <main+0xf9c>)
 8001728:	f001 fc79 	bl	800301e <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 800172c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001730:	f103 0308 	add.w	r3, r3, #8
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f002 f851 	bl	80037dc <static_strings_deallocate>
 800173a:	e006      	b.n	800174a <main+0xcc2>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	2203      	movs	r2, #3
 8001742:	49b7      	ldr	r1, [pc, #732]	; (8001a20 <main+0xf98>)
 8001744:	48b7      	ldr	r0, [pc, #732]	; (8001a24 <main+0xf9c>)
 8001746:	f001 fc6a 	bl	800301e <HAL_UART_Transmit>
  }

  // test 39

  uint8_t concatenate_at_memory[] = "Hello \0";
 800174a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800174e:	3b08      	subs	r3, #8
 8001750:	4ab6      	ldr	r2, [pc, #728]	; (8001a2c <main+0xfa4>)
 8001752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001756:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate_at;
  static_strings_create_custom_string(&concatenate_at,concatenate_at_memory);
 800175a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800175e:	3a08      	subs	r2, #8
 8001760:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001764:	3b10      	subs	r3, #16
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f002 f81a 	bl	80037a2 <static_strings_create_custom_string>
  uint8_t concatenate_memory[] = "World\r\n";
 800176e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001772:	3b18      	subs	r3, #24
 8001774:	4aae      	ldr	r2, [pc, #696]	; (8001a30 <main+0xfa8>)
 8001776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800177a:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate;
  static_strings_create_custom_string(&concatenate,concatenate_memory);
 800177e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001782:	3b18      	subs	r3, #24
 8001784:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f002 f809 	bl	80037a2 <static_strings_create_custom_string>
  static_strings_string_descriptor *concatenated;
  concatenated = static_strings_concatenate(&concatenate_at,&concatenate);
 8001790:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001794:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001798:	3b10      	subs	r3, #16
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f002 f943 	bl	8003a28 <static_strings_concatenate>
 80017a2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80017a6:	f103 0304 	add.w	r3, r3, #4
 80017aa:	6018      	str	r0, [r3, #0]
  if (concatenated != NULL) {
 80017ac:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80017b0:	f103 0304 	add.w	r3, r3, #4
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d017      	beq.n	80017ea <main+0xd62>
  	  HAL_UART_Transmit(&huart1,concatenated->string,concatenated->length,HAL_MAX_DELAY);
 80017ba:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80017be:	f103 0304 	add.w	r3, r3, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80017ca:	f103 0304 	add.w	r3, r3, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	889a      	ldrh	r2, [r3, #4]
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	4893      	ldr	r0, [pc, #588]	; (8001a24 <main+0xf9c>)
 80017d8:	f001 fc21 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(concatenated);
 80017dc:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80017e0:	f103 0304 	add.w	r3, r3, #4
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	f001 fff9 	bl	80037dc <static_strings_deallocate>
  }

  // test 40

  if(static_strings_contains_string(concatenated,&concatenate_at)){
 80017ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ee:	3b10      	subs	r3, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80017f6:	f103 0304 	add.w	r3, r3, #4
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	f002 f949 	bl	8003a92 <static_strings_contains_string>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <main+0xd8e>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	2203      	movs	r2, #3
 800180c:	4986      	ldr	r1, [pc, #536]	; (8001a28 <main+0xfa0>)
 800180e:	4885      	ldr	r0, [pc, #532]	; (8001a24 <main+0xf9c>)
 8001810:	f001 fc05 	bl	800301e <HAL_UART_Transmit>
 8001814:	e006      	b.n	8001824 <main+0xd9c>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	2203      	movs	r2, #3
 800181c:	4980      	ldr	r1, [pc, #512]	; (8001a20 <main+0xf98>)
 800181e:	4881      	ldr	r0, [pc, #516]	; (8001a24 <main+0xf9c>)
 8001820:	f001 fbfd 	bl	800301e <HAL_UART_Transmit>
  }

  // test 41

  if(static_strings_contains_string(concatenated,&concatenate)){
 8001824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001828:	4619      	mov	r1, r3
 800182a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800182e:	f103 0304 	add.w	r3, r3, #4
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	f002 f92d 	bl	8003a92 <static_strings_contains_string>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <main+0xdc6>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	2203      	movs	r2, #3
 8001844:	4978      	ldr	r1, [pc, #480]	; (8001a28 <main+0xfa0>)
 8001846:	4877      	ldr	r0, [pc, #476]	; (8001a24 <main+0xf9c>)
 8001848:	f001 fbe9 	bl	800301e <HAL_UART_Transmit>
 800184c:	e006      	b.n	800185c <main+0xdd4>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	2203      	movs	r2, #3
 8001854:	4972      	ldr	r1, [pc, #456]	; (8001a20 <main+0xf98>)
 8001856:	4873      	ldr	r0, [pc, #460]	; (8001a24 <main+0xf9c>)
 8001858:	f001 fbe1 	bl	800301e <HAL_UART_Transmit>
  }

  // test 42

  uint8_t non_contained_memory[] = "Hill\0";
 800185c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001860:	3b08      	subs	r3, #8
 8001862:	4a74      	ldr	r2, [pc, #464]	; (8001a34 <main+0xfac>)
 8001864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001868:	6018      	str	r0, [r3, #0]
 800186a:	3304      	adds	r3, #4
 800186c:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor non_contained;
  static_strings_create_custom_string(&non_contained,non_contained_memory);
 800186e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001872:	3a08      	subs	r2, #8
 8001874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001878:	3b10      	subs	r3, #16
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f001 ff90 	bl	80037a2 <static_strings_create_custom_string>
  if(static_strings_contains_string(concatenated,&non_contained)){
 8001882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001886:	3b10      	subs	r3, #16
 8001888:	4619      	mov	r1, r3
 800188a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800188e:	f103 0304 	add.w	r3, r3, #4
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f002 f8fd 	bl	8003a92 <static_strings_contains_string>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <main+0xe26>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	2203      	movs	r2, #3
 80018a4:	4960      	ldr	r1, [pc, #384]	; (8001a28 <main+0xfa0>)
 80018a6:	485f      	ldr	r0, [pc, #380]	; (8001a24 <main+0xf9c>)
 80018a8:	f001 fbb9 	bl	800301e <HAL_UART_Transmit>
 80018ac:	e006      	b.n	80018bc <main+0xe34>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	2203      	movs	r2, #3
 80018b4:	495a      	ldr	r1, [pc, #360]	; (8001a20 <main+0xf98>)
 80018b6:	485b      	ldr	r0, [pc, #364]	; (8001a24 <main+0xf9c>)
 80018b8:	f001 fbb1 	bl	800301e <HAL_UART_Transmit>
  }

  // test 43

  if(static_strings_contains_char(concatenated,'W')){
 80018bc:	2157      	movs	r1, #87	; 0x57
 80018be:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80018c2:	f103 0304 	add.w	r3, r3, #4
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	f002 f92a 	bl	8003b20 <static_strings_contains_char>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <main+0xe5a>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	2203      	movs	r2, #3
 80018d8:	4953      	ldr	r1, [pc, #332]	; (8001a28 <main+0xfa0>)
 80018da:	4852      	ldr	r0, [pc, #328]	; (8001a24 <main+0xf9c>)
 80018dc:	f001 fb9f 	bl	800301e <HAL_UART_Transmit>
 80018e0:	e006      	b.n	80018f0 <main+0xe68>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	2203      	movs	r2, #3
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <main+0xf98>)
 80018ea:	484e      	ldr	r0, [pc, #312]	; (8001a24 <main+0xf9c>)
 80018ec:	f001 fb97 	bl	800301e <HAL_UART_Transmit>
  }

  // test 44

  if(static_strings_contains_char(concatenated,'e')){
 80018f0:	2165      	movs	r1, #101	; 0x65
 80018f2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 80018f6:	f103 0304 	add.w	r3, r3, #4
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f002 f910 	bl	8003b20 <static_strings_contains_char>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <main+0xe8e>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	2203      	movs	r2, #3
 800190c:	4946      	ldr	r1, [pc, #280]	; (8001a28 <main+0xfa0>)
 800190e:	4845      	ldr	r0, [pc, #276]	; (8001a24 <main+0xf9c>)
 8001910:	f001 fb85 	bl	800301e <HAL_UART_Transmit>
 8001914:	e006      	b.n	8001924 <main+0xe9c>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	2203      	movs	r2, #3
 800191c:	4940      	ldr	r1, [pc, #256]	; (8001a20 <main+0xf98>)
 800191e:	4841      	ldr	r0, [pc, #260]	; (8001a24 <main+0xf9c>)
 8001920:	f001 fb7d 	bl	800301e <HAL_UART_Transmit>
  }

  // test 45

  if(static_strings_contains_char(concatenated,'m')){
 8001924:	216d      	movs	r1, #109	; 0x6d
 8001926:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800192a:	f103 0304 	add.w	r3, r3, #4
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	f002 f8f6 	bl	8003b20 <static_strings_contains_char>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <main+0xec2>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	2203      	movs	r2, #3
 8001940:	4939      	ldr	r1, [pc, #228]	; (8001a28 <main+0xfa0>)
 8001942:	4838      	ldr	r0, [pc, #224]	; (8001a24 <main+0xf9c>)
 8001944:	f001 fb6b 	bl	800301e <HAL_UART_Transmit>
 8001948:	e006      	b.n	8001958 <main+0xed0>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	2203      	movs	r2, #3
 8001950:	4933      	ldr	r1, [pc, #204]	; (8001a20 <main+0xf98>)
 8001952:	4834      	ldr	r0, [pc, #208]	; (8001a24 <main+0xf9c>)
 8001954:	f001 fb63 	bl	800301e <HAL_UART_Transmit>
  }

  // test 46

  uint8_t equal_a_memory[] = "Hall\0";
 8001958:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800195c:	3b18      	subs	r3, #24
 800195e:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <main+0xfb0>)
 8001960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001964:	6018      	str	r0, [r3, #0]
 8001966:	3304      	adds	r3, #4
 8001968:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_a;
  uint8_t equal_b_memory[] = "Hall\0";
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	3b08      	subs	r3, #8
 8001970:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <main+0xfb0>)
 8001972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001976:	6018      	str	r0, [r3, #0]
 8001978:	3304      	adds	r3, #4
 800197a:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_b;
  uint8_t non_equal_memory[] = "oil\0";
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	3b18      	subs	r3, #24
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <main+0xfb4>)
 8001984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001988:	6018      	str	r0, [r3, #0]
 800198a:	3304      	adds	r3, #4
 800198c:	7019      	strb	r1, [r3, #0]
  static_strings_string_descriptor non_equal;
  static_strings_create_custom_string(&equal_a,equal_a_memory);
 800198e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001992:	3b18      	subs	r3, #24
 8001994:	f107 0220 	add.w	r2, r7, #32
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f001 ff01 	bl	80037a2 <static_strings_create_custom_string>
  static_strings_create_custom_string(&equal_b,equal_b_memory);
 80019a0:	f107 0220 	add.w	r2, r7, #32
 80019a4:	3a08      	subs	r2, #8
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	3b10      	subs	r3, #16
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 fef7 	bl	80037a2 <static_strings_create_custom_string>
  static_strings_create_custom_string(&non_equal,non_equal_memory);
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	3b18      	subs	r3, #24
 80019ba:	463a      	mov	r2, r7
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f001 feef 	bl	80037a2 <static_strings_create_custom_string>

  if(static_strings_compare(&equal_a,&equal_b)){
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	3b10      	subs	r3, #16
 80019ca:	f107 0220 	add.w	r2, r7, #32
 80019ce:	4619      	mov	r1, r3
 80019d0:	4610      	mov	r0, r2
 80019d2:	f002 f8c7 	bl	8003b64 <static_strings_compare>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <main+0xf64>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	2203      	movs	r2, #3
 80019e2:	4911      	ldr	r1, [pc, #68]	; (8001a28 <main+0xfa0>)
 80019e4:	480f      	ldr	r0, [pc, #60]	; (8001a24 <main+0xf9c>)
 80019e6:	f001 fb1a 	bl	800301e <HAL_UART_Transmit>
 80019ea:	e006      	b.n	80019fa <main+0xf72>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	2203      	movs	r2, #3
 80019f2:	490b      	ldr	r1, [pc, #44]	; (8001a20 <main+0xf98>)
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <main+0xf9c>)
 80019f6:	f001 fb12 	bl	800301e <HAL_UART_Transmit>
  }

  // test 47

  if(static_strings_compare(&equal_a,&non_equal)){
 80019fa:	463a      	mov	r2, r7
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 f8ae 	bl	8003b64 <static_strings_compare>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d018      	beq.n	8001a40 <main+0xfb8>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	2203      	movs	r2, #3
 8001a14:	4904      	ldr	r1, [pc, #16]	; (8001a28 <main+0xfa0>)
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <main+0xf9c>)
 8001a18:	f001 fb01 	bl	800301e <HAL_UART_Transmit>
 8001a1c:	e017      	b.n	8001a4e <main+0xfc6>
 8001a1e:	bf00      	nop
 8001a20:	08005fa4 	.word	0x08005fa4
 8001a24:	20000ca4 	.word	0x20000ca4
 8001a28:	08005fa0 	.word	0x08005fa0
 8001a2c:	08006bd8 	.word	0x08006bd8
 8001a30:	08006be0 	.word	0x08006be0
 8001a34:	08006be8 	.word	0x08006be8
 8001a38:	08006bf0 	.word	0x08006bf0
 8001a3c:	08006bf8 	.word	0x08006bf8
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	2203      	movs	r2, #3
 8001a46:	49ce      	ldr	r1, [pc, #824]	; (8001d80 <main+0x12f8>)
 8001a48:	48ce      	ldr	r0, [pc, #824]	; (8001d84 <main+0x12fc>)
 8001a4a:	f001 fae8 	bl	800301e <HAL_UART_Transmit>
  }

  // test 48

  static_strings_string_descriptor *var_string;
  uint8_t uint8 = 200;
 8001a4e:	23c8      	movs	r3, #200	; 0xc8
 8001a50:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001a54:	f102 0203 	add.w	r2, r2, #3
 8001a58:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_uint8_to_string(uint8);
 8001a5a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001a5e:	f103 0303 	add.w	r3, r3, #3
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 f8ab 	bl	8003bc0 <static_strings_uint8_to_string>
 8001a6a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a6e:	f103 031c 	add.w	r3, r3, #28
 8001a72:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001a74:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a78:	f103 031c 	add.w	r3, r3, #28
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d017      	beq.n	8001ab2 <main+0x102a>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001a82:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a86:	f103 031c 	add.w	r3, r3, #28
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001a92:	f103 031c 	add.w	r3, r3, #28
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	889a      	ldrh	r2, [r3, #4]
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	48b9      	ldr	r0, [pc, #740]	; (8001d84 <main+0x12fc>)
 8001aa0:	f001 fabd 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001aa4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001aa8:	f103 031c 	add.w	r3, r3, #28
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f001 fe95 	bl	80037dc <static_strings_deallocate>
  }

  // test 49

  uint16_t uint16 = 64200;
 8001ab2:	f64f 23c8 	movw	r3, #64200	; 0xfac8
 8001ab6:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001aba:	f102 021a 	add.w	r2, r2, #26
 8001abe:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_uint16_to_string(uint16);
 8001ac0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ac4:	f103 031a 	add.w	r3, r3, #26
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 f8ac 	bl	8003c28 <static_strings_uint16_to_string>
 8001ad0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ad4:	f103 031c 	add.w	r3, r3, #28
 8001ad8:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001ada:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ade:	f103 031c 	add.w	r3, r3, #28
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d017      	beq.n	8001b18 <main+0x1090>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001ae8:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001aec:	f103 031c 	add.w	r3, r3, #28
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001af8:	f103 031c 	add.w	r3, r3, #28
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	889a      	ldrh	r2, [r3, #4]
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	489f      	ldr	r0, [pc, #636]	; (8001d84 <main+0x12fc>)
 8001b06:	f001 fa8a 	bl	800301e <HAL_UART_Transmit>
	  static_strings_deallocate(var_string);
 8001b0a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b0e:	f103 031c 	add.w	r3, r3, #28
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f001 fe62 	bl	80037dc <static_strings_deallocate>
  }

  // test 50

  uint32_t uint32 = 1000064200;
 8001b18:	4b9b      	ldr	r3, [pc, #620]	; (8001d88 <main+0x1300>)
 8001b1a:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001b1e:	f102 0214 	add.w	r2, r2, #20
 8001b22:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(uint32);
 8001b24:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b28:	f103 0314 	add.w	r3, r3, #20
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f002 f8af 	bl	8003c90 <static_strings_uint32_to_string>
 8001b32:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b36:	f103 031c 	add.w	r3, r3, #28
 8001b3a:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001b3c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b40:	f103 031c 	add.w	r3, r3, #28
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d017      	beq.n	8001b7a <main+0x10f2>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b4a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b4e:	f103 031c 	add.w	r3, r3, #28
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6819      	ldr	r1, [r3, #0]
 8001b56:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b5a:	f103 031c 	add.w	r3, r3, #28
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	889a      	ldrh	r2, [r3, #4]
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	4887      	ldr	r0, [pc, #540]	; (8001d84 <main+0x12fc>)
 8001b68:	f001 fa59 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001b6c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b70:	f103 031c 	add.w	r3, r3, #28
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	f001 fe31 	bl	80037dc <static_strings_deallocate>
  }

  // test 51

  int8_t int8 = 100;
 8001b7a:	2364      	movs	r3, #100	; 0x64
 8001b7c:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001b80:	f102 0213 	add.w	r2, r2, #19
 8001b84:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_int8_to_string(int8);
 8001b86:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b8a:	f103 0313 	add.w	r3, r3, #19
 8001b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 f8ae 	bl	8003cf4 <static_strings_int8_to_string>
 8001b98:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001b9c:	f103 031c 	add.w	r3, r3, #28
 8001ba0:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001ba2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ba6:	f103 031c 	add.w	r3, r3, #28
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d017      	beq.n	8001be0 <main+0x1158>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001bb0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bb4:	f103 031c 	add.w	r3, r3, #28
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bc0:	f103 031c 	add.w	r3, r3, #28
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	889a      	ldrh	r2, [r3, #4]
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	486d      	ldr	r0, [pc, #436]	; (8001d84 <main+0x12fc>)
 8001bce:	f001 fa26 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001bd2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bd6:	f103 031c 	add.w	r3, r3, #28
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	f001 fdfe 	bl	80037dc <static_strings_deallocate>
  }

  // test 52

  int16_t int16 = -32100;
 8001be0:	f248 239c 	movw	r3, #33436	; 0x829c
 8001be4:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001be8:	f102 0210 	add.w	r2, r2, #16
 8001bec:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_int16_to_string(int16);
 8001bee:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001bf2:	f103 0310 	add.w	r3, r3, #16
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 f8ae 	bl	8003d5c <static_strings_int16_to_string>
 8001c00:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c04:	f103 031c 	add.w	r3, r3, #28
 8001c08:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c0a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c0e:	f103 031c 	add.w	r3, r3, #28
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d017      	beq.n	8001c48 <main+0x11c0>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c18:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c1c:	f103 031c 	add.w	r3, r3, #28
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c28:	f103 031c 	add.w	r3, r3, #28
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	889a      	ldrh	r2, [r3, #4]
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	4853      	ldr	r0, [pc, #332]	; (8001d84 <main+0x12fc>)
 8001c36:	f001 f9f2 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001c3a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c3e:	f103 031c 	add.w	r3, r3, #28
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	f001 fdca 	bl	80037dc <static_strings_deallocate>
  }

  // test 53

  int32_t int32 = 500032100;
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <main+0x1304>)
 8001c4a:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001c4e:	f102 020c 	add.w	r2, r2, #12
 8001c52:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(int32);
 8001c54:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c58:	f103 030c 	add.w	r3, r3, #12
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 f816 	bl	8003c90 <static_strings_uint32_to_string>
 8001c64:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c68:	f103 031c 	add.w	r3, r3, #28
 8001c6c:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c6e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c72:	f103 031c 	add.w	r3, r3, #28
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d017      	beq.n	8001cac <main+0x1224>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c7c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c80:	f103 031c 	add.w	r3, r3, #28
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001c8c:	f103 031c 	add.w	r3, r3, #28
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	889a      	ldrh	r2, [r3, #4]
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	483a      	ldr	r0, [pc, #232]	; (8001d84 <main+0x12fc>)
 8001c9a:	f001 f9c0 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001c9e:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ca2:	f103 031c 	add.w	r3, r3, #28
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	f001 fd98 	bl	80037dc <static_strings_deallocate>
  }

  // test 54

  float float_number = 19.60232;
 8001cac:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <main+0x1308>)
 8001cae:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001cb2:	f102 0208 	add.w	r2, r2, #8
 8001cb6:	6013      	str	r3, [r2, #0]
  var_string = static_strings_float_to_string(float_number);
 8001cb8:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001cbc:	f103 0308 	add.w	r3, r3, #8
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f002 f87f 	bl	8003dc4 <static_strings_float_to_string>
 8001cc6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001cca:	f103 031c 	add.w	r3, r3, #28
 8001cce:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001cd0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001cd4:	f103 031c 	add.w	r3, r3, #28
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d017      	beq.n	8001d0e <main+0x1286>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001cde:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ce2:	f103 031c 	add.w	r3, r3, #28
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001cee:	f103 031c 	add.w	r3, r3, #28
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	889a      	ldrh	r2, [r3, #4]
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	4822      	ldr	r0, [pc, #136]	; (8001d84 <main+0x12fc>)
 8001cfc:	f001 f98f 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001d00:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d04:	f103 031c 	add.w	r3, r3, #28
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f001 fd67 	bl	80037dc <static_strings_deallocate>
  }

  // test 55

  double double_number = -1924.2342;
 8001d0e:	a41a      	add	r4, pc, #104	; (adr r4, 8001d78 <main+0x12f0>)
 8001d10:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d14:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 8001d18:	e9c2 3400 	strd	r3, r4, [r2]
  var_string = static_strings_double_to_string(double_number);
 8001d1c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d24:	f002 f886 	bl	8003e34 <static_strings_double_to_string>
 8001d28:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d2c:	f103 031c 	add.w	r3, r3, #28
 8001d30:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001d32:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d36:	f103 031c 	add.w	r3, r3, #28
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <main+0x12e8>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001d40:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d44:	f103 031c 	add.w	r3, r3, #28
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d50:	f103 031c 	add.w	r3, r3, #28
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	889a      	ldrh	r2, [r3, #4]
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <main+0x12fc>)
 8001d5e:	f001 f95e 	bl	800301e <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001d62:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001d66:	f103 031c 	add.w	r3, r3, #28
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f001 fd36 	bl	80037dc <static_strings_deallocate>
  }

  // test 56

  static_strings_string_descriptor *copy_test_source_string = static_strings_save((uint8_t *)"I am a copy test\r\n");
 8001d70:	4808      	ldr	r0, [pc, #32]	; (8001d94 <main+0x130c>)
 8001d72:	f001 fcef 	bl	8003754 <static_strings_save>
 8001d76:	e00f      	b.n	8001d98 <main+0x1310>
 8001d78:	d21ff2e5 	.word	0xd21ff2e5
 8001d7c:	c09e10ef 	.word	0xc09e10ef
 8001d80:	08005fa4 	.word	0x08005fa4
 8001d84:	20000ca4 	.word	0x20000ca4
 8001d88:	3b9bc4c8 	.word	0x3b9bc4c8
 8001d8c:	1dcde264 	.word	0x1dcde264
 8001d90:	419cd18d 	.word	0x419cd18d
 8001d94:	08005fa8 	.word	0x08005fa8
 8001d98:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001d9c:	f103 031c 	add.w	r3, r3, #28
 8001da0:	6018      	str	r0, [r3, #0]
  if(copy_test_source_string != NULL){
 8001da2:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001da6:	f103 031c 	add.w	r3, r3, #28
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d046      	beq.n	8001e3e <main+0x13b6>
	  static_strings_string_descriptor *copy_test_target_string = static_strings_allocate(100);
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	f001 fc15 	bl	80035e0 <static_strings_allocate>
 8001db6:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001dba:	f103 0318 	add.w	r3, r3, #24
 8001dbe:	6018      	str	r0, [r3, #0]
	  if(static_strings_copy(copy_test_target_string,copy_test_source_string,0) != NULL){
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001dc6:	f103 031c 	add.w	r3, r3, #28
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001dd0:	f103 0318 	add.w	r3, r3, #24
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	f001 fbc7 	bl	8003568 <static_strings_copy>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01f      	beq.n	8001e20 <main+0x1398>
		  HAL_UART_Transmit(&huart1,copy_test_target_string->string,copy_test_target_string->length,HAL_MAX_DELAY);
 8001de0:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001de4:	f103 0318 	add.w	r3, r3, #24
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001df0:	f103 0318 	add.w	r3, r3, #24
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	889a      	ldrh	r2, [r3, #4]
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	4817      	ldr	r0, [pc, #92]	; (8001e5c <main+0x13d4>)
 8001dfe:	f001 f90e 	bl	800301e <HAL_UART_Transmit>
		  static_strings_deallocate(copy_test_source_string);
 8001e02:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001e06:	f103 031c 	add.w	r3, r3, #28
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	f001 fce6 	bl	80037dc <static_strings_deallocate>
		  static_strings_deallocate(copy_test_target_string);
 8001e10:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8001e14:	f103 0318 	add.w	r3, r3, #24
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f001 fcdf 	bl	80037dc <static_strings_deallocate>
 8001e1e:	e01c      	b.n	8001e5a <main+0x13d2>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	2208      	movs	r2, #8
 8001e26:	490e      	ldr	r1, [pc, #56]	; (8001e60 <main+0x13d8>)
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <main+0x13d4>)
 8001e2a:	f001 f8f8 	bl	800301e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	2201      	movs	r2, #1
 8001e34:	490b      	ldr	r1, [pc, #44]	; (8001e64 <main+0x13dc>)
 8001e36:	4809      	ldr	r0, [pc, #36]	; (8001e5c <main+0x13d4>)
 8001e38:	f001 f8f1 	bl	800301e <HAL_UART_Transmit>
 8001e3c:	e00d      	b.n	8001e5a <main+0x13d2>
	  }
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	2208      	movs	r2, #8
 8001e44:	4908      	ldr	r1, [pc, #32]	; (8001e68 <main+0x13e0>)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <main+0x13d4>)
 8001e48:	f001 f8e9 	bl	800301e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	2201      	movs	r2, #1
 8001e52:	4904      	ldr	r1, [pc, #16]	; (8001e64 <main+0x13dc>)
 8001e54:	4801      	ldr	r0, [pc, #4]	; (8001e5c <main+0x13d4>)
 8001e56:	f001 f8e2 	bl	800301e <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <main+0x13d2>
 8001e5c:	20000ca4 	.word	0x20000ca4
 8001e60:	08005fbc 	.word	0x08005fbc
 8001e64:	20000664 	.word	0x20000664
 8001e68:	08005fc8 	.word	0x08005fc8

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b090      	sub	sp, #64	; 0x40
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	2228      	movs	r2, #40	; 0x28
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 f843 	bl	8003f06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eaa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fc49 	bl	800274c <HAL_RCC_OscConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ec0:	f000 f866 	bl	8001f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 feb4 	bl	8002c4c <HAL_RCC_ClockConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001eea:	f000 f851 	bl	8001f90 <Error_Handler>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3740      	adds	r7, #64	; 0x40
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <MX_USART1_UART_Init+0x50>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_USART1_UART_Init+0x4c>)
 8001f30:	f001 f828 	bl	8002f84 <HAL_UART_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f3a:	f000 f829 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000ca4 	.word	0x20000ca4
 8001f48:	40013800 	.word	0x40013800

08001f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_GPIO_Init+0x40>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <MX_GPIO_Init+0x40>)
 8001f58:	f043 0320 	orr.w	r3, r3, #32
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_GPIO_Init+0x40>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_GPIO_Init+0x40>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <MX_GPIO_Init+0x40>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6193      	str	r3, [r2, #24]
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <MX_GPIO_Init+0x40>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]

}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40021000 	.word	0x40021000

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_MspInit+0x5c>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_MspInit+0x5c>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6193      	str	r3, [r2, #24]
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_MspInit+0x5c>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_MspInit+0x5c>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <HAL_MspInit+0x5c>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_MspInit+0x5c>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_MspInit+0x60>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_MspInit+0x60>)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_UART_MspInit+0x8c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d131      	bne.n	8002084 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_UART_MspInit+0x90>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_UART_MspInit+0x90>)
 8002026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_UART_MspInit+0x90>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_UART_MspInit+0x90>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_UART_MspInit+0x90>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_UART_MspInit+0x90>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4619      	mov	r1, r3
 8002064:	480b      	ldr	r0, [pc, #44]	; (8002094 <HAL_UART_MspInit+0x94>)
 8002066:	f000 fa17 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800206a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4619      	mov	r1, r3
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_UART_MspInit+0x94>)
 8002080:	f000 fa0a 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40013800 	.word	0x40013800
 8002090:	40021000 	.word	0x40021000
 8002094:	40010800 	.word	0x40010800

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <HardFault_Handler+0x4>

080020aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <MemManage_Handler+0x4>

080020b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <BusFault_Handler+0x4>

080020b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <UsageFault_Handler+0x4>

080020bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 f8d8 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f001 febe 	bl	8003e9c <__errno>
 8002120:	4602      	mov	r2, r0
 8002122:	230c      	movs	r3, #12
 8002124:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20005000 	.word	0x20005000
 800214c:	00000400 	.word	0x00000400
 8002150:	200001f8 	.word	0x200001f8
 8002154:	20000eb8 	.word	0x20000eb8

08002158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <SystemInit+0x5c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <SystemInit+0x5c>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <SystemInit+0x5c>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4911      	ldr	r1, [pc, #68]	; (80021b4 <SystemInit+0x5c>)
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <SystemInit+0x60>)
 8002170:	4013      	ands	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <SystemInit+0x5c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <SystemInit+0x5c>)
 800217a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <SystemInit+0x5c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SystemInit+0x5c>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <SystemInit+0x5c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <SystemInit+0x5c>)
 8002196:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800219a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SystemInit+0x5c>)
 800219e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SystemInit+0x64>)
 80021a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	40021000 	.word	0x40021000
 80021b8:	f8ff0000 	.word	0xf8ff0000
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021c2:	e003      	b.n	80021cc <LoopCopyDataInit>

080021c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021ca:	3104      	adds	r1, #4

080021cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021cc:	480a      	ldr	r0, [pc, #40]	; (80021f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021d4:	d3f6      	bcc.n	80021c4 <CopyDataInit>
  ldr r2, =_sbss
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021d8:	e002      	b.n	80021e0 <LoopFillZerobss>

080021da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021dc:	f842 3b04 	str.w	r3, [r2], #4

080021e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021e4:	d3f9      	bcc.n	80021da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021e6:	f7ff ffb7 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ea:	f001 fe5d 	bl	8003ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ee:	f7fe fc4b 	bl	8000a88 <main>
  bx lr
 80021f2:	4770      	bx	lr
  ldr r3, =_sidata
 80021f4:	08006eb0 	.word	0x08006eb0
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002200:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002204:	20000eb4 	.word	0x20000eb4

08002208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC1_2_IRQHandler>
	...

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_Init+0x28>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_Init+0x28>)
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 f907 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f808 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff feb8 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40022000 	.word	0x40022000

08002238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_InitTick+0x54>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_InitTick+0x58>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f911 	bl	800247e <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00e      	b.n	8002284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d80a      	bhi.n	8002282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f000 f8e7 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <HAL_InitTick+0x5c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	20000008 	.word	0x20000008
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_IncTick+0x1c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_IncTick+0x20>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <HAL_IncTick+0x20>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000008 	.word	0x20000008
 80022b8:	20000eac 	.word	0x20000eac

080022bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b02      	ldr	r3, [pc, #8]	; (80022cc <HAL_GetTick+0x10>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000eac 	.word	0x20000eac

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff90 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff49 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff5e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff90 	bl	8002388 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5f 	bl	8002334 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffb0 	bl	80023ec <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	; 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e127      	b.n	80026fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ac:	2201      	movs	r2, #1
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8116 	bne.w	80026f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d034      	beq.n	800253c <HAL_GPIO_Init+0xa4>
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d80d      	bhi.n	80024f2 <HAL_GPIO_Init+0x5a>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d02b      	beq.n	8002532 <HAL_GPIO_Init+0x9a>
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d804      	bhi.n	80024e8 <HAL_GPIO_Init+0x50>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d031      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d01c      	beq.n	8002520 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024e6:	e048      	b.n	800257a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d043      	beq.n	8002574 <HAL_GPIO_Init+0xdc>
 80024ec:	2b11      	cmp	r3, #17
 80024ee:	d01b      	beq.n	8002528 <HAL_GPIO_Init+0x90>
          break;
 80024f0:	e043      	b.n	800257a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024f2:	4a89      	ldr	r2, [pc, #548]	; (8002718 <HAL_GPIO_Init+0x280>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d026      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 80024f8:	4a87      	ldr	r2, [pc, #540]	; (8002718 <HAL_GPIO_Init+0x280>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d806      	bhi.n	800250c <HAL_GPIO_Init+0x74>
 80024fe:	4a87      	ldr	r2, [pc, #540]	; (800271c <HAL_GPIO_Init+0x284>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d020      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 8002504:	4a86      	ldr	r2, [pc, #536]	; (8002720 <HAL_GPIO_Init+0x288>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01d      	beq.n	8002546 <HAL_GPIO_Init+0xae>
          break;
 800250a:	e036      	b.n	800257a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800250c:	4a85      	ldr	r2, [pc, #532]	; (8002724 <HAL_GPIO_Init+0x28c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 8002512:	4a85      	ldr	r2, [pc, #532]	; (8002728 <HAL_GPIO_Init+0x290>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d016      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 8002518:	4a84      	ldr	r2, [pc, #528]	; (800272c <HAL_GPIO_Init+0x294>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0xae>
          break;
 800251e:	e02c      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	623b      	str	r3, [r7, #32]
          break;
 8002526:	e028      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	3304      	adds	r3, #4
 800252e:	623b      	str	r3, [r7, #32]
          break;
 8002530:	e023      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	3308      	adds	r3, #8
 8002538:	623b      	str	r3, [r7, #32]
          break;
 800253a:	e01e      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	330c      	adds	r3, #12
 8002542:	623b      	str	r3, [r7, #32]
          break;
 8002544:	e019      	b.n	800257a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800254e:	2304      	movs	r3, #4
 8002550:	623b      	str	r3, [r7, #32]
          break;
 8002552:	e012      	b.n	800257a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800255c:	2308      	movs	r3, #8
 800255e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	611a      	str	r2, [r3, #16]
          break;
 8002566:	e008      	b.n	800257a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002568:	2308      	movs	r3, #8
 800256a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	615a      	str	r2, [r3, #20]
          break;
 8002572:	e002      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
          break;
 8002578:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2bff      	cmp	r3, #255	; 0xff
 800257e:	d801      	bhi.n	8002584 <HAL_GPIO_Init+0xec>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	e001      	b.n	8002588 <HAL_GPIO_Init+0xf0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2bff      	cmp	r3, #255	; 0xff
 800258e:	d802      	bhi.n	8002596 <HAL_GPIO_Init+0xfe>
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x104>
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	3b08      	subs	r3, #8
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	210f      	movs	r1, #15
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8096 	beq.w	80026f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ca:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_GPIO_Init+0x298>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_GPIO_Init+0x298>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6193      	str	r3, [r2, #24]
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <HAL_GPIO_Init+0x298>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e2:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_GPIO_Init+0x29c>)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4b      	ldr	r2, [pc, #300]	; (8002738 <HAL_GPIO_Init+0x2a0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_GPIO_Init+0x19e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4a      	ldr	r2, [pc, #296]	; (800273c <HAL_GPIO_Init+0x2a4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00d      	beq.n	8002632 <HAL_GPIO_Init+0x19a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a49      	ldr	r2, [pc, #292]	; (8002740 <HAL_GPIO_Init+0x2a8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <HAL_GPIO_Init+0x196>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a48      	ldr	r2, [pc, #288]	; (8002744 <HAL_GPIO_Init+0x2ac>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_GPIO_Init+0x192>
 8002626:	2303      	movs	r3, #3
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x1a0>
 800262a:	2304      	movs	r3, #4
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x1a0>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x1a0>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x1a0>
 8002636:	2300      	movs	r3, #0
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002648:	493a      	ldr	r1, [pc, #232]	; (8002734 <HAL_GPIO_Init+0x29c>)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002662:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4938      	ldr	r1, [pc, #224]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
 800266e:	e006      	b.n	800267e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002670:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	43db      	mvns	r3, r3
 8002678:	4933      	ldr	r1, [pc, #204]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 800267a:	4013      	ands	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	492e      	ldr	r1, [pc, #184]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	43db      	mvns	r3, r3
 80026a0:	4929      	ldr	r1, [pc, #164]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b2:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	4924      	ldr	r1, [pc, #144]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
 80026be:	e006      	b.n	80026ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	491f      	ldr	r1, [pc, #124]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	491a      	ldr	r1, [pc, #104]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60cb      	str	r3, [r1, #12]
 80026e6:	e006      	b.n	80026f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	4915      	ldr	r1, [pc, #84]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	3301      	adds	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	f47f aed0 	bne.w	80024ac <HAL_GPIO_Init+0x14>
  }
}
 800270c:	bf00      	nop
 800270e:	372c      	adds	r7, #44	; 0x2c
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	10210000 	.word	0x10210000
 800271c:	10110000 	.word	0x10110000
 8002720:	10120000 	.word	0x10120000
 8002724:	10310000 	.word	0x10310000
 8002728:	10320000 	.word	0x10320000
 800272c:	10220000 	.word	0x10220000
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e26c      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8087 	beq.w	800287a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800276c:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00c      	beq.n	8002792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002778:	4b8f      	ldr	r3, [pc, #572]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d112      	bne.n	80027aa <HAL_RCC_OscConfig+0x5e>
 8002784:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d10b      	bne.n	80027aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002792:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d06c      	beq.n	8002878 <HAL_RCC_OscConfig+0x12c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d168      	bne.n	8002878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e246      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x76>
 80027b4:	4b80      	ldr	r3, [pc, #512]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a7f      	ldr	r2, [pc, #508]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e02e      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a7a      	ldr	r2, [pc, #488]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b78      	ldr	r3, [pc, #480]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a77      	ldr	r2, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0xbc>
 80027ee:	4b72      	ldr	r3, [pc, #456]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a71      	ldr	r2, [pc, #452]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6e      	ldr	r2, [pc, #440]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xd4>
 8002808:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a67      	ldr	r2, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fd48 	bl	80022bc <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff fd44 	bl	80022bc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1fa      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xe4>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fd34 	bl	80022bc <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff fd30 	bl	80022bc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1e6      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x10c>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002886:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x18c>
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x176>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1ba      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4939      	ldr	r1, [pc, #228]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff fce9 	bl	80022bc <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff fce5 	bl	80022bc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e19b      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4927      	ldr	r1, [pc, #156]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fcc8 	bl	80022bc <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff fcc4 	bl	80022bc <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e17a      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03a      	beq.n	80029d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d019      	beq.n	8002996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_RCC_OscConfig+0x274>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7ff fca8 	bl	80022bc <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7ff fca4 	bl	80022bc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e15a      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800298e:	2001      	movs	r0, #1
 8002990:	f000 fada 	bl	8002f48 <RCC_Delay>
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_RCC_OscConfig+0x274>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7ff fc8e 	bl	80022bc <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7ff fc8a 	bl	80022bc <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d908      	bls.n	80029c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e140      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	42420000 	.word	0x42420000
 80029c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	4b9e      	ldr	r3, [pc, #632]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e9      	bne.n	80029a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a6 	beq.w	8002b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b97      	ldr	r3, [pc, #604]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b94      	ldr	r3, [pc, #592]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a93      	ldr	r2, [pc, #588]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b8e      	ldr	r3, [pc, #568]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b8b      	ldr	r3, [pc, #556]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a8a      	ldr	r2, [pc, #552]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7ff fc4b 	bl	80022bc <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7ff fc47 	bl	80022bc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0fd      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x312>
 8002a50:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a7a      	ldr	r2, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	e02d      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x334>
 8002a66:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a75      	ldr	r2, [pc, #468]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a72      	ldr	r2, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6213      	str	r3, [r2, #32]
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x356>
 8002a88:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a6c      	ldr	r2, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x36e>
 8002aa2:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6213      	str	r3, [r2, #32]
 8002aae:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a63      	ldr	r2, [pc, #396]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fbfb 	bl	80022bc <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7ff fbf7 	bl	80022bc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0ab      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x37e>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fbe5 	bl	80022bc <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7ff fbe1 	bl	80022bc <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e095      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a47      	ldr	r2, [pc, #284]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8081 	beq.w	8002c36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b34:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d061      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d146      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_OscConfig+0x4fc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff fbb5 	bl	80022bc <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7ff fbb1 	bl	80022bc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e067      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	492d      	ldr	r1, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a19      	ldr	r1, [r3, #32]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	4927      	ldr	r1, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x4fc>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7ff fb85 	bl	80022bc <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7ff fb81 	bl	80022bc <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e037      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x46a>
 8002bd4:	e02f      	b.n	8002c36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_RCC_OscConfig+0x4fc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7ff fb6e 	bl	80022bc <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7ff fb6a 	bl	80022bc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e020      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x498>
 8002c02:	e018      	b.n	8002c36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e013      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42420060 	.word	0x42420060

08002c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0d0      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 0207 	bic.w	r2, r3, #7
 8002c76:	4965      	ldr	r1, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d040      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e073      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06b      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4936      	ldr	r1, [pc, #216]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7ff fabe 	bl	80022bc <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7ff faba 	bl	80022bc <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e053      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d210      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0207 	bic.w	r2, r3, #7
 8002d82:	4922      	ldr	r1, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4601      	mov	r1, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	5cd3      	ldrb	r3, [r2, r3]
 8002dee:	fa21 f303 	lsr.w	r3, r1, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1cc>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1d0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fa1c 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08006c34 	.word	0x08006c34
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b490      	push	{r4, r7}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e26:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e28:	1d3c      	adds	r4, r7, #4
 8002e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e30:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e4a:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x46>
 8002e5e:	e02d      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e62:	623b      	str	r3, [r7, #32]
      break;
 8002e64:	e02d      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	0c9b      	lsrs	r3, r3, #18
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e72:	4413      	add	r3, r2
 8002e74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e84:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c5b      	lsrs	r3, r3, #17
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e92:	4413      	add	r3, r2
 8002e94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e9e:	fb02 f203 	mul.w	r2, r2, r3
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	e004      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	623b      	str	r3, [r7, #32]
      break;
 8002eba:	e002      	b.n	8002ec2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ebe:	623b      	str	r3, [r7, #32]
      break;
 8002ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3728      	adds	r7, #40	; 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc90      	pop	{r4, r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	08006c00 	.word	0x08006c00
 8002ed4:	08006c10 	.word	0x08006c10
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	007a1200 	.word	0x007a1200
 8002ee0:	003d0900 	.word	0x003d0900

08002ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b02      	ldr	r3, [pc, #8]	; (8002ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002efc:	f7ff fff2 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f00:	4601      	mov	r1, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	08006c44 	.word	0x08006c44

08002f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f24:	f7ff ffde 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f28:	4601      	mov	r1, r0
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	0adb      	lsrs	r3, r3, #11
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4a03      	ldr	r2, [pc, #12]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08006c44 	.word	0x08006c44

08002f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <RCC_Delay+0x34>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <RCC_Delay+0x38>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0a5b      	lsrs	r3, r3, #9
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f64:	bf00      	nop
  }
  while (Delay --);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e5a      	subs	r2, r3, #1
 8002f6a:	60fa      	str	r2, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <RCC_Delay+0x1c>
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	10624dd3 	.word	0x10624dd3

08002f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e03f      	b.n	8003016 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff f828 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f90b 	bl	80031e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b088      	sub	sp, #32
 8003022:	af02      	add	r7, sp, #8
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 8083 	bne.w	8003146 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_UART_Transmit+0x2e>
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e07b      	b.n	8003148 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_UART_Transmit+0x40>
 800305a:	2302      	movs	r3, #2
 800305c:	e074      	b.n	8003148 <HAL_UART_Transmit+0x12a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2221      	movs	r2, #33	; 0x21
 8003070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003074:	f7ff f922 	bl	80022bc <HAL_GetTick>
 8003078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003086:	e042      	b.n	800310e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d122      	bne.n	80030e6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2200      	movs	r2, #0
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f850 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e046      	b.n	8003148 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3302      	adds	r3, #2
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	e017      	b.n	800310e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	e013      	b.n	800310e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f82d 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e023      	b.n	8003148 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	60ba      	str	r2, [r7, #8]
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1b7      	bne.n	8003088 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2200      	movs	r2, #0
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f814 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e00a      	b.n	8003148 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003160:	e02c      	b.n	80031bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d028      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <UART_WaitOnFlagUntilTimeout+0x30>
 8003170:	f7ff f8a4 	bl	80022bc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	429a      	cmp	r2, r3
 800317e:	d21d      	bcs.n	80031bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800318e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e00f      	b.n	80031dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d0c3      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800321e:	f023 030c 	bic.w	r3, r3, #12
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	430b      	orrs	r3, r1
 800322a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a52      	ldr	r2, [pc, #328]	; (8003390 <UART_SetConfig+0x1ac>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d14e      	bne.n	80032ea <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7ff fe68 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 8003250:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <UART_SetConfig+0x1b0>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	0119      	lsls	r1, r3, #4
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009a      	lsls	r2, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	4b42      	ldr	r3, [pc, #264]	; (8003394 <UART_SetConfig+0x1b0>)
 800328a:	fba3 0302 	umull	r0, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2064      	movs	r0, #100	; 0x64
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	3332      	adds	r3, #50	; 0x32
 800329c:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <UART_SetConfig+0x1b0>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	4419      	add	r1, r3
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b34      	ldr	r3, [pc, #208]	; (8003394 <UART_SetConfig+0x1b0>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a2f      	ldr	r2, [pc, #188]	; (8003394 <UART_SetConfig+0x1b0>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	440a      	add	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80032e8:	e04d      	b.n	8003386 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80032ea:	f7ff fe05 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80032ee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009a      	lsls	r2, r3, #2
 80032fa:	441a      	add	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	4a23      	ldr	r2, [pc, #140]	; (8003394 <UART_SetConfig+0x1b0>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	0119      	lsls	r1, r3, #4
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009a      	lsls	r2, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	fbb2 f2f3 	udiv	r2, r2, r3
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <UART_SetConfig+0x1b0>)
 8003328:	fba3 0302 	umull	r0, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2064      	movs	r0, #100	; 0x64
 8003330:	fb00 f303 	mul.w	r3, r0, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	3332      	adds	r3, #50	; 0x32
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <UART_SetConfig+0x1b0>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003346:	4419      	add	r1, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fbb2 f2f3 	udiv	r2, r2, r3
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <UART_SetConfig+0x1b0>)
 8003360:	fba3 0302 	umull	r0, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2064      	movs	r0, #100	; 0x64
 8003368:	fb00 f303 	mul.w	r3, r0, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <UART_SetConfig+0x1b0>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	440a      	add	r2, r1
 8003384:	609a      	str	r2, [r3, #8]
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40013800 	.word	0x40013800
 8003394:	51eb851f 	.word	0x51eb851f

08003398 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	e018      	b.n	80033d6 <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2232      	movs	r2, #50	; 0x32
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	4a4d      	ldr	r2, [pc, #308]	; (80034e4 <static_strings_init+0x14c>)
 80033ae:	441a      	add	r2, r3
 80033b0:	494d      	ldr	r1, [pc, #308]	; (80034e8 <static_strings_init+0x150>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 80033b8:	4a4b      	ldr	r2, [pc, #300]	; (80034e8 <static_strings_init+0x150>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	2200      	movs	r2, #0
 80033c2:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80033c4:	4a48      	ldr	r2, [pc, #288]	; (80034e8 <static_strings_init+0x150>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	2200      	movs	r2, #0
 80033ce:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3301      	adds	r3, #1
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b09      	cmp	r3, #9
 80033da:	dde3      	ble.n	80033a4 <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	e018      	b.n	8003414 <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2264      	movs	r2, #100	; 0x64
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	4a40      	ldr	r2, [pc, #256]	; (80034ec <static_strings_init+0x154>)
 80033ec:	441a      	add	r2, r3
 80033ee:	4940      	ldr	r1, [pc, #256]	; (80034f0 <static_strings_init+0x158>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 80033f6:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <static_strings_init+0x158>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	2201      	movs	r2, #1
 8003400:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <static_strings_init+0x158>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	2200      	movs	r2, #0
 800340c:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3301      	adds	r3, #1
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b05      	cmp	r3, #5
 8003418:	dde3      	ble.n	80033e2 <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	e018      	b.n	8003452 <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	22c8      	movs	r2, #200	; 0xc8
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <static_strings_init+0x15c>)
 800342a:	441a      	add	r2, r3
 800342c:	4932      	ldr	r1, [pc, #200]	; (80034f8 <static_strings_init+0x160>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 8003434:	4a30      	ldr	r2, [pc, #192]	; (80034f8 <static_strings_init+0x160>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	2202      	movs	r2, #2
 800343e:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003440:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <static_strings_init+0x160>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	2200      	movs	r2, #0
 800344a:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3301      	adds	r3, #1
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b01      	cmp	r3, #1
 8003456:	dde3      	ble.n	8003420 <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	e019      	b.n	8003492 <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	4a24      	ldr	r2, [pc, #144]	; (80034fc <static_strings_init+0x164>)
 800346a:	441a      	add	r2, r3
 800346c:	4924      	ldr	r1, [pc, #144]	; (8003500 <static_strings_init+0x168>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <static_strings_init+0x168>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	2203      	movs	r2, #3
 800347e:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003480:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <static_strings_init+0x168>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	2200      	movs	r2, #0
 800348a:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3301      	adds	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dde2      	ble.n	800345e <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003498:	2300      	movs	r3, #0
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	e019      	b.n	80034d2 <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	4a16      	ldr	r2, [pc, #88]	; (8003504 <static_strings_init+0x16c>)
 80034aa:	441a      	add	r2, r3
 80034ac:	4916      	ldr	r1, [pc, #88]	; (8003508 <static_strings_init+0x170>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 80034b4:	4a14      	ldr	r2, [pc, #80]	; (8003508 <static_strings_init+0x170>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	2204      	movs	r2, #4
 80034be:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80034c0:	4a11      	ldr	r2, [pc, #68]	; (8003508 <static_strings_init+0x170>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	2200      	movs	r2, #0
 80034ca:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3301      	adds	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	dde2      	ble.n	800349e <static_strings_init+0x106>
	}
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000470 	.word	0x20000470
 80034e8:	20000a60 	.word	0x20000a60
 80034ec:	20000218 	.word	0x20000218
 80034f0:	20000e74 	.word	0x20000e74
 80034f4:	20000ce4 	.word	0x20000ce4
 80034f8:	20000a50 	.word	0x20000a50
 80034fc:	20000ab0 	.word	0x20000ab0
 8003500:	20000ea4 	.word	0x20000ea4
 8003504:	20000668 	.word	0x20000668
 8003508:	20000210 	.word	0x20000210

0800350c <static_strings_get_string_max_length>:

int static_strings_get_string_max_length(static_strings_string_descriptor *string){
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	if(string->type == STATIC_STRINGS_STRING_TYPE_CUSTOM){
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	799b      	ldrb	r3, [r3, #6]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d101      	bne.n	8003520 <static_strings_get_string_max_length+0x14>
		return 0;
 800351c:	2300      	movs	r3, #0
 800351e:	e01e      	b.n	800355e <static_strings_get_string_max_length+0x52>
	}
	else{
		switch(string->type){
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	799b      	ldrb	r3, [r3, #6]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d819      	bhi.n	800355c <static_strings_get_string_max_length+0x50>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <static_strings_get_string_max_length+0x24>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003545 	.word	0x08003545
 8003534:	08003549 	.word	0x08003549
 8003538:	0800354d 	.word	0x0800354d
 800353c:	08003551 	.word	0x08003551
 8003540:	08003557 	.word	0x08003557
			case STATIC_STRINGS_STRING_TYPE_VERY_SHORT:
				return STATIC_STRINGS_VERY_SHORT_STRING_SIZE;
 8003544:	2332      	movs	r3, #50	; 0x32
 8003546:	e00a      	b.n	800355e <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_SHORT:
				return STATIC_STRINGS_SHORT_STRING_SIZE;
 8003548:	2364      	movs	r3, #100	; 0x64
 800354a:	e008      	b.n	800355e <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_MEDIUM:
				return STATIC_STRINGS_MEDIUM_STRING_SIZE;
 800354c:	23c8      	movs	r3, #200	; 0xc8
 800354e:	e006      	b.n	800355e <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_LONG:
				return STATIC_STRINGS_LONG_STRING_SIZE;
 8003550:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003554:	e003      	b.n	800355e <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_VERY_LONG:
				return STATIC_STRINGS_VERY_LONG_STRING_SIZE;
 8003556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355a:	e000      	b.n	800355e <static_strings_get_string_max_length+0x52>
				break;
		}
	}
	return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <static_strings_copy>:

static_strings_string_descriptor *static_strings_copy(static_strings_string_descriptor *copy_to,static_strings_string_descriptor *copy_from,uint16_t copy_to_offset){
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
	if(copy_to == NULL || copy_from == NULL){
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <static_strings_copy+0x1a>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <static_strings_copy+0x1e>
		return NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	e025      	b.n	80035d2 <static_strings_copy+0x6a>
	}
	int copy_to_max_length;
	if(copy_to->type == STATIC_STRINGS_STRING_TYPE_CUSTOM){
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	799b      	ldrb	r3, [r3, #6]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d103      	bne.n	8003596 <static_strings_copy+0x2e>
		copy_to_max_length = copy_to->length;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	889b      	ldrh	r3, [r3, #4]
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e005      	b.n	80035a2 <static_strings_copy+0x3a>
	}
	else{
		copy_to_max_length = copy_from->length + copy_to_offset;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	889b      	ldrh	r3, [r3, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	4413      	add	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
	}
	if(static_strings_get_string_max_length(copy_to) < copy_to_max_length){
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff ffb2 	bl	800350c <static_strings_get_string_max_length>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	4293      	cmp	r3, r2
 80035ae:	dd04      	ble.n	80035ba <static_strings_copy+0x52>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_OVERFLOW;
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <static_strings_copy+0x74>)
 80035b2:	2205      	movs	r2, #5
 80035b4:	701a      	strb	r2, [r3, #0]
		return NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e00b      	b.n	80035d2 <static_strings_copy+0x6a>
	}
	memcpy(copy_to->string + copy_to_offset,copy_from->string,copy_from->length);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	18d0      	adds	r0, r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 fc90 	bl	8003ef0 <memcpy>
	return copy_to;
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000664 	.word	0x20000664

080035e0 <static_strings_allocate>:
	memcpy(cloned_string->string,clone_from->string,clone_from->length);
	cloned_string->length = clone_from->length;
	return cloned_string;
}

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b32      	cmp	r3, #50	; 0x32
 80035ee:	d81a      	bhi.n	8003626 <static_strings_allocate+0x46>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e014      	b.n	8003620 <static_strings_allocate+0x40>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80035f6:	4a51      	ldr	r2, [pc, #324]	; (800373c <static_strings_allocate+0x15c>)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	79db      	ldrb	r3, [r3, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <static_strings_allocate+0x3a>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <static_strings_allocate+0x15c>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	2201      	movs	r2, #1
 800360e:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_short_strings_descriptors[i];
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4a49      	ldr	r2, [pc, #292]	; (800373c <static_strings_allocate+0x15c>)
 8003616:	4413      	add	r3, r2
 8003618:	e08b      	b.n	8003732 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3301      	adds	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b09      	cmp	r3, #9
 8003624:	dde7      	ble.n	80035f6 <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b64      	cmp	r3, #100	; 0x64
 800362a:	d81a      	bhi.n	8003662 <static_strings_allocate+0x82>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e014      	b.n	800365c <static_strings_allocate+0x7c>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003632:	4a43      	ldr	r2, [pc, #268]	; (8003740 <static_strings_allocate+0x160>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	79db      	ldrb	r3, [r3, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <static_strings_allocate+0x76>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003640:	4a3f      	ldr	r2, [pc, #252]	; (8003740 <static_strings_allocate+0x160>)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	2201      	movs	r2, #1
 800364a:	71da      	strb	r2, [r3, #7]
				return &static_strings_short_strings_descriptors[i];
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4a3b      	ldr	r2, [pc, #236]	; (8003740 <static_strings_allocate+0x160>)
 8003652:	4413      	add	r3, r2
 8003654:	e06d      	b.n	8003732 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3301      	adds	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b05      	cmp	r3, #5
 8003660:	dde7      	ble.n	8003632 <static_strings_allocate+0x52>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2bc8      	cmp	r3, #200	; 0xc8
 8003666:	d81a      	bhi.n	800369e <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e014      	b.n	8003698 <static_strings_allocate+0xb8>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800366e:	4a35      	ldr	r2, [pc, #212]	; (8003744 <static_strings_allocate+0x164>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	79db      	ldrb	r3, [r3, #7]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <static_strings_allocate+0xb2>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 800367c:	4a31      	ldr	r2, [pc, #196]	; (8003744 <static_strings_allocate+0x164>)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	2201      	movs	r2, #1
 8003686:	71da      	strb	r2, [r3, #7]
				return &static_strings_medium_strings_descriptors[i];
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <static_strings_allocate+0x164>)
 800368e:	4413      	add	r3, r2
 8003690:	e04f      	b.n	8003732 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3301      	adds	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	dde7      	ble.n	800366e <static_strings_allocate+0x8e>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80036a4:	d81a      	bhi.n	80036dc <static_strings_allocate+0xfc>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e014      	b.n	80036d6 <static_strings_allocate+0xf6>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <static_strings_allocate+0x168>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	79db      	ldrb	r3, [r3, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <static_strings_allocate+0xf0>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80036ba:	4a23      	ldr	r2, [pc, #140]	; (8003748 <static_strings_allocate+0x168>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	2201      	movs	r2, #1
 80036c4:	71da      	strb	r2, [r3, #7]
				return &static_strings_long_strings_descriptors[i];
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <static_strings_allocate+0x168>)
 80036cc:	4413      	add	r3, r2
 80036ce:	e030      	b.n	8003732 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	dde7      	ble.n	80036ac <static_strings_allocate+0xcc>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e2:	d81a      	bhi.n	800371a <static_strings_allocate+0x13a>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e014      	b.n	8003714 <static_strings_allocate+0x134>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <static_strings_allocate+0x16c>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	79db      	ldrb	r3, [r3, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <static_strings_allocate+0x12e>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <static_strings_allocate+0x16c>)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	2201      	movs	r2, #1
 8003702:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_long_strings_descriptors[i];
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4a10      	ldr	r2, [pc, #64]	; (800374c <static_strings_allocate+0x16c>)
 800370a:	4413      	add	r3, r2
 800370c:	e011      	b.n	8003732 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3301      	adds	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	dde7      	ble.n	80036ea <static_strings_allocate+0x10a>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003720:	d803      	bhi.n	800372a <static_strings_allocate+0x14a>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <static_strings_allocate+0x170>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e002      	b.n	8003730 <static_strings_allocate+0x150>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <static_strings_allocate+0x170>)
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	20000a60 	.word	0x20000a60
 8003740:	20000e74 	.word	0x20000e74
 8003744:	20000a50 	.word	0x20000a50
 8003748:	20000ea4 	.word	0x20000ea4
 800374c:	20000210 	.word	0x20000210
 8003750:	20000664 	.word	0x20000664

08003754 <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f86b 	bl	8003838 <static_strings_strlen>
 8003762:	4603      	mov	r3, r0
 8003764:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 8003766:	89fb      	ldrh	r3, [r7, #14]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	e014      	b.n	800379a <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8003770:	89fb      	ldrh	r3, [r7, #14]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff34 	bl	80035e0 <static_strings_allocate>
 8003778:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <static_strings_save+0x30>
		return descriptor;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	e00a      	b.n	800379a <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	89fa      	ldrh	r2, [r7, #14]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fbaf 	bl	8003ef0 <memcpy>
	descriptor->length = string_length;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	89fa      	ldrh	r2, [r7, #14]
 8003796:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8003798:	68bb      	ldr	r3, [r7, #8]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2205      	movs	r2, #5
 80037b0:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f838 	bl	8003838 <static_strings_strlen>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	889b      	ldrh	r3, [r3, #4]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	if(string_descriptor->status != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	79db      	ldrb	r3, [r3, #7]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d002      	beq.n	80037f2 <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	71da      	strb	r2, [r3, #7]
	}
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	889b      	ldrh	r3, [r3, #4]
 800380c:	3b02      	subs	r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b0d      	cmp	r3, #13
 8003814:	d008      	beq.n	8003828 <static_strings_is_line+0x2c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	889b      	ldrh	r3, [r3, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b0a      	cmp	r3, #10
 8003826:	d101      	bne.n	800382c <static_strings_is_line+0x30>
		return 1;
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <static_strings_is_line+0x32>
	}
	return 0;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003840:	2300      	movs	r3, #0
 8003842:	81fb      	strh	r3, [r7, #14]
 8003844:	e010      	b.n	8003868 <static_strings_strlen+0x30>
		if( *(string + length) == '\r'){
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b0d      	cmp	r3, #13
 8003850:	d00f      	beq.n	8003872 <static_strings_strlen+0x3a>
			break;
		}
		if( *(string + length) == '\0'){
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <static_strings_strlen+0x2a>
			return length;
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	e022      	b.n	80038a8 <static_strings_strlen+0x70>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003862:	89fb      	ldrh	r3, [r7, #14]
 8003864:	3301      	adds	r3, #1
 8003866:	81fb      	strh	r3, [r7, #14]
 8003868:	89fb      	ldrh	r3, [r7, #14]
 800386a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800386e:	d3ea      	bcc.n	8003846 <static_strings_strlen+0xe>
 8003870:	e000      	b.n	8003874 <static_strings_strlen+0x3c>
			break;
 8003872:	bf00      	nop
		}
	}
	if(length >= 999){
 8003874:	89fb      	ldrh	r3, [r7, #14]
 8003876:	f240 32e6 	movw	r2, #998	; 0x3e6
 800387a:	4293      	cmp	r3, r2
 800387c:	d904      	bls.n	8003888 <static_strings_strlen+0x50>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_INVALID_STRING;
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <static_strings_strlen+0x7c>)
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
		return 0;
 8003884:	2300      	movs	r3, #0
 8003886:	e00f      	b.n	80038a8 <static_strings_strlen+0x70>
	}
	else{
		if(*(string + length + 1) != '\n'){
 8003888:	89fb      	ldrh	r3, [r7, #14]
 800388a:	3301      	adds	r3, #1
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b0a      	cmp	r3, #10
 8003894:	d005      	beq.n	80038a2 <static_strings_strlen+0x6a>
			*(string + length + 1) = '\n';
 8003896:	89fb      	ldrh	r3, [r7, #14]
 8003898:	3301      	adds	r3, #1
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	220a      	movs	r2, #10
 80038a0:	701a      	strb	r2, [r3, #0]
		}
		return length + 2;
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	3302      	adds	r3, #2
 80038a6:	b29b      	uxth	r3, r3
	}
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000664 	.word	0x20000664

080038b8 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 80038c4:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <static_strings_string_splitter_set_parameters+0x2c>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <static_strings_string_splitter_set_parameters+0x2c>)
 80038d0:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 80038d2:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <static_strings_string_splitter_set_parameters+0x2c>)
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	7213      	strb	r3, [r2, #8]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	200001fc 	.word	0x200001fc

080038e8 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor **string_descriptor){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4929      	ldr	r1, [pc, #164]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 80038fc:	6809      	ldr	r1, [r1, #0]
 80038fe:	8889      	ldrh	r1, [r1, #4]
 8003900:	440b      	add	r3, r1
 8003902:	429a      	cmp	r2, r3
 8003904:	d101      	bne.n	800390a <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 8003906:	2300      	movs	r3, #0
 8003908:	e045      	b.n	8003996 <static_strings_string_splitter_get_next_token+0xae>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 800390a:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 8003910:	bf00      	nop
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	60fa      	str	r2, [r7, #12]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 800391c:	7a1b      	ldrb	r3, [r3, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d009      	beq.n	8003936 <static_strings_string_splitter_get_next_token+0x4e>
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	8892      	ldrh	r2, [r2, #4]
 800392e:	4413      	add	r3, r2
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	429a      	cmp	r2, r3
 8003934:	d3ed      	bcc.n	8003912 <static_strings_string_splitter_get_next_token+0x2a>

	int token_length;
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	8892      	ldrh	r2, [r2, #4]
 8003942:	4413      	add	r3, r2
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	429a      	cmp	r2, r3
 8003948:	d105      	bne.n	8003956 <static_strings_string_splitter_get_next_token+0x6e>
		token_length = current_position - static_strings_string_splitter.next_token_start;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 800394e:	6852      	ldr	r2, [r2, #4]
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	e005      	b.n	8003962 <static_strings_string_splitter_get_next_token+0x7a>
	}
	else{
		token_length = current_position - static_strings_string_splitter.next_token_start - 1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 800395a:	6852      	ldr	r2, [r2, #4]
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	3b01      	subs	r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
	}
	*string_descriptor = static_strings_allocate(token_length);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	b29b      	uxth	r3, r3
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fe3a 	bl	80035e0 <static_strings_allocate>
 800396c:	4602      	mov	r2, r0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
	memcpy((*string_descriptor)->string,static_strings_string_splitter.next_token_start,token_length);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4619      	mov	r1, r3
 8003980:	f000 fab6 	bl	8003ef0 <memcpy>
	(*string_descriptor)->length = token_length;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	b292      	uxth	r2, r2
 800398c:	809a      	strh	r2, [r3, #4]
	static_strings_string_splitter.next_token_start = current_position;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <static_strings_string_splitter_get_next_token+0xb8>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6053      	str	r3, [r2, #4]
	return 1;
 8003994:	2301      	movs	r3, #1
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200001fc 	.word	0x200001fc

080039a4 <static_strings_substring>:

static_strings_string_descriptor *static_strings_substring(static_strings_string_descriptor* string,uint16_t start_index,uint16_t finish_index){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
 80039b0:	4613      	mov	r3, r2
 80039b2:	803b      	strh	r3, [r7, #0]
	if(start_index < 0 || start_index >= string->length){
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	889b      	ldrh	r3, [r3, #4]
 80039b8:	887a      	ldrh	r2, [r7, #2]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d304      	bcc.n	80039c8 <static_strings_substring+0x24>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_START_INDEX_OUT_OF_RANGE;
 80039be:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <static_strings_substring+0x80>)
 80039c0:	2203      	movs	r2, #3
 80039c2:	701a      	strb	r2, [r3, #0]
		return NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e028      	b.n	8003a1a <static_strings_substring+0x76>
	}
	if(finish_index <= 0 || finish_index > string->length){
 80039c8:	883b      	ldrh	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <static_strings_substring+0x34>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	889b      	ldrh	r3, [r3, #4]
 80039d2:	883a      	ldrh	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d904      	bls.n	80039e2 <static_strings_substring+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_FINISH_INDEX_OUT_OF_RANGE;
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <static_strings_substring+0x80>)
 80039da:	2204      	movs	r2, #4
 80039dc:	701a      	strb	r2, [r3, #0]
		return NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	e01b      	b.n	8003a1a <static_strings_substring+0x76>
	}
	uint16_t substring_length = finish_index - start_index;
 80039e2:	883a      	ldrh	r2, [r7, #0]
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	81fb      	strh	r3, [r7, #14]
	static_strings_string_descriptor *substring = static_strings_allocate(substring_length);
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fdf7 	bl	80035e0 <static_strings_allocate>
 80039f2:	60b8      	str	r0, [r7, #8]
	if(substring == NULL){
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <static_strings_substring+0x5a>
		return substring;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	e00d      	b.n	8003a1a <static_strings_substring+0x76>
	}
	memcpy(substring->string,string->string + start_index,substring_length);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	4413      	add	r3, r2
 8003a0a:	89fa      	ldrh	r2, [r7, #14]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f000 fa6f 	bl	8003ef0 <memcpy>
	substring->length = substring_length;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	89fa      	ldrh	r2, [r7, #14]
 8003a16:	809a      	strh	r2, [r3, #4]
	return substring;
 8003a18:	68bb      	ldr	r3, [r7, #8]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000664 	.word	0x20000664

08003a28 <static_strings_concatenate>:

static_strings_string_descriptor *static_strings_concatenate(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	int concatenated_string_length = concatenate_at->length + concatenate->length;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	889b      	ldrh	r3, [r3, #4]
 8003a36:	461a      	mov	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	889b      	ldrh	r3, [r3, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(concatenated_string_length);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fdcb 	bl	80035e0 <static_strings_allocate>
 8003a4a:	60b8      	str	r0, [r7, #8]
	if(concatenated_string == NULL){
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <static_strings_concatenate+0x2e>
		return concatenated_string;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	e019      	b.n	8003a8a <static_strings_concatenate+0x62>
	}
	memcpy(concatenated_string->string,concatenate_at->string,concatenate_at->length);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	889b      	ldrh	r3, [r3, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 fa44 	bl	8003ef0 <memcpy>
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	8892      	ldrh	r2, [r2, #4]
 8003a70:	1898      	adds	r0, r3, r2
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	889b      	ldrh	r3, [r3, #4]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f000 fa38 	bl	8003ef0 <memcpy>
	concatenated_string->length = concatenated_string_length;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	809a      	strh	r2, [r3, #4]
	return concatenated_string;
 8003a88:	68bb      	ldr	r3, [r7, #8]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <static_strings_contains_string>:
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
	concatenated_string->length = concatenated_string_length;
	return concatenated_string;
}

int static_strings_contains_string(static_strings_string_descriptor* search_in,static_strings_string_descriptor* search_for){
 8003a92:	b480      	push	{r7}
 8003a94:	b087      	sub	sp, #28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
	if(search_in->length < search_for->length){
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	889a      	ldrh	r2, [r3, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	889b      	ldrh	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d201      	bcs.n	8003aac <static_strings_contains_string+0x1a>
		return 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e034      	b.n	8003b16 <static_strings_contains_string+0x84>
	}
	int i,j;
	int searched_string_found;
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e026      	b.n	8003b00 <static_strings_contains_string+0x6e>
		searched_string_found = 1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < search_for->length;j++){
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e013      	b.n	8003ae4 <static_strings_contains_string+0x52>
			if( *(search_in->string + i + j) != *(search_for->string + j) ){
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	6979      	ldr	r1, [r7, #20]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	440b      	add	r3, r1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	440b      	add	r3, r1
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d002      	beq.n	8003ade <static_strings_contains_string+0x4c>
				searched_string_found = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
				break;
 8003adc:	e008      	b.n	8003af0 <static_strings_contains_string+0x5e>
		for(j = 0; j < search_for->length;j++){
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	889b      	ldrh	r3, [r3, #4]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	dbe5      	blt.n	8003abc <static_strings_contains_string+0x2a>
			}
		}
		if(searched_string_found){
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <static_strings_contains_string+0x68>
			return 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00d      	b.n	8003b16 <static_strings_contains_string+0x84>
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3301      	adds	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	889b      	ldrh	r3, [r3, #4]
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	1acb      	subs	r3, r1, r3
 8003b10:	429a      	cmp	r2, r3
 8003b12:	ddce      	ble.n	8003ab2 <static_strings_contains_string+0x20>
		}
	}
	return 0;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <static_strings_contains_char>:

int static_strings_contains_char(static_strings_string_descriptor* search_in,uint8_t search_for){
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i = 0;i < search_in->length;i++){
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e00c      	b.n	8003b4c <static_strings_contains_char+0x2c>
		if( *(search_in->string + i) == search_for){
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d101      	bne.n	8003b46 <static_strings_contains_char+0x26>
			return 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e009      	b.n	8003b5a <static_strings_contains_char+0x3a>
	for(i = 0;i < search_in->length;i++){
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	889b      	ldrh	r3, [r3, #4]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	dbec      	blt.n	8003b32 <static_strings_contains_char+0x12>
		}
	}
	return 0;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <static_strings_compare>:

int static_strings_compare(static_strings_string_descriptor* compare_string_one,static_strings_string_descriptor* compare_string_two){
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	if(compare_string_one->length != compare_string_two->length){
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	889a      	ldrh	r2, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	889b      	ldrh	r3, [r3, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <static_strings_compare+0x1a>
		return 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e01a      	b.n	8003bb4 <static_strings_compare+0x50>
	}
	int i;
	for(i = 0;i < compare_string_one->length;i++){
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e010      	b.n	8003ba6 <static_strings_compare+0x42>
		if(*(compare_string_one->string + i) != *(compare_string_two->string + i)){
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	440b      	add	r3, r1
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <static_strings_compare+0x3c>
			return 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e009      	b.n	8003bb4 <static_strings_compare+0x50>
	for(i = 0;i < compare_string_one->length;i++){
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	889b      	ldrh	r3, [r3, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	dbe8      	blt.n	8003b84 <static_strings_compare+0x20>
		}
	}
	return 1;
 8003bb2:	2301      	movs	r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
	...

08003bc0 <static_strings_uint8_to_string>:

static_strings_string_descriptor *static_strings_uint8_to_string(uint8_t uint8){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b092      	sub	sp, #72	; 0x48
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t uint8_temp_string[50];
	sprintf((char *)uint8_temp_string,"%" PRIu8,uint8);
 8003bca:	79fa      	ldrb	r2, [r7, #7]
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	4914      	ldr	r1, [pc, #80]	; (8003c24 <static_strings_uint8_to_string+0x64>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fdee 	bl	80047b4 <siprintf>
	uint16_t uint8_string_length = static_strings_strlen(uint8_temp_string);
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fe2b 	bl	8003838 <static_strings_strlen>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint8_string = static_strings_allocate(uint8_string_length);
 8003be8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fcf7 	bl	80035e0 <static_strings_allocate>
 8003bf2:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint8_string == NULL){
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <static_strings_uint8_to_string+0x3e>
		return uint8_string;
 8003bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfc:	e00d      	b.n	8003c1a <static_strings_uint8_to_string+0x5a>
	}
	memcpy(uint8_string->string,uint8_temp_string,uint8_string_length);
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003c06:	f107 010c 	add.w	r1, r7, #12
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f970 	bl	8003ef0 <memcpy>
	uint8_string->length = uint8_string_length;
 8003c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c12:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003c16:	809a      	strh	r2, [r3, #4]
	return uint8_string;
 8003c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3748      	adds	r7, #72	; 0x48
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	08006c14 	.word	0x08006c14

08003c28 <static_strings_uint16_to_string>:

static_strings_string_descriptor *static_strings_uint16_to_string(uint16_t uint16){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b092      	sub	sp, #72	; 0x48
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	80fb      	strh	r3, [r7, #6]
	uint8_t uint16_temp_string[50];
	sprintf((char *)uint16_temp_string,"%" PRIu16,uint16);
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	4914      	ldr	r1, [pc, #80]	; (8003c8c <static_strings_uint16_to_string+0x64>)
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fdba 	bl	80047b4 <siprintf>
	uint16_t uint16_string_length = static_strings_strlen(uint16_temp_string);
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fdf7 	bl	8003838 <static_strings_strlen>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint16_string = static_strings_allocate(uint16_string_length);
 8003c50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fcc3 	bl	80035e0 <static_strings_allocate>
 8003c5a:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint16_string == NULL){
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <static_strings_uint16_to_string+0x3e>
		return uint16_string;
 8003c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c64:	e00d      	b.n	8003c82 <static_strings_uint16_to_string+0x5a>
	}
	memcpy(uint16_string->string,uint16_temp_string,uint16_string_length);
 8003c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003c6e:	f107 010c 	add.w	r1, r7, #12
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f93c 	bl	8003ef0 <memcpy>
	uint16_string->length = uint16_string_length;
 8003c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003c7e:	809a      	strh	r2, [r3, #4]
	return uint16_string;
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3748      	adds	r7, #72	; 0x48
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08006c18 	.word	0x08006c18

08003c90 <static_strings_uint32_to_string>:

static_strings_string_descriptor *static_strings_uint32_to_string(uint32_t uint32){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b092      	sub	sp, #72	; 0x48
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	uint8_t uint32_temp_string[50];
	sprintf((char *)uint32_temp_string,"%" PRIu32,uint32);
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4914      	ldr	r1, [pc, #80]	; (8003cf0 <static_strings_uint32_to_string+0x60>)
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fd87 	bl	80047b4 <siprintf>
	uint16_t uint32_string_length = static_strings_strlen(uint32_temp_string);
 8003ca6:	f107 030c 	add.w	r3, r7, #12
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fdc4 	bl	8003838 <static_strings_strlen>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint32_string = static_strings_allocate(uint32_string_length);
 8003cb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fc90 	bl	80035e0 <static_strings_allocate>
 8003cc0:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint32_string == NULL){
 8003cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <static_strings_uint32_to_string+0x3c>
		return uint32_string;
 8003cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cca:	e00d      	b.n	8003ce8 <static_strings_uint32_to_string+0x58>
	}
	memcpy(uint32_string->string,uint32_temp_string,uint32_string_length);
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003cd4:	f107 010c 	add.w	r1, r7, #12
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f909 	bl	8003ef0 <memcpy>
	uint32_string->length = uint32_string_length;
 8003cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003ce4:	809a      	strh	r2, [r3, #4]
	return uint32_string;
 8003ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3748      	adds	r7, #72	; 0x48
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	08006c1c 	.word	0x08006c1c

08003cf4 <static_strings_int8_to_string>:

static_strings_string_descriptor *static_strings_int8_to_string(int8_t int8){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b092      	sub	sp, #72	; 0x48
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t int8_temp_string[50];
	sprintf((char *)int8_temp_string,"%" PRId8,int8);
 8003cfe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	4914      	ldr	r1, [pc, #80]	; (8003d58 <static_strings_int8_to_string+0x64>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fd53 	bl	80047b4 <siprintf>
	uint16_t int8_string_length = static_strings_strlen(int8_temp_string);
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fd90 	bl	8003838 <static_strings_strlen>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int8_string = static_strings_allocate(int8_string_length);
 8003d1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fc5c 	bl	80035e0 <static_strings_allocate>
 8003d28:	6438      	str	r0, [r7, #64]	; 0x40
	if(int8_string == NULL){
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <static_strings_int8_to_string+0x40>
		return int8_string;
 8003d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d32:	e00d      	b.n	8003d50 <static_strings_int8_to_string+0x5c>
	}
	memcpy(int8_string->string,int8_temp_string,int8_string_length);
 8003d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003d3c:	f107 010c 	add.w	r1, r7, #12
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f8d5 	bl	8003ef0 <memcpy>
	int8_string->length = int8_string_length;
 8003d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003d4c:	809a      	strh	r2, [r3, #4]
	return int8_string;
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3748      	adds	r7, #72	; 0x48
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	08006c20 	.word	0x08006c20

08003d5c <static_strings_int16_to_string>:

static_strings_string_descriptor *static_strings_int16_to_string(int16_t int16){
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b092      	sub	sp, #72	; 0x48
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	80fb      	strh	r3, [r7, #6]
	uint8_t int16_temp_string[50];
	sprintf((char *)int16_temp_string,"%" PRId16,int16);
 8003d66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d6a:	f107 030c 	add.w	r3, r7, #12
 8003d6e:	4914      	ldr	r1, [pc, #80]	; (8003dc0 <static_strings_int16_to_string+0x64>)
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fd1f 	bl	80047b4 <siprintf>
	int16_t int16_string_length = static_strings_strlen(int16_temp_string);
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fd5c 	bl	8003838 <static_strings_strlen>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int16_string = static_strings_allocate(int16_string_length);
 8003d86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fc28 	bl	80035e0 <static_strings_allocate>
 8003d90:	6438      	str	r0, [r7, #64]	; 0x40
	if(int16_string == NULL){
 8003d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <static_strings_int16_to_string+0x40>
		return int16_string;
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	e00d      	b.n	8003db8 <static_strings_int16_to_string+0x5c>
	}
	memcpy(int16_string->string,int16_temp_string,int16_string_length);
 8003d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003da4:	f107 010c 	add.w	r1, r7, #12
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f8a1 	bl	8003ef0 <memcpy>
	int16_string->length = int16_string_length;
 8003dae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	809a      	strh	r2, [r3, #4]
	return int16_string;
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3748      	adds	r7, #72	; 0x48
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	08006c24 	.word	0x08006c24

08003dc4 <static_strings_float_to_string>:
	memcpy(int32_string->string,int32_temp_string,int32_string_length);
	int32_string->length = int32_string_length;
	return int32_string;
}

static_strings_string_descriptor *static_strings_float_to_string(float float_arg){
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b093      	sub	sp, #76	; 0x4c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	uint8_t float_temp_string[50];
	sprintf((char *)float_temp_string,"%f",float_arg);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fc fb2b 	bl	8000428 <__aeabi_f2d>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	f107 000c 	add.w	r0, r7, #12
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	4914      	ldr	r1, [pc, #80]	; (8003e30 <static_strings_float_to_string+0x6c>)
 8003de0:	f000 fce8 	bl	80047b4 <siprintf>
	int16_t float_string_length = static_strings_strlen(float_temp_string);
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fd25 	bl	8003838 <static_strings_strlen>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *float_string = static_strings_allocate(float_string_length);
 8003df4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fbf1 	bl	80035e0 <static_strings_allocate>
 8003dfe:	6438      	str	r0, [r7, #64]	; 0x40
	if(float_string == NULL){
 8003e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <static_strings_float_to_string+0x46>
		return float_string;
 8003e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e08:	e00d      	b.n	8003e26 <static_strings_float_to_string+0x62>
	}
	memcpy(float_string->string,float_temp_string,float_string_length);
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003e12:	f107 010c 	add.w	r1, r7, #12
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f86a 	bl	8003ef0 <memcpy>
	float_string->length = float_string_length;
 8003e1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e22:	809a      	strh	r2, [r3, #4]
	return float_string;
 8003e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	374c      	adds	r7, #76	; 0x4c
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd90      	pop	{r4, r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	08006c2c 	.word	0x08006c2c

08003e34 <static_strings_double_to_string>:

static_strings_string_descriptor *static_strings_double_to_string(double double_arg){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b092      	sub	sp, #72	; 0x48
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t double_temp_string[50];
	sprintf((char *)double_temp_string,"%lf",double_arg);
 8003e3e:	f107 000c 	add.w	r0, r7, #12
 8003e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e46:	4914      	ldr	r1, [pc, #80]	; (8003e98 <static_strings_double_to_string+0x64>)
 8003e48:	f000 fcb4 	bl	80047b4 <siprintf>
	int16_t double_string_length = static_strings_strlen(double_temp_string);
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fcf1 	bl	8003838 <static_strings_strlen>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *double_string = static_strings_allocate(double_string_length);
 8003e5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fbbd 	bl	80035e0 <static_strings_allocate>
 8003e66:	6438      	str	r0, [r7, #64]	; 0x40
	if(double_string == NULL){
 8003e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <static_strings_double_to_string+0x3e>
		return double_string;
 8003e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e70:	e00d      	b.n	8003e8e <static_strings_double_to_string+0x5a>
	}
	memcpy(double_string->string,double_temp_string,double_string_length);
 8003e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003e7a:	f107 010c 	add.w	r1, r7, #12
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f836 	bl	8003ef0 <memcpy>
	double_string->length = double_string_length;
 8003e84:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	809a      	strh	r2, [r3, #4]
	return double_string;
 8003e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3748      	adds	r7, #72	; 0x48
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	08006c30 	.word	0x08006c30

08003e9c <__errno>:
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <__errno+0x8>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <__libc_init_array>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	2500      	movs	r5, #0
 8003eac:	4e0c      	ldr	r6, [pc, #48]	; (8003ee0 <__libc_init_array+0x38>)
 8003eae:	4c0d      	ldr	r4, [pc, #52]	; (8003ee4 <__libc_init_array+0x3c>)
 8003eb0:	1ba4      	subs	r4, r4, r6
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	42a5      	cmp	r5, r4
 8003eb6:	d109      	bne.n	8003ecc <__libc_init_array+0x24>
 8003eb8:	f002 f85c 	bl	8005f74 <_init>
 8003ebc:	2500      	movs	r5, #0
 8003ebe:	4e0a      	ldr	r6, [pc, #40]	; (8003ee8 <__libc_init_array+0x40>)
 8003ec0:	4c0a      	ldr	r4, [pc, #40]	; (8003eec <__libc_init_array+0x44>)
 8003ec2:	1ba4      	subs	r4, r4, r6
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	42a5      	cmp	r5, r4
 8003ec8:	d105      	bne.n	8003ed6 <__libc_init_array+0x2e>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed0:	4798      	blx	r3
 8003ed2:	3501      	adds	r5, #1
 8003ed4:	e7ee      	b.n	8003eb4 <__libc_init_array+0xc>
 8003ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eda:	4798      	blx	r3
 8003edc:	3501      	adds	r5, #1
 8003ede:	e7f2      	b.n	8003ec6 <__libc_init_array+0x1e>
 8003ee0:	08006ea8 	.word	0x08006ea8
 8003ee4:	08006ea8 	.word	0x08006ea8
 8003ee8:	08006ea8 	.word	0x08006ea8
 8003eec:	08006eac 	.word	0x08006eac

08003ef0 <memcpy>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	1e43      	subs	r3, r0, #1
 8003ef4:	440a      	add	r2, r1
 8003ef6:	4291      	cmp	r1, r2
 8003ef8:	d100      	bne.n	8003efc <memcpy+0xc>
 8003efa:	bd10      	pop	{r4, pc}
 8003efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f04:	e7f7      	b.n	8003ef6 <memcpy+0x6>

08003f06 <memset>:
 8003f06:	4603      	mov	r3, r0
 8003f08:	4402      	add	r2, r0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d100      	bne.n	8003f10 <memset+0xa>
 8003f0e:	4770      	bx	lr
 8003f10:	f803 1b01 	strb.w	r1, [r3], #1
 8003f14:	e7f9      	b.n	8003f0a <memset+0x4>

08003f16 <__cvt>:
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	461e      	mov	r6, r3
 8003f1e:	bfbb      	ittet	lt
 8003f20:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f24:	461e      	movlt	r6, r3
 8003f26:	2300      	movge	r3, #0
 8003f28:	232d      	movlt	r3, #45	; 0x2d
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f2e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003f32:	f027 0720 	bic.w	r7, r7, #32
 8003f36:	2f46      	cmp	r7, #70	; 0x46
 8003f38:	4614      	mov	r4, r2
 8003f3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f3c:	700b      	strb	r3, [r1, #0]
 8003f3e:	d004      	beq.n	8003f4a <__cvt+0x34>
 8003f40:	2f45      	cmp	r7, #69	; 0x45
 8003f42:	d100      	bne.n	8003f46 <__cvt+0x30>
 8003f44:	3501      	adds	r5, #1
 8003f46:	2302      	movs	r3, #2
 8003f48:	e000      	b.n	8003f4c <__cvt+0x36>
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	aa07      	add	r2, sp, #28
 8003f4e:	9204      	str	r2, [sp, #16]
 8003f50:	aa06      	add	r2, sp, #24
 8003f52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f56:	e9cd 3500 	strd	r3, r5, [sp]
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4633      	mov	r3, r6
 8003f5e:	f000 fcd7 	bl	8004910 <_dtoa_r>
 8003f62:	2f47      	cmp	r7, #71	; 0x47
 8003f64:	4680      	mov	r8, r0
 8003f66:	d102      	bne.n	8003f6e <__cvt+0x58>
 8003f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f6a:	07db      	lsls	r3, r3, #31
 8003f6c:	d526      	bpl.n	8003fbc <__cvt+0xa6>
 8003f6e:	2f46      	cmp	r7, #70	; 0x46
 8003f70:	eb08 0905 	add.w	r9, r8, r5
 8003f74:	d111      	bne.n	8003f9a <__cvt+0x84>
 8003f76:	f898 3000 	ldrb.w	r3, [r8]
 8003f7a:	2b30      	cmp	r3, #48	; 0x30
 8003f7c:	d10a      	bne.n	8003f94 <__cvt+0x7e>
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2300      	movs	r3, #0
 8003f82:	4620      	mov	r0, r4
 8003f84:	4631      	mov	r1, r6
 8003f86:	f7fc fd0f 	bl	80009a8 <__aeabi_dcmpeq>
 8003f8a:	b918      	cbnz	r0, 8003f94 <__cvt+0x7e>
 8003f8c:	f1c5 0501 	rsb	r5, r5, #1
 8003f90:	f8ca 5000 	str.w	r5, [sl]
 8003f94:	f8da 3000 	ldr.w	r3, [sl]
 8003f98:	4499      	add	r9, r3
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4631      	mov	r1, r6
 8003fa2:	f7fc fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8003fa6:	b938      	cbnz	r0, 8003fb8 <__cvt+0xa2>
 8003fa8:	2230      	movs	r2, #48	; 0x30
 8003faa:	9b07      	ldr	r3, [sp, #28]
 8003fac:	454b      	cmp	r3, r9
 8003fae:	d205      	bcs.n	8003fbc <__cvt+0xa6>
 8003fb0:	1c59      	adds	r1, r3, #1
 8003fb2:	9107      	str	r1, [sp, #28]
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e7f8      	b.n	8003faa <__cvt+0x94>
 8003fb8:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	9b07      	ldr	r3, [sp, #28]
 8003fc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fc2:	eba3 0308 	sub.w	r3, r3, r8
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	b008      	add	sp, #32
 8003fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003fce <__exponent>:
 8003fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	bfb4      	ite	lt
 8003fd4:	232d      	movlt	r3, #45	; 0x2d
 8003fd6:	232b      	movge	r3, #43	; 0x2b
 8003fd8:	4604      	mov	r4, r0
 8003fda:	bfb8      	it	lt
 8003fdc:	4249      	neglt	r1, r1
 8003fde:	2909      	cmp	r1, #9
 8003fe0:	f804 2b02 	strb.w	r2, [r4], #2
 8003fe4:	7043      	strb	r3, [r0, #1]
 8003fe6:	dd21      	ble.n	800402c <__exponent+0x5e>
 8003fe8:	f10d 0307 	add.w	r3, sp, #7
 8003fec:	461f      	mov	r7, r3
 8003fee:	260a      	movs	r6, #10
 8003ff0:	fb91 f5f6 	sdiv	r5, r1, r6
 8003ff4:	fb06 1115 	mls	r1, r6, r5, r1
 8003ff8:	2d09      	cmp	r5, #9
 8003ffa:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003ffe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004002:	f103 32ff 	add.w	r2, r3, #4294967295
 8004006:	4629      	mov	r1, r5
 8004008:	dc09      	bgt.n	800401e <__exponent+0x50>
 800400a:	3130      	adds	r1, #48	; 0x30
 800400c:	3b02      	subs	r3, #2
 800400e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004012:	42bb      	cmp	r3, r7
 8004014:	4622      	mov	r2, r4
 8004016:	d304      	bcc.n	8004022 <__exponent+0x54>
 8004018:	1a10      	subs	r0, r2, r0
 800401a:	b003      	add	sp, #12
 800401c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800401e:	4613      	mov	r3, r2
 8004020:	e7e6      	b.n	8003ff0 <__exponent+0x22>
 8004022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004026:	f804 2b01 	strb.w	r2, [r4], #1
 800402a:	e7f2      	b.n	8004012 <__exponent+0x44>
 800402c:	2330      	movs	r3, #48	; 0x30
 800402e:	4419      	add	r1, r3
 8004030:	7083      	strb	r3, [r0, #2]
 8004032:	1d02      	adds	r2, r0, #4
 8004034:	70c1      	strb	r1, [r0, #3]
 8004036:	e7ef      	b.n	8004018 <__exponent+0x4a>

08004038 <_printf_float>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	b091      	sub	sp, #68	; 0x44
 800403e:	460c      	mov	r4, r1
 8004040:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004042:	4693      	mov	fp, r2
 8004044:	461e      	mov	r6, r3
 8004046:	4605      	mov	r5, r0
 8004048:	f001 fa16 	bl	8005478 <_localeconv_r>
 800404c:	6803      	ldr	r3, [r0, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	9309      	str	r3, [sp, #36]	; 0x24
 8004052:	f7fc f87d 	bl	8000150 <strlen>
 8004056:	2300      	movs	r3, #0
 8004058:	930e      	str	r3, [sp, #56]	; 0x38
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	900a      	str	r0, [sp, #40]	; 0x28
 800405e:	3307      	adds	r3, #7
 8004060:	f023 0307 	bic.w	r3, r3, #7
 8004064:	f103 0208 	add.w	r2, r3, #8
 8004068:	f894 8018 	ldrb.w	r8, [r4, #24]
 800406c:	f8d4 a000 	ldr.w	sl, [r4]
 8004070:	603a      	str	r2, [r7, #0]
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800407a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800407e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004082:	930b      	str	r3, [sp, #44]	; 0x2c
 8004084:	f04f 32ff 	mov.w	r2, #4294967295
 8004088:	4ba6      	ldr	r3, [pc, #664]	; (8004324 <_printf_float+0x2ec>)
 800408a:	4638      	mov	r0, r7
 800408c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800408e:	f7fc fcbd 	bl	8000a0c <__aeabi_dcmpun>
 8004092:	bb68      	cbnz	r0, 80040f0 <_printf_float+0xb8>
 8004094:	f04f 32ff 	mov.w	r2, #4294967295
 8004098:	4ba2      	ldr	r3, [pc, #648]	; (8004324 <_printf_float+0x2ec>)
 800409a:	4638      	mov	r0, r7
 800409c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800409e:	f7fc fc97 	bl	80009d0 <__aeabi_dcmple>
 80040a2:	bb28      	cbnz	r0, 80040f0 <_printf_float+0xb8>
 80040a4:	2200      	movs	r2, #0
 80040a6:	2300      	movs	r3, #0
 80040a8:	4638      	mov	r0, r7
 80040aa:	4649      	mov	r1, r9
 80040ac:	f7fc fc86 	bl	80009bc <__aeabi_dcmplt>
 80040b0:	b110      	cbz	r0, 80040b8 <_printf_float+0x80>
 80040b2:	232d      	movs	r3, #45	; 0x2d
 80040b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b8:	4f9b      	ldr	r7, [pc, #620]	; (8004328 <_printf_float+0x2f0>)
 80040ba:	4b9c      	ldr	r3, [pc, #624]	; (800432c <_printf_float+0x2f4>)
 80040bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040c0:	bf98      	it	ls
 80040c2:	461f      	movls	r7, r3
 80040c4:	2303      	movs	r3, #3
 80040c6:	f04f 0900 	mov.w	r9, #0
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	f02a 0304 	bic.w	r3, sl, #4
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	9600      	str	r6, [sp, #0]
 80040d4:	465b      	mov	r3, fp
 80040d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80040d8:	4621      	mov	r1, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	f000 f9e2 	bl	80044a4 <_printf_common>
 80040e0:	3001      	adds	r0, #1
 80040e2:	f040 8090 	bne.w	8004206 <_printf_float+0x1ce>
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ea:	b011      	add	sp, #68	; 0x44
 80040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f0:	463a      	mov	r2, r7
 80040f2:	464b      	mov	r3, r9
 80040f4:	4638      	mov	r0, r7
 80040f6:	4649      	mov	r1, r9
 80040f8:	f7fc fc88 	bl	8000a0c <__aeabi_dcmpun>
 80040fc:	b110      	cbz	r0, 8004104 <_printf_float+0xcc>
 80040fe:	4f8c      	ldr	r7, [pc, #560]	; (8004330 <_printf_float+0x2f8>)
 8004100:	4b8c      	ldr	r3, [pc, #560]	; (8004334 <_printf_float+0x2fc>)
 8004102:	e7db      	b.n	80040bc <_printf_float+0x84>
 8004104:	6863      	ldr	r3, [r4, #4]
 8004106:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	a80d      	add	r0, sp, #52	; 0x34
 800410e:	a90e      	add	r1, sp, #56	; 0x38
 8004110:	d140      	bne.n	8004194 <_printf_float+0x15c>
 8004112:	2306      	movs	r3, #6
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	f04f 0c00 	mov.w	ip, #0
 800411a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800411e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004122:	6863      	ldr	r3, [r4, #4]
 8004124:	6022      	str	r2, [r4, #0]
 8004126:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	463a      	mov	r2, r7
 800412e:	464b      	mov	r3, r9
 8004130:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004134:	4628      	mov	r0, r5
 8004136:	f7ff feee 	bl	8003f16 <__cvt>
 800413a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800413e:	2b47      	cmp	r3, #71	; 0x47
 8004140:	4607      	mov	r7, r0
 8004142:	d109      	bne.n	8004158 <_printf_float+0x120>
 8004144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004146:	1cd8      	adds	r0, r3, #3
 8004148:	db02      	blt.n	8004150 <_printf_float+0x118>
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	4293      	cmp	r3, r2
 800414e:	dd47      	ble.n	80041e0 <_printf_float+0x1a8>
 8004150:	f1a8 0802 	sub.w	r8, r8, #2
 8004154:	fa5f f888 	uxtb.w	r8, r8
 8004158:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800415c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800415e:	d824      	bhi.n	80041aa <_printf_float+0x172>
 8004160:	3901      	subs	r1, #1
 8004162:	4642      	mov	r2, r8
 8004164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004168:	910d      	str	r1, [sp, #52]	; 0x34
 800416a:	f7ff ff30 	bl	8003fce <__exponent>
 800416e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004170:	4681      	mov	r9, r0
 8004172:	1813      	adds	r3, r2, r0
 8004174:	2a01      	cmp	r2, #1
 8004176:	6123      	str	r3, [r4, #16]
 8004178:	dc02      	bgt.n	8004180 <_printf_float+0x148>
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	07d1      	lsls	r1, r2, #31
 800417e:	d501      	bpl.n	8004184 <_printf_float+0x14c>
 8004180:	3301      	adds	r3, #1
 8004182:	6123      	str	r3, [r4, #16]
 8004184:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0a2      	beq.n	80040d2 <_printf_float+0x9a>
 800418c:	232d      	movs	r3, #45	; 0x2d
 800418e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004192:	e79e      	b.n	80040d2 <_printf_float+0x9a>
 8004194:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004198:	f000 816e 	beq.w	8004478 <_printf_float+0x440>
 800419c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041a0:	d1b9      	bne.n	8004116 <_printf_float+0xde>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1b7      	bne.n	8004116 <_printf_float+0xde>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e7b4      	b.n	8004114 <_printf_float+0xdc>
 80041aa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80041ae:	d119      	bne.n	80041e4 <_printf_float+0x1ac>
 80041b0:	2900      	cmp	r1, #0
 80041b2:	6863      	ldr	r3, [r4, #4]
 80041b4:	dd0c      	ble.n	80041d0 <_printf_float+0x198>
 80041b6:	6121      	str	r1, [r4, #16]
 80041b8:	b913      	cbnz	r3, 80041c0 <_printf_float+0x188>
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	07d2      	lsls	r2, r2, #31
 80041be:	d502      	bpl.n	80041c6 <_printf_float+0x18e>
 80041c0:	3301      	adds	r3, #1
 80041c2:	440b      	add	r3, r1
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041c8:	f04f 0900 	mov.w	r9, #0
 80041cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80041ce:	e7d9      	b.n	8004184 <_printf_float+0x14c>
 80041d0:	b913      	cbnz	r3, 80041d8 <_printf_float+0x1a0>
 80041d2:	6822      	ldr	r2, [r4, #0]
 80041d4:	07d0      	lsls	r0, r2, #31
 80041d6:	d501      	bpl.n	80041dc <_printf_float+0x1a4>
 80041d8:	3302      	adds	r3, #2
 80041da:	e7f3      	b.n	80041c4 <_printf_float+0x18c>
 80041dc:	2301      	movs	r3, #1
 80041de:	e7f1      	b.n	80041c4 <_printf_float+0x18c>
 80041e0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80041e4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80041e8:	4293      	cmp	r3, r2
 80041ea:	db05      	blt.n	80041f8 <_printf_float+0x1c0>
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	6123      	str	r3, [r4, #16]
 80041f0:	07d1      	lsls	r1, r2, #31
 80041f2:	d5e8      	bpl.n	80041c6 <_printf_float+0x18e>
 80041f4:	3301      	adds	r3, #1
 80041f6:	e7e5      	b.n	80041c4 <_printf_float+0x18c>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bfcc      	ite	gt
 80041fc:	2301      	movgt	r3, #1
 80041fe:	f1c3 0302 	rsble	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	e7de      	b.n	80041c4 <_printf_float+0x18c>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	055a      	lsls	r2, r3, #21
 800420a:	d407      	bmi.n	800421c <_printf_float+0x1e4>
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	463a      	mov	r2, r7
 8004210:	4659      	mov	r1, fp
 8004212:	4628      	mov	r0, r5
 8004214:	47b0      	blx	r6
 8004216:	3001      	adds	r0, #1
 8004218:	d129      	bne.n	800426e <_printf_float+0x236>
 800421a:	e764      	b.n	80040e6 <_printf_float+0xae>
 800421c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004220:	f240 80d7 	bls.w	80043d2 <_printf_float+0x39a>
 8004224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004228:	2200      	movs	r2, #0
 800422a:	2300      	movs	r3, #0
 800422c:	f7fc fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 8004230:	b388      	cbz	r0, 8004296 <_printf_float+0x25e>
 8004232:	2301      	movs	r3, #1
 8004234:	4a40      	ldr	r2, [pc, #256]	; (8004338 <_printf_float+0x300>)
 8004236:	4659      	mov	r1, fp
 8004238:	4628      	mov	r0, r5
 800423a:	47b0      	blx	r6
 800423c:	3001      	adds	r0, #1
 800423e:	f43f af52 	beq.w	80040e6 <_printf_float+0xae>
 8004242:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004246:	429a      	cmp	r2, r3
 8004248:	db02      	blt.n	8004250 <_printf_float+0x218>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	07d8      	lsls	r0, r3, #31
 800424e:	d50e      	bpl.n	800426e <_printf_float+0x236>
 8004250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004254:	4659      	mov	r1, fp
 8004256:	4628      	mov	r0, r5
 8004258:	47b0      	blx	r6
 800425a:	3001      	adds	r0, #1
 800425c:	f43f af43 	beq.w	80040e6 <_printf_float+0xae>
 8004260:	2700      	movs	r7, #0
 8004262:	f104 081a 	add.w	r8, r4, #26
 8004266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004268:	3b01      	subs	r3, #1
 800426a:	42bb      	cmp	r3, r7
 800426c:	dc09      	bgt.n	8004282 <_printf_float+0x24a>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	079f      	lsls	r7, r3, #30
 8004272:	f100 80fd 	bmi.w	8004470 <_printf_float+0x438>
 8004276:	68e0      	ldr	r0, [r4, #12]
 8004278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800427a:	4298      	cmp	r0, r3
 800427c:	bfb8      	it	lt
 800427e:	4618      	movlt	r0, r3
 8004280:	e733      	b.n	80040ea <_printf_float+0xb2>
 8004282:	2301      	movs	r3, #1
 8004284:	4642      	mov	r2, r8
 8004286:	4659      	mov	r1, fp
 8004288:	4628      	mov	r0, r5
 800428a:	47b0      	blx	r6
 800428c:	3001      	adds	r0, #1
 800428e:	f43f af2a 	beq.w	80040e6 <_printf_float+0xae>
 8004292:	3701      	adds	r7, #1
 8004294:	e7e7      	b.n	8004266 <_printf_float+0x22e>
 8004296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004298:	2b00      	cmp	r3, #0
 800429a:	dc2b      	bgt.n	80042f4 <_printf_float+0x2bc>
 800429c:	2301      	movs	r3, #1
 800429e:	4a26      	ldr	r2, [pc, #152]	; (8004338 <_printf_float+0x300>)
 80042a0:	4659      	mov	r1, fp
 80042a2:	4628      	mov	r0, r5
 80042a4:	47b0      	blx	r6
 80042a6:	3001      	adds	r0, #1
 80042a8:	f43f af1d 	beq.w	80040e6 <_printf_float+0xae>
 80042ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042ae:	b923      	cbnz	r3, 80042ba <_printf_float+0x282>
 80042b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b2:	b913      	cbnz	r3, 80042ba <_printf_float+0x282>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	07d9      	lsls	r1, r3, #31
 80042b8:	d5d9      	bpl.n	800426e <_printf_float+0x236>
 80042ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042be:	4659      	mov	r1, fp
 80042c0:	4628      	mov	r0, r5
 80042c2:	47b0      	blx	r6
 80042c4:	3001      	adds	r0, #1
 80042c6:	f43f af0e 	beq.w	80040e6 <_printf_float+0xae>
 80042ca:	f04f 0800 	mov.w	r8, #0
 80042ce:	f104 091a 	add.w	r9, r4, #26
 80042d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042d4:	425b      	negs	r3, r3
 80042d6:	4543      	cmp	r3, r8
 80042d8:	dc01      	bgt.n	80042de <_printf_float+0x2a6>
 80042da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042dc:	e797      	b.n	800420e <_printf_float+0x1d6>
 80042de:	2301      	movs	r3, #1
 80042e0:	464a      	mov	r2, r9
 80042e2:	4659      	mov	r1, fp
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b0      	blx	r6
 80042e8:	3001      	adds	r0, #1
 80042ea:	f43f aefc 	beq.w	80040e6 <_printf_float+0xae>
 80042ee:	f108 0801 	add.w	r8, r8, #1
 80042f2:	e7ee      	b.n	80042d2 <_printf_float+0x29a>
 80042f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042f8:	429a      	cmp	r2, r3
 80042fa:	bfa8      	it	ge
 80042fc:	461a      	movge	r2, r3
 80042fe:	2a00      	cmp	r2, #0
 8004300:	4690      	mov	r8, r2
 8004302:	dd07      	ble.n	8004314 <_printf_float+0x2dc>
 8004304:	4613      	mov	r3, r2
 8004306:	4659      	mov	r1, fp
 8004308:	463a      	mov	r2, r7
 800430a:	4628      	mov	r0, r5
 800430c:	47b0      	blx	r6
 800430e:	3001      	adds	r0, #1
 8004310:	f43f aee9 	beq.w	80040e6 <_printf_float+0xae>
 8004314:	f104 031a 	add.w	r3, r4, #26
 8004318:	f04f 0a00 	mov.w	sl, #0
 800431c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004320:	930b      	str	r3, [sp, #44]	; 0x2c
 8004322:	e015      	b.n	8004350 <_printf_float+0x318>
 8004324:	7fefffff 	.word	0x7fefffff
 8004328:	08006c50 	.word	0x08006c50
 800432c:	08006c4c 	.word	0x08006c4c
 8004330:	08006c58 	.word	0x08006c58
 8004334:	08006c54 	.word	0x08006c54
 8004338:	08006c5c 	.word	0x08006c5c
 800433c:	2301      	movs	r3, #1
 800433e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004340:	4659      	mov	r1, fp
 8004342:	4628      	mov	r0, r5
 8004344:	47b0      	blx	r6
 8004346:	3001      	adds	r0, #1
 8004348:	f43f aecd 	beq.w	80040e6 <_printf_float+0xae>
 800434c:	f10a 0a01 	add.w	sl, sl, #1
 8004350:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004354:	eba9 0308 	sub.w	r3, r9, r8
 8004358:	4553      	cmp	r3, sl
 800435a:	dcef      	bgt.n	800433c <_printf_float+0x304>
 800435c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004360:	429a      	cmp	r2, r3
 8004362:	444f      	add	r7, r9
 8004364:	db14      	blt.n	8004390 <_printf_float+0x358>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	07da      	lsls	r2, r3, #31
 800436a:	d411      	bmi.n	8004390 <_printf_float+0x358>
 800436c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800436e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004370:	eba3 0209 	sub.w	r2, r3, r9
 8004374:	eba3 0901 	sub.w	r9, r3, r1
 8004378:	4591      	cmp	r9, r2
 800437a:	bfa8      	it	ge
 800437c:	4691      	movge	r9, r2
 800437e:	f1b9 0f00 	cmp.w	r9, #0
 8004382:	dc0d      	bgt.n	80043a0 <_printf_float+0x368>
 8004384:	2700      	movs	r7, #0
 8004386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800438a:	f104 081a 	add.w	r8, r4, #26
 800438e:	e018      	b.n	80043c2 <_printf_float+0x38a>
 8004390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004394:	4659      	mov	r1, fp
 8004396:	4628      	mov	r0, r5
 8004398:	47b0      	blx	r6
 800439a:	3001      	adds	r0, #1
 800439c:	d1e6      	bne.n	800436c <_printf_float+0x334>
 800439e:	e6a2      	b.n	80040e6 <_printf_float+0xae>
 80043a0:	464b      	mov	r3, r9
 80043a2:	463a      	mov	r2, r7
 80043a4:	4659      	mov	r1, fp
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b0      	blx	r6
 80043aa:	3001      	adds	r0, #1
 80043ac:	d1ea      	bne.n	8004384 <_printf_float+0x34c>
 80043ae:	e69a      	b.n	80040e6 <_printf_float+0xae>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4642      	mov	r2, r8
 80043b4:	4659      	mov	r1, fp
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b0      	blx	r6
 80043ba:	3001      	adds	r0, #1
 80043bc:	f43f ae93 	beq.w	80040e6 <_printf_float+0xae>
 80043c0:	3701      	adds	r7, #1
 80043c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	eba3 0309 	sub.w	r3, r3, r9
 80043cc:	42bb      	cmp	r3, r7
 80043ce:	dcef      	bgt.n	80043b0 <_printf_float+0x378>
 80043d0:	e74d      	b.n	800426e <_printf_float+0x236>
 80043d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043d4:	2a01      	cmp	r2, #1
 80043d6:	dc01      	bgt.n	80043dc <_printf_float+0x3a4>
 80043d8:	07db      	lsls	r3, r3, #31
 80043da:	d538      	bpl.n	800444e <_printf_float+0x416>
 80043dc:	2301      	movs	r3, #1
 80043de:	463a      	mov	r2, r7
 80043e0:	4659      	mov	r1, fp
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b0      	blx	r6
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f ae7d 	beq.w	80040e6 <_printf_float+0xae>
 80043ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f0:	4659      	mov	r1, fp
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b0      	blx	r6
 80043f6:	3001      	adds	r0, #1
 80043f8:	f107 0701 	add.w	r7, r7, #1
 80043fc:	f43f ae73 	beq.w	80040e6 <_printf_float+0xae>
 8004400:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004406:	2200      	movs	r2, #0
 8004408:	f103 38ff 	add.w	r8, r3, #4294967295
 800440c:	2300      	movs	r3, #0
 800440e:	f7fc facb 	bl	80009a8 <__aeabi_dcmpeq>
 8004412:	b9c0      	cbnz	r0, 8004446 <_printf_float+0x40e>
 8004414:	4643      	mov	r3, r8
 8004416:	463a      	mov	r2, r7
 8004418:	4659      	mov	r1, fp
 800441a:	4628      	mov	r0, r5
 800441c:	47b0      	blx	r6
 800441e:	3001      	adds	r0, #1
 8004420:	d10d      	bne.n	800443e <_printf_float+0x406>
 8004422:	e660      	b.n	80040e6 <_printf_float+0xae>
 8004424:	2301      	movs	r3, #1
 8004426:	4642      	mov	r2, r8
 8004428:	4659      	mov	r1, fp
 800442a:	4628      	mov	r0, r5
 800442c:	47b0      	blx	r6
 800442e:	3001      	adds	r0, #1
 8004430:	f43f ae59 	beq.w	80040e6 <_printf_float+0xae>
 8004434:	3701      	adds	r7, #1
 8004436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004438:	3b01      	subs	r3, #1
 800443a:	42bb      	cmp	r3, r7
 800443c:	dcf2      	bgt.n	8004424 <_printf_float+0x3ec>
 800443e:	464b      	mov	r3, r9
 8004440:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004444:	e6e4      	b.n	8004210 <_printf_float+0x1d8>
 8004446:	2700      	movs	r7, #0
 8004448:	f104 081a 	add.w	r8, r4, #26
 800444c:	e7f3      	b.n	8004436 <_printf_float+0x3fe>
 800444e:	2301      	movs	r3, #1
 8004450:	e7e1      	b.n	8004416 <_printf_float+0x3de>
 8004452:	2301      	movs	r3, #1
 8004454:	4642      	mov	r2, r8
 8004456:	4659      	mov	r1, fp
 8004458:	4628      	mov	r0, r5
 800445a:	47b0      	blx	r6
 800445c:	3001      	adds	r0, #1
 800445e:	f43f ae42 	beq.w	80040e6 <_printf_float+0xae>
 8004462:	3701      	adds	r7, #1
 8004464:	68e3      	ldr	r3, [r4, #12]
 8004466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	42bb      	cmp	r3, r7
 800446c:	dcf1      	bgt.n	8004452 <_printf_float+0x41a>
 800446e:	e702      	b.n	8004276 <_printf_float+0x23e>
 8004470:	2700      	movs	r7, #0
 8004472:	f104 0819 	add.w	r8, r4, #25
 8004476:	e7f5      	b.n	8004464 <_printf_float+0x42c>
 8004478:	2b00      	cmp	r3, #0
 800447a:	f43f ae94 	beq.w	80041a6 <_printf_float+0x16e>
 800447e:	f04f 0c00 	mov.w	ip, #0
 8004482:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004486:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800448a:	6022      	str	r2, [r4, #0]
 800448c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004490:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	463a      	mov	r2, r7
 8004498:	464b      	mov	r3, r9
 800449a:	4628      	mov	r0, r5
 800449c:	f7ff fd3b 	bl	8003f16 <__cvt>
 80044a0:	4607      	mov	r7, r0
 80044a2:	e64f      	b.n	8004144 <_printf_float+0x10c>

080044a4 <_printf_common>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4691      	mov	r9, r2
 80044aa:	461f      	mov	r7, r3
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	4606      	mov	r6, r0
 80044b2:	4293      	cmp	r3, r2
 80044b4:	bfb8      	it	lt
 80044b6:	4613      	movlt	r3, r2
 80044b8:	f8c9 3000 	str.w	r3, [r9]
 80044bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c0:	460c      	mov	r4, r1
 80044c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044c6:	b112      	cbz	r2, 80044ce <_printf_common+0x2a>
 80044c8:	3301      	adds	r3, #1
 80044ca:	f8c9 3000 	str.w	r3, [r9]
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	0699      	lsls	r1, r3, #26
 80044d2:	bf42      	ittt	mi
 80044d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80044d8:	3302      	addmi	r3, #2
 80044da:	f8c9 3000 	strmi.w	r3, [r9]
 80044de:	6825      	ldr	r5, [r4, #0]
 80044e0:	f015 0506 	ands.w	r5, r5, #6
 80044e4:	d107      	bne.n	80044f6 <_printf_common+0x52>
 80044e6:	f104 0a19 	add.w	sl, r4, #25
 80044ea:	68e3      	ldr	r3, [r4, #12]
 80044ec:	f8d9 2000 	ldr.w	r2, [r9]
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	dc29      	bgt.n	800454a <_printf_common+0xa6>
 80044f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	3300      	adds	r3, #0
 80044fe:	bf18      	it	ne
 8004500:	2301      	movne	r3, #1
 8004502:	0692      	lsls	r2, r2, #26
 8004504:	d42e      	bmi.n	8004564 <_printf_common+0xc0>
 8004506:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800450a:	4639      	mov	r1, r7
 800450c:	4630      	mov	r0, r6
 800450e:	47c0      	blx	r8
 8004510:	3001      	adds	r0, #1
 8004512:	d021      	beq.n	8004558 <_printf_common+0xb4>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	68e5      	ldr	r5, [r4, #12]
 8004518:	f003 0306 	and.w	r3, r3, #6
 800451c:	2b04      	cmp	r3, #4
 800451e:	bf18      	it	ne
 8004520:	2500      	movne	r5, #0
 8004522:	f8d9 2000 	ldr.w	r2, [r9]
 8004526:	f04f 0900 	mov.w	r9, #0
 800452a:	bf08      	it	eq
 800452c:	1aad      	subeq	r5, r5, r2
 800452e:	68a3      	ldr	r3, [r4, #8]
 8004530:	6922      	ldr	r2, [r4, #16]
 8004532:	bf08      	it	eq
 8004534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004538:	4293      	cmp	r3, r2
 800453a:	bfc4      	itt	gt
 800453c:	1a9b      	subgt	r3, r3, r2
 800453e:	18ed      	addgt	r5, r5, r3
 8004540:	341a      	adds	r4, #26
 8004542:	454d      	cmp	r5, r9
 8004544:	d11a      	bne.n	800457c <_printf_common+0xd8>
 8004546:	2000      	movs	r0, #0
 8004548:	e008      	b.n	800455c <_printf_common+0xb8>
 800454a:	2301      	movs	r3, #1
 800454c:	4652      	mov	r2, sl
 800454e:	4639      	mov	r1, r7
 8004550:	4630      	mov	r0, r6
 8004552:	47c0      	blx	r8
 8004554:	3001      	adds	r0, #1
 8004556:	d103      	bne.n	8004560 <_printf_common+0xbc>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004560:	3501      	adds	r5, #1
 8004562:	e7c2      	b.n	80044ea <_printf_common+0x46>
 8004564:	2030      	movs	r0, #48	; 0x30
 8004566:	18e1      	adds	r1, r4, r3
 8004568:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004572:	4422      	add	r2, r4
 8004574:	3302      	adds	r3, #2
 8004576:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800457a:	e7c4      	b.n	8004506 <_printf_common+0x62>
 800457c:	2301      	movs	r3, #1
 800457e:	4622      	mov	r2, r4
 8004580:	4639      	mov	r1, r7
 8004582:	4630      	mov	r0, r6
 8004584:	47c0      	blx	r8
 8004586:	3001      	adds	r0, #1
 8004588:	d0e6      	beq.n	8004558 <_printf_common+0xb4>
 800458a:	f109 0901 	add.w	r9, r9, #1
 800458e:	e7d8      	b.n	8004542 <_printf_common+0x9e>

08004590 <_printf_i>:
 8004590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004594:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004598:	460c      	mov	r4, r1
 800459a:	7e09      	ldrb	r1, [r1, #24]
 800459c:	b085      	sub	sp, #20
 800459e:	296e      	cmp	r1, #110	; 0x6e
 80045a0:	4617      	mov	r7, r2
 80045a2:	4606      	mov	r6, r0
 80045a4:	4698      	mov	r8, r3
 80045a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045a8:	f000 80b3 	beq.w	8004712 <_printf_i+0x182>
 80045ac:	d822      	bhi.n	80045f4 <_printf_i+0x64>
 80045ae:	2963      	cmp	r1, #99	; 0x63
 80045b0:	d036      	beq.n	8004620 <_printf_i+0x90>
 80045b2:	d80a      	bhi.n	80045ca <_printf_i+0x3a>
 80045b4:	2900      	cmp	r1, #0
 80045b6:	f000 80b9 	beq.w	800472c <_printf_i+0x19c>
 80045ba:	2958      	cmp	r1, #88	; 0x58
 80045bc:	f000 8083 	beq.w	80046c6 <_printf_i+0x136>
 80045c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045c8:	e032      	b.n	8004630 <_printf_i+0xa0>
 80045ca:	2964      	cmp	r1, #100	; 0x64
 80045cc:	d001      	beq.n	80045d2 <_printf_i+0x42>
 80045ce:	2969      	cmp	r1, #105	; 0x69
 80045d0:	d1f6      	bne.n	80045c0 <_printf_i+0x30>
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	6813      	ldr	r3, [r2, #0]
 80045d6:	0605      	lsls	r5, r0, #24
 80045d8:	f103 0104 	add.w	r1, r3, #4
 80045dc:	d52a      	bpl.n	8004634 <_printf_i+0xa4>
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6011      	str	r1, [r2, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da03      	bge.n	80045ee <_printf_i+0x5e>
 80045e6:	222d      	movs	r2, #45	; 0x2d
 80045e8:	425b      	negs	r3, r3
 80045ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80045ee:	486f      	ldr	r0, [pc, #444]	; (80047ac <_printf_i+0x21c>)
 80045f0:	220a      	movs	r2, #10
 80045f2:	e039      	b.n	8004668 <_printf_i+0xd8>
 80045f4:	2973      	cmp	r1, #115	; 0x73
 80045f6:	f000 809d 	beq.w	8004734 <_printf_i+0x1a4>
 80045fa:	d808      	bhi.n	800460e <_printf_i+0x7e>
 80045fc:	296f      	cmp	r1, #111	; 0x6f
 80045fe:	d020      	beq.n	8004642 <_printf_i+0xb2>
 8004600:	2970      	cmp	r1, #112	; 0x70
 8004602:	d1dd      	bne.n	80045c0 <_printf_i+0x30>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	f043 0320 	orr.w	r3, r3, #32
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	e003      	b.n	8004616 <_printf_i+0x86>
 800460e:	2975      	cmp	r1, #117	; 0x75
 8004610:	d017      	beq.n	8004642 <_printf_i+0xb2>
 8004612:	2978      	cmp	r1, #120	; 0x78
 8004614:	d1d4      	bne.n	80045c0 <_printf_i+0x30>
 8004616:	2378      	movs	r3, #120	; 0x78
 8004618:	4865      	ldr	r0, [pc, #404]	; (80047b0 <_printf_i+0x220>)
 800461a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800461e:	e055      	b.n	80046cc <_printf_i+0x13c>
 8004620:	6813      	ldr	r3, [r2, #0]
 8004622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004626:	1d19      	adds	r1, r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6011      	str	r1, [r2, #0]
 800462c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004630:	2301      	movs	r3, #1
 8004632:	e08c      	b.n	800474e <_printf_i+0x1be>
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f010 0f40 	tst.w	r0, #64	; 0x40
 800463a:	6011      	str	r1, [r2, #0]
 800463c:	bf18      	it	ne
 800463e:	b21b      	sxthne	r3, r3
 8004640:	e7cf      	b.n	80045e2 <_printf_i+0x52>
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	1d18      	adds	r0, r3, #4
 8004648:	6010      	str	r0, [r2, #0]
 800464a:	0628      	lsls	r0, r5, #24
 800464c:	d501      	bpl.n	8004652 <_printf_i+0xc2>
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	e002      	b.n	8004658 <_printf_i+0xc8>
 8004652:	0668      	lsls	r0, r5, #25
 8004654:	d5fb      	bpl.n	800464e <_printf_i+0xbe>
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	296f      	cmp	r1, #111	; 0x6f
 800465a:	bf14      	ite	ne
 800465c:	220a      	movne	r2, #10
 800465e:	2208      	moveq	r2, #8
 8004660:	4852      	ldr	r0, [pc, #328]	; (80047ac <_printf_i+0x21c>)
 8004662:	2100      	movs	r1, #0
 8004664:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004668:	6865      	ldr	r5, [r4, #4]
 800466a:	2d00      	cmp	r5, #0
 800466c:	60a5      	str	r5, [r4, #8]
 800466e:	f2c0 8095 	blt.w	800479c <_printf_i+0x20c>
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	f021 0104 	bic.w	r1, r1, #4
 8004678:	6021      	str	r1, [r4, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d13d      	bne.n	80046fa <_printf_i+0x16a>
 800467e:	2d00      	cmp	r5, #0
 8004680:	f040 808e 	bne.w	80047a0 <_printf_i+0x210>
 8004684:	4665      	mov	r5, ip
 8004686:	2a08      	cmp	r2, #8
 8004688:	d10b      	bne.n	80046a2 <_printf_i+0x112>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	07db      	lsls	r3, r3, #31
 800468e:	d508      	bpl.n	80046a2 <_printf_i+0x112>
 8004690:	6923      	ldr	r3, [r4, #16]
 8004692:	6862      	ldr	r2, [r4, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	bfde      	ittt	le
 8004698:	2330      	movle	r3, #48	; 0x30
 800469a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800469e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046a2:	ebac 0305 	sub.w	r3, ip, r5
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	f8cd 8000 	str.w	r8, [sp]
 80046ac:	463b      	mov	r3, r7
 80046ae:	aa03      	add	r2, sp, #12
 80046b0:	4621      	mov	r1, r4
 80046b2:	4630      	mov	r0, r6
 80046b4:	f7ff fef6 	bl	80044a4 <_printf_common>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d14d      	bne.n	8004758 <_printf_i+0x1c8>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	b005      	add	sp, #20
 80046c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046c6:	4839      	ldr	r0, [pc, #228]	; (80047ac <_printf_i+0x21c>)
 80046c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	6821      	ldr	r1, [r4, #0]
 80046d0:	1d1d      	adds	r5, r3, #4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6015      	str	r5, [r2, #0]
 80046d6:	060a      	lsls	r2, r1, #24
 80046d8:	d50b      	bpl.n	80046f2 <_printf_i+0x162>
 80046da:	07ca      	lsls	r2, r1, #31
 80046dc:	bf44      	itt	mi
 80046de:	f041 0120 	orrmi.w	r1, r1, #32
 80046e2:	6021      	strmi	r1, [r4, #0]
 80046e4:	b91b      	cbnz	r3, 80046ee <_printf_i+0x15e>
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	f022 0220 	bic.w	r2, r2, #32
 80046ec:	6022      	str	r2, [r4, #0]
 80046ee:	2210      	movs	r2, #16
 80046f0:	e7b7      	b.n	8004662 <_printf_i+0xd2>
 80046f2:	064d      	lsls	r5, r1, #25
 80046f4:	bf48      	it	mi
 80046f6:	b29b      	uxthmi	r3, r3
 80046f8:	e7ef      	b.n	80046da <_printf_i+0x14a>
 80046fa:	4665      	mov	r5, ip
 80046fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004700:	fb02 3311 	mls	r3, r2, r1, r3
 8004704:	5cc3      	ldrb	r3, [r0, r3]
 8004706:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800470a:	460b      	mov	r3, r1
 800470c:	2900      	cmp	r1, #0
 800470e:	d1f5      	bne.n	80046fc <_printf_i+0x16c>
 8004710:	e7b9      	b.n	8004686 <_printf_i+0xf6>
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	6825      	ldr	r5, [r4, #0]
 8004716:	1d18      	adds	r0, r3, #4
 8004718:	6961      	ldr	r1, [r4, #20]
 800471a:	6010      	str	r0, [r2, #0]
 800471c:	0628      	lsls	r0, r5, #24
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	d501      	bpl.n	8004726 <_printf_i+0x196>
 8004722:	6019      	str	r1, [r3, #0]
 8004724:	e002      	b.n	800472c <_printf_i+0x19c>
 8004726:	066a      	lsls	r2, r5, #25
 8004728:	d5fb      	bpl.n	8004722 <_printf_i+0x192>
 800472a:	8019      	strh	r1, [r3, #0]
 800472c:	2300      	movs	r3, #0
 800472e:	4665      	mov	r5, ip
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	e7b9      	b.n	80046a8 <_printf_i+0x118>
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	1d19      	adds	r1, r3, #4
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	681d      	ldr	r5, [r3, #0]
 800473c:	6862      	ldr	r2, [r4, #4]
 800473e:	2100      	movs	r1, #0
 8004740:	4628      	mov	r0, r5
 8004742:	f000 feaf 	bl	80054a4 <memchr>
 8004746:	b108      	cbz	r0, 800474c <_printf_i+0x1bc>
 8004748:	1b40      	subs	r0, r0, r5
 800474a:	6060      	str	r0, [r4, #4]
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	6123      	str	r3, [r4, #16]
 8004750:	2300      	movs	r3, #0
 8004752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004756:	e7a7      	b.n	80046a8 <_printf_i+0x118>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	462a      	mov	r2, r5
 800475c:	4639      	mov	r1, r7
 800475e:	4630      	mov	r0, r6
 8004760:	47c0      	blx	r8
 8004762:	3001      	adds	r0, #1
 8004764:	d0aa      	beq.n	80046bc <_printf_i+0x12c>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	079b      	lsls	r3, r3, #30
 800476a:	d413      	bmi.n	8004794 <_printf_i+0x204>
 800476c:	68e0      	ldr	r0, [r4, #12]
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	4298      	cmp	r0, r3
 8004772:	bfb8      	it	lt
 8004774:	4618      	movlt	r0, r3
 8004776:	e7a3      	b.n	80046c0 <_printf_i+0x130>
 8004778:	2301      	movs	r3, #1
 800477a:	464a      	mov	r2, r9
 800477c:	4639      	mov	r1, r7
 800477e:	4630      	mov	r0, r6
 8004780:	47c0      	blx	r8
 8004782:	3001      	adds	r0, #1
 8004784:	d09a      	beq.n	80046bc <_printf_i+0x12c>
 8004786:	3501      	adds	r5, #1
 8004788:	68e3      	ldr	r3, [r4, #12]
 800478a:	9a03      	ldr	r2, [sp, #12]
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	42ab      	cmp	r3, r5
 8004790:	dcf2      	bgt.n	8004778 <_printf_i+0x1e8>
 8004792:	e7eb      	b.n	800476c <_printf_i+0x1dc>
 8004794:	2500      	movs	r5, #0
 8004796:	f104 0919 	add.w	r9, r4, #25
 800479a:	e7f5      	b.n	8004788 <_printf_i+0x1f8>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1ac      	bne.n	80046fa <_printf_i+0x16a>
 80047a0:	7803      	ldrb	r3, [r0, #0]
 80047a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047aa:	e76c      	b.n	8004686 <_printf_i+0xf6>
 80047ac:	08006c5e 	.word	0x08006c5e
 80047b0:	08006c6f 	.word	0x08006c6f

080047b4 <siprintf>:
 80047b4:	b40e      	push	{r1, r2, r3}
 80047b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ba:	b500      	push	{lr}
 80047bc:	b09c      	sub	sp, #112	; 0x70
 80047be:	ab1d      	add	r3, sp, #116	; 0x74
 80047c0:	9002      	str	r0, [sp, #8]
 80047c2:	9006      	str	r0, [sp, #24]
 80047c4:	9107      	str	r1, [sp, #28]
 80047c6:	9104      	str	r1, [sp, #16]
 80047c8:	4808      	ldr	r0, [pc, #32]	; (80047ec <siprintf+0x38>)
 80047ca:	4909      	ldr	r1, [pc, #36]	; (80047f0 <siprintf+0x3c>)
 80047cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	6800      	ldr	r0, [r0, #0]
 80047d4:	a902      	add	r1, sp, #8
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	f001 fa5c 	bl	8005c94 <_svfiprintf_r>
 80047dc:	2200      	movs	r2, #0
 80047de:	9b02      	ldr	r3, [sp, #8]
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	b01c      	add	sp, #112	; 0x70
 80047e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e8:	b003      	add	sp, #12
 80047ea:	4770      	bx	lr
 80047ec:	2000000c 	.word	0x2000000c
 80047f0:	ffff0208 	.word	0xffff0208

080047f4 <quorem>:
 80047f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f8:	6903      	ldr	r3, [r0, #16]
 80047fa:	690c      	ldr	r4, [r1, #16]
 80047fc:	4680      	mov	r8, r0
 80047fe:	42a3      	cmp	r3, r4
 8004800:	f2c0 8084 	blt.w	800490c <quorem+0x118>
 8004804:	3c01      	subs	r4, #1
 8004806:	f101 0714 	add.w	r7, r1, #20
 800480a:	f100 0614 	add.w	r6, r0, #20
 800480e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004812:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004816:	3501      	adds	r5, #1
 8004818:	fbb0 f5f5 	udiv	r5, r0, r5
 800481c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004820:	eb06 030c 	add.w	r3, r6, ip
 8004824:	eb07 090c 	add.w	r9, r7, ip
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	b39d      	cbz	r5, 8004894 <quorem+0xa0>
 800482c:	f04f 0a00 	mov.w	sl, #0
 8004830:	4638      	mov	r0, r7
 8004832:	46b6      	mov	lr, r6
 8004834:	46d3      	mov	fp, sl
 8004836:	f850 2b04 	ldr.w	r2, [r0], #4
 800483a:	b293      	uxth	r3, r2
 800483c:	fb05 a303 	mla	r3, r5, r3, sl
 8004840:	0c12      	lsrs	r2, r2, #16
 8004842:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004846:	fb05 a202 	mla	r2, r5, r2, sl
 800484a:	b29b      	uxth	r3, r3
 800484c:	ebab 0303 	sub.w	r3, fp, r3
 8004850:	f8de b000 	ldr.w	fp, [lr]
 8004854:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004858:	fa1f fb8b 	uxth.w	fp, fp
 800485c:	445b      	add	r3, fp
 800485e:	fa1f fb82 	uxth.w	fp, r2
 8004862:	f8de 2000 	ldr.w	r2, [lr]
 8004866:	4581      	cmp	r9, r0
 8004868:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800486c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004870:	b29b      	uxth	r3, r3
 8004872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004876:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800487a:	f84e 3b04 	str.w	r3, [lr], #4
 800487e:	d2da      	bcs.n	8004836 <quorem+0x42>
 8004880:	f856 300c 	ldr.w	r3, [r6, ip]
 8004884:	b933      	cbnz	r3, 8004894 <quorem+0xa0>
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	3b04      	subs	r3, #4
 800488a:	429e      	cmp	r6, r3
 800488c:	461a      	mov	r2, r3
 800488e:	d331      	bcc.n	80048f4 <quorem+0x100>
 8004890:	f8c8 4010 	str.w	r4, [r8, #16]
 8004894:	4640      	mov	r0, r8
 8004896:	f001 f827 	bl	80058e8 <__mcmp>
 800489a:	2800      	cmp	r0, #0
 800489c:	db26      	blt.n	80048ec <quorem+0xf8>
 800489e:	4630      	mov	r0, r6
 80048a0:	f04f 0c00 	mov.w	ip, #0
 80048a4:	3501      	adds	r5, #1
 80048a6:	f857 1b04 	ldr.w	r1, [r7], #4
 80048aa:	f8d0 e000 	ldr.w	lr, [r0]
 80048ae:	b28b      	uxth	r3, r1
 80048b0:	ebac 0303 	sub.w	r3, ip, r3
 80048b4:	fa1f f28e 	uxth.w	r2, lr
 80048b8:	4413      	add	r3, r2
 80048ba:	0c0a      	lsrs	r2, r1, #16
 80048bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ca:	45b9      	cmp	r9, r7
 80048cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048d0:	f840 3b04 	str.w	r3, [r0], #4
 80048d4:	d2e7      	bcs.n	80048a6 <quorem+0xb2>
 80048d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80048da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048de:	b92a      	cbnz	r2, 80048ec <quorem+0xf8>
 80048e0:	3b04      	subs	r3, #4
 80048e2:	429e      	cmp	r6, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	d30b      	bcc.n	8004900 <quorem+0x10c>
 80048e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80048ec:	4628      	mov	r0, r5
 80048ee:	b003      	add	sp, #12
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	3b04      	subs	r3, #4
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	d1c9      	bne.n	8004890 <quorem+0x9c>
 80048fc:	3c01      	subs	r4, #1
 80048fe:	e7c4      	b.n	800488a <quorem+0x96>
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	3b04      	subs	r3, #4
 8004904:	2a00      	cmp	r2, #0
 8004906:	d1ef      	bne.n	80048e8 <quorem+0xf4>
 8004908:	3c01      	subs	r4, #1
 800490a:	e7ea      	b.n	80048e2 <quorem+0xee>
 800490c:	2000      	movs	r0, #0
 800490e:	e7ee      	b.n	80048ee <quorem+0xfa>

08004910 <_dtoa_r>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	4616      	mov	r6, r2
 8004916:	461f      	mov	r7, r3
 8004918:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800491a:	b095      	sub	sp, #84	; 0x54
 800491c:	4604      	mov	r4, r0
 800491e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004922:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004926:	b93d      	cbnz	r5, 8004938 <_dtoa_r+0x28>
 8004928:	2010      	movs	r0, #16
 800492a:	f000 fdb3 	bl	8005494 <malloc>
 800492e:	6260      	str	r0, [r4, #36]	; 0x24
 8004930:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004934:	6005      	str	r5, [r0, #0]
 8004936:	60c5      	str	r5, [r0, #12]
 8004938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	b151      	cbz	r1, 8004954 <_dtoa_r+0x44>
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	2301      	movs	r3, #1
 8004942:	4093      	lsls	r3, r2
 8004944:	604a      	str	r2, [r1, #4]
 8004946:	608b      	str	r3, [r1, #8]
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fded 	bl	8005528 <_Bfree>
 800494e:	2200      	movs	r2, #0
 8004950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	1e3b      	subs	r3, r7, #0
 8004956:	bfaf      	iteee	ge
 8004958:	2300      	movge	r3, #0
 800495a:	2201      	movlt	r2, #1
 800495c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004960:	9303      	strlt	r3, [sp, #12]
 8004962:	bfac      	ite	ge
 8004964:	f8c8 3000 	strge.w	r3, [r8]
 8004968:	f8c8 2000 	strlt.w	r2, [r8]
 800496c:	4bae      	ldr	r3, [pc, #696]	; (8004c28 <_dtoa_r+0x318>)
 800496e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004972:	ea33 0308 	bics.w	r3, r3, r8
 8004976:	d11b      	bne.n	80049b0 <_dtoa_r+0xa0>
 8004978:	f242 730f 	movw	r3, #9999	; 0x270f
 800497c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	9b02      	ldr	r3, [sp, #8]
 8004982:	b923      	cbnz	r3, 800498e <_dtoa_r+0x7e>
 8004984:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004988:	2800      	cmp	r0, #0
 800498a:	f000 8545 	beq.w	8005418 <_dtoa_r+0xb08>
 800498e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004990:	b953      	cbnz	r3, 80049a8 <_dtoa_r+0x98>
 8004992:	4ba6      	ldr	r3, [pc, #664]	; (8004c2c <_dtoa_r+0x31c>)
 8004994:	e021      	b.n	80049da <_dtoa_r+0xca>
 8004996:	4ba6      	ldr	r3, [pc, #664]	; (8004c30 <_dtoa_r+0x320>)
 8004998:	9306      	str	r3, [sp, #24]
 800499a:	3308      	adds	r3, #8
 800499c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	9806      	ldr	r0, [sp, #24]
 80049a2:	b015      	add	sp, #84	; 0x54
 80049a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a8:	4ba0      	ldr	r3, [pc, #640]	; (8004c2c <_dtoa_r+0x31c>)
 80049aa:	9306      	str	r3, [sp, #24]
 80049ac:	3303      	adds	r3, #3
 80049ae:	e7f5      	b.n	800499c <_dtoa_r+0x8c>
 80049b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2300      	movs	r3, #0
 80049b8:	4630      	mov	r0, r6
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fb fff4 	bl	80009a8 <__aeabi_dcmpeq>
 80049c0:	4682      	mov	sl, r0
 80049c2:	b160      	cbz	r0, 80049de <_dtoa_r+0xce>
 80049c4:	2301      	movs	r3, #1
 80049c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8520 	beq.w	8005412 <_dtoa_r+0xb02>
 80049d2:	4b98      	ldr	r3, [pc, #608]	; (8004c34 <_dtoa_r+0x324>)
 80049d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	3b01      	subs	r3, #1
 80049da:	9306      	str	r3, [sp, #24]
 80049dc:	e7e0      	b.n	80049a0 <_dtoa_r+0x90>
 80049de:	ab12      	add	r3, sp, #72	; 0x48
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	ab13      	add	r3, sp, #76	; 0x4c
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	4632      	mov	r2, r6
 80049e8:	463b      	mov	r3, r7
 80049ea:	4620      	mov	r0, r4
 80049ec:	f000 fff4 	bl	80059d8 <__d2b>
 80049f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80049f4:	4683      	mov	fp, r0
 80049f6:	2d00      	cmp	r5, #0
 80049f8:	d07d      	beq.n	8004af6 <_dtoa_r+0x1e6>
 80049fa:	46b0      	mov	r8, r6
 80049fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a00:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004a04:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004a08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004a10:	2200      	movs	r2, #0
 8004a12:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <_dtoa_r+0x328>)
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fb fba6 	bl	8000168 <__aeabi_dsub>
 8004a1c:	a37c      	add	r3, pc, #496	; (adr r3, 8004c10 <_dtoa_r+0x300>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fd59 	bl	80004d8 <__aeabi_dmul>
 8004a26:	a37c      	add	r3, pc, #496	; (adr r3, 8004c18 <_dtoa_r+0x308>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fb9e 	bl	800016c <__adddf3>
 8004a30:	4606      	mov	r6, r0
 8004a32:	4628      	mov	r0, r5
 8004a34:	460f      	mov	r7, r1
 8004a36:	f7fb fce5 	bl	8000404 <__aeabi_i2d>
 8004a3a:	a379      	add	r3, pc, #484	; (adr r3, 8004c20 <_dtoa_r+0x310>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fb fd4a 	bl	80004d8 <__aeabi_dmul>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4630      	mov	r0, r6
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fb fb8e 	bl	800016c <__adddf3>
 8004a50:	4606      	mov	r6, r0
 8004a52:	460f      	mov	r7, r1
 8004a54:	f7fb fff0 	bl	8000a38 <__aeabi_d2iz>
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4682      	mov	sl, r0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fb ffab 	bl	80009bc <__aeabi_dcmplt>
 8004a66:	b148      	cbz	r0, 8004a7c <_dtoa_r+0x16c>
 8004a68:	4650      	mov	r0, sl
 8004a6a:	f7fb fccb 	bl	8000404 <__aeabi_i2d>
 8004a6e:	4632      	mov	r2, r6
 8004a70:	463b      	mov	r3, r7
 8004a72:	f7fb ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8004a76:	b908      	cbnz	r0, 8004a7c <_dtoa_r+0x16c>
 8004a78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a7c:	f1ba 0f16 	cmp.w	sl, #22
 8004a80:	d85a      	bhi.n	8004b38 <_dtoa_r+0x228>
 8004a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a86:	496d      	ldr	r1, [pc, #436]	; (8004c3c <_dtoa_r+0x32c>)
 8004a88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a90:	f7fb ffb2 	bl	80009f8 <__aeabi_dcmpgt>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d051      	beq.n	8004b3c <_dtoa_r+0x22c>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8004aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004aa2:	1b5d      	subs	r5, r3, r5
 8004aa4:	1e6b      	subs	r3, r5, #1
 8004aa6:	9307      	str	r3, [sp, #28]
 8004aa8:	bf43      	ittte	mi
 8004aaa:	2300      	movmi	r3, #0
 8004aac:	f1c5 0901 	rsbmi	r9, r5, #1
 8004ab0:	9307      	strmi	r3, [sp, #28]
 8004ab2:	f04f 0900 	movpl.w	r9, #0
 8004ab6:	f1ba 0f00 	cmp.w	sl, #0
 8004aba:	db41      	blt.n	8004b40 <_dtoa_r+0x230>
 8004abc:	9b07      	ldr	r3, [sp, #28]
 8004abe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004ac2:	4453      	add	r3, sl
 8004ac4:	9307      	str	r3, [sp, #28]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9308      	str	r3, [sp, #32]
 8004aca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004acc:	2b09      	cmp	r3, #9
 8004ace:	f200 808f 	bhi.w	8004bf0 <_dtoa_r+0x2e0>
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	bfc4      	itt	gt
 8004ad6:	3b04      	subgt	r3, #4
 8004ad8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004ada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004adc:	bfc8      	it	gt
 8004ade:	2500      	movgt	r5, #0
 8004ae0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ae4:	bfd8      	it	le
 8004ae6:	2501      	movle	r5, #1
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	f200 808d 	bhi.w	8004c08 <_dtoa_r+0x2f8>
 8004aee:	e8df f003 	tbb	[pc, r3]
 8004af2:	7d7b      	.short	0x7d7b
 8004af4:	6f2f      	.short	0x6f2f
 8004af6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004afa:	441d      	add	r5, r3
 8004afc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004b00:	2820      	cmp	r0, #32
 8004b02:	dd13      	ble.n	8004b2c <_dtoa_r+0x21c>
 8004b04:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004b08:	9b02      	ldr	r3, [sp, #8]
 8004b0a:	fa08 f800 	lsl.w	r8, r8, r0
 8004b0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004b12:	fa23 f000 	lsr.w	r0, r3, r0
 8004b16:	ea48 0000 	orr.w	r0, r8, r0
 8004b1a:	f7fb fc63 	bl	80003e4 <__aeabi_ui2d>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4680      	mov	r8, r0
 8004b22:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004b26:	3d01      	subs	r5, #1
 8004b28:	9310      	str	r3, [sp, #64]	; 0x40
 8004b2a:	e771      	b.n	8004a10 <_dtoa_r+0x100>
 8004b2c:	9b02      	ldr	r3, [sp, #8]
 8004b2e:	f1c0 0020 	rsb	r0, r0, #32
 8004b32:	fa03 f000 	lsl.w	r0, r3, r0
 8004b36:	e7f0      	b.n	8004b1a <_dtoa_r+0x20a>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e7b0      	b.n	8004a9e <_dtoa_r+0x18e>
 8004b3c:	900d      	str	r0, [sp, #52]	; 0x34
 8004b3e:	e7af      	b.n	8004aa0 <_dtoa_r+0x190>
 8004b40:	f1ca 0300 	rsb	r3, sl, #0
 8004b44:	9308      	str	r3, [sp, #32]
 8004b46:	2300      	movs	r3, #0
 8004b48:	eba9 090a 	sub.w	r9, r9, sl
 8004b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b4e:	e7bc      	b.n	8004aca <_dtoa_r+0x1ba>
 8004b50:	2301      	movs	r3, #1
 8004b52:	9309      	str	r3, [sp, #36]	; 0x24
 8004b54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dd74      	ble.n	8004c44 <_dtoa_r+0x334>
 8004b5a:	4698      	mov	r8, r3
 8004b5c:	9304      	str	r3, [sp, #16]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b62:	6072      	str	r2, [r6, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	f102 0014 	add.w	r0, r2, #20
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	6871      	ldr	r1, [r6, #4]
 8004b6e:	d96e      	bls.n	8004c4e <_dtoa_r+0x33e>
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fca5 	bl	80054c0 <_Balloc>
 8004b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b78:	6030      	str	r0, [r6, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f1b8 0f0e 	cmp.w	r8, #14
 8004b80:	9306      	str	r3, [sp, #24]
 8004b82:	f200 80ed 	bhi.w	8004d60 <_dtoa_r+0x450>
 8004b86:	2d00      	cmp	r5, #0
 8004b88:	f000 80ea 	beq.w	8004d60 <_dtoa_r+0x450>
 8004b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b90:	f1ba 0f00 	cmp.w	sl, #0
 8004b94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004b98:	dd77      	ble.n	8004c8a <_dtoa_r+0x37a>
 8004b9a:	4a28      	ldr	r2, [pc, #160]	; (8004c3c <_dtoa_r+0x32c>)
 8004b9c:	f00a 030f 	and.w	r3, sl, #15
 8004ba0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ba4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ba8:	06f0      	lsls	r0, r6, #27
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004bb2:	d568      	bpl.n	8004c86 <_dtoa_r+0x376>
 8004bb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <_dtoa_r+0x330>)
 8004bba:	2503      	movs	r5, #3
 8004bbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bc0:	f7fb fdb4 	bl	800072c <__aeabi_ddiv>
 8004bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc8:	f006 060f 	and.w	r6, r6, #15
 8004bcc:	4f1c      	ldr	r7, [pc, #112]	; (8004c40 <_dtoa_r+0x330>)
 8004bce:	e04f      	b.n	8004c70 <_dtoa_r+0x360>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004bd6:	4453      	add	r3, sl
 8004bd8:	f103 0801 	add.w	r8, r3, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	4643      	mov	r3, r8
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	bfb8      	it	lt
 8004be4:	2301      	movlt	r3, #1
 8004be6:	e7ba      	b.n	8004b5e <_dtoa_r+0x24e>
 8004be8:	2300      	movs	r3, #0
 8004bea:	e7b2      	b.n	8004b52 <_dtoa_r+0x242>
 8004bec:	2300      	movs	r3, #0
 8004bee:	e7f0      	b.n	8004bd2 <_dtoa_r+0x2c2>
 8004bf0:	2501      	movs	r5, #1
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9509      	str	r5, [sp, #36]	; 0x24
 8004bf6:	931e      	str	r3, [sp, #120]	; 0x78
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	4698      	mov	r8, r3
 8004c02:	2312      	movs	r3, #18
 8004c04:	921f      	str	r2, [sp, #124]	; 0x7c
 8004c06:	e7aa      	b.n	8004b5e <_dtoa_r+0x24e>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0c:	e7f4      	b.n	8004bf8 <_dtoa_r+0x2e8>
 8004c0e:	bf00      	nop
 8004c10:	636f4361 	.word	0x636f4361
 8004c14:	3fd287a7 	.word	0x3fd287a7
 8004c18:	8b60c8b3 	.word	0x8b60c8b3
 8004c1c:	3fc68a28 	.word	0x3fc68a28
 8004c20:	509f79fb 	.word	0x509f79fb
 8004c24:	3fd34413 	.word	0x3fd34413
 8004c28:	7ff00000 	.word	0x7ff00000
 8004c2c:	08006c89 	.word	0x08006c89
 8004c30:	08006c80 	.word	0x08006c80
 8004c34:	08006c5d 	.word	0x08006c5d
 8004c38:	3ff80000 	.word	0x3ff80000
 8004c3c:	08006cb8 	.word	0x08006cb8
 8004c40:	08006c90 	.word	0x08006c90
 8004c44:	2301      	movs	r3, #1
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	4698      	mov	r8, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	e7da      	b.n	8004c04 <_dtoa_r+0x2f4>
 8004c4e:	3101      	adds	r1, #1
 8004c50:	6071      	str	r1, [r6, #4]
 8004c52:	0052      	lsls	r2, r2, #1
 8004c54:	e787      	b.n	8004b66 <_dtoa_r+0x256>
 8004c56:	07f1      	lsls	r1, r6, #31
 8004c58:	d508      	bpl.n	8004c6c <_dtoa_r+0x35c>
 8004c5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c62:	f7fb fc39 	bl	80004d8 <__aeabi_dmul>
 8004c66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c6a:	3501      	adds	r5, #1
 8004c6c:	1076      	asrs	r6, r6, #1
 8004c6e:	3708      	adds	r7, #8
 8004c70:	2e00      	cmp	r6, #0
 8004c72:	d1f0      	bne.n	8004c56 <_dtoa_r+0x346>
 8004c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7c:	f7fb fd56 	bl	800072c <__aeabi_ddiv>
 8004c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c84:	e01b      	b.n	8004cbe <_dtoa_r+0x3ae>
 8004c86:	2502      	movs	r5, #2
 8004c88:	e7a0      	b.n	8004bcc <_dtoa_r+0x2bc>
 8004c8a:	f000 80a4 	beq.w	8004dd6 <_dtoa_r+0x4c6>
 8004c8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c92:	f1ca 0600 	rsb	r6, sl, #0
 8004c96:	4ba0      	ldr	r3, [pc, #640]	; (8004f18 <_dtoa_r+0x608>)
 8004c98:	f006 020f 	and.w	r2, r6, #15
 8004c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fc18 	bl	80004d8 <__aeabi_dmul>
 8004ca8:	2502      	movs	r5, #2
 8004caa:	2300      	movs	r3, #0
 8004cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb0:	4f9a      	ldr	r7, [pc, #616]	; (8004f1c <_dtoa_r+0x60c>)
 8004cb2:	1136      	asrs	r6, r6, #4
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	f040 8083 	bne.w	8004dc0 <_dtoa_r+0x4b0>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e0      	bne.n	8004c80 <_dtoa_r+0x370>
 8004cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 808a 	beq.w	8004dda <_dtoa_r+0x4ca>
 8004cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004cce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4b92      	ldr	r3, [pc, #584]	; (8004f20 <_dtoa_r+0x610>)
 8004cd6:	f7fb fe71 	bl	80009bc <__aeabi_dcmplt>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d07d      	beq.n	8004dda <_dtoa_r+0x4ca>
 8004cde:	f1b8 0f00 	cmp.w	r8, #0
 8004ce2:	d07a      	beq.n	8004dda <_dtoa_r+0x4ca>
 8004ce4:	9b04      	ldr	r3, [sp, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd36      	ble.n	8004d58 <_dtoa_r+0x448>
 8004cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <_dtoa_r+0x614>)
 8004cf2:	f7fb fbf1 	bl	80004d8 <__aeabi_dmul>
 8004cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cfa:	9e04      	ldr	r6, [sp, #16]
 8004cfc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004d00:	3501      	adds	r5, #1
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7fb fb7e 	bl	8000404 <__aeabi_i2d>
 8004d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d0c:	f7fb fbe4 	bl	80004d8 <__aeabi_dmul>
 8004d10:	2200      	movs	r2, #0
 8004d12:	4b85      	ldr	r3, [pc, #532]	; (8004f28 <_dtoa_r+0x618>)
 8004d14:	f7fb fa2a 	bl	800016c <__adddf3>
 8004d18:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004d1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d20:	950b      	str	r5, [sp, #44]	; 0x2c
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	d15c      	bne.n	8004de0 <_dtoa_r+0x4d0>
 8004d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4b7f      	ldr	r3, [pc, #508]	; (8004f2c <_dtoa_r+0x61c>)
 8004d2e:	f7fb fa1b 	bl	8000168 <__aeabi_dsub>
 8004d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d34:	462b      	mov	r3, r5
 8004d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d3a:	f7fb fe5d 	bl	80009f8 <__aeabi_dcmpgt>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	f040 8281 	bne.w	8005246 <_dtoa_r+0x936>
 8004d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d4a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004d4e:	f7fb fe35 	bl	80009bc <__aeabi_dcmplt>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	f040 8275 	bne.w	8005242 <_dtoa_r+0x932>
 8004d58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f2c0 814b 	blt.w	8004ffe <_dtoa_r+0x6ee>
 8004d68:	f1ba 0f0e 	cmp.w	sl, #14
 8004d6c:	f300 8147 	bgt.w	8004ffe <_dtoa_r+0x6ee>
 8004d70:	4b69      	ldr	r3, [pc, #420]	; (8004f18 <_dtoa_r+0x608>)
 8004d72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f280 80d7 	bge.w	8004f34 <_dtoa_r+0x624>
 8004d86:	f1b8 0f00 	cmp.w	r8, #0
 8004d8a:	f300 80d3 	bgt.w	8004f34 <_dtoa_r+0x624>
 8004d8e:	f040 8257 	bne.w	8005240 <_dtoa_r+0x930>
 8004d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d96:	2200      	movs	r2, #0
 8004d98:	4b64      	ldr	r3, [pc, #400]	; (8004f2c <_dtoa_r+0x61c>)
 8004d9a:	f7fb fb9d 	bl	80004d8 <__aeabi_dmul>
 8004d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004da2:	f7fb fe1f 	bl	80009e4 <__aeabi_dcmpge>
 8004da6:	4646      	mov	r6, r8
 8004da8:	4647      	mov	r7, r8
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f040 822d 	bne.w	800520a <_dtoa_r+0x8fa>
 8004db0:	9b06      	ldr	r3, [sp, #24]
 8004db2:	9a06      	ldr	r2, [sp, #24]
 8004db4:	1c5d      	adds	r5, r3, #1
 8004db6:	2331      	movs	r3, #49	; 0x31
 8004db8:	f10a 0a01 	add.w	sl, sl, #1
 8004dbc:	7013      	strb	r3, [r2, #0]
 8004dbe:	e228      	b.n	8005212 <_dtoa_r+0x902>
 8004dc0:	07f2      	lsls	r2, r6, #31
 8004dc2:	d505      	bpl.n	8004dd0 <_dtoa_r+0x4c0>
 8004dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc8:	f7fb fb86 	bl	80004d8 <__aeabi_dmul>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	3501      	adds	r5, #1
 8004dd0:	1076      	asrs	r6, r6, #1
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	e76e      	b.n	8004cb4 <_dtoa_r+0x3a4>
 8004dd6:	2502      	movs	r5, #2
 8004dd8:	e771      	b.n	8004cbe <_dtoa_r+0x3ae>
 8004dda:	4657      	mov	r7, sl
 8004ddc:	4646      	mov	r6, r8
 8004dde:	e790      	b.n	8004d02 <_dtoa_r+0x3f2>
 8004de0:	4b4d      	ldr	r3, [pc, #308]	; (8004f18 <_dtoa_r+0x608>)
 8004de2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004de6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d048      	beq.n	8004e82 <_dtoa_r+0x572>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	2000      	movs	r0, #0
 8004df6:	494e      	ldr	r1, [pc, #312]	; (8004f30 <_dtoa_r+0x620>)
 8004df8:	f7fb fc98 	bl	800072c <__aeabi_ddiv>
 8004dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e00:	f7fb f9b2 	bl	8000168 <__aeabi_dsub>
 8004e04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e08:	9d06      	ldr	r5, [sp, #24]
 8004e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e0e:	f7fb fe13 	bl	8000a38 <__aeabi_d2iz>
 8004e12:	9011      	str	r0, [sp, #68]	; 0x44
 8004e14:	f7fb faf6 	bl	8000404 <__aeabi_i2d>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e20:	f7fb f9a2 	bl	8000168 <__aeabi_dsub>
 8004e24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e2a:	3330      	adds	r3, #48	; 0x30
 8004e2c:	f805 3b01 	strb.w	r3, [r5], #1
 8004e30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e34:	f7fb fdc2 	bl	80009bc <__aeabi_dcmplt>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d163      	bne.n	8004f04 <_dtoa_r+0x5f4>
 8004e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e40:	2000      	movs	r0, #0
 8004e42:	4937      	ldr	r1, [pc, #220]	; (8004f20 <_dtoa_r+0x610>)
 8004e44:	f7fb f990 	bl	8000168 <__aeabi_dsub>
 8004e48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e4c:	f7fb fdb6 	bl	80009bc <__aeabi_dcmplt>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f040 80b5 	bne.w	8004fc0 <_dtoa_r+0x6b0>
 8004e56:	9b06      	ldr	r3, [sp, #24]
 8004e58:	1aeb      	subs	r3, r5, r3
 8004e5a:	429e      	cmp	r6, r3
 8004e5c:	f77f af7c 	ble.w	8004d58 <_dtoa_r+0x448>
 8004e60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e64:	2200      	movs	r2, #0
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <_dtoa_r+0x614>)
 8004e68:	f7fb fb36 	bl	80004d8 <__aeabi_dmul>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e76:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <_dtoa_r+0x614>)
 8004e78:	f7fb fb2e 	bl	80004d8 <__aeabi_dmul>
 8004e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e80:	e7c3      	b.n	8004e0a <_dtoa_r+0x4fa>
 8004e82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e86:	f7fb fb27 	bl	80004d8 <__aeabi_dmul>
 8004e8a:	9b06      	ldr	r3, [sp, #24]
 8004e8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e90:	199d      	adds	r5, r3, r6
 8004e92:	461e      	mov	r6, r3
 8004e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e98:	f7fb fdce 	bl	8000a38 <__aeabi_d2iz>
 8004e9c:	9011      	str	r0, [sp, #68]	; 0x44
 8004e9e:	f7fb fab1 	bl	8000404 <__aeabi_i2d>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eaa:	f7fb f95d 	bl	8000168 <__aeabi_dsub>
 8004eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb4:	3330      	adds	r3, #48	; 0x30
 8004eb6:	f806 3b01 	strb.w	r3, [r6], #1
 8004eba:	42ae      	cmp	r6, r5
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	d124      	bne.n	8004f0c <_dtoa_r+0x5fc>
 8004ec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <_dtoa_r+0x620>)
 8004ec8:	f7fb f950 	bl	800016c <__adddf3>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ed4:	f7fb fd90 	bl	80009f8 <__aeabi_dcmpgt>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d171      	bne.n	8004fc0 <_dtoa_r+0x6b0>
 8004edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	4913      	ldr	r1, [pc, #76]	; (8004f30 <_dtoa_r+0x620>)
 8004ee4:	f7fb f940 	bl	8000168 <__aeabi_dsub>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef0:	f7fb fd64 	bl	80009bc <__aeabi_dcmplt>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	f43f af2f 	beq.w	8004d58 <_dtoa_r+0x448>
 8004efa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004efe:	1e6a      	subs	r2, r5, #1
 8004f00:	2b30      	cmp	r3, #48	; 0x30
 8004f02:	d001      	beq.n	8004f08 <_dtoa_r+0x5f8>
 8004f04:	46ba      	mov	sl, r7
 8004f06:	e04a      	b.n	8004f9e <_dtoa_r+0x68e>
 8004f08:	4615      	mov	r5, r2
 8004f0a:	e7f6      	b.n	8004efa <_dtoa_r+0x5ea>
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <_dtoa_r+0x614>)
 8004f0e:	f7fb fae3 	bl	80004d8 <__aeabi_dmul>
 8004f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f16:	e7bd      	b.n	8004e94 <_dtoa_r+0x584>
 8004f18:	08006cb8 	.word	0x08006cb8
 8004f1c:	08006c90 	.word	0x08006c90
 8004f20:	3ff00000 	.word	0x3ff00000
 8004f24:	40240000 	.word	0x40240000
 8004f28:	401c0000 	.word	0x401c0000
 8004f2c:	40140000 	.word	0x40140000
 8004f30:	3fe00000 	.word	0x3fe00000
 8004f34:	9d06      	ldr	r5, [sp, #24]
 8004f36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4639      	mov	r1, r7
 8004f42:	f7fb fbf3 	bl	800072c <__aeabi_ddiv>
 8004f46:	f7fb fd77 	bl	8000a38 <__aeabi_d2iz>
 8004f4a:	4681      	mov	r9, r0
 8004f4c:	f7fb fa5a 	bl	8000404 <__aeabi_i2d>
 8004f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f54:	f7fb fac0 	bl	80004d8 <__aeabi_dmul>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	4639      	mov	r1, r7
 8004f60:	f7fb f902 	bl	8000168 <__aeabi_dsub>
 8004f64:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004f68:	f805 6b01 	strb.w	r6, [r5], #1
 8004f6c:	9e06      	ldr	r6, [sp, #24]
 8004f6e:	4602      	mov	r2, r0
 8004f70:	1bae      	subs	r6, r5, r6
 8004f72:	45b0      	cmp	r8, r6
 8004f74:	460b      	mov	r3, r1
 8004f76:	d135      	bne.n	8004fe4 <_dtoa_r+0x6d4>
 8004f78:	f7fb f8f8 	bl	800016c <__adddf3>
 8004f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f80:	4606      	mov	r6, r0
 8004f82:	460f      	mov	r7, r1
 8004f84:	f7fb fd38 	bl	80009f8 <__aeabi_dcmpgt>
 8004f88:	b9c8      	cbnz	r0, 8004fbe <_dtoa_r+0x6ae>
 8004f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb fd09 	bl	80009a8 <__aeabi_dcmpeq>
 8004f96:	b110      	cbz	r0, 8004f9e <_dtoa_r+0x68e>
 8004f98:	f019 0f01 	tst.w	r9, #1
 8004f9c:	d10f      	bne.n	8004fbe <_dtoa_r+0x6ae>
 8004f9e:	4659      	mov	r1, fp
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fac1 	bl	8005528 <_Bfree>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004faa:	702b      	strb	r3, [r5, #0]
 8004fac:	f10a 0301 	add.w	r3, sl, #1
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f43f acf3 	beq.w	80049a0 <_dtoa_r+0x90>
 8004fba:	601d      	str	r5, [r3, #0]
 8004fbc:	e4f0      	b.n	80049a0 <_dtoa_r+0x90>
 8004fbe:	4657      	mov	r7, sl
 8004fc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fc4:	1e6b      	subs	r3, r5, #1
 8004fc6:	2a39      	cmp	r2, #57	; 0x39
 8004fc8:	d106      	bne.n	8004fd8 <_dtoa_r+0x6c8>
 8004fca:	9a06      	ldr	r2, [sp, #24]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d107      	bne.n	8004fe0 <_dtoa_r+0x6d0>
 8004fd0:	2330      	movs	r3, #48	; 0x30
 8004fd2:	7013      	strb	r3, [r2, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	3701      	adds	r7, #1
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	3201      	adds	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e791      	b.n	8004f04 <_dtoa_r+0x5f4>
 8004fe0:	461d      	mov	r5, r3
 8004fe2:	e7ed      	b.n	8004fc0 <_dtoa_r+0x6b0>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4b99      	ldr	r3, [pc, #612]	; (800524c <_dtoa_r+0x93c>)
 8004fe8:	f7fb fa76 	bl	80004d8 <__aeabi_dmul>
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	460f      	mov	r7, r1
 8004ff4:	f7fb fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d09e      	beq.n	8004f3a <_dtoa_r+0x62a>
 8004ffc:	e7cf      	b.n	8004f9e <_dtoa_r+0x68e>
 8004ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005000:	2a00      	cmp	r2, #0
 8005002:	f000 8088 	beq.w	8005116 <_dtoa_r+0x806>
 8005006:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005008:	2a01      	cmp	r2, #1
 800500a:	dc6d      	bgt.n	80050e8 <_dtoa_r+0x7d8>
 800500c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800500e:	2a00      	cmp	r2, #0
 8005010:	d066      	beq.n	80050e0 <_dtoa_r+0x7d0>
 8005012:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005016:	464d      	mov	r5, r9
 8005018:	9e08      	ldr	r6, [sp, #32]
 800501a:	9a07      	ldr	r2, [sp, #28]
 800501c:	2101      	movs	r1, #1
 800501e:	441a      	add	r2, r3
 8005020:	4620      	mov	r0, r4
 8005022:	4499      	add	r9, r3
 8005024:	9207      	str	r2, [sp, #28]
 8005026:	f000 fb1f 	bl	8005668 <__i2b>
 800502a:	4607      	mov	r7, r0
 800502c:	2d00      	cmp	r5, #0
 800502e:	dd0b      	ble.n	8005048 <_dtoa_r+0x738>
 8005030:	9b07      	ldr	r3, [sp, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	dd08      	ble.n	8005048 <_dtoa_r+0x738>
 8005036:	42ab      	cmp	r3, r5
 8005038:	bfa8      	it	ge
 800503a:	462b      	movge	r3, r5
 800503c:	9a07      	ldr	r2, [sp, #28]
 800503e:	eba9 0903 	sub.w	r9, r9, r3
 8005042:	1aed      	subs	r5, r5, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	9b08      	ldr	r3, [sp, #32]
 800504a:	b1eb      	cbz	r3, 8005088 <_dtoa_r+0x778>
 800504c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d065      	beq.n	800511e <_dtoa_r+0x80e>
 8005052:	b18e      	cbz	r6, 8005078 <_dtoa_r+0x768>
 8005054:	4639      	mov	r1, r7
 8005056:	4632      	mov	r2, r6
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fba3 	bl	80057a4 <__pow5mult>
 800505e:	465a      	mov	r2, fp
 8005060:	4601      	mov	r1, r0
 8005062:	4607      	mov	r7, r0
 8005064:	4620      	mov	r0, r4
 8005066:	f000 fb08 	bl	800567a <__multiply>
 800506a:	4659      	mov	r1, fp
 800506c:	900a      	str	r0, [sp, #40]	; 0x28
 800506e:	4620      	mov	r0, r4
 8005070:	f000 fa5a 	bl	8005528 <_Bfree>
 8005074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005076:	469b      	mov	fp, r3
 8005078:	9b08      	ldr	r3, [sp, #32]
 800507a:	1b9a      	subs	r2, r3, r6
 800507c:	d004      	beq.n	8005088 <_dtoa_r+0x778>
 800507e:	4659      	mov	r1, fp
 8005080:	4620      	mov	r0, r4
 8005082:	f000 fb8f 	bl	80057a4 <__pow5mult>
 8005086:	4683      	mov	fp, r0
 8005088:	2101      	movs	r1, #1
 800508a:	4620      	mov	r0, r4
 800508c:	f000 faec 	bl	8005668 <__i2b>
 8005090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005092:	4606      	mov	r6, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 81c6 	beq.w	8005426 <_dtoa_r+0xb16>
 800509a:	461a      	mov	r2, r3
 800509c:	4601      	mov	r1, r0
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 fb80 	bl	80057a4 <__pow5mult>
 80050a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050a6:	4606      	mov	r6, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	dc3e      	bgt.n	800512a <_dtoa_r+0x81a>
 80050ac:	9b02      	ldr	r3, [sp, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d137      	bne.n	8005122 <_dtoa_r+0x812>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d134      	bne.n	8005126 <_dtoa_r+0x816>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c2:	0d1b      	lsrs	r3, r3, #20
 80050c4:	051b      	lsls	r3, r3, #20
 80050c6:	b12b      	cbz	r3, 80050d4 <_dtoa_r+0x7c4>
 80050c8:	9b07      	ldr	r3, [sp, #28]
 80050ca:	f109 0901 	add.w	r9, r9, #1
 80050ce:	3301      	adds	r3, #1
 80050d0:	9307      	str	r3, [sp, #28]
 80050d2:	2301      	movs	r3, #1
 80050d4:	9308      	str	r3, [sp, #32]
 80050d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d128      	bne.n	800512e <_dtoa_r+0x81e>
 80050dc:	2001      	movs	r0, #1
 80050de:	e02e      	b.n	800513e <_dtoa_r+0x82e>
 80050e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050e6:	e796      	b.n	8005016 <_dtoa_r+0x706>
 80050e8:	9b08      	ldr	r3, [sp, #32]
 80050ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80050ee:	42b3      	cmp	r3, r6
 80050f0:	bfb7      	itett	lt
 80050f2:	9b08      	ldrlt	r3, [sp, #32]
 80050f4:	1b9e      	subge	r6, r3, r6
 80050f6:	1af2      	sublt	r2, r6, r3
 80050f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80050fa:	bfbf      	itttt	lt
 80050fc:	9608      	strlt	r6, [sp, #32]
 80050fe:	189b      	addlt	r3, r3, r2
 8005100:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005102:	2600      	movlt	r6, #0
 8005104:	f1b8 0f00 	cmp.w	r8, #0
 8005108:	bfb9      	ittee	lt
 800510a:	eba9 0508 	sublt.w	r5, r9, r8
 800510e:	2300      	movlt	r3, #0
 8005110:	464d      	movge	r5, r9
 8005112:	4643      	movge	r3, r8
 8005114:	e781      	b.n	800501a <_dtoa_r+0x70a>
 8005116:	9e08      	ldr	r6, [sp, #32]
 8005118:	464d      	mov	r5, r9
 800511a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800511c:	e786      	b.n	800502c <_dtoa_r+0x71c>
 800511e:	9a08      	ldr	r2, [sp, #32]
 8005120:	e7ad      	b.n	800507e <_dtoa_r+0x76e>
 8005122:	2300      	movs	r3, #0
 8005124:	e7d6      	b.n	80050d4 <_dtoa_r+0x7c4>
 8005126:	9b02      	ldr	r3, [sp, #8]
 8005128:	e7d4      	b.n	80050d4 <_dtoa_r+0x7c4>
 800512a:	2300      	movs	r3, #0
 800512c:	9308      	str	r3, [sp, #32]
 800512e:	6933      	ldr	r3, [r6, #16]
 8005130:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005134:	6918      	ldr	r0, [r3, #16]
 8005136:	f000 fa49 	bl	80055cc <__hi0bits>
 800513a:	f1c0 0020 	rsb	r0, r0, #32
 800513e:	9b07      	ldr	r3, [sp, #28]
 8005140:	4418      	add	r0, r3
 8005142:	f010 001f 	ands.w	r0, r0, #31
 8005146:	d047      	beq.n	80051d8 <_dtoa_r+0x8c8>
 8005148:	f1c0 0320 	rsb	r3, r0, #32
 800514c:	2b04      	cmp	r3, #4
 800514e:	dd3b      	ble.n	80051c8 <_dtoa_r+0x8b8>
 8005150:	9b07      	ldr	r3, [sp, #28]
 8005152:	f1c0 001c 	rsb	r0, r0, #28
 8005156:	4481      	add	r9, r0
 8005158:	4405      	add	r5, r0
 800515a:	4403      	add	r3, r0
 800515c:	9307      	str	r3, [sp, #28]
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	dd05      	ble.n	8005170 <_dtoa_r+0x860>
 8005164:	4659      	mov	r1, fp
 8005166:	464a      	mov	r2, r9
 8005168:	4620      	mov	r0, r4
 800516a:	f000 fb69 	bl	8005840 <__lshift>
 800516e:	4683      	mov	fp, r0
 8005170:	9b07      	ldr	r3, [sp, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	dd05      	ble.n	8005182 <_dtoa_r+0x872>
 8005176:	4631      	mov	r1, r6
 8005178:	461a      	mov	r2, r3
 800517a:	4620      	mov	r0, r4
 800517c:	f000 fb60 	bl	8005840 <__lshift>
 8005180:	4606      	mov	r6, r0
 8005182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005184:	b353      	cbz	r3, 80051dc <_dtoa_r+0x8cc>
 8005186:	4631      	mov	r1, r6
 8005188:	4658      	mov	r0, fp
 800518a:	f000 fbad 	bl	80058e8 <__mcmp>
 800518e:	2800      	cmp	r0, #0
 8005190:	da24      	bge.n	80051dc <_dtoa_r+0x8cc>
 8005192:	2300      	movs	r3, #0
 8005194:	4659      	mov	r1, fp
 8005196:	220a      	movs	r2, #10
 8005198:	4620      	mov	r0, r4
 800519a:	f000 f9dc 	bl	8005556 <__multadd>
 800519e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051a4:	4683      	mov	fp, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8144 	beq.w	8005434 <_dtoa_r+0xb24>
 80051ac:	2300      	movs	r3, #0
 80051ae:	4639      	mov	r1, r7
 80051b0:	220a      	movs	r2, #10
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 f9cf 	bl	8005556 <__multadd>
 80051b8:	9b04      	ldr	r3, [sp, #16]
 80051ba:	4607      	mov	r7, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dc4d      	bgt.n	800525c <_dtoa_r+0x94c>
 80051c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	dd4a      	ble.n	800525c <_dtoa_r+0x94c>
 80051c6:	e011      	b.n	80051ec <_dtoa_r+0x8dc>
 80051c8:	d0c9      	beq.n	800515e <_dtoa_r+0x84e>
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	331c      	adds	r3, #28
 80051ce:	441a      	add	r2, r3
 80051d0:	4499      	add	r9, r3
 80051d2:	441d      	add	r5, r3
 80051d4:	4613      	mov	r3, r2
 80051d6:	e7c1      	b.n	800515c <_dtoa_r+0x84c>
 80051d8:	4603      	mov	r3, r0
 80051da:	e7f6      	b.n	80051ca <_dtoa_r+0x8ba>
 80051dc:	f1b8 0f00 	cmp.w	r8, #0
 80051e0:	dc36      	bgt.n	8005250 <_dtoa_r+0x940>
 80051e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	dd33      	ble.n	8005250 <_dtoa_r+0x940>
 80051e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80051ec:	9b04      	ldr	r3, [sp, #16]
 80051ee:	b963      	cbnz	r3, 800520a <_dtoa_r+0x8fa>
 80051f0:	4631      	mov	r1, r6
 80051f2:	2205      	movs	r2, #5
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 f9ae 	bl	8005556 <__multadd>
 80051fa:	4601      	mov	r1, r0
 80051fc:	4606      	mov	r6, r0
 80051fe:	4658      	mov	r0, fp
 8005200:	f000 fb72 	bl	80058e8 <__mcmp>
 8005204:	2800      	cmp	r0, #0
 8005206:	f73f add3 	bgt.w	8004db0 <_dtoa_r+0x4a0>
 800520a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800520c:	9d06      	ldr	r5, [sp, #24]
 800520e:	ea6f 0a03 	mvn.w	sl, r3
 8005212:	f04f 0900 	mov.w	r9, #0
 8005216:	4631      	mov	r1, r6
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f985 	bl	8005528 <_Bfree>
 800521e:	2f00      	cmp	r7, #0
 8005220:	f43f aebd 	beq.w	8004f9e <_dtoa_r+0x68e>
 8005224:	f1b9 0f00 	cmp.w	r9, #0
 8005228:	d005      	beq.n	8005236 <_dtoa_r+0x926>
 800522a:	45b9      	cmp	r9, r7
 800522c:	d003      	beq.n	8005236 <_dtoa_r+0x926>
 800522e:	4649      	mov	r1, r9
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f979 	bl	8005528 <_Bfree>
 8005236:	4639      	mov	r1, r7
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f975 	bl	8005528 <_Bfree>
 800523e:	e6ae      	b.n	8004f9e <_dtoa_r+0x68e>
 8005240:	2600      	movs	r6, #0
 8005242:	4637      	mov	r7, r6
 8005244:	e7e1      	b.n	800520a <_dtoa_r+0x8fa>
 8005246:	46ba      	mov	sl, r7
 8005248:	4637      	mov	r7, r6
 800524a:	e5b1      	b.n	8004db0 <_dtoa_r+0x4a0>
 800524c:	40240000 	.word	0x40240000
 8005250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005252:	f8cd 8010 	str.w	r8, [sp, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80f3 	beq.w	8005442 <_dtoa_r+0xb32>
 800525c:	2d00      	cmp	r5, #0
 800525e:	dd05      	ble.n	800526c <_dtoa_r+0x95c>
 8005260:	4639      	mov	r1, r7
 8005262:	462a      	mov	r2, r5
 8005264:	4620      	mov	r0, r4
 8005266:	f000 faeb 	bl	8005840 <__lshift>
 800526a:	4607      	mov	r7, r0
 800526c:	9b08      	ldr	r3, [sp, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04c      	beq.n	800530c <_dtoa_r+0x9fc>
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4620      	mov	r0, r4
 8005276:	f000 f923 	bl	80054c0 <_Balloc>
 800527a:	4605      	mov	r5, r0
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	f107 010c 	add.w	r1, r7, #12
 8005282:	3202      	adds	r2, #2
 8005284:	0092      	lsls	r2, r2, #2
 8005286:	300c      	adds	r0, #12
 8005288:	f7fe fe32 	bl	8003ef0 <memcpy>
 800528c:	2201      	movs	r2, #1
 800528e:	4629      	mov	r1, r5
 8005290:	4620      	mov	r0, r4
 8005292:	f000 fad5 	bl	8005840 <__lshift>
 8005296:	46b9      	mov	r9, r7
 8005298:	4607      	mov	r7, r0
 800529a:	9b06      	ldr	r3, [sp, #24]
 800529c:	9307      	str	r3, [sp, #28]
 800529e:	9b02      	ldr	r3, [sp, #8]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	9308      	str	r3, [sp, #32]
 80052a6:	4631      	mov	r1, r6
 80052a8:	4658      	mov	r0, fp
 80052aa:	f7ff faa3 	bl	80047f4 <quorem>
 80052ae:	4649      	mov	r1, r9
 80052b0:	4605      	mov	r5, r0
 80052b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052b6:	4658      	mov	r0, fp
 80052b8:	f000 fb16 	bl	80058e8 <__mcmp>
 80052bc:	463a      	mov	r2, r7
 80052be:	9002      	str	r0, [sp, #8]
 80052c0:	4631      	mov	r1, r6
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fb2a 	bl	800591c <__mdiff>
 80052c8:	68c3      	ldr	r3, [r0, #12]
 80052ca:	4602      	mov	r2, r0
 80052cc:	bb03      	cbnz	r3, 8005310 <_dtoa_r+0xa00>
 80052ce:	4601      	mov	r1, r0
 80052d0:	9009      	str	r0, [sp, #36]	; 0x24
 80052d2:	4658      	mov	r0, fp
 80052d4:	f000 fb08 	bl	80058e8 <__mcmp>
 80052d8:	4603      	mov	r3, r0
 80052da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052dc:	4611      	mov	r1, r2
 80052de:	4620      	mov	r0, r4
 80052e0:	9309      	str	r3, [sp, #36]	; 0x24
 80052e2:	f000 f921 	bl	8005528 <_Bfree>
 80052e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e8:	b9a3      	cbnz	r3, 8005314 <_dtoa_r+0xa04>
 80052ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052ec:	b992      	cbnz	r2, 8005314 <_dtoa_r+0xa04>
 80052ee:	9a08      	ldr	r2, [sp, #32]
 80052f0:	b982      	cbnz	r2, 8005314 <_dtoa_r+0xa04>
 80052f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80052f6:	d029      	beq.n	800534c <_dtoa_r+0xa3c>
 80052f8:	9b02      	ldr	r3, [sp, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	dd01      	ble.n	8005302 <_dtoa_r+0x9f2>
 80052fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005302:	9b07      	ldr	r3, [sp, #28]
 8005304:	1c5d      	adds	r5, r3, #1
 8005306:	f883 8000 	strb.w	r8, [r3]
 800530a:	e784      	b.n	8005216 <_dtoa_r+0x906>
 800530c:	4638      	mov	r0, r7
 800530e:	e7c2      	b.n	8005296 <_dtoa_r+0x986>
 8005310:	2301      	movs	r3, #1
 8005312:	e7e3      	b.n	80052dc <_dtoa_r+0x9cc>
 8005314:	9a02      	ldr	r2, [sp, #8]
 8005316:	2a00      	cmp	r2, #0
 8005318:	db04      	blt.n	8005324 <_dtoa_r+0xa14>
 800531a:	d123      	bne.n	8005364 <_dtoa_r+0xa54>
 800531c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800531e:	bb0a      	cbnz	r2, 8005364 <_dtoa_r+0xa54>
 8005320:	9a08      	ldr	r2, [sp, #32]
 8005322:	b9fa      	cbnz	r2, 8005364 <_dtoa_r+0xa54>
 8005324:	2b00      	cmp	r3, #0
 8005326:	ddec      	ble.n	8005302 <_dtoa_r+0x9f2>
 8005328:	4659      	mov	r1, fp
 800532a:	2201      	movs	r2, #1
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fa87 	bl	8005840 <__lshift>
 8005332:	4631      	mov	r1, r6
 8005334:	4683      	mov	fp, r0
 8005336:	f000 fad7 	bl	80058e8 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	dc03      	bgt.n	8005346 <_dtoa_r+0xa36>
 800533e:	d1e0      	bne.n	8005302 <_dtoa_r+0x9f2>
 8005340:	f018 0f01 	tst.w	r8, #1
 8005344:	d0dd      	beq.n	8005302 <_dtoa_r+0x9f2>
 8005346:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800534a:	d1d8      	bne.n	80052fe <_dtoa_r+0x9ee>
 800534c:	9b07      	ldr	r3, [sp, #28]
 800534e:	9a07      	ldr	r2, [sp, #28]
 8005350:	1c5d      	adds	r5, r3, #1
 8005352:	2339      	movs	r3, #57	; 0x39
 8005354:	7013      	strb	r3, [r2, #0]
 8005356:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800535a:	1e6a      	subs	r2, r5, #1
 800535c:	2b39      	cmp	r3, #57	; 0x39
 800535e:	d04d      	beq.n	80053fc <_dtoa_r+0xaec>
 8005360:	3301      	adds	r3, #1
 8005362:	e052      	b.n	800540a <_dtoa_r+0xafa>
 8005364:	9a07      	ldr	r2, [sp, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f102 0501 	add.w	r5, r2, #1
 800536c:	dd06      	ble.n	800537c <_dtoa_r+0xa6c>
 800536e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005372:	d0eb      	beq.n	800534c <_dtoa_r+0xa3c>
 8005374:	f108 0801 	add.w	r8, r8, #1
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	e7c4      	b.n	8005306 <_dtoa_r+0x9f6>
 800537c:	9b06      	ldr	r3, [sp, #24]
 800537e:	9a04      	ldr	r2, [sp, #16]
 8005380:	1aeb      	subs	r3, r5, r3
 8005382:	4293      	cmp	r3, r2
 8005384:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005388:	d021      	beq.n	80053ce <_dtoa_r+0xabe>
 800538a:	4659      	mov	r1, fp
 800538c:	2300      	movs	r3, #0
 800538e:	220a      	movs	r2, #10
 8005390:	4620      	mov	r0, r4
 8005392:	f000 f8e0 	bl	8005556 <__multadd>
 8005396:	45b9      	cmp	r9, r7
 8005398:	4683      	mov	fp, r0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f04f 020a 	mov.w	r2, #10
 80053a2:	4649      	mov	r1, r9
 80053a4:	4620      	mov	r0, r4
 80053a6:	d105      	bne.n	80053b4 <_dtoa_r+0xaa4>
 80053a8:	f000 f8d5 	bl	8005556 <__multadd>
 80053ac:	4681      	mov	r9, r0
 80053ae:	4607      	mov	r7, r0
 80053b0:	9507      	str	r5, [sp, #28]
 80053b2:	e778      	b.n	80052a6 <_dtoa_r+0x996>
 80053b4:	f000 f8cf 	bl	8005556 <__multadd>
 80053b8:	4639      	mov	r1, r7
 80053ba:	4681      	mov	r9, r0
 80053bc:	2300      	movs	r3, #0
 80053be:	220a      	movs	r2, #10
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 f8c8 	bl	8005556 <__multadd>
 80053c6:	4607      	mov	r7, r0
 80053c8:	e7f2      	b.n	80053b0 <_dtoa_r+0xaa0>
 80053ca:	f04f 0900 	mov.w	r9, #0
 80053ce:	4659      	mov	r1, fp
 80053d0:	2201      	movs	r2, #1
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 fa34 	bl	8005840 <__lshift>
 80053d8:	4631      	mov	r1, r6
 80053da:	4683      	mov	fp, r0
 80053dc:	f000 fa84 	bl	80058e8 <__mcmp>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	dcb8      	bgt.n	8005356 <_dtoa_r+0xa46>
 80053e4:	d102      	bne.n	80053ec <_dtoa_r+0xadc>
 80053e6:	f018 0f01 	tst.w	r8, #1
 80053ea:	d1b4      	bne.n	8005356 <_dtoa_r+0xa46>
 80053ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053f0:	1e6a      	subs	r2, r5, #1
 80053f2:	2b30      	cmp	r3, #48	; 0x30
 80053f4:	f47f af0f 	bne.w	8005216 <_dtoa_r+0x906>
 80053f8:	4615      	mov	r5, r2
 80053fa:	e7f7      	b.n	80053ec <_dtoa_r+0xadc>
 80053fc:	9b06      	ldr	r3, [sp, #24]
 80053fe:	4293      	cmp	r3, r2
 8005400:	d105      	bne.n	800540e <_dtoa_r+0xafe>
 8005402:	2331      	movs	r3, #49	; 0x31
 8005404:	9a06      	ldr	r2, [sp, #24]
 8005406:	f10a 0a01 	add.w	sl, sl, #1
 800540a:	7013      	strb	r3, [r2, #0]
 800540c:	e703      	b.n	8005216 <_dtoa_r+0x906>
 800540e:	4615      	mov	r5, r2
 8005410:	e7a1      	b.n	8005356 <_dtoa_r+0xa46>
 8005412:	4b17      	ldr	r3, [pc, #92]	; (8005470 <_dtoa_r+0xb60>)
 8005414:	f7ff bae1 	b.w	80049da <_dtoa_r+0xca>
 8005418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f aabb 	bne.w	8004996 <_dtoa_r+0x86>
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <_dtoa_r+0xb64>)
 8005422:	f7ff bada 	b.w	80049da <_dtoa_r+0xca>
 8005426:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005428:	2b01      	cmp	r3, #1
 800542a:	f77f ae3f 	ble.w	80050ac <_dtoa_r+0x79c>
 800542e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005430:	9308      	str	r3, [sp, #32]
 8005432:	e653      	b.n	80050dc <_dtoa_r+0x7cc>
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dc03      	bgt.n	8005442 <_dtoa_r+0xb32>
 800543a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800543c:	2b02      	cmp	r3, #2
 800543e:	f73f aed5 	bgt.w	80051ec <_dtoa_r+0x8dc>
 8005442:	9d06      	ldr	r5, [sp, #24]
 8005444:	4631      	mov	r1, r6
 8005446:	4658      	mov	r0, fp
 8005448:	f7ff f9d4 	bl	80047f4 <quorem>
 800544c:	9b06      	ldr	r3, [sp, #24]
 800544e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005452:	f805 8b01 	strb.w	r8, [r5], #1
 8005456:	9a04      	ldr	r2, [sp, #16]
 8005458:	1aeb      	subs	r3, r5, r3
 800545a:	429a      	cmp	r2, r3
 800545c:	ddb5      	ble.n	80053ca <_dtoa_r+0xaba>
 800545e:	4659      	mov	r1, fp
 8005460:	2300      	movs	r3, #0
 8005462:	220a      	movs	r2, #10
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f876 	bl	8005556 <__multadd>
 800546a:	4683      	mov	fp, r0
 800546c:	e7ea      	b.n	8005444 <_dtoa_r+0xb34>
 800546e:	bf00      	nop
 8005470:	08006c5c 	.word	0x08006c5c
 8005474:	08006c80 	.word	0x08006c80

08005478 <_localeconv_r>:
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <_localeconv_r+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a18      	ldr	r0, [r3, #32]
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <_localeconv_r+0x18>)
 8005480:	2800      	cmp	r0, #0
 8005482:	bf08      	it	eq
 8005484:	4618      	moveq	r0, r3
 8005486:	30f0      	adds	r0, #240	; 0xf0
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	2000000c 	.word	0x2000000c
 8005490:	20000070 	.word	0x20000070

08005494 <malloc>:
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <malloc+0xc>)
 8005496:	4601      	mov	r1, r0
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	f000 bb47 	b.w	8005b2c <_malloc_r>
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <memchr>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	b2c9      	uxtb	r1, r1
 80054a8:	4402      	add	r2, r0
 80054aa:	4290      	cmp	r0, r2
 80054ac:	4603      	mov	r3, r0
 80054ae:	d101      	bne.n	80054b4 <memchr+0x10>
 80054b0:	2300      	movs	r3, #0
 80054b2:	e003      	b.n	80054bc <memchr+0x18>
 80054b4:	781c      	ldrb	r4, [r3, #0]
 80054b6:	3001      	adds	r0, #1
 80054b8:	428c      	cmp	r4, r1
 80054ba:	d1f6      	bne.n	80054aa <memchr+0x6>
 80054bc:	4618      	mov	r0, r3
 80054be:	bd10      	pop	{r4, pc}

080054c0 <_Balloc>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054c4:	4604      	mov	r4, r0
 80054c6:	460e      	mov	r6, r1
 80054c8:	b93d      	cbnz	r5, 80054da <_Balloc+0x1a>
 80054ca:	2010      	movs	r0, #16
 80054cc:	f7ff ffe2 	bl	8005494 <malloc>
 80054d0:	6260      	str	r0, [r4, #36]	; 0x24
 80054d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054d6:	6005      	str	r5, [r0, #0]
 80054d8:	60c5      	str	r5, [r0, #12]
 80054da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80054dc:	68eb      	ldr	r3, [r5, #12]
 80054de:	b183      	cbz	r3, 8005502 <_Balloc+0x42>
 80054e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80054e8:	b9b8      	cbnz	r0, 800551a <_Balloc+0x5a>
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f506 	lsl.w	r5, r1, r6
 80054f0:	1d6a      	adds	r2, r5, #5
 80054f2:	0092      	lsls	r2, r2, #2
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fabe 	bl	8005a76 <_calloc_r>
 80054fa:	b160      	cbz	r0, 8005516 <_Balloc+0x56>
 80054fc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005500:	e00e      	b.n	8005520 <_Balloc+0x60>
 8005502:	2221      	movs	r2, #33	; 0x21
 8005504:	2104      	movs	r1, #4
 8005506:	4620      	mov	r0, r4
 8005508:	f000 fab5 	bl	8005a76 <_calloc_r>
 800550c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800550e:	60e8      	str	r0, [r5, #12]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e4      	bne.n	80054e0 <_Balloc+0x20>
 8005516:	2000      	movs	r0, #0
 8005518:	bd70      	pop	{r4, r5, r6, pc}
 800551a:	6802      	ldr	r2, [r0, #0]
 800551c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005520:	2300      	movs	r3, #0
 8005522:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005526:	e7f7      	b.n	8005518 <_Balloc+0x58>

08005528 <_Bfree>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800552c:	4606      	mov	r6, r0
 800552e:	460d      	mov	r5, r1
 8005530:	b93c      	cbnz	r4, 8005542 <_Bfree+0x1a>
 8005532:	2010      	movs	r0, #16
 8005534:	f7ff ffae 	bl	8005494 <malloc>
 8005538:	6270      	str	r0, [r6, #36]	; 0x24
 800553a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800553e:	6004      	str	r4, [r0, #0]
 8005540:	60c4      	str	r4, [r0, #12]
 8005542:	b13d      	cbz	r5, 8005554 <_Bfree+0x2c>
 8005544:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005546:	686a      	ldr	r2, [r5, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800554e:	6029      	str	r1, [r5, #0]
 8005550:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005554:	bd70      	pop	{r4, r5, r6, pc}

08005556 <__multadd>:
 8005556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	461f      	mov	r7, r3
 800555c:	4606      	mov	r6, r0
 800555e:	460c      	mov	r4, r1
 8005560:	2300      	movs	r3, #0
 8005562:	690d      	ldr	r5, [r1, #16]
 8005564:	f101 0c14 	add.w	ip, r1, #20
 8005568:	f8dc 0000 	ldr.w	r0, [ip]
 800556c:	3301      	adds	r3, #1
 800556e:	b281      	uxth	r1, r0
 8005570:	fb02 7101 	mla	r1, r2, r1, r7
 8005574:	0c00      	lsrs	r0, r0, #16
 8005576:	0c0f      	lsrs	r7, r1, #16
 8005578:	fb02 7000 	mla	r0, r2, r0, r7
 800557c:	b289      	uxth	r1, r1
 800557e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005582:	429d      	cmp	r5, r3
 8005584:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005588:	f84c 1b04 	str.w	r1, [ip], #4
 800558c:	dcec      	bgt.n	8005568 <__multadd+0x12>
 800558e:	b1d7      	cbz	r7, 80055c6 <__multadd+0x70>
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	42ab      	cmp	r3, r5
 8005594:	dc12      	bgt.n	80055bc <__multadd+0x66>
 8005596:	6861      	ldr	r1, [r4, #4]
 8005598:	4630      	mov	r0, r6
 800559a:	3101      	adds	r1, #1
 800559c:	f7ff ff90 	bl	80054c0 <_Balloc>
 80055a0:	4680      	mov	r8, r0
 80055a2:	6922      	ldr	r2, [r4, #16]
 80055a4:	f104 010c 	add.w	r1, r4, #12
 80055a8:	3202      	adds	r2, #2
 80055aa:	0092      	lsls	r2, r2, #2
 80055ac:	300c      	adds	r0, #12
 80055ae:	f7fe fc9f 	bl	8003ef0 <memcpy>
 80055b2:	4621      	mov	r1, r4
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff ffb7 	bl	8005528 <_Bfree>
 80055ba:	4644      	mov	r4, r8
 80055bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055c0:	3501      	adds	r5, #1
 80055c2:	615f      	str	r7, [r3, #20]
 80055c4:	6125      	str	r5, [r4, #16]
 80055c6:	4620      	mov	r0, r4
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055cc <__hi0bits>:
 80055cc:	0c02      	lsrs	r2, r0, #16
 80055ce:	0412      	lsls	r2, r2, #16
 80055d0:	4603      	mov	r3, r0
 80055d2:	b9b2      	cbnz	r2, 8005602 <__hi0bits+0x36>
 80055d4:	0403      	lsls	r3, r0, #16
 80055d6:	2010      	movs	r0, #16
 80055d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055dc:	bf04      	itt	eq
 80055de:	021b      	lsleq	r3, r3, #8
 80055e0:	3008      	addeq	r0, #8
 80055e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80055e6:	bf04      	itt	eq
 80055e8:	011b      	lsleq	r3, r3, #4
 80055ea:	3004      	addeq	r0, #4
 80055ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80055f0:	bf04      	itt	eq
 80055f2:	009b      	lsleq	r3, r3, #2
 80055f4:	3002      	addeq	r0, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	db06      	blt.n	8005608 <__hi0bits+0x3c>
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	d503      	bpl.n	8005606 <__hi0bits+0x3a>
 80055fe:	3001      	adds	r0, #1
 8005600:	4770      	bx	lr
 8005602:	2000      	movs	r0, #0
 8005604:	e7e8      	b.n	80055d8 <__hi0bits+0xc>
 8005606:	2020      	movs	r0, #32
 8005608:	4770      	bx	lr

0800560a <__lo0bits>:
 800560a:	6803      	ldr	r3, [r0, #0]
 800560c:	4601      	mov	r1, r0
 800560e:	f013 0207 	ands.w	r2, r3, #7
 8005612:	d00b      	beq.n	800562c <__lo0bits+0x22>
 8005614:	07da      	lsls	r2, r3, #31
 8005616:	d423      	bmi.n	8005660 <__lo0bits+0x56>
 8005618:	0798      	lsls	r0, r3, #30
 800561a:	bf49      	itett	mi
 800561c:	085b      	lsrmi	r3, r3, #1
 800561e:	089b      	lsrpl	r3, r3, #2
 8005620:	2001      	movmi	r0, #1
 8005622:	600b      	strmi	r3, [r1, #0]
 8005624:	bf5c      	itt	pl
 8005626:	600b      	strpl	r3, [r1, #0]
 8005628:	2002      	movpl	r0, #2
 800562a:	4770      	bx	lr
 800562c:	b298      	uxth	r0, r3
 800562e:	b9a8      	cbnz	r0, 800565c <__lo0bits+0x52>
 8005630:	2010      	movs	r0, #16
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005638:	bf04      	itt	eq
 800563a:	0a1b      	lsreq	r3, r3, #8
 800563c:	3008      	addeq	r0, #8
 800563e:	071a      	lsls	r2, r3, #28
 8005640:	bf04      	itt	eq
 8005642:	091b      	lsreq	r3, r3, #4
 8005644:	3004      	addeq	r0, #4
 8005646:	079a      	lsls	r2, r3, #30
 8005648:	bf04      	itt	eq
 800564a:	089b      	lsreq	r3, r3, #2
 800564c:	3002      	addeq	r0, #2
 800564e:	07da      	lsls	r2, r3, #31
 8005650:	d402      	bmi.n	8005658 <__lo0bits+0x4e>
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	d006      	beq.n	8005664 <__lo0bits+0x5a>
 8005656:	3001      	adds	r0, #1
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	4770      	bx	lr
 800565c:	4610      	mov	r0, r2
 800565e:	e7e9      	b.n	8005634 <__lo0bits+0x2a>
 8005660:	2000      	movs	r0, #0
 8005662:	4770      	bx	lr
 8005664:	2020      	movs	r0, #32
 8005666:	4770      	bx	lr

08005668 <__i2b>:
 8005668:	b510      	push	{r4, lr}
 800566a:	460c      	mov	r4, r1
 800566c:	2101      	movs	r1, #1
 800566e:	f7ff ff27 	bl	80054c0 <_Balloc>
 8005672:	2201      	movs	r2, #1
 8005674:	6144      	str	r4, [r0, #20]
 8005676:	6102      	str	r2, [r0, #16]
 8005678:	bd10      	pop	{r4, pc}

0800567a <__multiply>:
 800567a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567e:	4614      	mov	r4, r2
 8005680:	690a      	ldr	r2, [r1, #16]
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	4688      	mov	r8, r1
 8005686:	429a      	cmp	r2, r3
 8005688:	bfbe      	ittt	lt
 800568a:	460b      	movlt	r3, r1
 800568c:	46a0      	movlt	r8, r4
 800568e:	461c      	movlt	r4, r3
 8005690:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005694:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005698:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800569c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80056a0:	eb07 0609 	add.w	r6, r7, r9
 80056a4:	42b3      	cmp	r3, r6
 80056a6:	bfb8      	it	lt
 80056a8:	3101      	addlt	r1, #1
 80056aa:	f7ff ff09 	bl	80054c0 <_Balloc>
 80056ae:	f100 0514 	add.w	r5, r0, #20
 80056b2:	462b      	mov	r3, r5
 80056b4:	2200      	movs	r2, #0
 80056b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80056ba:	4573      	cmp	r3, lr
 80056bc:	d316      	bcc.n	80056ec <__multiply+0x72>
 80056be:	f104 0214 	add.w	r2, r4, #20
 80056c2:	f108 0114 	add.w	r1, r8, #20
 80056c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80056ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	9b00      	ldr	r3, [sp, #0]
 80056d2:	9201      	str	r2, [sp, #4]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d80c      	bhi.n	80056f2 <__multiply+0x78>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	dd03      	ble.n	80056e4 <__multiply+0x6a>
 80056dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d05d      	beq.n	80057a0 <__multiply+0x126>
 80056e4:	6106      	str	r6, [r0, #16]
 80056e6:	b003      	add	sp, #12
 80056e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ec:	f843 2b04 	str.w	r2, [r3], #4
 80056f0:	e7e3      	b.n	80056ba <__multiply+0x40>
 80056f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80056f6:	f1bb 0f00 	cmp.w	fp, #0
 80056fa:	d023      	beq.n	8005744 <__multiply+0xca>
 80056fc:	4689      	mov	r9, r1
 80056fe:	46ac      	mov	ip, r5
 8005700:	f04f 0800 	mov.w	r8, #0
 8005704:	f859 4b04 	ldr.w	r4, [r9], #4
 8005708:	f8dc a000 	ldr.w	sl, [ip]
 800570c:	b2a3      	uxth	r3, r4
 800570e:	fa1f fa8a 	uxth.w	sl, sl
 8005712:	fb0b a303 	mla	r3, fp, r3, sl
 8005716:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800571a:	f8dc 4000 	ldr.w	r4, [ip]
 800571e:	4443      	add	r3, r8
 8005720:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005724:	fb0b 840a 	mla	r4, fp, sl, r8
 8005728:	46e2      	mov	sl, ip
 800572a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800572e:	b29b      	uxth	r3, r3
 8005730:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005734:	454f      	cmp	r7, r9
 8005736:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800573a:	f84a 3b04 	str.w	r3, [sl], #4
 800573e:	d82b      	bhi.n	8005798 <__multiply+0x11e>
 8005740:	f8cc 8004 	str.w	r8, [ip, #4]
 8005744:	9b01      	ldr	r3, [sp, #4]
 8005746:	3204      	adds	r2, #4
 8005748:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800574c:	f1ba 0f00 	cmp.w	sl, #0
 8005750:	d020      	beq.n	8005794 <__multiply+0x11a>
 8005752:	4689      	mov	r9, r1
 8005754:	46a8      	mov	r8, r5
 8005756:	f04f 0b00 	mov.w	fp, #0
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005760:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005764:	b29b      	uxth	r3, r3
 8005766:	fb0a 440c 	mla	r4, sl, ip, r4
 800576a:	46c4      	mov	ip, r8
 800576c:	445c      	add	r4, fp
 800576e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005772:	f84c 3b04 	str.w	r3, [ip], #4
 8005776:	f859 3b04 	ldr.w	r3, [r9], #4
 800577a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	fb0a b303 	mla	r3, sl, r3, fp
 8005784:	454f      	cmp	r7, r9
 8005786:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800578a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800578e:	d805      	bhi.n	800579c <__multiply+0x122>
 8005790:	f8c8 3004 	str.w	r3, [r8, #4]
 8005794:	3504      	adds	r5, #4
 8005796:	e79b      	b.n	80056d0 <__multiply+0x56>
 8005798:	46d4      	mov	ip, sl
 800579a:	e7b3      	b.n	8005704 <__multiply+0x8a>
 800579c:	46e0      	mov	r8, ip
 800579e:	e7dd      	b.n	800575c <__multiply+0xe2>
 80057a0:	3e01      	subs	r6, #1
 80057a2:	e799      	b.n	80056d8 <__multiply+0x5e>

080057a4 <__pow5mult>:
 80057a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a8:	4615      	mov	r5, r2
 80057aa:	f012 0203 	ands.w	r2, r2, #3
 80057ae:	4606      	mov	r6, r0
 80057b0:	460f      	mov	r7, r1
 80057b2:	d007      	beq.n	80057c4 <__pow5mult+0x20>
 80057b4:	4c21      	ldr	r4, [pc, #132]	; (800583c <__pow5mult+0x98>)
 80057b6:	3a01      	subs	r2, #1
 80057b8:	2300      	movs	r3, #0
 80057ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057be:	f7ff feca 	bl	8005556 <__multadd>
 80057c2:	4607      	mov	r7, r0
 80057c4:	10ad      	asrs	r5, r5, #2
 80057c6:	d035      	beq.n	8005834 <__pow5mult+0x90>
 80057c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057ca:	b93c      	cbnz	r4, 80057dc <__pow5mult+0x38>
 80057cc:	2010      	movs	r0, #16
 80057ce:	f7ff fe61 	bl	8005494 <malloc>
 80057d2:	6270      	str	r0, [r6, #36]	; 0x24
 80057d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057d8:	6004      	str	r4, [r0, #0]
 80057da:	60c4      	str	r4, [r0, #12]
 80057dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057e4:	b94c      	cbnz	r4, 80057fa <__pow5mult+0x56>
 80057e6:	f240 2171 	movw	r1, #625	; 0x271
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7ff ff3c 	bl	8005668 <__i2b>
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80057f8:	6003      	str	r3, [r0, #0]
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	07eb      	lsls	r3, r5, #31
 8005800:	d50a      	bpl.n	8005818 <__pow5mult+0x74>
 8005802:	4639      	mov	r1, r7
 8005804:	4622      	mov	r2, r4
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff ff37 	bl	800567a <__multiply>
 800580c:	4681      	mov	r9, r0
 800580e:	4639      	mov	r1, r7
 8005810:	4630      	mov	r0, r6
 8005812:	f7ff fe89 	bl	8005528 <_Bfree>
 8005816:	464f      	mov	r7, r9
 8005818:	106d      	asrs	r5, r5, #1
 800581a:	d00b      	beq.n	8005834 <__pow5mult+0x90>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	b938      	cbnz	r0, 8005830 <__pow5mult+0x8c>
 8005820:	4622      	mov	r2, r4
 8005822:	4621      	mov	r1, r4
 8005824:	4630      	mov	r0, r6
 8005826:	f7ff ff28 	bl	800567a <__multiply>
 800582a:	6020      	str	r0, [r4, #0]
 800582c:	f8c0 8000 	str.w	r8, [r0]
 8005830:	4604      	mov	r4, r0
 8005832:	e7e4      	b.n	80057fe <__pow5mult+0x5a>
 8005834:	4638      	mov	r0, r7
 8005836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583a:	bf00      	nop
 800583c:	08006d80 	.word	0x08006d80

08005840 <__lshift>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	460c      	mov	r4, r1
 8005846:	4607      	mov	r7, r0
 8005848:	4616      	mov	r6, r2
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005850:	eb0a 0903 	add.w	r9, sl, r3
 8005854:	6849      	ldr	r1, [r1, #4]
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	f109 0501 	add.w	r5, r9, #1
 800585c:	42ab      	cmp	r3, r5
 800585e:	db32      	blt.n	80058c6 <__lshift+0x86>
 8005860:	4638      	mov	r0, r7
 8005862:	f7ff fe2d 	bl	80054c0 <_Balloc>
 8005866:	2300      	movs	r3, #0
 8005868:	4680      	mov	r8, r0
 800586a:	461a      	mov	r2, r3
 800586c:	f100 0114 	add.w	r1, r0, #20
 8005870:	4553      	cmp	r3, sl
 8005872:	db2b      	blt.n	80058cc <__lshift+0x8c>
 8005874:	6920      	ldr	r0, [r4, #16]
 8005876:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800587a:	f104 0314 	add.w	r3, r4, #20
 800587e:	f016 021f 	ands.w	r2, r6, #31
 8005882:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005886:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800588a:	d025      	beq.n	80058d8 <__lshift+0x98>
 800588c:	2000      	movs	r0, #0
 800588e:	f1c2 0e20 	rsb	lr, r2, #32
 8005892:	468a      	mov	sl, r1
 8005894:	681e      	ldr	r6, [r3, #0]
 8005896:	4096      	lsls	r6, r2
 8005898:	4330      	orrs	r0, r6
 800589a:	f84a 0b04 	str.w	r0, [sl], #4
 800589e:	f853 0b04 	ldr.w	r0, [r3], #4
 80058a2:	459c      	cmp	ip, r3
 80058a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80058a8:	d814      	bhi.n	80058d4 <__lshift+0x94>
 80058aa:	6048      	str	r0, [r1, #4]
 80058ac:	b108      	cbz	r0, 80058b2 <__lshift+0x72>
 80058ae:	f109 0502 	add.w	r5, r9, #2
 80058b2:	3d01      	subs	r5, #1
 80058b4:	4638      	mov	r0, r7
 80058b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80058ba:	4621      	mov	r1, r4
 80058bc:	f7ff fe34 	bl	8005528 <_Bfree>
 80058c0:	4640      	mov	r0, r8
 80058c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c6:	3101      	adds	r1, #1
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	e7c7      	b.n	800585c <__lshift+0x1c>
 80058cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80058d0:	3301      	adds	r3, #1
 80058d2:	e7cd      	b.n	8005870 <__lshift+0x30>
 80058d4:	4651      	mov	r1, sl
 80058d6:	e7dc      	b.n	8005892 <__lshift+0x52>
 80058d8:	3904      	subs	r1, #4
 80058da:	f853 2b04 	ldr.w	r2, [r3], #4
 80058de:	459c      	cmp	ip, r3
 80058e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80058e4:	d8f9      	bhi.n	80058da <__lshift+0x9a>
 80058e6:	e7e4      	b.n	80058b2 <__lshift+0x72>

080058e8 <__mcmp>:
 80058e8:	6903      	ldr	r3, [r0, #16]
 80058ea:	690a      	ldr	r2, [r1, #16]
 80058ec:	b530      	push	{r4, r5, lr}
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	d10c      	bne.n	800590c <__mcmp+0x24>
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	3014      	adds	r0, #20
 80058f6:	3114      	adds	r1, #20
 80058f8:	1884      	adds	r4, r0, r2
 80058fa:	4411      	add	r1, r2
 80058fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005904:	4295      	cmp	r5, r2
 8005906:	d003      	beq.n	8005910 <__mcmp+0x28>
 8005908:	d305      	bcc.n	8005916 <__mcmp+0x2e>
 800590a:	2301      	movs	r3, #1
 800590c:	4618      	mov	r0, r3
 800590e:	bd30      	pop	{r4, r5, pc}
 8005910:	42a0      	cmp	r0, r4
 8005912:	d3f3      	bcc.n	80058fc <__mcmp+0x14>
 8005914:	e7fa      	b.n	800590c <__mcmp+0x24>
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	e7f7      	b.n	800590c <__mcmp+0x24>

0800591c <__mdiff>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	460d      	mov	r5, r1
 8005922:	4607      	mov	r7, r0
 8005924:	4611      	mov	r1, r2
 8005926:	4628      	mov	r0, r5
 8005928:	4614      	mov	r4, r2
 800592a:	f7ff ffdd 	bl	80058e8 <__mcmp>
 800592e:	1e06      	subs	r6, r0, #0
 8005930:	d108      	bne.n	8005944 <__mdiff+0x28>
 8005932:	4631      	mov	r1, r6
 8005934:	4638      	mov	r0, r7
 8005936:	f7ff fdc3 	bl	80054c0 <_Balloc>
 800593a:	2301      	movs	r3, #1
 800593c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	bfa4      	itt	ge
 8005946:	4623      	movge	r3, r4
 8005948:	462c      	movge	r4, r5
 800594a:	4638      	mov	r0, r7
 800594c:	6861      	ldr	r1, [r4, #4]
 800594e:	bfa6      	itte	ge
 8005950:	461d      	movge	r5, r3
 8005952:	2600      	movge	r6, #0
 8005954:	2601      	movlt	r6, #1
 8005956:	f7ff fdb3 	bl	80054c0 <_Balloc>
 800595a:	f04f 0e00 	mov.w	lr, #0
 800595e:	60c6      	str	r6, [r0, #12]
 8005960:	692b      	ldr	r3, [r5, #16]
 8005962:	6926      	ldr	r6, [r4, #16]
 8005964:	f104 0214 	add.w	r2, r4, #20
 8005968:	f105 0914 	add.w	r9, r5, #20
 800596c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005970:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005974:	f100 0114 	add.w	r1, r0, #20
 8005978:	f852 ab04 	ldr.w	sl, [r2], #4
 800597c:	f859 5b04 	ldr.w	r5, [r9], #4
 8005980:	fa1f f38a 	uxth.w	r3, sl
 8005984:	4473      	add	r3, lr
 8005986:	b2ac      	uxth	r4, r5
 8005988:	1b1b      	subs	r3, r3, r4
 800598a:	0c2c      	lsrs	r4, r5, #16
 800598c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005990:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005994:	b29b      	uxth	r3, r3
 8005996:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800599a:	45c8      	cmp	r8, r9
 800599c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80059a0:	4694      	mov	ip, r2
 80059a2:	f841 4b04 	str.w	r4, [r1], #4
 80059a6:	d8e7      	bhi.n	8005978 <__mdiff+0x5c>
 80059a8:	45bc      	cmp	ip, r7
 80059aa:	d304      	bcc.n	80059b6 <__mdiff+0x9a>
 80059ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80059b0:	b183      	cbz	r3, 80059d4 <__mdiff+0xb8>
 80059b2:	6106      	str	r6, [r0, #16]
 80059b4:	e7c4      	b.n	8005940 <__mdiff+0x24>
 80059b6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80059ba:	b2a2      	uxth	r2, r4
 80059bc:	4472      	add	r2, lr
 80059be:	1413      	asrs	r3, r2, #16
 80059c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80059c4:	b292      	uxth	r2, r2
 80059c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059ca:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80059ce:	f841 2b04 	str.w	r2, [r1], #4
 80059d2:	e7e9      	b.n	80059a8 <__mdiff+0x8c>
 80059d4:	3e01      	subs	r6, #1
 80059d6:	e7e9      	b.n	80059ac <__mdiff+0x90>

080059d8 <__d2b>:
 80059d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80059dc:	461c      	mov	r4, r3
 80059de:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80059e2:	2101      	movs	r1, #1
 80059e4:	4690      	mov	r8, r2
 80059e6:	f7ff fd6b 	bl	80054c0 <_Balloc>
 80059ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80059ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80059f2:	4607      	mov	r7, r0
 80059f4:	bb34      	cbnz	r4, 8005a44 <__d2b+0x6c>
 80059f6:	9201      	str	r2, [sp, #4]
 80059f8:	f1b8 0200 	subs.w	r2, r8, #0
 80059fc:	d027      	beq.n	8005a4e <__d2b+0x76>
 80059fe:	a802      	add	r0, sp, #8
 8005a00:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005a04:	f7ff fe01 	bl	800560a <__lo0bits>
 8005a08:	9900      	ldr	r1, [sp, #0]
 8005a0a:	b1f0      	cbz	r0, 8005a4a <__d2b+0x72>
 8005a0c:	9a01      	ldr	r2, [sp, #4]
 8005a0e:	f1c0 0320 	rsb	r3, r0, #32
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	430b      	orrs	r3, r1
 8005a18:	40c2      	lsrs	r2, r0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	9201      	str	r2, [sp, #4]
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf14      	ite	ne
 8005a24:	2102      	movne	r1, #2
 8005a26:	2101      	moveq	r1, #1
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	6139      	str	r1, [r7, #16]
 8005a2c:	b1c4      	cbz	r4, 8005a60 <__d2b+0x88>
 8005a2e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a32:	4404      	add	r4, r0
 8005a34:	6034      	str	r4, [r6, #0]
 8005a36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a3a:	6028      	str	r0, [r5, #0]
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	b002      	add	sp, #8
 8005a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a48:	e7d5      	b.n	80059f6 <__d2b+0x1e>
 8005a4a:	6179      	str	r1, [r7, #20]
 8005a4c:	e7e7      	b.n	8005a1e <__d2b+0x46>
 8005a4e:	a801      	add	r0, sp, #4
 8005a50:	f7ff fddb 	bl	800560a <__lo0bits>
 8005a54:	2101      	movs	r1, #1
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	6139      	str	r1, [r7, #16]
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	3020      	adds	r0, #32
 8005a5e:	e7e5      	b.n	8005a2c <__d2b+0x54>
 8005a60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a64:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005a68:	6030      	str	r0, [r6, #0]
 8005a6a:	6918      	ldr	r0, [r3, #16]
 8005a6c:	f7ff fdae 	bl	80055cc <__hi0bits>
 8005a70:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a74:	e7e1      	b.n	8005a3a <__d2b+0x62>

08005a76 <_calloc_r>:
 8005a76:	b538      	push	{r3, r4, r5, lr}
 8005a78:	fb02 f401 	mul.w	r4, r2, r1
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	f000 f855 	bl	8005b2c <_malloc_r>
 8005a82:	4605      	mov	r5, r0
 8005a84:	b118      	cbz	r0, 8005a8e <_calloc_r+0x18>
 8005a86:	4622      	mov	r2, r4
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f7fe fa3c 	bl	8003f06 <memset>
 8005a8e:	4628      	mov	r0, r5
 8005a90:	bd38      	pop	{r3, r4, r5, pc}
	...

08005a94 <_free_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4605      	mov	r5, r0
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	d043      	beq.n	8005b24 <_free_r+0x90>
 8005a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa0:	1f0c      	subs	r4, r1, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfb8      	it	lt
 8005aa6:	18e4      	addlt	r4, r4, r3
 8005aa8:	f000 fa27 	bl	8005efa <__malloc_lock>
 8005aac:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <_free_r+0x94>)
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	b933      	cbnz	r3, 8005ac2 <_free_r+0x2e>
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	6014      	str	r4, [r2, #0]
 8005ab8:	4628      	mov	r0, r5
 8005aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005abe:	f000 ba1d 	b.w	8005efc <__malloc_unlock>
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	d90b      	bls.n	8005ade <_free_r+0x4a>
 8005ac6:	6821      	ldr	r1, [r4, #0]
 8005ac8:	1862      	adds	r2, r4, r1
 8005aca:	4293      	cmp	r3, r2
 8005acc:	bf01      	itttt	eq
 8005ace:	681a      	ldreq	r2, [r3, #0]
 8005ad0:	685b      	ldreq	r3, [r3, #4]
 8005ad2:	1852      	addeq	r2, r2, r1
 8005ad4:	6022      	streq	r2, [r4, #0]
 8005ad6:	6063      	str	r3, [r4, #4]
 8005ad8:	6004      	str	r4, [r0, #0]
 8005ada:	e7ed      	b.n	8005ab8 <_free_r+0x24>
 8005adc:	4613      	mov	r3, r2
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	b10a      	cbz	r2, 8005ae6 <_free_r+0x52>
 8005ae2:	42a2      	cmp	r2, r4
 8005ae4:	d9fa      	bls.n	8005adc <_free_r+0x48>
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	1858      	adds	r0, r3, r1
 8005aea:	42a0      	cmp	r0, r4
 8005aec:	d10b      	bne.n	8005b06 <_free_r+0x72>
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	4401      	add	r1, r0
 8005af2:	1858      	adds	r0, r3, r1
 8005af4:	4282      	cmp	r2, r0
 8005af6:	6019      	str	r1, [r3, #0]
 8005af8:	d1de      	bne.n	8005ab8 <_free_r+0x24>
 8005afa:	6810      	ldr	r0, [r2, #0]
 8005afc:	6852      	ldr	r2, [r2, #4]
 8005afe:	4401      	add	r1, r0
 8005b00:	6019      	str	r1, [r3, #0]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	e7d8      	b.n	8005ab8 <_free_r+0x24>
 8005b06:	d902      	bls.n	8005b0e <_free_r+0x7a>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	e7d4      	b.n	8005ab8 <_free_r+0x24>
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	1821      	adds	r1, r4, r0
 8005b12:	428a      	cmp	r2, r1
 8005b14:	bf01      	itttt	eq
 8005b16:	6811      	ldreq	r1, [r2, #0]
 8005b18:	6852      	ldreq	r2, [r2, #4]
 8005b1a:	1809      	addeq	r1, r1, r0
 8005b1c:	6021      	streq	r1, [r4, #0]
 8005b1e:	6062      	str	r2, [r4, #4]
 8005b20:	605c      	str	r4, [r3, #4]
 8005b22:	e7c9      	b.n	8005ab8 <_free_r+0x24>
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	20000208 	.word	0x20000208

08005b2c <_malloc_r>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	1ccd      	adds	r5, r1, #3
 8005b30:	f025 0503 	bic.w	r5, r5, #3
 8005b34:	3508      	adds	r5, #8
 8005b36:	2d0c      	cmp	r5, #12
 8005b38:	bf38      	it	cc
 8005b3a:	250c      	movcc	r5, #12
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	4606      	mov	r6, r0
 8005b40:	db01      	blt.n	8005b46 <_malloc_r+0x1a>
 8005b42:	42a9      	cmp	r1, r5
 8005b44:	d903      	bls.n	8005b4e <_malloc_r+0x22>
 8005b46:	230c      	movs	r3, #12
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	f000 f9d4 	bl	8005efa <__malloc_lock>
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <_malloc_r+0xac>)
 8005b54:	6814      	ldr	r4, [r2, #0]
 8005b56:	4621      	mov	r1, r4
 8005b58:	b991      	cbnz	r1, 8005b80 <_malloc_r+0x54>
 8005b5a:	4c20      	ldr	r4, [pc, #128]	; (8005bdc <_malloc_r+0xb0>)
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	b91b      	cbnz	r3, 8005b68 <_malloc_r+0x3c>
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f98f 	bl	8005e84 <_sbrk_r>
 8005b66:	6020      	str	r0, [r4, #0]
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f000 f98a 	bl	8005e84 <_sbrk_r>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d124      	bne.n	8005bbe <_malloc_r+0x92>
 8005b74:	230c      	movs	r3, #12
 8005b76:	4630      	mov	r0, r6
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	f000 f9bf 	bl	8005efc <__malloc_unlock>
 8005b7e:	e7e4      	b.n	8005b4a <_malloc_r+0x1e>
 8005b80:	680b      	ldr	r3, [r1, #0]
 8005b82:	1b5b      	subs	r3, r3, r5
 8005b84:	d418      	bmi.n	8005bb8 <_malloc_r+0x8c>
 8005b86:	2b0b      	cmp	r3, #11
 8005b88:	d90f      	bls.n	8005baa <_malloc_r+0x7e>
 8005b8a:	600b      	str	r3, [r1, #0]
 8005b8c:	18cc      	adds	r4, r1, r3
 8005b8e:	50cd      	str	r5, [r1, r3]
 8005b90:	4630      	mov	r0, r6
 8005b92:	f000 f9b3 	bl	8005efc <__malloc_unlock>
 8005b96:	f104 000b 	add.w	r0, r4, #11
 8005b9a:	1d23      	adds	r3, r4, #4
 8005b9c:	f020 0007 	bic.w	r0, r0, #7
 8005ba0:	1ac3      	subs	r3, r0, r3
 8005ba2:	d0d3      	beq.n	8005b4c <_malloc_r+0x20>
 8005ba4:	425a      	negs	r2, r3
 8005ba6:	50e2      	str	r2, [r4, r3]
 8005ba8:	e7d0      	b.n	8005b4c <_malloc_r+0x20>
 8005baa:	684b      	ldr	r3, [r1, #4]
 8005bac:	428c      	cmp	r4, r1
 8005bae:	bf16      	itet	ne
 8005bb0:	6063      	strne	r3, [r4, #4]
 8005bb2:	6013      	streq	r3, [r2, #0]
 8005bb4:	460c      	movne	r4, r1
 8005bb6:	e7eb      	b.n	8005b90 <_malloc_r+0x64>
 8005bb8:	460c      	mov	r4, r1
 8005bba:	6849      	ldr	r1, [r1, #4]
 8005bbc:	e7cc      	b.n	8005b58 <_malloc_r+0x2c>
 8005bbe:	1cc4      	adds	r4, r0, #3
 8005bc0:	f024 0403 	bic.w	r4, r4, #3
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d005      	beq.n	8005bd4 <_malloc_r+0xa8>
 8005bc8:	1a21      	subs	r1, r4, r0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 f95a 	bl	8005e84 <_sbrk_r>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d0cf      	beq.n	8005b74 <_malloc_r+0x48>
 8005bd4:	6025      	str	r5, [r4, #0]
 8005bd6:	e7db      	b.n	8005b90 <_malloc_r+0x64>
 8005bd8:	20000208 	.word	0x20000208
 8005bdc:	2000020c 	.word	0x2000020c

08005be0 <__ssputs_r>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	688e      	ldr	r6, [r1, #8]
 8005be6:	4682      	mov	sl, r0
 8005be8:	429e      	cmp	r6, r3
 8005bea:	460c      	mov	r4, r1
 8005bec:	4690      	mov	r8, r2
 8005bee:	4699      	mov	r9, r3
 8005bf0:	d837      	bhi.n	8005c62 <__ssputs_r+0x82>
 8005bf2:	898a      	ldrh	r2, [r1, #12]
 8005bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bf8:	d031      	beq.n	8005c5e <__ssputs_r+0x7e>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	6825      	ldr	r5, [r4, #0]
 8005bfe:	6909      	ldr	r1, [r1, #16]
 8005c00:	1a6f      	subs	r7, r5, r1
 8005c02:	6965      	ldr	r5, [r4, #20]
 8005c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c08:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c0c:	f109 0301 	add.w	r3, r9, #1
 8005c10:	443b      	add	r3, r7
 8005c12:	429d      	cmp	r5, r3
 8005c14:	bf38      	it	cc
 8005c16:	461d      	movcc	r5, r3
 8005c18:	0553      	lsls	r3, r2, #21
 8005c1a:	d530      	bpl.n	8005c7e <__ssputs_r+0x9e>
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7ff ff85 	bl	8005b2c <_malloc_r>
 8005c22:	4606      	mov	r6, r0
 8005c24:	b950      	cbnz	r0, 8005c3c <__ssputs_r+0x5c>
 8005c26:	230c      	movs	r3, #12
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	f8ca 3000 	str.w	r3, [sl]
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	6921      	ldr	r1, [r4, #16]
 8005c40:	f7fe f956 	bl	8003ef0 <memcpy>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	6126      	str	r6, [r4, #16]
 8005c52:	443e      	add	r6, r7
 8005c54:	6026      	str	r6, [r4, #0]
 8005c56:	464e      	mov	r6, r9
 8005c58:	6165      	str	r5, [r4, #20]
 8005c5a:	1bed      	subs	r5, r5, r7
 8005c5c:	60a5      	str	r5, [r4, #8]
 8005c5e:	454e      	cmp	r6, r9
 8005c60:	d900      	bls.n	8005c64 <__ssputs_r+0x84>
 8005c62:	464e      	mov	r6, r9
 8005c64:	4632      	mov	r2, r6
 8005c66:	4641      	mov	r1, r8
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	f000 f92d 	bl	8005ec8 <memmove>
 8005c6e:	68a3      	ldr	r3, [r4, #8]
 8005c70:	2000      	movs	r0, #0
 8005c72:	1b9b      	subs	r3, r3, r6
 8005c74:	60a3      	str	r3, [r4, #8]
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	441e      	add	r6, r3
 8005c7a:	6026      	str	r6, [r4, #0]
 8005c7c:	e7dc      	b.n	8005c38 <__ssputs_r+0x58>
 8005c7e:	462a      	mov	r2, r5
 8005c80:	f000 f93d 	bl	8005efe <_realloc_r>
 8005c84:	4606      	mov	r6, r0
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d1e2      	bne.n	8005c50 <__ssputs_r+0x70>
 8005c8a:	6921      	ldr	r1, [r4, #16]
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f7ff ff01 	bl	8005a94 <_free_r>
 8005c92:	e7c8      	b.n	8005c26 <__ssputs_r+0x46>

08005c94 <_svfiprintf_r>:
 8005c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	461d      	mov	r5, r3
 8005c9a:	898b      	ldrh	r3, [r1, #12]
 8005c9c:	b09d      	sub	sp, #116	; 0x74
 8005c9e:	061f      	lsls	r7, r3, #24
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	d50f      	bpl.n	8005cc8 <_svfiprintf_r+0x34>
 8005ca8:	690b      	ldr	r3, [r1, #16]
 8005caa:	b96b      	cbnz	r3, 8005cc8 <_svfiprintf_r+0x34>
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	f7ff ff3d 	bl	8005b2c <_malloc_r>
 8005cb2:	6020      	str	r0, [r4, #0]
 8005cb4:	6120      	str	r0, [r4, #16]
 8005cb6:	b928      	cbnz	r0, 8005cc4 <_svfiprintf_r+0x30>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	f8c8 3000 	str.w	r3, [r8]
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc2:	e0c8      	b.n	8005e56 <_svfiprintf_r+0x1c2>
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	6163      	str	r3, [r4, #20]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cd2:	2330      	movs	r3, #48	; 0x30
 8005cd4:	f04f 0b01 	mov.w	fp, #1
 8005cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cdc:	9503      	str	r5, [sp, #12]
 8005cde:	4637      	mov	r7, r6
 8005ce0:	463d      	mov	r5, r7
 8005ce2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ce6:	b10b      	cbz	r3, 8005cec <_svfiprintf_r+0x58>
 8005ce8:	2b25      	cmp	r3, #37	; 0x25
 8005cea:	d13e      	bne.n	8005d6a <_svfiprintf_r+0xd6>
 8005cec:	ebb7 0a06 	subs.w	sl, r7, r6
 8005cf0:	d00b      	beq.n	8005d0a <_svfiprintf_r+0x76>
 8005cf2:	4653      	mov	r3, sl
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	f7ff ff71 	bl	8005be0 <__ssputs_r>
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f000 80a4 	beq.w	8005e4c <_svfiprintf_r+0x1b8>
 8005d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d06:	4453      	add	r3, sl
 8005d08:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0a:	783b      	ldrb	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 809d 	beq.w	8005e4c <_svfiprintf_r+0x1b8>
 8005d12:	2300      	movs	r3, #0
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	9307      	str	r3, [sp, #28]
 8005d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d24:	931a      	str	r3, [sp, #104]	; 0x68
 8005d26:	462f      	mov	r7, r5
 8005d28:	2205      	movs	r2, #5
 8005d2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d2e:	4850      	ldr	r0, [pc, #320]	; (8005e70 <_svfiprintf_r+0x1dc>)
 8005d30:	f7ff fbb8 	bl	80054a4 <memchr>
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	b9d0      	cbnz	r0, 8005d6e <_svfiprintf_r+0xda>
 8005d38:	06d9      	lsls	r1, r3, #27
 8005d3a:	bf44      	itt	mi
 8005d3c:	2220      	movmi	r2, #32
 8005d3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d42:	071a      	lsls	r2, r3, #28
 8005d44:	bf44      	itt	mi
 8005d46:	222b      	movmi	r2, #43	; 0x2b
 8005d48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d4c:	782a      	ldrb	r2, [r5, #0]
 8005d4e:	2a2a      	cmp	r2, #42	; 0x2a
 8005d50:	d015      	beq.n	8005d7e <_svfiprintf_r+0xea>
 8005d52:	462f      	mov	r7, r5
 8005d54:	2000      	movs	r0, #0
 8005d56:	250a      	movs	r5, #10
 8005d58:	9a07      	ldr	r2, [sp, #28]
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d60:	3b30      	subs	r3, #48	; 0x30
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d94d      	bls.n	8005e02 <_svfiprintf_r+0x16e>
 8005d66:	b1b8      	cbz	r0, 8005d98 <_svfiprintf_r+0x104>
 8005d68:	e00f      	b.n	8005d8a <_svfiprintf_r+0xf6>
 8005d6a:	462f      	mov	r7, r5
 8005d6c:	e7b8      	b.n	8005ce0 <_svfiprintf_r+0x4c>
 8005d6e:	4a40      	ldr	r2, [pc, #256]	; (8005e70 <_svfiprintf_r+0x1dc>)
 8005d70:	463d      	mov	r5, r7
 8005d72:	1a80      	subs	r0, r0, r2
 8005d74:	fa0b f000 	lsl.w	r0, fp, r0
 8005d78:	4318      	orrs	r0, r3
 8005d7a:	9004      	str	r0, [sp, #16]
 8005d7c:	e7d3      	b.n	8005d26 <_svfiprintf_r+0x92>
 8005d7e:	9a03      	ldr	r2, [sp, #12]
 8005d80:	1d11      	adds	r1, r2, #4
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	9103      	str	r1, [sp, #12]
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	db01      	blt.n	8005d8e <_svfiprintf_r+0xfa>
 8005d8a:	9207      	str	r2, [sp, #28]
 8005d8c:	e004      	b.n	8005d98 <_svfiprintf_r+0x104>
 8005d8e:	4252      	negs	r2, r2
 8005d90:	f043 0302 	orr.w	r3, r3, #2
 8005d94:	9207      	str	r2, [sp, #28]
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	783b      	ldrb	r3, [r7, #0]
 8005d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d9c:	d10c      	bne.n	8005db8 <_svfiprintf_r+0x124>
 8005d9e:	787b      	ldrb	r3, [r7, #1]
 8005da0:	2b2a      	cmp	r3, #42	; 0x2a
 8005da2:	d133      	bne.n	8005e0c <_svfiprintf_r+0x178>
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	3702      	adds	r7, #2
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	9203      	str	r2, [sp, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfb8      	it	lt
 8005db2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005db6:	9305      	str	r3, [sp, #20]
 8005db8:	4d2e      	ldr	r5, [pc, #184]	; (8005e74 <_svfiprintf_r+0x1e0>)
 8005dba:	2203      	movs	r2, #3
 8005dbc:	7839      	ldrb	r1, [r7, #0]
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7ff fb70 	bl	80054a4 <memchr>
 8005dc4:	b138      	cbz	r0, 8005dd6 <_svfiprintf_r+0x142>
 8005dc6:	2340      	movs	r3, #64	; 0x40
 8005dc8:	1b40      	subs	r0, r0, r5
 8005dca:	fa03 f000 	lsl.w	r0, r3, r0
 8005dce:	9b04      	ldr	r3, [sp, #16]
 8005dd0:	3701      	adds	r7, #1
 8005dd2:	4303      	orrs	r3, r0
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	7839      	ldrb	r1, [r7, #0]
 8005dd8:	2206      	movs	r2, #6
 8005dda:	4827      	ldr	r0, [pc, #156]	; (8005e78 <_svfiprintf_r+0x1e4>)
 8005ddc:	1c7e      	adds	r6, r7, #1
 8005dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de2:	f7ff fb5f 	bl	80054a4 <memchr>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d038      	beq.n	8005e5c <_svfiprintf_r+0x1c8>
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <_svfiprintf_r+0x1e8>)
 8005dec:	bb13      	cbnz	r3, 8005e34 <_svfiprintf_r+0x1a0>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	3307      	adds	r3, #7
 8005df2:	f023 0307 	bic.w	r3, r3, #7
 8005df6:	3308      	adds	r3, #8
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfc:	444b      	add	r3, r9
 8005dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005e00:	e76d      	b.n	8005cde <_svfiprintf_r+0x4a>
 8005e02:	fb05 3202 	mla	r2, r5, r2, r3
 8005e06:	2001      	movs	r0, #1
 8005e08:	460f      	mov	r7, r1
 8005e0a:	e7a6      	b.n	8005d5a <_svfiprintf_r+0xc6>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	250a      	movs	r5, #10
 8005e10:	4619      	mov	r1, r3
 8005e12:	3701      	adds	r7, #1
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	4638      	mov	r0, r7
 8005e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1c:	3a30      	subs	r2, #48	; 0x30
 8005e1e:	2a09      	cmp	r2, #9
 8005e20:	d903      	bls.n	8005e2a <_svfiprintf_r+0x196>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0c8      	beq.n	8005db8 <_svfiprintf_r+0x124>
 8005e26:	9105      	str	r1, [sp, #20]
 8005e28:	e7c6      	b.n	8005db8 <_svfiprintf_r+0x124>
 8005e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4607      	mov	r7, r0
 8005e32:	e7f0      	b.n	8005e16 <_svfiprintf_r+0x182>
 8005e34:	ab03      	add	r3, sp, #12
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <_svfiprintf_r+0x1ec>)
 8005e3c:	a904      	add	r1, sp, #16
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7fe f8fa 	bl	8004038 <_printf_float>
 8005e44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e48:	4681      	mov	r9, r0
 8005e4a:	d1d6      	bne.n	8005dfa <_svfiprintf_r+0x166>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	065b      	lsls	r3, r3, #25
 8005e50:	f53f af35 	bmi.w	8005cbe <_svfiprintf_r+0x2a>
 8005e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e56:	b01d      	add	sp, #116	; 0x74
 8005e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5c:	ab03      	add	r3, sp, #12
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	4622      	mov	r2, r4
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <_svfiprintf_r+0x1ec>)
 8005e64:	a904      	add	r1, sp, #16
 8005e66:	4640      	mov	r0, r8
 8005e68:	f7fe fb92 	bl	8004590 <_printf_i>
 8005e6c:	e7ea      	b.n	8005e44 <_svfiprintf_r+0x1b0>
 8005e6e:	bf00      	nop
 8005e70:	08006d8c 	.word	0x08006d8c
 8005e74:	08006d92 	.word	0x08006d92
 8005e78:	08006d96 	.word	0x08006d96
 8005e7c:	08004039 	.word	0x08004039
 8005e80:	08005be1 	.word	0x08005be1

08005e84 <_sbrk_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	2300      	movs	r3, #0
 8005e88:	4c05      	ldr	r4, [pc, #20]	; (8005ea0 <_sbrk_r+0x1c>)
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	f7fc f92c 	bl	80020ec <_sbrk>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_sbrk_r+0x1a>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_sbrk_r+0x1a>
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	20000eb0 	.word	0x20000eb0

08005ea4 <__ascii_mbtowc>:
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	b901      	cbnz	r1, 8005eaa <__ascii_mbtowc+0x6>
 8005ea8:	a901      	add	r1, sp, #4
 8005eaa:	b142      	cbz	r2, 8005ebe <__ascii_mbtowc+0x1a>
 8005eac:	b14b      	cbz	r3, 8005ec2 <__ascii_mbtowc+0x1e>
 8005eae:	7813      	ldrb	r3, [r2, #0]
 8005eb0:	600b      	str	r3, [r1, #0]
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	1c10      	adds	r0, r2, #0
 8005eb6:	bf18      	it	ne
 8005eb8:	2001      	movne	r0, #1
 8005eba:	b002      	add	sp, #8
 8005ebc:	4770      	bx	lr
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	e7fb      	b.n	8005eba <__ascii_mbtowc+0x16>
 8005ec2:	f06f 0001 	mvn.w	r0, #1
 8005ec6:	e7f8      	b.n	8005eba <__ascii_mbtowc+0x16>

08005ec8 <memmove>:
 8005ec8:	4288      	cmp	r0, r1
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	eb01 0302 	add.w	r3, r1, r2
 8005ed0:	d807      	bhi.n	8005ee2 <memmove+0x1a>
 8005ed2:	1e42      	subs	r2, r0, #1
 8005ed4:	4299      	cmp	r1, r3
 8005ed6:	d00a      	beq.n	8005eee <memmove+0x26>
 8005ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005edc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ee0:	e7f8      	b.n	8005ed4 <memmove+0xc>
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	d9f5      	bls.n	8005ed2 <memmove+0xa>
 8005ee6:	1881      	adds	r1, r0, r2
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	42d3      	cmn	r3, r2
 8005eec:	d100      	bne.n	8005ef0 <memmove+0x28>
 8005eee:	bd10      	pop	{r4, pc}
 8005ef0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ef4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ef8:	e7f7      	b.n	8005eea <memmove+0x22>

08005efa <__malloc_lock>:
 8005efa:	4770      	bx	lr

08005efc <__malloc_unlock>:
 8005efc:	4770      	bx	lr

08005efe <_realloc_r>:
 8005efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f00:	4607      	mov	r7, r0
 8005f02:	4614      	mov	r4, r2
 8005f04:	460e      	mov	r6, r1
 8005f06:	b921      	cbnz	r1, 8005f12 <_realloc_r+0x14>
 8005f08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	f7ff be0d 	b.w	8005b2c <_malloc_r>
 8005f12:	b922      	cbnz	r2, 8005f1e <_realloc_r+0x20>
 8005f14:	f7ff fdbe 	bl	8005a94 <_free_r>
 8005f18:	4625      	mov	r5, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1e:	f000 f821 	bl	8005f64 <_malloc_usable_size_r>
 8005f22:	42a0      	cmp	r0, r4
 8005f24:	d20f      	bcs.n	8005f46 <_realloc_r+0x48>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f7ff fdff 	bl	8005b2c <_malloc_r>
 8005f2e:	4605      	mov	r5, r0
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d0f2      	beq.n	8005f1a <_realloc_r+0x1c>
 8005f34:	4631      	mov	r1, r6
 8005f36:	4622      	mov	r2, r4
 8005f38:	f7fd ffda 	bl	8003ef0 <memcpy>
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7ff fda8 	bl	8005a94 <_free_r>
 8005f44:	e7e9      	b.n	8005f1a <_realloc_r+0x1c>
 8005f46:	4635      	mov	r5, r6
 8005f48:	e7e7      	b.n	8005f1a <_realloc_r+0x1c>

08005f4a <__ascii_wctomb>:
 8005f4a:	b149      	cbz	r1, 8005f60 <__ascii_wctomb+0x16>
 8005f4c:	2aff      	cmp	r2, #255	; 0xff
 8005f4e:	bf8b      	itete	hi
 8005f50:	238a      	movhi	r3, #138	; 0x8a
 8005f52:	700a      	strbls	r2, [r1, #0]
 8005f54:	6003      	strhi	r3, [r0, #0]
 8005f56:	2001      	movls	r0, #1
 8005f58:	bf88      	it	hi
 8005f5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f5e:	4770      	bx	lr
 8005f60:	4608      	mov	r0, r1
 8005f62:	4770      	bx	lr

08005f64 <_malloc_usable_size_r>:
 8005f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f68:	1f18      	subs	r0, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bfbc      	itt	lt
 8005f6e:	580b      	ldrlt	r3, [r1, r0]
 8005f70:	18c0      	addlt	r0, r0, r3
 8005f72:	4770      	bx	lr

08005f74 <_init>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr

08005f80 <_fini>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr
