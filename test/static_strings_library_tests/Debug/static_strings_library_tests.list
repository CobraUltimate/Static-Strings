
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000674c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc0  08006860  08006860  00016860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007820  08007820  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007820  08007820  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007820  08007820  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ac  200001f4  08007a1c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a0  08007a1c  000218a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008adb  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c3  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  0002aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013efd  00000000  00000000  0002b128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000658d  00000000  00000000  0003f025  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b7d4  00000000  00000000  000455b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  000b0e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006844 	.word	0x08006844

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08006844 	.word	0x08006844

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	f5ad 5de2 	sub.w	sp, sp, #7232	; 0x1c40
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a92:	f001 ff0d 	bl	80028b0 <HAL_Init>

	/* USER CODE BEGIN Init */
	static_strings_init();
 8000a96:	f002 ffd1 	bl	8003a3c <static_strings_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a9a:	f001 fd39 	bl	8002510 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a9e:	f001 fda7 	bl	80025f0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000aa2:	f001 fd7b 	bl	800259c <MX_USART1_UART_Init>

	//test 1

	uint8_t very_long_string[700];
	uint16_t i;
	for(i = 0; i < 699; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000aac:	f102 0206 	add.w	r2, r2, #6
 8000ab0:	8013      	strh	r3, [r2, #0]
 8000ab2:	e015      	b.n	8000ae0 <main+0x58>
		very_long_string[i] = 'a';
 8000ab4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ab8:	f103 0306 	add.w	r3, r3, #6
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000ac2:	f102 020c 	add.w	r2, r2, #12
 8000ac6:	2161      	movs	r1, #97	; 0x61
 8000ac8:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 699; i++){
 8000aca:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ace:	f103 0306 	add.w	r3, r3, #6
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000ada:	f102 0206 	add.w	r2, r2, #6
 8000ade:	8013      	strh	r3, [r2, #0]
 8000ae0:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ae4:	f103 0306 	add.w	r3, r3, #6
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d9e0      	bls.n	8000ab4 <main+0x2c>
	}
	very_long_string[699] = '\0';
 8000af2:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000af6:	f103 030c 	add.w	r3, r3, #12
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
	static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 8000b00:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b04:	f103 030c 	add.w	r3, r3, #12
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f9ff 	bl	8003f0c <static_strings_save>
 8000b0e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b12:	f103 0318 	add.w	r3, r3, #24
 8000b16:	6018      	str	r0, [r3, #0]
	char length[6];
	sprintf(length,"%04d",very_long_string_descriptor->length);
 8000b18:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b1c:	f103 0318 	add.w	r3, r3, #24
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	889b      	ldrh	r3, [r3, #4]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b2a:	f103 0304 	add.w	r3, r3, #4
 8000b2e:	49c6      	ldr	r1, [pc, #792]	; (8000e48 <main+0x3c0>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 faa7 	bl	8005084 <siprintf>
	length[4] = '\r';
 8000b36:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b3a:	f103 0304 	add.w	r3, r3, #4
 8000b3e:	220d      	movs	r2, #13
 8000b40:	711a      	strb	r2, [r3, #4]
	length[5] = '\n';
 8000b42:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b46:	f103 0304 	add.w	r3, r3, #4
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	715a      	strb	r2, [r3, #5]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000b4e:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000b52:	f101 0104 	add.w	r1, r1, #4
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	48bb      	ldr	r0, [pc, #748]	; (8000e4c <main+0x3c4>)
 8000b5e:	f002 fdb0 	bl	80036c2 <HAL_UART_Transmit>
	char type[3];
	type[0] = very_long_string_descriptor->type + 48;
 8000b62:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b66:	f103 0318 	add.w	r3, r3, #24
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	3330      	adds	r3, #48	; 0x30
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b76:	701a      	strb	r2, [r3, #0]
	type[1] = '\r';
 8000b78:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b7c:	220d      	movs	r2, #13
 8000b7e:	705a      	strb	r2, [r3, #1]
	type[2] = '\n';
 8000b80:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000b84:	220a      	movs	r2, #10
 8000b86:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000b88:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	2203      	movs	r2, #3
 8000b92:	48ae      	ldr	r0, [pc, #696]	; (8000e4c <main+0x3c4>)
 8000b94:	f002 fd95 	bl	80036c2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000b98:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000b9c:	f103 0318 	add.w	r3, r3, #24
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000ba8:	f103 0318 	add.w	r3, r3, #24
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	889a      	ldrh	r2, [r3, #4]
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	48a5      	ldr	r0, [pc, #660]	; (8000e4c <main+0x3c4>)
 8000bb6:	f002 fd84 	bl	80036c2 <HAL_UART_Transmit>

	static_strings_deallocate(very_long_string_descriptor);
 8000bba:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8000bbe:	f103 0318 	add.w	r3, r3, #24
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	f003 f9e6 	bl	8003f94 <static_strings_deallocate>

	uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000bc8:	f507 53b8 	add.w	r3, r7, #5888	; 0x1700
 8000bcc:	f103 030c 	add.w	r3, r3, #12
 8000bd0:	4a9f      	ldr	r2, [pc, #636]	; (8000e50 <main+0x3c8>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f003 fdf0 	bl	80047c0 <memcpy>
	uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 8000be0:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000be4:	f103 0314 	add.w	r3, r3, #20
 8000be8:	4a9a      	ldr	r2, [pc, #616]	; (8000e54 <main+0x3cc>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	4611      	mov	r1, r2
 8000bee:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f003 fde4 	bl	80047c0 <memcpy>
	uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 8000bf8:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8000bfc:	f103 0304 	add.w	r3, r3, #4
 8000c00:	4a95      	ldr	r2, [pc, #596]	; (8000e58 <main+0x3d0>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	4611      	mov	r1, r2
 8000c06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f003 fdd8 	bl	80047c0 <memcpy>
	uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 8000c10:	f507 5489 	add.w	r4, r7, #4384	; 0x1120
 8000c14:	f104 0410 	add.w	r4, r4, #16
 8000c18:	4b90      	ldr	r3, [pc, #576]	; (8000e5c <main+0x3d4>)
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f240 1361 	movw	r3, #353	; 0x161
 8000c22:	461a      	mov	r2, r3
 8000c24:	f003 fdcc 	bl	80047c0 <memcpy>
 8000c28:	f204 1361 	addw	r3, r4, #353	; 0x161
 8000c2c:	2293      	movs	r2, #147	; 0x93
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fdd0 	bl	80047d6 <memset>
	uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 8000c36:	f607 5448 	addw	r4, r7, #3400	; 0xd48
 8000c3a:	4b89      	ldr	r3, [pc, #548]	; (8000e60 <main+0x3d8>)
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f240 235b 	movw	r3, #603	; 0x25b
 8000c44:	461a      	mov	r2, r3
 8000c46:	f003 fdbb 	bl	80047c0 <memcpy>
 8000c4a:	f204 235b 	addw	r3, r4, #603	; 0x25b
 8000c4e:	f240 128d 	movw	r2, #397	; 0x18d
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fdbe 	bl	80047d6 <memset>

	static_strings_string_descriptor *string_descriptor;

	//test 2

	string_descriptor = static_strings_save(test_very_long_string);
 8000c5a:	f607 5348 	addw	r3, r7, #3400	; 0xd48
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f954 	bl	8003f0c <static_strings_save>
 8000c64:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000c68:	6018      	str	r0, [r3, #0]
	sprintf(length,"%04d",string_descriptor->length);
 8000c6a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	889b      	ldrh	r3, [r3, #4]
 8000c72:	461a      	mov	r2, r3
 8000c74:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000c78:	f103 0304 	add.w	r3, r3, #4
 8000c7c:	4972      	ldr	r1, [pc, #456]	; (8000e48 <main+0x3c0>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fa00 	bl	8005084 <siprintf>
	length[4] = '\r';
 8000c84:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000c88:	f103 0304 	add.w	r3, r3, #4
 8000c8c:	220d      	movs	r2, #13
 8000c8e:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000c90:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000c94:	f101 0104 	add.w	r1, r1, #4
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	2206      	movs	r2, #6
 8000c9e:	486b      	ldr	r0, [pc, #428]	; (8000e4c <main+0x3c4>)
 8000ca0:	f002 fd0f 	bl	80036c2 <HAL_UART_Transmit>
	type[0] = string_descriptor->type + 48;
 8000ca4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	799b      	ldrb	r3, [r3, #6]
 8000cac:	3330      	adds	r3, #48	; 0x30
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000cb4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000cb6:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	4862      	ldr	r0, [pc, #392]	; (8000e4c <main+0x3c4>)
 8000cc2:	f002 fcfe 	bl	80036c2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000cc6:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	889a      	ldrh	r2, [r3, #4]
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	485c      	ldr	r0, [pc, #368]	; (8000e4c <main+0x3c4>)
 8000cdc:	f002 fcf1 	bl	80036c2 <HAL_UART_Transmit>

	//test 3

	string_descriptor = static_strings_save(test_long_string);
 8000ce0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000ce4:	f103 0310 	add.w	r3, r3, #16
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 f90f 	bl	8003f0c <static_strings_save>
 8000cee:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000cf2:	6018      	str	r0, [r3, #0]
	sprintf(length,"%04d",string_descriptor->length);
 8000cf4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	889b      	ldrh	r3, [r3, #4]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d02:	f103 0304 	add.w	r3, r3, #4
 8000d06:	4950      	ldr	r1, [pc, #320]	; (8000e48 <main+0x3c0>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 f9bb 	bl	8005084 <siprintf>
	length[4] = '\r';
 8000d0e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d12:	f103 0304 	add.w	r3, r3, #4
 8000d16:	220d      	movs	r2, #13
 8000d18:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000d1a:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000d1e:	f101 0104 	add.w	r1, r1, #4
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2206      	movs	r2, #6
 8000d28:	4848      	ldr	r0, [pc, #288]	; (8000e4c <main+0x3c4>)
 8000d2a:	f002 fcca 	bl	80036c2 <HAL_UART_Transmit>
	type[0] = string_descriptor->type + 48;
 8000d2e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	3330      	adds	r3, #48	; 0x30
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000d3e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000d40:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	2203      	movs	r2, #3
 8000d4a:	4840      	ldr	r0, [pc, #256]	; (8000e4c <main+0x3c4>)
 8000d4c:	f002 fcb9 	bl	80036c2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000d50:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	889a      	ldrh	r2, [r3, #4]
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	4839      	ldr	r0, [pc, #228]	; (8000e4c <main+0x3c4>)
 8000d66:	f002 fcac 	bl	80036c2 <HAL_UART_Transmit>

	//test 4,5

	for(i = 0; i < 2; i++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000d70:	f102 0206 	add.w	r2, r2, #6
 8000d74:	8013      	strh	r3, [r2, #0]
 8000d76:	e058      	b.n	8000e2a <main+0x3a2>
		string_descriptor = static_strings_save(test_medium_strings[i]);
 8000d78:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d7c:	f103 0306 	add.w	r3, r3, #6
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8000d86:	f102 0204 	add.w	r2, r2, #4
 8000d8a:	21c8      	movs	r1, #200	; 0xc8
 8000d8c:	fb01 f303 	mul.w	r3, r1, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 f8ba 	bl	8003f0c <static_strings_save>
 8000d98:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000d9c:	6018      	str	r0, [r3, #0]
		sprintf(length,"%04d",string_descriptor->length);
 8000d9e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	889b      	ldrh	r3, [r3, #4]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000dac:	f103 0304 	add.w	r3, r3, #4
 8000db0:	4925      	ldr	r1, [pc, #148]	; (8000e48 <main+0x3c0>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 f966 	bl	8005084 <siprintf>
		length[4] = '\r';
 8000db8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000dbc:	f103 0304 	add.w	r3, r3, #4
 8000dc0:	220d      	movs	r2, #13
 8000dc2:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000dc4:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000dc8:	f101 0104 	add.w	r1, r1, #4
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	2206      	movs	r2, #6
 8000dd2:	481e      	ldr	r0, [pc, #120]	; (8000e4c <main+0x3c4>)
 8000dd4:	f002 fc75 	bl	80036c2 <HAL_UART_Transmit>
		type[0] = string_descriptor->type + 48;
 8000dd8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	799b      	ldrb	r3, [r3, #6]
 8000de0:	3330      	adds	r3, #48	; 0x30
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000de8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000dea:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	2203      	movs	r2, #3
 8000df4:	4815      	ldr	r0, [pc, #84]	; (8000e4c <main+0x3c4>)
 8000df6:	f002 fc64 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000dfa:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	889a      	ldrh	r2, [r3, #4]
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	480f      	ldr	r0, [pc, #60]	; (8000e4c <main+0x3c4>)
 8000e10:	f002 fc57 	bl	80036c2 <HAL_UART_Transmit>
	for(i = 0; i < 2; i++){
 8000e14:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e18:	f103 0306 	add.w	r3, r3, #6
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000e24:	f102 0206 	add.w	r2, r2, #6
 8000e28:	8013      	strh	r3, [r2, #0]
 8000e2a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e2e:	f103 0306 	add.w	r3, r3, #6
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d99f      	bls.n	8000d78 <main+0x2f0>
	}

	//test 6-11

	for(i = 0; i < 6; i++){
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000e3e:	f102 0206 	add.w	r2, r2, #6
 8000e42:	8013      	strh	r3, [r2, #0]
 8000e44:	e067      	b.n	8000f16 <main+0x48e>
 8000e46:	bf00      	nop
 8000e48:	08006860 	.word	0x08006860
 8000e4c:	20001688 	.word	0x20001688
 8000e50:	08006944 	.word	0x08006944
 8000e54:	08006b38 	.word	0x08006b38
 8000e58:	08006d90 	.word	0x08006d90
 8000e5c:	08006f20 	.word	0x08006f20
 8000e60:	08007114 	.word	0x08007114
		string_descriptor = static_strings_save(test_short_strings[i]);
 8000e64:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e68:	f103 0306 	add.w	r3, r3, #6
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	f507 52a5 	add.w	r2, r7, #5280	; 0x14a0
 8000e72:	f102 0214 	add.w	r2, r2, #20
 8000e76:	2164      	movs	r1, #100	; 0x64
 8000e78:	fb01 f303 	mul.w	r3, r1, r3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 f844 	bl	8003f0c <static_strings_save>
 8000e84:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e88:	6018      	str	r0, [r3, #0]
		sprintf(length,"%04d",string_descriptor->length);
 8000e8a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	889b      	ldrh	r3, [r3, #4]
 8000e92:	461a      	mov	r2, r3
 8000e94:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000e98:	f103 0304 	add.w	r3, r3, #4
 8000e9c:	49b3      	ldr	r1, [pc, #716]	; (800116c <main+0x6e4>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f8f0 	bl	8005084 <siprintf>
		length[4] = '\r';
 8000ea4:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ea8:	f103 0304 	add.w	r3, r3, #4
 8000eac:	220d      	movs	r2, #13
 8000eae:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000eb0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000eb4:	f101 0104 	add.w	r1, r1, #4
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	2206      	movs	r2, #6
 8000ebe:	48ac      	ldr	r0, [pc, #688]	; (8001170 <main+0x6e8>)
 8000ec0:	f002 fbff 	bl	80036c2 <HAL_UART_Transmit>
		type[0] = string_descriptor->type + 48;
 8000ec4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	3330      	adds	r3, #48	; 0x30
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ed4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000ed6:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	2203      	movs	r2, #3
 8000ee0:	48a3      	ldr	r0, [pc, #652]	; (8001170 <main+0x6e8>)
 8000ee2:	f002 fbee 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000ee6:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	889a      	ldrh	r2, [r3, #4]
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	489d      	ldr	r0, [pc, #628]	; (8001170 <main+0x6e8>)
 8000efc:	f002 fbe1 	bl	80036c2 <HAL_UART_Transmit>
	for(i = 0; i < 6; i++){
 8000f00:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f04:	f103 0306 	add.w	r3, r3, #6
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000f10:	f102 0206 	add.w	r2, r2, #6
 8000f14:	8013      	strh	r3, [r2, #0]
 8000f16:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f1a:	f103 0306 	add.w	r3, r3, #6
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d99f      	bls.n	8000e64 <main+0x3dc>
	}

	//test 12-21

	static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000f2a:	f102 021c 	add.w	r2, r2, #28
 8000f2e:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 10; i++){
 8000f30:	2300      	movs	r3, #0
 8000f32:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8000f36:	f102 0206 	add.w	r2, r2, #6
 8000f3a:	8013      	strh	r3, [r2, #0]
 8000f3c:	e067      	b.n	800100e <main+0x586>
		string_descriptor = static_strings_save(test_very_short_strings[i]);
 8000f3e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f42:	f103 0306 	add.w	r3, r3, #6
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	f507 52b8 	add.w	r2, r7, #5888	; 0x1700
 8000f4c:	f102 020c 	add.w	r2, r2, #12
 8000f50:	2132      	movs	r1, #50	; 0x32
 8000f52:	fb01 f303 	mul.w	r3, r1, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 ffd7 	bl	8003f0c <static_strings_save>
 8000f5e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f62:	6018      	str	r0, [r3, #0]
		if(i == 6){
 8000f64:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f68:	f103 0306 	add.w	r3, r3, #6
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d107      	bne.n	8000f82 <main+0x4fa>
			string_descriptor_deallocate = string_descriptor;
 8000f72:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8000f7c:	f102 021c 	add.w	r2, r2, #28
 8000f80:	6013      	str	r3, [r2, #0]
		}
		sprintf(length,"%04d",string_descriptor->length);
 8000f82:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	889b      	ldrh	r3, [r3, #4]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000f90:	f103 0304 	add.w	r3, r3, #4
 8000f94:	4975      	ldr	r1, [pc, #468]	; (800116c <main+0x6e4>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 f874 	bl	8005084 <siprintf>
		length[4] = '\r';
 8000f9c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000fa0:	f103 0304 	add.w	r3, r3, #4
 8000fa4:	220d      	movs	r2, #13
 8000fa6:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000fa8:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000fac:	f101 0104 	add.w	r1, r1, #4
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	2206      	movs	r2, #6
 8000fb6:	486e      	ldr	r0, [pc, #440]	; (8001170 <main+0x6e8>)
 8000fb8:	f002 fb83 	bl	80036c2 <HAL_UART_Transmit>
		type[0] = string_descriptor->type + 48;
 8000fbc:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	799b      	ldrb	r3, [r3, #6]
 8000fc4:	3330      	adds	r3, #48	; 0x30
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000fcc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000fce:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	4865      	ldr	r0, [pc, #404]	; (8001170 <main+0x6e8>)
 8000fda:	f002 fb72 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000fde:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	889a      	ldrh	r2, [r3, #4]
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	485f      	ldr	r0, [pc, #380]	; (8001170 <main+0x6e8>)
 8000ff4:	f002 fb65 	bl	80036c2 <HAL_UART_Transmit>
	for(i = 0; i < 10; i++){
 8000ff8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8000ffc:	f103 0306 	add.w	r3, r3, #6
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8001008:	f102 0206 	add.w	r2, r2, #6
 800100c:	8013      	strh	r3, [r2, #0]
 800100e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001012:	f103 0306 	add.w	r3, r3, #6
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b09      	cmp	r3, #9
 800101a:	d990      	bls.n	8000f3e <main+0x4b6>
	}

	//test 22

	static_strings_deallocate(string_descriptor_deallocate);
 800101c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001020:	f103 031c 	add.w	r3, r3, #28
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	f002 ffb5 	bl	8003f94 <static_strings_deallocate>
	uint8_t test_short_string[50] = "reallocate_test\r\n";
 800102a:	f607 5614 	addw	r6, r7, #3348	; 0xd14
 800102e:	4b51      	ldr	r3, [pc, #324]	; (8001174 <main+0x6ec>)
 8001030:	4634      	mov	r4, r6
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	8023      	strh	r3, [r4, #0]
 800103c:	f106 0312 	add.w	r3, r6, #18
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fbc6 	bl	80047d6 <memset>
	string_descriptor = static_strings_save(test_short_string);
 800104a:	f607 5314 	addw	r3, r7, #3348	; 0xd14
 800104e:	4618      	mov	r0, r3
 8001050:	f002 ff5c 	bl	8003f0c <static_strings_save>
 8001054:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001058:	6018      	str	r0, [r3, #0]
	sprintf(length,"%04d",string_descriptor->length);
 800105a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	461a      	mov	r2, r3
 8001064:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001068:	f103 0304 	add.w	r3, r3, #4
 800106c:	493f      	ldr	r1, [pc, #252]	; (800116c <main+0x6e4>)
 800106e:	4618      	mov	r0, r3
 8001070:	f004 f808 	bl	8005084 <siprintf>
	length[4] = '\r';
 8001074:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001078:	f103 0304 	add.w	r3, r3, #4
 800107c:	220d      	movs	r2, #13
 800107e:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8001080:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8001084:	f101 0104 	add.w	r1, r1, #4
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	2206      	movs	r2, #6
 800108e:	4838      	ldr	r0, [pc, #224]	; (8001170 <main+0x6e8>)
 8001090:	f002 fb17 	bl	80036c2 <HAL_UART_Transmit>
	type[0] = string_descriptor->type + 48;
 8001094:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	3330      	adds	r3, #48	; 0x30
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80010a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80010a6:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	2203      	movs	r2, #3
 80010b0:	482f      	ldr	r0, [pc, #188]	; (8001170 <main+0x6e8>)
 80010b2:	f002 fb06 	bl	80036c2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80010b6:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	889a      	ldrh	r2, [r3, #4]
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	4829      	ldr	r0, [pc, #164]	; (8001170 <main+0x6e8>)
 80010cc:	f002 faf9 	bl	80036c2 <HAL_UART_Transmit>

	//test 23

	uint8_t pointer[12];
	sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 80010d0:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 80010d4:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80010d8:	f102 021c 	add.w	r2, r2, #28
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	4926      	ldr	r1, [pc, #152]	; (8001178 <main+0x6f0>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 ffcf 	bl	8005084 <siprintf>
	pointer[10] = '\r';
 80010e6:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 80010ea:	220d      	movs	r2, #13
 80010ec:	729a      	strb	r2, [r3, #10]
	pointer[11] = '\n';
 80010ee:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 80010f2:	220a      	movs	r2, #10
 80010f4:	72da      	strb	r2, [r3, #11]
	HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 80010f6:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	220c      	movs	r2, #12
 8001100:	481b      	ldr	r0, [pc, #108]	; (8001170 <main+0x6e8>)
 8001102:	f002 fade 	bl	80036c2 <HAL_UART_Transmit>

	sprintf((char *)pointer,"%10p",string_descriptor);
 8001106:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800110a:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	4919      	ldr	r1, [pc, #100]	; (8001178 <main+0x6f0>)
 8001112:	4618      	mov	r0, r3
 8001114:	f003 ffb6 	bl	8005084 <siprintf>
	pointer[10] = '\r';
 8001118:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800111c:	220d      	movs	r2, #13
 800111e:	729a      	strb	r2, [r3, #10]
	pointer[11] = '\n';
 8001120:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001124:	220a      	movs	r2, #10
 8001126:	72da      	strb	r2, [r3, #11]
	HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 8001128:	f607 5108 	addw	r1, r7, #3336	; 0xd08
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	220c      	movs	r2, #12
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <main+0x6e8>)
 8001134:	f002 fac5 	bl	80036c2 <HAL_UART_Transmit>

	uint8_t error_code_char;

	//test 24

	string_descriptor = static_strings_save((uint8_t *)"useless_string");
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <main+0x6f4>)
 800113a:	f002 fee7 	bl	8003f0c <static_strings_save>
 800113e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001142:	6018      	str	r0, [r3, #0]
	while(string_descriptor != NULL){
 8001144:	e005      	b.n	8001152 <main+0x6ca>
		string_descriptor = static_strings_save((uint8_t *)"useless_string");
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <main+0x6f4>)
 8001148:	f002 fee0 	bl	8003f0c <static_strings_save>
 800114c:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001150:	6018      	str	r0, [r3, #0]
	while(string_descriptor != NULL){
 8001152:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f4      	bne.n	8001146 <main+0x6be>
	}

	uint8_t no_memory_string[800];
	for(i = 0; i < 798; i++){
 800115c:	2300      	movs	r3, #0
 800115e:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8001162:	f102 0206 	add.w	r2, r2, #6
 8001166:	8013      	strh	r3, [r2, #0]
 8001168:	e01f      	b.n	80011aa <main+0x722>
 800116a:	bf00      	nop
 800116c:	08006860 	.word	0x08006860
 8001170:	20001688 	.word	0x20001688
 8001174:	080074fc 	.word	0x080074fc
 8001178:	08006868 	.word	0x08006868
 800117c:	08006870 	.word	0x08006870
		no_memory_string[i] = 'a';
 8001180:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001184:	f103 0306 	add.w	r3, r3, #6
 8001188:	881a      	ldrh	r2, [r3, #0]
 800118a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800118e:	3b04      	subs	r3, #4
 8001190:	2161      	movs	r1, #97	; 0x61
 8001192:	5499      	strb	r1, [r3, r2]
	for(i = 0; i < 798; i++){
 8001194:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001198:	f103 0306 	add.w	r3, r3, #6
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80011a4:	f102 0206 	add.w	r2, r2, #6
 80011a8:	8013      	strh	r3, [r2, #0]
 80011aa:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80011ae:	f103 0306 	add.w	r3, r3, #6
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f240 321d 	movw	r2, #797	; 0x31d
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d9e1      	bls.n	8001180 <main+0x6f8>
	}
	no_memory_string[798] = '\r';
 80011bc:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80011c0:	3b04      	subs	r3, #4
 80011c2:	220d      	movs	r2, #13
 80011c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
	no_memory_string[799] = '\n';
 80011c8:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80011cc:	3b04      	subs	r3, #4
 80011ce:	220a      	movs	r2, #10
 80011d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
	string_descriptor = static_strings_save(no_memory_string);
 80011d4:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80011d8:	3b04      	subs	r3, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fe96 	bl	8003f0c <static_strings_save>
 80011e0:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80011e4:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 80011e6:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <main+0x778>
		error_code_char = static_strings_error_code + 48;
 80011f0:	4bb8      	ldr	r3, [pc, #736]	; (80014d4 <main+0xa4c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3330      	adds	r3, #48	; 0x30
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e003      	b.n	8001208 <main+0x780>
	}
	else{
		error_code_char = '3';
 8001200:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 8001204:	2233      	movs	r2, #51	; 0x33
 8001206:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001208:	f607 5107 	addw	r1, r7, #3335	; 0xd07
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2201      	movs	r2, #1
 8001212:	48b1      	ldr	r0, [pc, #708]	; (80014d8 <main+0xa50>)
 8001214:	f002 fa55 	bl	80036c2 <HAL_UART_Transmit>

	static_strings_init();
 8001218:	f002 fc10 	bl	8003a3c <static_strings_init>

	//test 25

	uint8_t unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100];
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100; i++){
 800121c:	2300      	movs	r3, #0
 800121e:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 8001222:	f102 0206 	add.w	r2, r2, #6
 8001226:	8013      	strh	r3, [r2, #0]
 8001228:	e014      	b.n	8001254 <main+0x7cc>
		unallocable_invalid_string[i] = 'a';
 800122a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800122e:	f103 0306 	add.w	r3, r3, #6
 8001232:	881a      	ldrh	r2, [r3, #0]
 8001234:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001238:	3b04      	subs	r3, #4
 800123a:	2161      	movs	r1, #97	; 0x61
 800123c:	5499      	strb	r1, [r3, r2]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100; i++){
 800123e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001242:	f103 0306 	add.w	r3, r3, #6
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 800124e:	f102 0206 	add.w	r2, r2, #6
 8001252:	8013      	strh	r3, [r2, #0]
 8001254:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001258:	f103 0306 	add.w	r3, r3, #6
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001262:	d3e2      	bcc.n	800122a <main+0x7a2>
	}
	unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100 - 2] = '\r';
 8001264:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001268:	3b04      	subs	r3, #4
 800126a:	220d      	movs	r2, #13
 800126c:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
	unallocable_invalid_string[STATIC_STRINGS_VERY_LONG_STRING_SIZE + 100 - 1] = '\n';
 8001270:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001274:	3b04      	subs	r3, #4
 8001276:	220a      	movs	r2, #10
 8001278:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
	string_descriptor = static_strings_save(unallocable_invalid_string);
 800127c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001280:	3b04      	subs	r3, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fe42 	bl	8003f0c <static_strings_save>
 8001288:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800128c:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 800128e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <main+0x820>
		error_code_char = static_strings_error_code + 48;
 8001298:	4b8e      	ldr	r3, [pc, #568]	; (80014d4 <main+0xa4c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3330      	adds	r3, #48	; 0x30
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e003      	b.n	80012b0 <main+0x828>
	}
	else{
		error_code_char = '4';
 80012a8:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 80012ac:	2234      	movs	r2, #52	; 0x34
 80012ae:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80012b0:	f607 5107 	addw	r1, r7, #3335	; 0xd07
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2201      	movs	r2, #1
 80012ba:	4887      	ldr	r0, [pc, #540]	; (80014d8 <main+0xa50>)
 80012bc:	f002 fa01 	bl	80036c2 <HAL_UART_Transmit>

	//test 26 deprecated

	uint8_t no_line_end_invalid_string[800];
	for(i = 0; i < 800; i++){
 80012c0:	2300      	movs	r3, #0
 80012c2:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80012c6:	f102 0206 	add.w	r2, r2, #6
 80012ca:	8013      	strh	r3, [r2, #0]
 80012cc:	e014      	b.n	80012f8 <main+0x870>
		no_line_end_invalid_string[i] = 'a';
 80012ce:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80012d2:	f103 0306 	add.w	r3, r3, #6
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012dc:	3b04      	subs	r3, #4
 80012de:	2161      	movs	r1, #97	; 0x61
 80012e0:	5499      	strb	r1, [r3, r2]
	for(i = 0; i < 800; i++){
 80012e2:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80012e6:	f103 0306 	add.w	r3, r3, #6
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80012f2:	f102 0206 	add.w	r2, r2, #6
 80012f6:	8013      	strh	r3, [r2, #0]
 80012f8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80012fc:	f103 0306 	add.w	r3, r3, #6
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001306:	d3e2      	bcc.n	80012ce <main+0x846>
	}
	string_descriptor = static_strings_save(no_line_end_invalid_string);
 8001308:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800130c:	3b04      	subs	r3, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fdfc 	bl	8003f0c <static_strings_save>
 8001314:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001318:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 800131a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d107      	bne.n	8001334 <main+0x8ac>
		error_code_char = static_strings_error_code + 48;
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <main+0xa4c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	3330      	adds	r3, #48	; 0x30
 800132a:	b2da      	uxtb	r2, r3
 800132c:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e003      	b.n	800133c <main+0x8b4>
	}
	else{
		error_code_char = '5';
 8001334:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 8001338:	2235      	movs	r2, #53	; 0x35
 800133a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 800133c:	f607 5107 	addw	r1, r7, #3335	; 0xd07
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	2201      	movs	r2, #1
 8001346:	4864      	ldr	r0, [pc, #400]	; (80014d8 <main+0xa50>)
 8001348:	f002 f9bb 	bl	80036c2 <HAL_UART_Transmit>

	//test 27 deprecated

	string_descriptor = static_strings_allocate(1200);
 800134c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001350:	f002 fcd4 	bl	8003cfc <static_strings_allocate>
 8001354:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001358:	6018      	str	r0, [r3, #0]
	if(string_descriptor == NULL){
 800135a:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <main+0x8ec>
		error_code_char = static_strings_error_code + 48;
 8001364:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <main+0xa4c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3330      	adds	r3, #48	; 0x30
 800136a:	b2da      	uxtb	r2, r3
 800136c:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e003      	b.n	800137c <main+0x8f4>
	}
	else{
		error_code_char = '6';
 8001374:	f607 5307 	addw	r3, r7, #3335	; 0xd07
 8001378:	2236      	movs	r2, #54	; 0x36
 800137a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 800137c:	f607 5107 	addw	r1, r7, #3335	; 0xd07
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	2201      	movs	r2, #1
 8001386:	4854      	ldr	r0, [pc, #336]	; (80014d8 <main+0xa50>)
 8001388:	f002 f99b 	bl	80036c2 <HAL_UART_Transmit>

	//test 28

	uint8_t custom[10] = "123,56,89\0";
 800138c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001390:	3b10      	subs	r3, #16
 8001392:	4a52      	ldr	r2, [pc, #328]	; (80014dc <main+0xa54>)
 8001394:	ca07      	ldmia	r2, {r0, r1, r2}
 8001396:	c303      	stmia	r3!, {r0, r1}
 8001398:	801a      	strh	r2, [r3, #0]
	static_strings_string_descriptor custom_string_descriptor;
	string_descriptor = &custom_string_descriptor;
 800139a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800139e:	3b18      	subs	r3, #24
 80013a0:	f507 52e2 	add.w	r2, r7, #7232	; 0x1c40
 80013a4:	6013      	str	r3, [r2, #0]
	static_strings_create_custom_string(string_descriptor,custom);
 80013a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013aa:	3b10      	subs	r3, #16
 80013ac:	4619      	mov	r1, r3
 80013ae:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	f002 fdd1 	bl	8003f5a <static_strings_create_custom_string>
	HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80013b8:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6819      	ldr	r1, [r3, #0]
 80013c0:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	889a      	ldrh	r2, [r3, #4]
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	4842      	ldr	r0, [pc, #264]	; (80014d8 <main+0xa50>)
 80013ce:	f002 f978 	bl	80036c2 <HAL_UART_Transmit>

	// test 29

	if(static_strings_is_line(string_descriptor)){
 80013d2:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	f002 fdec 	bl	8003fb4 <static_strings_is_line>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <main+0x96a>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	2203      	movs	r2, #3
 80013e8:	493d      	ldr	r1, [pc, #244]	; (80014e0 <main+0xa58>)
 80013ea:	483b      	ldr	r0, [pc, #236]	; (80014d8 <main+0xa50>)
 80013ec:	f002 f969 	bl	80036c2 <HAL_UART_Transmit>
 80013f0:	e006      	b.n	8001400 <main+0x978>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	2203      	movs	r2, #3
 80013f8:	493a      	ldr	r1, [pc, #232]	; (80014e4 <main+0xa5c>)
 80013fa:	4837      	ldr	r0, [pc, #220]	; (80014d8 <main+0xa50>)
 80013fc:	f002 f961 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 30

	uint8_t custom_line[10] = "123,56,8\r\n";
 8001400:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001404:	3b04      	subs	r3, #4
 8001406:	4a38      	ldr	r2, [pc, #224]	; (80014e8 <main+0xa60>)
 8001408:	ca07      	ldmia	r2, {r0, r1, r2}
 800140a:	c303      	stmia	r3!, {r0, r1}
 800140c:	801a      	strh	r2, [r3, #0]
	static_strings_create_custom_string(string_descriptor,custom_line);
 800140e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001412:	3b04      	subs	r3, #4
 8001414:	4619      	mov	r1, r3
 8001416:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	f002 fd9d 	bl	8003f5a <static_strings_create_custom_string>

	if(static_strings_is_line(string_descriptor)){
 8001420:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	f002 fdc5 	bl	8003fb4 <static_strings_is_line>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <main+0x9b8>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2203      	movs	r2, #3
 8001436:	492a      	ldr	r1, [pc, #168]	; (80014e0 <main+0xa58>)
 8001438:	4827      	ldr	r0, [pc, #156]	; (80014d8 <main+0xa50>)
 800143a:	f002 f942 	bl	80036c2 <HAL_UART_Transmit>
 800143e:	e006      	b.n	800144e <main+0x9c6>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	2203      	movs	r2, #3
 8001446:	4927      	ldr	r1, [pc, #156]	; (80014e4 <main+0xa5c>)
 8001448:	4823      	ldr	r0, [pc, #140]	; (80014d8 <main+0xa50>)
 800144a:	f002 f93a 	bl	80036c2 <HAL_UART_Transmit>
	}

	// reset all descriptors
	static_strings_init();
 800144e:	f002 faf5 	bl	8003a3c <static_strings_init>

	// test 31-33

	static_strings_string_descriptor *token;
	static_strings_string_splitter_set_parameters(string_descriptor,',');
 8001452:	212c      	movs	r1, #44	; 0x2c
 8001454:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	f002 fe09 	bl	8004070 <static_strings_string_splitter_set_parameters>
	while(static_strings_string_splitter_get_next_token(&token)){
 800145e:	e015      	b.n	800148c <main+0xa04>
		HAL_UART_Transmit(&huart1,token->string,token->length,HAL_MAX_DELAY);
 8001460:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001464:	3b08      	subs	r3, #8
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800146e:	3b08      	subs	r3, #8
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	889a      	ldrh	r2, [r3, #4]
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <main+0xa50>)
 800147a:	f002 f922 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(token);
 800147e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001482:	3b08      	subs	r3, #8
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fd84 	bl	8003f94 <static_strings_deallocate>
	while(static_strings_string_splitter_get_next_token(&token)){
 800148c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001490:	3b08      	subs	r3, #8
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fe04 	bl	80040a0 <static_strings_string_splitter_get_next_token>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1e0      	bne.n	8001460 <main+0x9d8>
	}

	// test 34

	int next_token_result = static_strings_string_splitter_get_next_token(&token);
 800149e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014a2:	3b08      	subs	r3, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fdfb 	bl	80040a0 <static_strings_string_splitter_get_next_token>
 80014aa:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014ae:	f103 0314 	add.w	r3, r3, #20
 80014b2:	6018      	str	r0, [r3, #0]
	if(next_token_result){
 80014b4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80014b8:	f103 0314 	add.w	r3, r3, #20
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d014      	beq.n	80014ec <main+0xa64>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	2203      	movs	r2, #3
 80014c8:	4905      	ldr	r1, [pc, #20]	; (80014e0 <main+0xa58>)
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <main+0xa50>)
 80014cc:	f002 f8f9 	bl	80036c2 <HAL_UART_Transmit>
 80014d0:	e013      	b.n	80014fa <main+0xa72>
 80014d2:	bf00      	nop
 80014d4:	20000684 	.word	0x20000684
 80014d8:	20001688 	.word	0x20001688
 80014dc:	08007530 	.word	0x08007530
 80014e0:	08006880 	.word	0x08006880
 80014e4:	08006884 	.word	0x08006884
 80014e8:	0800753c 	.word	0x0800753c
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	2203      	movs	r2, #3
 80014f2:	49c3      	ldr	r1, [pc, #780]	; (8001800 <main+0xd78>)
 80014f4:	48c3      	ldr	r0, [pc, #780]	; (8001804 <main+0xd7c>)
 80014f6:	f002 f8e4 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 35

	static_strings_create_custom_string(string_descriptor,custom);
 80014fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014fe:	3b10      	subs	r3, #16
 8001500:	4619      	mov	r1, r3
 8001502:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f002 fd27 	bl	8003f5a <static_strings_create_custom_string>
	static_strings_string_descriptor *substring = static_strings_substring(string_descriptor,2,8);
 800150c:	2208      	movs	r2, #8
 800150e:	2102      	movs	r1, #2
 8001510:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f002 fe21 	bl	800415c <static_strings_substring>
 800151a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800151e:	f103 0310 	add.w	r3, r3, #16
 8001522:	6018      	str	r0, [r3, #0]
	if(substring != NULL){
 8001524:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001528:	f103 0310 	add.w	r3, r3, #16
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d017      	beq.n	8001562 <main+0xada>
		HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 8001532:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001536:	f103 0310 	add.w	r3, r3, #16
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001542:	f103 0310 	add.w	r3, r3, #16
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	889a      	ldrh	r2, [r3, #4]
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	48ad      	ldr	r0, [pc, #692]	; (8001804 <main+0xd7c>)
 8001550:	f002 f8b7 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 8001554:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001558:	f103 0310 	add.w	r3, r3, #16
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	f002 fd19 	bl	8003f94 <static_strings_deallocate>
	}

	// test 36

	substring = static_strings_substring(string_descriptor,0,string_descriptor->length);
 8001562:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	461a      	mov	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	f002 fdf2 	bl	800415c <static_strings_substring>
 8001578:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800157c:	f103 0310 	add.w	r3, r3, #16
 8001580:	6018      	str	r0, [r3, #0]
	if(substring != NULL){
 8001582:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001586:	f103 0310 	add.w	r3, r3, #16
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d017      	beq.n	80015c0 <main+0xb38>
		HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 8001590:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001594:	f103 0310 	add.w	r3, r3, #16
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015a0:	f103 0310 	add.w	r3, r3, #16
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	889a      	ldrh	r2, [r3, #4]
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	4895      	ldr	r0, [pc, #596]	; (8001804 <main+0xd7c>)
 80015ae:	f002 f888 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 80015b2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015b6:	f103 0310 	add.w	r3, r3, #16
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	f002 fcea 	bl	8003f94 <static_strings_deallocate>
	}

	// test 37

	substring = static_strings_substring(string_descriptor,0,12);
 80015c0:	220c      	movs	r2, #12
 80015c2:	2100      	movs	r1, #0
 80015c4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	f002 fdc7 	bl	800415c <static_strings_substring>
 80015ce:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015d2:	f103 0310 	add.w	r3, r3, #16
 80015d6:	6018      	str	r0, [r3, #0]
	if (substring != NULL) {
 80015d8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015dc:	f103 0310 	add.w	r3, r3, #16
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00e      	beq.n	8001604 <main+0xb7c>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	2203      	movs	r2, #3
 80015ec:	4986      	ldr	r1, [pc, #536]	; (8001808 <main+0xd80>)
 80015ee:	4885      	ldr	r0, [pc, #532]	; (8001804 <main+0xd7c>)
 80015f0:	f002 f867 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 80015f4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80015f8:	f103 0310 	add.w	r3, r3, #16
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	f002 fcc9 	bl	8003f94 <static_strings_deallocate>
 8001602:	e006      	b.n	8001612 <main+0xb8a>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	2203      	movs	r2, #3
 800160a:	497d      	ldr	r1, [pc, #500]	; (8001800 <main+0xd78>)
 800160c:	487d      	ldr	r0, [pc, #500]	; (8001804 <main+0xd7c>)
 800160e:	f002 f858 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 38

	substring = static_strings_substring(string_descriptor,-2,5);
 8001612:	2205      	movs	r2, #5
 8001614:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001618:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	f002 fd9d 	bl	800415c <static_strings_substring>
 8001622:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001626:	f103 0310 	add.w	r3, r3, #16
 800162a:	6018      	str	r0, [r3, #0]
	if (substring != NULL){
 800162c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001630:	f103 0310 	add.w	r3, r3, #16
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00e      	beq.n	8001658 <main+0xbd0>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	2203      	movs	r2, #3
 8001640:	4971      	ldr	r1, [pc, #452]	; (8001808 <main+0xd80>)
 8001642:	4870      	ldr	r0, [pc, #448]	; (8001804 <main+0xd7c>)
 8001644:	f002 f83d 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(substring);
 8001648:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800164c:	f103 0310 	add.w	r3, r3, #16
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	f002 fc9f 	bl	8003f94 <static_strings_deallocate>
 8001656:	e006      	b.n	8001666 <main+0xbde>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	2203      	movs	r2, #3
 800165e:	4968      	ldr	r1, [pc, #416]	; (8001800 <main+0xd78>)
 8001660:	4868      	ldr	r0, [pc, #416]	; (8001804 <main+0xd7c>)
 8001662:	f002 f82e 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 39

	uint8_t concatenate_at_memory[] = "Hello \0";
 8001666:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800166a:	3b10      	subs	r3, #16
 800166c:	4a67      	ldr	r2, [pc, #412]	; (800180c <main+0xd84>)
 800166e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001672:	e883 0003 	stmia.w	r3, {r0, r1}
	static_strings_string_descriptor concatenate_at;
	static_strings_create_custom_string(&concatenate_at,concatenate_at_memory);
 8001676:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800167a:	3a10      	subs	r2, #16
 800167c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001680:	3b18      	subs	r3, #24
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fc68 	bl	8003f5a <static_strings_create_custom_string>
	uint8_t concatenate_memory[] = "World\r\n";
 800168a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800168e:	4a60      	ldr	r2, [pc, #384]	; (8001810 <main+0xd88>)
 8001690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001694:	e883 0003 	stmia.w	r3, {r0, r1}
	static_strings_string_descriptor concatenate;
	static_strings_create_custom_string(&concatenate,concatenate_memory);
 8001698:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800169c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a0:	3b08      	subs	r3, #8
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fc58 	bl	8003f5a <static_strings_create_custom_string>
	static_strings_string_descriptor *concatenated;
	concatenated = static_strings_concatenate(&concatenate_at,&concatenate);
 80016aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016ae:	3a08      	subs	r2, #8
 80016b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016b4:	3b18      	subs	r3, #24
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fd91 	bl	80041e0 <static_strings_concatenate>
 80016be:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016c2:	f103 030c 	add.w	r3, r3, #12
 80016c6:	6018      	str	r0, [r3, #0]
	if (concatenated != NULL) {
 80016c8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016cc:	f103 030c 	add.w	r3, r3, #12
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d017      	beq.n	8001706 <main+0xc7e>
		HAL_UART_Transmit(&huart1,concatenated->string,concatenated->length,HAL_MAX_DELAY);
 80016d6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016da:	f103 030c 	add.w	r3, r3, #12
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016e6:	f103 030c 	add.w	r3, r3, #12
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	889a      	ldrh	r2, [r3, #4]
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	4844      	ldr	r0, [pc, #272]	; (8001804 <main+0xd7c>)
 80016f4:	f001 ffe5 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(concatenated);
 80016f8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80016fc:	f103 030c 	add.w	r3, r3, #12
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f002 fc47 	bl	8003f94 <static_strings_deallocate>
	}

	// test 40

	if(static_strings_contains_string(concatenated,&concatenate_at)){
 8001706:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800170a:	3b18      	subs	r3, #24
 800170c:	4619      	mov	r1, r3
 800170e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001712:	f103 030c 	add.w	r3, r3, #12
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	f002 fe24 	bl	8004364 <static_strings_contains_string>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <main+0xcaa>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	2203      	movs	r2, #3
 8001728:	4937      	ldr	r1, [pc, #220]	; (8001808 <main+0xd80>)
 800172a:	4836      	ldr	r0, [pc, #216]	; (8001804 <main+0xd7c>)
 800172c:	f001 ffc9 	bl	80036c2 <HAL_UART_Transmit>
 8001730:	e006      	b.n	8001740 <main+0xcb8>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2203      	movs	r2, #3
 8001738:	4931      	ldr	r1, [pc, #196]	; (8001800 <main+0xd78>)
 800173a:	4832      	ldr	r0, [pc, #200]	; (8001804 <main+0xd7c>)
 800173c:	f001 ffc1 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 41

	if(static_strings_contains_string(concatenated,&concatenate)){
 8001740:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001744:	3b08      	subs	r3, #8
 8001746:	4619      	mov	r1, r3
 8001748:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800174c:	f103 030c 	add.w	r3, r3, #12
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f002 fe07 	bl	8004364 <static_strings_contains_string>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <main+0xce4>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	2203      	movs	r2, #3
 8001762:	4929      	ldr	r1, [pc, #164]	; (8001808 <main+0xd80>)
 8001764:	4827      	ldr	r0, [pc, #156]	; (8001804 <main+0xd7c>)
 8001766:	f001 ffac 	bl	80036c2 <HAL_UART_Transmit>
 800176a:	e006      	b.n	800177a <main+0xcf2>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2203      	movs	r2, #3
 8001772:	4923      	ldr	r1, [pc, #140]	; (8001800 <main+0xd78>)
 8001774:	4823      	ldr	r0, [pc, #140]	; (8001804 <main+0xd7c>)
 8001776:	f001 ffa4 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 42

	uint8_t non_contained_memory[] = "Hill\0";
 800177a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800177e:	3b10      	subs	r3, #16
 8001780:	4a24      	ldr	r2, [pc, #144]	; (8001814 <main+0xd8c>)
 8001782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001786:	6018      	str	r0, [r3, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	8019      	strh	r1, [r3, #0]
	static_strings_string_descriptor non_contained;
	static_strings_create_custom_string(&non_contained,non_contained_memory);
 800178c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001790:	3a10      	subs	r2, #16
 8001792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001796:	3b18      	subs	r3, #24
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fbdd 	bl	8003f5a <static_strings_create_custom_string>
	if(static_strings_contains_string(concatenated,&non_contained)){
 80017a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017a4:	3b18      	subs	r3, #24
 80017a6:	4619      	mov	r1, r3
 80017a8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80017ac:	f103 030c 	add.w	r3, r3, #12
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	f002 fdd7 	bl	8004364 <static_strings_contains_string>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <main+0xd44>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	2203      	movs	r2, #3
 80017c2:	4911      	ldr	r1, [pc, #68]	; (8001808 <main+0xd80>)
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <main+0xd7c>)
 80017c6:	f001 ff7c 	bl	80036c2 <HAL_UART_Transmit>
 80017ca:	e006      	b.n	80017da <main+0xd52>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	2203      	movs	r2, #3
 80017d2:	490b      	ldr	r1, [pc, #44]	; (8001800 <main+0xd78>)
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <main+0xd7c>)
 80017d6:	f001 ff74 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 43

	if(static_strings_contains_char(concatenated,'W')){
 80017da:	2157      	movs	r1, #87	; 0x57
 80017dc:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80017e0:	f103 030c 	add.w	r3, r3, #12
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	f002 fe04 	bl	80043f2 <static_strings_contains_char>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <main+0xd90>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	2203      	movs	r2, #3
 80017f6:	4904      	ldr	r1, [pc, #16]	; (8001808 <main+0xd80>)
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <main+0xd7c>)
 80017fa:	f001 ff62 	bl	80036c2 <HAL_UART_Transmit>
 80017fe:	e012      	b.n	8001826 <main+0xd9e>
 8001800:	08006884 	.word	0x08006884
 8001804:	20001688 	.word	0x20001688
 8001808:	08006880 	.word	0x08006880
 800180c:	08007548 	.word	0x08007548
 8001810:	08007550 	.word	0x08007550
 8001814:	08007558 	.word	0x08007558
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	2203      	movs	r2, #3
 800181e:	494f      	ldr	r1, [pc, #316]	; (800195c <main+0xed4>)
 8001820:	484f      	ldr	r0, [pc, #316]	; (8001960 <main+0xed8>)
 8001822:	f001 ff4e 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 44

	if(static_strings_contains_char(concatenated,'e')){
 8001826:	2165      	movs	r1, #101	; 0x65
 8001828:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800182c:	f103 030c 	add.w	r3, r3, #12
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f002 fdde 	bl	80043f2 <static_strings_contains_char>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <main+0xdc4>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	2203      	movs	r2, #3
 8001842:	4948      	ldr	r1, [pc, #288]	; (8001964 <main+0xedc>)
 8001844:	4846      	ldr	r0, [pc, #280]	; (8001960 <main+0xed8>)
 8001846:	f001 ff3c 	bl	80036c2 <HAL_UART_Transmit>
 800184a:	e006      	b.n	800185a <main+0xdd2>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	2203      	movs	r2, #3
 8001852:	4942      	ldr	r1, [pc, #264]	; (800195c <main+0xed4>)
 8001854:	4842      	ldr	r0, [pc, #264]	; (8001960 <main+0xed8>)
 8001856:	f001 ff34 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 45

	if(static_strings_contains_char(concatenated,'m')){
 800185a:	216d      	movs	r1, #109	; 0x6d
 800185c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001860:	f103 030c 	add.w	r3, r3, #12
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	f002 fdc4 	bl	80043f2 <static_strings_contains_char>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <main+0xdf8>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	2203      	movs	r2, #3
 8001876:	493b      	ldr	r1, [pc, #236]	; (8001964 <main+0xedc>)
 8001878:	4839      	ldr	r0, [pc, #228]	; (8001960 <main+0xed8>)
 800187a:	f001 ff22 	bl	80036c2 <HAL_UART_Transmit>
 800187e:	e006      	b.n	800188e <main+0xe06>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	2203      	movs	r2, #3
 8001886:	4935      	ldr	r1, [pc, #212]	; (800195c <main+0xed4>)
 8001888:	4835      	ldr	r0, [pc, #212]	; (8001960 <main+0xed8>)
 800188a:	f001 ff1a 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 46

	uint8_t equal_a_memory[] = "Hall\0";
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	4a35      	ldr	r2, [pc, #212]	; (8001968 <main+0xee0>)
 8001894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001898:	6018      	str	r0, [r3, #0]
 800189a:	3304      	adds	r3, #4
 800189c:	8019      	strh	r1, [r3, #0]
	static_strings_string_descriptor equal_a;
	uint8_t equal_b_memory[] = "Hall\0";
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	3b10      	subs	r3, #16
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <main+0xee0>)
 80018a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018aa:	6018      	str	r0, [r3, #0]
 80018ac:	3304      	adds	r3, #4
 80018ae:	8019      	strh	r1, [r3, #0]
	static_strings_string_descriptor equal_b;
	uint8_t non_equal_memory[] = "oil\0";
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <main+0xee4>)
 80018b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ba:	6018      	str	r0, [r3, #0]
 80018bc:	3304      	adds	r3, #4
 80018be:	7019      	strb	r1, [r3, #0]
	static_strings_string_descriptor non_equal;
	static_strings_create_custom_string(&equal_a,equal_a_memory);
 80018c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c8:	3b08      	subs	r3, #8
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fb44 	bl	8003f5a <static_strings_create_custom_string>
	static_strings_create_custom_string(&equal_b,equal_b_memory);
 80018d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018d6:	3a10      	subs	r2, #16
 80018d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018dc:	3b18      	subs	r3, #24
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fb3a 	bl	8003f5a <static_strings_create_custom_string>
	static_strings_create_custom_string(&non_equal,non_equal_memory);
 80018e6:	f107 0208 	add.w	r2, r7, #8
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	3b08      	subs	r3, #8
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fb31 	bl	8003f5a <static_strings_create_custom_string>

	if(static_strings_compare(&equal_a,&equal_b)){
 80018f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018fc:	3a18      	subs	r2, #24
 80018fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001902:	3b08      	subs	r3, #8
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fd95 	bl	8004436 <static_strings_compare>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <main+0xe9a>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	2203      	movs	r2, #3
 8001918:	4912      	ldr	r1, [pc, #72]	; (8001964 <main+0xedc>)
 800191a:	4811      	ldr	r0, [pc, #68]	; (8001960 <main+0xed8>)
 800191c:	f001 fed1 	bl	80036c2 <HAL_UART_Transmit>
 8001920:	e006      	b.n	8001930 <main+0xea8>
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	2203      	movs	r2, #3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <main+0xed4>)
 800192a:	480d      	ldr	r0, [pc, #52]	; (8001960 <main+0xed8>)
 800192c:	f001 fec9 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 47

	if(static_strings_compare(&equal_a,&non_equal)){
 8001930:	f107 0208 	add.w	r2, r7, #8
 8001934:	3a08      	subs	r2, #8
 8001936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193a:	3b08      	subs	r3, #8
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fd79 	bl	8004436 <static_strings_compare>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d012      	beq.n	8001970 <main+0xee8>
		HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	2203      	movs	r2, #3
 8001950:	4904      	ldr	r1, [pc, #16]	; (8001964 <main+0xedc>)
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <main+0xed8>)
 8001954:	f001 feb5 	bl	80036c2 <HAL_UART_Transmit>
 8001958:	e011      	b.n	800197e <main+0xef6>
 800195a:	bf00      	nop
 800195c:	08006884 	.word	0x08006884
 8001960:	20001688 	.word	0x20001688
 8001964:	08006880 	.word	0x08006880
 8001968:	08007560 	.word	0x08007560
 800196c:	08007568 	.word	0x08007568
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	2203      	movs	r2, #3
 8001976:	49d0      	ldr	r1, [pc, #832]	; (8001cb8 <main+0x1230>)
 8001978:	48d0      	ldr	r0, [pc, #832]	; (8001cbc <main+0x1234>)
 800197a:	f001 fea2 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 48

	static_strings_string_descriptor *var_string;
	uint8_t uint8 = 200;
 800197e:	23c8      	movs	r3, #200	; 0xc8
 8001980:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 8001984:	f102 020b 	add.w	r2, r2, #11
 8001988:	7013      	strb	r3, [r2, #0]
	var_string = static_strings_uint8_to_string(uint8);
 800198a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800198e:	f103 030b 	add.w	r3, r3, #11
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fd7b 	bl	8004490 <static_strings_uint8_to_string>
 800199a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 800199e:	f103 0304 	add.w	r3, r3, #4
 80019a2:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 80019a4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019a8:	f103 0304 	add.w	r3, r3, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d017      	beq.n	80019e2 <main+0xf5a>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 80019b2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019b6:	f103 0304 	add.w	r3, r3, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019c2:	f103 0304 	add.w	r3, r3, #4
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	889a      	ldrh	r2, [r3, #4]
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	48bb      	ldr	r0, [pc, #748]	; (8001cbc <main+0x1234>)
 80019d0:	f001 fe77 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 80019d4:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019d8:	f103 0304 	add.w	r3, r3, #4
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f002 fad9 	bl	8003f94 <static_strings_deallocate>
	}

	// test 49

	uint16_t uint16 = 64200;
 80019e2:	f64f 23c8 	movw	r3, #64200	; 0xfac8
 80019e6:	f507 52e1 	add.w	r2, r7, #7200	; 0x1c20
 80019ea:	f102 0202 	add.w	r2, r2, #2
 80019ee:	8013      	strh	r3, [r2, #0]
	var_string = static_strings_uint16_to_string(uint16);
 80019f0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 80019f4:	f103 0302 	add.w	r3, r3, #2
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fd7c 	bl	80044f8 <static_strings_uint16_to_string>
 8001a00:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a04:	f103 0304 	add.w	r3, r3, #4
 8001a08:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001a0a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a0e:	f103 0304 	add.w	r3, r3, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d017      	beq.n	8001a48 <main+0xfc0>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001a18:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a1c:	f103 0304 	add.w	r3, r3, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a28:	f103 0304 	add.w	r3, r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	889a      	ldrh	r2, [r3, #4]
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	48a1      	ldr	r0, [pc, #644]	; (8001cbc <main+0x1234>)
 8001a36:	f001 fe44 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001a3a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a3e:	f103 0304 	add.w	r3, r3, #4
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f002 faa6 	bl	8003f94 <static_strings_deallocate>
	}

	// test 50

	uint32_t uint32 = 1000064200;
 8001a48:	4b9d      	ldr	r3, [pc, #628]	; (8001cc0 <main+0x1238>)
 8001a4a:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001a4e:	f102 021c 	add.w	r2, r2, #28
 8001a52:	6013      	str	r3, [r2, #0]
	var_string = static_strings_uint32_to_string(uint32);
 8001a54:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001a58:	f103 031c 	add.w	r3, r3, #28
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	f002 fd7f 	bl	8004560 <static_strings_uint32_to_string>
 8001a62:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a66:	f103 0304 	add.w	r3, r3, #4
 8001a6a:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001a6c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a70:	f103 0304 	add.w	r3, r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d017      	beq.n	8001aaa <main+0x1022>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001a7a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a7e:	f103 0304 	add.w	r3, r3, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6819      	ldr	r1, [r3, #0]
 8001a86:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001a8a:	f103 0304 	add.w	r3, r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	889a      	ldrh	r2, [r3, #4]
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	4889      	ldr	r0, [pc, #548]	; (8001cbc <main+0x1234>)
 8001a98:	f001 fe13 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001a9c:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001aa0:	f103 0304 	add.w	r3, r3, #4
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f002 fa75 	bl	8003f94 <static_strings_deallocate>
	}

	// test 51

	int8_t int8 = 100;
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001ab0:	f102 021b 	add.w	r2, r2, #27
 8001ab4:	7013      	strb	r3, [r2, #0]
	var_string = static_strings_int8_to_string(int8);
 8001ab6:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001aba:	f103 031b 	add.w	r3, r3, #27
 8001abe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fd7e 	bl	80045c4 <static_strings_int8_to_string>
 8001ac8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001acc:	f103 0304 	add.w	r3, r3, #4
 8001ad0:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001ad2:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ad6:	f103 0304 	add.w	r3, r3, #4
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d017      	beq.n	8001b10 <main+0x1088>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001ae0:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ae4:	f103 0304 	add.w	r3, r3, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001af0:	f103 0304 	add.w	r3, r3, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	889a      	ldrh	r2, [r3, #4]
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	486f      	ldr	r0, [pc, #444]	; (8001cbc <main+0x1234>)
 8001afe:	f001 fde0 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001b02:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b06:	f103 0304 	add.w	r3, r3, #4
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	f002 fa42 	bl	8003f94 <static_strings_deallocate>
	}

	// test 52

	int16_t int16 = -32100;
 8001b10:	f248 239c 	movw	r3, #33436	; 0x829c
 8001b14:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001b18:	f102 0218 	add.w	r2, r2, #24
 8001b1c:	8013      	strh	r3, [r2, #0]
	var_string = static_strings_int16_to_string(int16);
 8001b1e:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b22:	f103 0318 	add.w	r3, r3, #24
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fd7e 	bl	800462c <static_strings_int16_to_string>
 8001b30:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b34:	f103 0304 	add.w	r3, r3, #4
 8001b38:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001b3a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b3e:	f103 0304 	add.w	r3, r3, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <main+0x10f0>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b48:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b4c:	f103 0304 	add.w	r3, r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b58:	f103 0304 	add.w	r3, r3, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	889a      	ldrh	r2, [r3, #4]
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	4855      	ldr	r0, [pc, #340]	; (8001cbc <main+0x1234>)
 8001b66:	f001 fdac 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001b6a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b6e:	f103 0304 	add.w	r3, r3, #4
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	f002 fa0e 	bl	8003f94 <static_strings_deallocate>
	}

	// test 53

	int32_t int32 = 500032100;
 8001b78:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <main+0x123c>)
 8001b7a:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001b7e:	f102 0214 	add.w	r2, r2, #20
 8001b82:	6013      	str	r3, [r2, #0]
	var_string = static_strings_uint32_to_string(int32);
 8001b84:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001b88:	f103 0314 	add.w	r3, r3, #20
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 fce6 	bl	8004560 <static_strings_uint32_to_string>
 8001b94:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001b98:	f103 0304 	add.w	r3, r3, #4
 8001b9c:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001b9e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001ba2:	f103 0304 	add.w	r3, r3, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d017      	beq.n	8001bdc <main+0x1154>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001bac:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001bb0:	f103 0304 	add.w	r3, r3, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001bbc:	f103 0304 	add.w	r3, r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	889a      	ldrh	r2, [r3, #4]
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc8:	483c      	ldr	r0, [pc, #240]	; (8001cbc <main+0x1234>)
 8001bca:	f001 fd7a 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001bce:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001bd2:	f103 0304 	add.w	r3, r3, #4
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	f002 f9dc 	bl	8003f94 <static_strings_deallocate>
	}

	// test 54

	float float_number = 19.60232;
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <main+0x1240>)
 8001bde:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001be2:	f102 0210 	add.w	r2, r2, #16
 8001be6:	6013      	str	r3, [r2, #0]
	var_string = static_strings_float_to_string(float_number);
 8001be8:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001bec:	f103 0310 	add.w	r3, r3, #16
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f002 fd4f 	bl	8004694 <static_strings_float_to_string>
 8001bf6:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001bfa:	f103 0304 	add.w	r3, r3, #4
 8001bfe:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001c00:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c04:	f103 0304 	add.w	r3, r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d017      	beq.n	8001c3e <main+0x11b6>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c0e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c12:	f103 0304 	add.w	r3, r3, #4
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c1e:	f103 0304 	add.w	r3, r3, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	889a      	ldrh	r2, [r3, #4]
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	4824      	ldr	r0, [pc, #144]	; (8001cbc <main+0x1234>)
 8001c2c:	f001 fd49 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001c30:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c34:	f103 0304 	add.w	r3, r3, #4
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	f002 f9ab 	bl	8003f94 <static_strings_deallocate>
	}

	// test 55

	double double_number = -1924.2342;
 8001c3e:	a41c      	add	r4, pc, #112	; (adr r4, 8001cb0 <main+0x1228>)
 8001c40:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c44:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8001c48:	f102 0208 	add.w	r2, r2, #8
 8001c4c:	e9c2 3400 	strd	r3, r4, [r2]
	var_string = static_strings_double_to_string(double_number);
 8001c50:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001c54:	f103 0308 	add.w	r3, r3, #8
 8001c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5c:	f002 fd52 	bl	8004704 <static_strings_double_to_string>
 8001c60:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c64:	f103 0304 	add.w	r3, r3, #4
 8001c68:	6018      	str	r0, [r3, #0]
	if(var_string != NULL){
 8001c6a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c6e:	f103 0304 	add.w	r3, r3, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d029      	beq.n	8001ccc <main+0x1244>
		HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c78:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c7c:	f103 0304 	add.w	r3, r3, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c88:	f103 0304 	add.w	r3, r3, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	889a      	ldrh	r2, [r3, #4]
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <main+0x1234>)
 8001c96:	f001 fd14 	bl	80036c2 <HAL_UART_Transmit>
		static_strings_deallocate(var_string);
 8001c9a:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001c9e:	f103 0304 	add.w	r3, r3, #4
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f002 f976 	bl	8003f94 <static_strings_deallocate>
 8001ca8:	e010      	b.n	8001ccc <main+0x1244>
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
 8001cb0:	d21ff2e5 	.word	0xd21ff2e5
 8001cb4:	c09e10ef 	.word	0xc09e10ef
 8001cb8:	08006884 	.word	0x08006884
 8001cbc:	20001688 	.word	0x20001688
 8001cc0:	3b9bc4c8 	.word	0x3b9bc4c8
 8001cc4:	1dcde264 	.word	0x1dcde264
 8001cc8:	419cd18d 	.word	0x419cd18d
	}

	// test 56

	static_strings_string_descriptor *copy_test_source_string = static_strings_save((uint8_t *)"I am a copy test\r\n");
 8001ccc:	48be      	ldr	r0, [pc, #760]	; (8001fc8 <main+0x1540>)
 8001cce:	f002 f91d 	bl	8003f0c <static_strings_save>
 8001cd2:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001cd6:	f103 0304 	add.w	r3, r3, #4
 8001cda:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001cdc:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001ce0:	f103 0304 	add.w	r3, r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d03c      	beq.n	8001d64 <main+0x12dc>
		static_strings_string_descriptor *copy_test_target_string = static_strings_allocate(100);
 8001cea:	2064      	movs	r0, #100	; 0x64
 8001cec:	f002 f806 	bl	8003cfc <static_strings_allocate>
 8001cf0:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001cf4:	6018      	str	r0, [r3, #0]
		if(static_strings_copy(copy_test_target_string,copy_test_source_string,0) != NULL){
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001cfc:	f103 0304 	add.w	r3, r3, #4
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	f001 ff80 	bl	8003c0c <static_strings_copy>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d019      	beq.n	8001d46 <main+0x12be>
			HAL_UART_Transmit(&huart1,copy_test_target_string->string,copy_test_target_string->length,HAL_MAX_DELAY);
 8001d12:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	889a      	ldrh	r2, [r3, #4]
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	48a9      	ldr	r0, [pc, #676]	; (8001fcc <main+0x1544>)
 8001d28:	f001 fccb 	bl	80036c2 <HAL_UART_Transmit>
			static_strings_deallocate(copy_test_source_string);
 8001d2c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d30:	f103 0304 	add.w	r3, r3, #4
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f002 f92d 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(copy_test_target_string);
 8001d3a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	f002 f928 	bl	8003f94 <static_strings_deallocate>
 8001d44:	e01c      	b.n	8001d80 <main+0x12f8>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	49a0      	ldr	r1, [pc, #640]	; (8001fd0 <main+0x1548>)
 8001d4e:	489f      	ldr	r0, [pc, #636]	; (8001fcc <main+0x1544>)
 8001d50:	f001 fcb7 	bl	80036c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	2201      	movs	r2, #1
 8001d5a:	499e      	ldr	r1, [pc, #632]	; (8001fd4 <main+0x154c>)
 8001d5c:	489b      	ldr	r0, [pc, #620]	; (8001fcc <main+0x1544>)
 8001d5e:	f001 fcb0 	bl	80036c2 <HAL_UART_Transmit>
 8001d62:	e00d      	b.n	8001d80 <main+0x12f8>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	2208      	movs	r2, #8
 8001d6a:	499b      	ldr	r1, [pc, #620]	; (8001fd8 <main+0x1550>)
 8001d6c:	4897      	ldr	r0, [pc, #604]	; (8001fcc <main+0x1544>)
 8001d6e:	f001 fca8 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	2201      	movs	r2, #1
 8001d78:	4996      	ldr	r1, [pc, #600]	; (8001fd4 <main+0x154c>)
 8001d7a:	4894      	ldr	r0, [pc, #592]	; (8001fcc <main+0x1544>)
 8001d7c:	f001 fca1 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 57

	static_strings_string_descriptor *clone_test_source_string = static_strings_save((uint8_t *)"I am a clone test\r\n");
 8001d80:	4896      	ldr	r0, [pc, #600]	; (8001fdc <main+0x1554>)
 8001d82:	f002 f8c3 	bl	8003f0c <static_strings_save>
 8001d86:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001d8a:	f103 031c 	add.w	r3, r3, #28
 8001d8e:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001d90:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001d94:	f103 0304 	add.w	r3, r3, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d041      	beq.n	8001e22 <main+0x139a>
		static_strings_string_descriptor *clone_test_target_string = static_strings_clone(clone_test_source_string);
 8001d9e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001da2:	f103 031c 	add.w	r3, r3, #28
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	f001 ff82 	bl	8003cb0 <static_strings_clone>
 8001dac:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001db0:	f103 0318 	add.w	r3, r3, #24
 8001db4:	6018      	str	r0, [r3, #0]
		if(clone_test_target_string != NULL){
 8001db6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001dba:	f103 0318 	add.w	r3, r3, #24
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01f      	beq.n	8001e04 <main+0x137c>
			HAL_UART_Transmit(&huart1,clone_test_target_string->string,clone_test_target_string->length,HAL_MAX_DELAY);
 8001dc4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001dc8:	f103 0318 	add.w	r3, r3, #24
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001dd4:	f103 0318 	add.w	r3, r3, #24
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	889a      	ldrh	r2, [r3, #4]
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	487a      	ldr	r0, [pc, #488]	; (8001fcc <main+0x1544>)
 8001de2:	f001 fc6e 	bl	80036c2 <HAL_UART_Transmit>
			static_strings_deallocate(clone_test_source_string);
 8001de6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001dea:	f103 031c 	add.w	r3, r3, #28
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	f002 f8d0 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(clone_test_target_string);
 8001df4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001df8:	f103 0318 	add.w	r3, r3, #24
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f002 f8c9 	bl	8003f94 <static_strings_deallocate>
 8001e02:	e01c      	b.n	8001e3e <main+0x13b6>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	2208      	movs	r2, #8
 8001e0a:	4971      	ldr	r1, [pc, #452]	; (8001fd0 <main+0x1548>)
 8001e0c:	486f      	ldr	r0, [pc, #444]	; (8001fcc <main+0x1544>)
 8001e0e:	f001 fc58 	bl	80036c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	2201      	movs	r2, #1
 8001e18:	496e      	ldr	r1, [pc, #440]	; (8001fd4 <main+0x154c>)
 8001e1a:	486c      	ldr	r0, [pc, #432]	; (8001fcc <main+0x1544>)
 8001e1c:	f001 fc51 	bl	80036c2 <HAL_UART_Transmit>
 8001e20:	e00d      	b.n	8001e3e <main+0x13b6>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	2208      	movs	r2, #8
 8001e28:	496b      	ldr	r1, [pc, #428]	; (8001fd8 <main+0x1550>)
 8001e2a:	4868      	ldr	r0, [pc, #416]	; (8001fcc <main+0x1544>)
 8001e2c:	f001 fc49 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	2201      	movs	r2, #1
 8001e36:	4967      	ldr	r1, [pc, #412]	; (8001fd4 <main+0x154c>)
 8001e38:	4864      	ldr	r0, [pc, #400]	; (8001fcc <main+0x1544>)
 8001e3a:	f001 fc42 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 58

	static_strings_string_descriptor *move_test_source_string = static_strings_save((uint8_t *)"I am a move test\r\n");
 8001e3e:	4868      	ldr	r0, [pc, #416]	; (8001fe0 <main+0x1558>)
 8001e40:	f002 f864 	bl	8003f0c <static_strings_save>
 8001e44:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e48:	f103 0314 	add.w	r3, r3, #20
 8001e4c:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001e4e:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8001e52:	f103 0304 	add.w	r3, r3, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d057      	beq.n	8001f0c <main+0x1484>
		static_strings_string_descriptor *move_test_target_string = static_strings_allocate(100);
 8001e5c:	2064      	movs	r0, #100	; 0x64
 8001e5e:	f001 ff4d 	bl	8003cfc <static_strings_allocate>
 8001e62:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e66:	f103 0310 	add.w	r3, r3, #16
 8001e6a:	6018      	str	r0, [r3, #0]
		*move_test_target_string->string = '.';
 8001e6c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e70:	f103 0310 	add.w	r3, r3, #16
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	222e      	movs	r2, #46	; 0x2e
 8001e7a:	701a      	strb	r2, [r3, #0]
		if(static_strings_move(move_test_target_string,move_test_source_string,1) != NULL){
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e82:	f103 0314 	add.w	r3, r3, #20
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001e8c:	f103 0310 	add.w	r3, r3, #16
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f001 fef3 	bl	8003c7c <static_strings_move>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d028      	beq.n	8001eee <main+0x1466>
			if(move_test_source_string->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8001e9c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ea0:	f103 0314 	add.w	r3, r3, #20
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	79db      	ldrb	r3, [r3, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d111      	bne.n	8001ed0 <main+0x1448>
				HAL_UART_Transmit(&huart1,move_test_target_string->string,move_test_target_string->length,HAL_MAX_DELAY);
 8001eac:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001eb0:	f103 0310 	add.w	r3, r3, #16
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ebc:	f103 0310 	add.w	r3, r3, #16
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	889a      	ldrh	r2, [r3, #4]
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	4840      	ldr	r0, [pc, #256]	; (8001fcc <main+0x1544>)
 8001eca:	f001 fbfa 	bl	80036c2 <HAL_UART_Transmit>
 8001ece:	e006      	b.n	8001ede <main+0x1456>
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4943      	ldr	r1, [pc, #268]	; (8001fe4 <main+0x155c>)
 8001ed8:	483c      	ldr	r0, [pc, #240]	; (8001fcc <main+0x1544>)
 8001eda:	f001 fbf2 	bl	80036c2 <HAL_UART_Transmit>
			}
			static_strings_deallocate(move_test_source_string);
 8001ede:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001ee2:	f103 0314 	add.w	r3, r3, #20
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	f002 f854 	bl	8003f94 <static_strings_deallocate>
 8001eec:	e01c      	b.n	8001f28 <main+0x14a0>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	4936      	ldr	r1, [pc, #216]	; (8001fd0 <main+0x1548>)
 8001ef6:	4835      	ldr	r0, [pc, #212]	; (8001fcc <main+0x1544>)
 8001ef8:	f001 fbe3 	bl	80036c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
 8001f00:	2201      	movs	r2, #1
 8001f02:	4934      	ldr	r1, [pc, #208]	; (8001fd4 <main+0x154c>)
 8001f04:	4831      	ldr	r0, [pc, #196]	; (8001fcc <main+0x1544>)
 8001f06:	f001 fbdc 	bl	80036c2 <HAL_UART_Transmit>
 8001f0a:	e00d      	b.n	8001f28 <main+0x14a0>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	2208      	movs	r2, #8
 8001f12:	4931      	ldr	r1, [pc, #196]	; (8001fd8 <main+0x1550>)
 8001f14:	482d      	ldr	r0, [pc, #180]	; (8001fcc <main+0x1544>)
 8001f16:	f001 fbd4 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	2201      	movs	r2, #1
 8001f20:	492c      	ldr	r1, [pc, #176]	; (8001fd4 <main+0x154c>)
 8001f22:	482a      	ldr	r0, [pc, #168]	; (8001fcc <main+0x1544>)
 8001f24:	f001 fbcd 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 59

	static_strings_string_descriptor *concatenate_and_clean_concatenate_at_test = static_strings_save((uint8_t *)"I am a ");
 8001f28:	482f      	ldr	r0, [pc, #188]	; (8001fe8 <main+0x1560>)
 8001f2a:	f001 ffef 	bl	8003f0c <static_strings_save>
 8001f2e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f32:	f103 030c 	add.w	r3, r3, #12
 8001f36:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_and_clean_concatenate_test = static_strings_save((uint8_t *)"concatenate test\r\n");
 8001f38:	482c      	ldr	r0, [pc, #176]	; (8001fec <main+0x1564>)
 8001f3a:	f001 ffe7 	bl	8003f0c <static_strings_save>
 8001f3e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f42:	f103 0308 	add.w	r3, r3, #8
 8001f46:	6018      	str	r0, [r3, #0]
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8001f48:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f4c:	f103 030c 	add.w	r3, r3, #12
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d078      	beq.n	8002048 <main+0x15c0>
 8001f56:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f5a:	f103 0308 	add.w	r3, r3, #8
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d071      	beq.n	8002048 <main+0x15c0>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean(concatenate_and_clean_concatenate_at_test,concatenate_and_clean_concatenate_test);
 8001f64:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f68:	f103 0308 	add.w	r3, r3, #8
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f72:	f103 030c 	add.w	r3, r3, #12
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f002 f96c 	bl	8004254 <static_strings_concatenate_and_clean>
 8001f7c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f80:	f103 0304 	add.w	r3, r3, #4
 8001f84:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 8001f86:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f8a:	f103 0304 	add.w	r3, r3, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d04a      	beq.n	800202a <main+0x15a2>
			if(concatenate_and_clean_concatenate_at_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8001f94:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001f98:	f103 030c 	add.w	r3, r3, #12
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	79db      	ldrb	r3, [r3, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d125      	bne.n	8001ff0 <main+0x1568>
				HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 8001fa4:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fa8:	f103 0304 	add.w	r3, r3, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8001fb4:	f103 0304 	add.w	r3, r3, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	889a      	ldrh	r2, [r3, #4]
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <main+0x1544>)
 8001fc2:	f001 fb7e 	bl	80036c2 <HAL_UART_Transmit>
 8001fc6:	e01a      	b.n	8001ffe <main+0x1576>
 8001fc8:	08006888 	.word	0x08006888
 8001fcc:	20001688 	.word	0x20001688
 8001fd0:	0800689c 	.word	0x0800689c
 8001fd4:	20000684 	.word	0x20000684
 8001fd8:	080068a8 	.word	0x080068a8
 8001fdc:	080068b4 	.word	0x080068b4
 8001fe0:	080068c8 	.word	0x080068c8
 8001fe4:	080068dc 	.word	0x080068dc
 8001fe8:	080068e8 	.word	0x080068e8
 8001fec:	080068f0 	.word	0x080068f0
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	49a9      	ldr	r1, [pc, #676]	; (800229c <main+0x1814>)
 8001ff8:	48a9      	ldr	r0, [pc, #676]	; (80022a0 <main+0x1818>)
 8001ffa:	f001 fb62 	bl	80036c2 <HAL_UART_Transmit>
			}
			static_strings_deallocate(concatenate_and_clean_concatenate_at_test);
 8001ffe:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002002:	f103 030c 	add.w	r3, r3, #12
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	f001 ffc4 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenate_and_clean_concatenate_test);
 800200c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002010:	f103 0308 	add.w	r3, r3, #8
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f001 ffbd 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 800201a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800201e:	f103 0304 	add.w	r3, r3, #4
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	f001 ffb6 	bl	8003f94 <static_strings_deallocate>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8002028:	e01c      	b.n	8002064 <main+0x15dc>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	2208      	movs	r2, #8
 8002030:	499c      	ldr	r1, [pc, #624]	; (80022a4 <main+0x181c>)
 8002032:	489b      	ldr	r0, [pc, #620]	; (80022a0 <main+0x1818>)
 8002034:	f001 fb45 	bl	80036c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	2201      	movs	r2, #1
 800203e:	499a      	ldr	r1, [pc, #616]	; (80022a8 <main+0x1820>)
 8002040:	4897      	ldr	r0, [pc, #604]	; (80022a0 <main+0x1818>)
 8002042:	f001 fb3e 	bl	80036c2 <HAL_UART_Transmit>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8002046:	e00d      	b.n	8002064 <main+0x15dc>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	2208      	movs	r2, #8
 800204e:	4997      	ldr	r1, [pc, #604]	; (80022ac <main+0x1824>)
 8002050:	4893      	ldr	r0, [pc, #588]	; (80022a0 <main+0x1818>)
 8002052:	f001 fb36 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	2201      	movs	r2, #1
 800205c:	4992      	ldr	r1, [pc, #584]	; (80022a8 <main+0x1820>)
 800205e:	4890      	ldr	r0, [pc, #576]	; (80022a0 <main+0x1818>)
 8002060:	f001 fb2f 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 60

	static_strings_string_descriptor *concatenate_all_test_one = static_strings_save((uint8_t *)"I am a ");
 8002064:	4892      	ldr	r0, [pc, #584]	; (80022b0 <main+0x1828>)
 8002066:	f001 ff51 	bl	8003f0c <static_strings_save>
 800206a:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800206e:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_two = static_strings_save((uint8_t *)"concatenate all ");
 8002070:	4890      	ldr	r0, [pc, #576]	; (80022b4 <main+0x182c>)
 8002072:	f001 ff4b 	bl	8003f0c <static_strings_save>
 8002076:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800207a:	f103 031c 	add.w	r3, r3, #28
 800207e:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_three = static_strings_save((uint8_t *)"test\r\n");
 8002080:	488d      	ldr	r0, [pc, #564]	; (80022b8 <main+0x1830>)
 8002082:	f001 ff43 	bl	8003f0c <static_strings_save>
 8002086:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800208a:	f103 0318 	add.w	r3, r3, #24
 800208e:	6018      	str	r0, [r3, #0]
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002090:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d064      	beq.n	8002164 <main+0x16dc>
 800209a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800209e:	f103 031c 	add.w	r3, r3, #28
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05d      	beq.n	8002164 <main+0x16dc>
 80020a8:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020ac:	f103 0318 	add.w	r3, r3, #24
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d056      	beq.n	8002164 <main+0x16dc>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_all(3,concatenate_all_test_one,concatenate_all_test_two,concatenate_all_test_three);
 80020b6:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020ba:	f103 0318 	add.w	r3, r3, #24
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f507 52de 	add.w	r2, r7, #7104	; 0x1bc0
 80020c4:	f102 021c 	add.w	r2, r2, #28
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f507 51df 	add.w	r1, r7, #7136	; 0x1be0
 80020ce:	6809      	ldr	r1, [r1, #0]
 80020d0:	2003      	movs	r0, #3
 80020d2:	f002 f8f0 	bl	80042b6 <static_strings_concatenate_all>
 80020d6:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020da:	f103 0314 	add.w	r3, r3, #20
 80020de:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 80020e0:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020e4:	f103 0314 	add.w	r3, r3, #20
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d02b      	beq.n	8002146 <main+0x16be>
			HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 80020ee:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020f2:	f103 0314 	add.w	r3, r3, #20
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80020fe:	f103 0314 	add.w	r3, r3, #20
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	889a      	ldrh	r2, [r3, #4]
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	4865      	ldr	r0, [pc, #404]	; (80022a0 <main+0x1818>)
 800210c:	f001 fad9 	bl	80036c2 <HAL_UART_Transmit>
			static_strings_deallocate(concatenate_all_test_one);
 8002110:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	f001 ff3d 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_two);
 800211a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800211e:	f103 031c 	add.w	r3, r3, #28
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	f001 ff36 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_three);
 8002128:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800212c:	f103 0318 	add.w	r3, r3, #24
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	f001 ff2f 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 8002136:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800213a:	f103 0314 	add.w	r3, r3, #20
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	f001 ff28 	bl	8003f94 <static_strings_deallocate>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002144:	e01c      	b.n	8002180 <main+0x16f8>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	2208      	movs	r2, #8
 800214c:	4955      	ldr	r1, [pc, #340]	; (80022a4 <main+0x181c>)
 800214e:	4854      	ldr	r0, [pc, #336]	; (80022a0 <main+0x1818>)
 8002150:	f001 fab7 	bl	80036c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	2201      	movs	r2, #1
 800215a:	4953      	ldr	r1, [pc, #332]	; (80022a8 <main+0x1820>)
 800215c:	4850      	ldr	r0, [pc, #320]	; (80022a0 <main+0x1818>)
 800215e:	f001 fab0 	bl	80036c2 <HAL_UART_Transmit>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002162:	e00d      	b.n	8002180 <main+0x16f8>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	2208      	movs	r2, #8
 800216a:	4950      	ldr	r1, [pc, #320]	; (80022ac <main+0x1824>)
 800216c:	484c      	ldr	r0, [pc, #304]	; (80022a0 <main+0x1818>)
 800216e:	f001 faa8 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	2201      	movs	r2, #1
 8002178:	494b      	ldr	r1, [pc, #300]	; (80022a8 <main+0x1820>)
 800217a:	4849      	ldr	r0, [pc, #292]	; (80022a0 <main+0x1818>)
 800217c:	f001 faa1 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 61

	concatenate_and_clean_concatenate_at_test = static_strings_save((uint8_t *)"I am a ");
 8002180:	484b      	ldr	r0, [pc, #300]	; (80022b0 <main+0x1828>)
 8002182:	f001 fec3 	bl	8003f0c <static_strings_save>
 8002186:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800218a:	f103 030c 	add.w	r3, r3, #12
 800218e:	6018      	str	r0, [r3, #0]
	concatenate_and_clean_concatenate_test = static_strings_save((uint8_t *)"concatenate test\r\n");
 8002190:	484a      	ldr	r0, [pc, #296]	; (80022bc <main+0x1834>)
 8002192:	f001 febb 	bl	8003f0c <static_strings_save>
 8002196:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 800219a:	f103 0308 	add.w	r3, r3, #8
 800219e:	6018      	str	r0, [r3, #0]
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 80021a0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021a4:	f103 030c 	add.w	r3, r3, #12
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 808a 	beq.w	80022c4 <main+0x183c>
 80021b0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021b4:	f103 0308 	add.w	r3, r3, #8
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8082 	beq.w	80022c4 <main+0x183c>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean_both(concatenate_and_clean_concatenate_at_test,concatenate_and_clean_concatenate_test);
 80021c0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021c4:	f103 0308 	add.w	r3, r3, #8
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021ce:	f103 030c 	add.w	r3, r3, #12
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	f002 f855 	bl	8004282 <static_strings_concatenate_and_clean_both>
 80021d8:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021dc:	f103 0310 	add.w	r3, r3, #16
 80021e0:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 80021e2:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80021e6:	f103 0310 	add.w	r3, r3, #16
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d046      	beq.n	800227e <main+0x17f6>
			if(concatenate_and_clean_concatenate_at_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80021f0:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80021f4:	f103 030c 	add.w	r3, r3, #12
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	79db      	ldrb	r3, [r3, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d121      	bne.n	8002244 <main+0x17bc>
				if(concatenate_and_clean_concatenate_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002200:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002204:	f103 0308 	add.w	r3, r3, #8
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	79db      	ldrb	r3, [r3, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <main+0x17ac>
					HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 8002210:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002214:	f103 0310 	add.w	r3, r3, #16
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002220:	f103 0310 	add.w	r3, r3, #16
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	889a      	ldrh	r2, [r3, #4]
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	481c      	ldr	r0, [pc, #112]	; (80022a0 <main+0x1818>)
 800222e:	f001 fa48 	bl	80036c2 <HAL_UART_Transmit>
 8002232:	e00e      	b.n	8002252 <main+0x17ca>
				}
				else{
					HAL_UART_Transmit(&huart1,(uint8_t *)"error4\r\n",8,HAL_MAX_DELAY);
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	2208      	movs	r2, #8
 800223a:	4921      	ldr	r1, [pc, #132]	; (80022c0 <main+0x1838>)
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <main+0x1818>)
 800223e:	f001 fa40 	bl	80036c2 <HAL_UART_Transmit>
 8002242:	e006      	b.n	8002252 <main+0x17ca>
				}
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	2208      	movs	r2, #8
 800224a:	4914      	ldr	r1, [pc, #80]	; (800229c <main+0x1814>)
 800224c:	4814      	ldr	r0, [pc, #80]	; (80022a0 <main+0x1818>)
 800224e:	f001 fa38 	bl	80036c2 <HAL_UART_Transmit>
			}
			static_strings_deallocate(concatenate_and_clean_concatenate_at_test);
 8002252:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002256:	f103 030c 	add.w	r3, r3, #12
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	f001 fe9a 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenate_and_clean_concatenate_test);
 8002260:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002264:	f103 0308 	add.w	r3, r3, #8
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	f001 fe93 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 800226e:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002272:	f103 0310 	add.w	r3, r3, #16
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	f001 fe8c 	bl	8003f94 <static_strings_deallocate>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 800227c:	e030      	b.n	80022e0 <main+0x1858>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	2208      	movs	r2, #8
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <main+0x181c>)
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <main+0x1818>)
 8002288:	f001 fa1b 	bl	80036c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	2201      	movs	r2, #1
 8002292:	4905      	ldr	r1, [pc, #20]	; (80022a8 <main+0x1820>)
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <main+0x1818>)
 8002296:	f001 fa14 	bl	80036c2 <HAL_UART_Transmit>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 800229a:	e021      	b.n	80022e0 <main+0x1858>
 800229c:	080068dc 	.word	0x080068dc
 80022a0:	20001688 	.word	0x20001688
 80022a4:	0800689c 	.word	0x0800689c
 80022a8:	20000684 	.word	0x20000684
 80022ac:	080068a8 	.word	0x080068a8
 80022b0:	080068e8 	.word	0x080068e8
 80022b4:	08006904 	.word	0x08006904
 80022b8:	08006918 	.word	0x08006918
 80022bc:	080068f0 	.word	0x080068f0
 80022c0:	08006920 	.word	0x08006920
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	2208      	movs	r2, #8
 80022ca:	4984      	ldr	r1, [pc, #528]	; (80024dc <main+0x1a54>)
 80022cc:	4884      	ldr	r0, [pc, #528]	; (80024e0 <main+0x1a58>)
 80022ce:	f001 f9f8 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	2201      	movs	r2, #1
 80022d8:	4982      	ldr	r1, [pc, #520]	; (80024e4 <main+0x1a5c>)
 80022da:	4881      	ldr	r0, [pc, #516]	; (80024e0 <main+0x1a58>)
 80022dc:	f001 f9f1 	bl	80036c2 <HAL_UART_Transmit>
	}
	// test 62

	concatenate_all_test_one = static_strings_save((uint8_t *)"I am a ");
 80022e0:	4881      	ldr	r0, [pc, #516]	; (80024e8 <main+0x1a60>)
 80022e2:	f001 fe13 	bl	8003f0c <static_strings_save>
 80022e6:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80022ea:	6018      	str	r0, [r3, #0]
	concatenate_all_test_two = static_strings_save((uint8_t *)"concatenate all ");
 80022ec:	487f      	ldr	r0, [pc, #508]	; (80024ec <main+0x1a64>)
 80022ee:	f001 fe0d 	bl	8003f0c <static_strings_save>
 80022f2:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80022f6:	f103 031c 	add.w	r3, r3, #28
 80022fa:	6018      	str	r0, [r3, #0]
	concatenate_all_test_three = static_strings_save((uint8_t *)"test\r\n");
 80022fc:	487c      	ldr	r0, [pc, #496]	; (80024f0 <main+0x1a68>)
 80022fe:	f001 fe05 	bl	8003f0c <static_strings_save>
 8002302:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002306:	f103 0318 	add.w	r3, r3, #24
 800230a:	6018      	str	r0, [r3, #0]
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 800230c:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8095 	beq.w	8002442 <main+0x19ba>
 8002318:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800231c:	f103 031c 	add.w	r3, r3, #28
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 808d 	beq.w	8002442 <main+0x19ba>
 8002328:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800232c:	f103 0318 	add.w	r3, r3, #24
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8085 	beq.w	8002442 <main+0x19ba>
		static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean_all(3,concatenate_all_test_one,concatenate_all_test_two,concatenate_all_test_three);
 8002338:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800233c:	f103 0318 	add.w	r3, r3, #24
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f507 52de 	add.w	r2, r7, #7104	; 0x1bc0
 8002346:	f102 021c 	add.w	r2, r2, #28
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	f507 51df 	add.w	r1, r7, #7136	; 0x1be0
 8002350:	6809      	ldr	r1, [r1, #0]
 8002352:	2003      	movs	r0, #3
 8002354:	f001 ffd9 	bl	800430a <static_strings_concatenate_and_clean_all>
 8002358:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800235c:	f103 030c 	add.w	r3, r3, #12
 8002360:	6018      	str	r0, [r3, #0]
		if(concatenated_string != NULL){
 8002362:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002366:	f103 030c 	add.w	r3, r3, #12
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d059      	beq.n	8002424 <main+0x199c>
			if(concatenate_all_test_one->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002370:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	79db      	ldrb	r3, [r3, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d131      	bne.n	80023e0 <main+0x1958>
				if(concatenate_all_test_two->status == STATIC_STRINGS_STRING_STATUS_ALLOCATED){
 800237c:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002380:	f103 031c 	add.w	r3, r3, #28
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	79db      	ldrb	r3, [r3, #7]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d121      	bne.n	80023d0 <main+0x1948>
					if(concatenate_all_test_three->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800238c:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002390:	f103 0318 	add.w	r3, r3, #24
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	79db      	ldrb	r3, [r3, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d111      	bne.n	80023c0 <main+0x1938>
						HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 800239c:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80023a0:	f103 030c 	add.w	r3, r3, #12
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6819      	ldr	r1, [r3, #0]
 80023a8:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80023ac:	f103 030c 	add.w	r3, r3, #12
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	889a      	ldrh	r2, [r3, #4]
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	4849      	ldr	r0, [pc, #292]	; (80024e0 <main+0x1a58>)
 80023ba:	f001 f982 	bl	80036c2 <HAL_UART_Transmit>
 80023be:	e016      	b.n	80023ee <main+0x1966>
					}
					else{
						HAL_UART_Transmit(&huart1,(uint8_t *)"error5\r\n",8,HAL_MAX_DELAY);
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	2208      	movs	r2, #8
 80023c6:	494b      	ldr	r1, [pc, #300]	; (80024f4 <main+0x1a6c>)
 80023c8:	4845      	ldr	r0, [pc, #276]	; (80024e0 <main+0x1a58>)
 80023ca:	f001 f97a 	bl	80036c2 <HAL_UART_Transmit>
 80023ce:	e00e      	b.n	80023ee <main+0x1966>
					}
				}
				else{
					HAL_UART_Transmit(&huart1,(uint8_t *)"error4\r\n",8,HAL_MAX_DELAY);
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	2208      	movs	r2, #8
 80023d6:	4948      	ldr	r1, [pc, #288]	; (80024f8 <main+0x1a70>)
 80023d8:	4841      	ldr	r0, [pc, #260]	; (80024e0 <main+0x1a58>)
 80023da:	f001 f972 	bl	80036c2 <HAL_UART_Transmit>
 80023de:	e006      	b.n	80023ee <main+0x1966>
				}
			}
			else{
				HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	2208      	movs	r2, #8
 80023e6:	4945      	ldr	r1, [pc, #276]	; (80024fc <main+0x1a74>)
 80023e8:	483d      	ldr	r0, [pc, #244]	; (80024e0 <main+0x1a58>)
 80023ea:	f001 f96a 	bl	80036c2 <HAL_UART_Transmit>
			}
			static_strings_deallocate(concatenate_all_test_one);
 80023ee:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	f001 fdce 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_two);
 80023f8:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 80023fc:	f103 031c 	add.w	r3, r3, #28
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	f001 fdc7 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenate_all_test_three);
 8002406:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800240a:	f103 0318 	add.w	r3, r3, #24
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	f001 fdc0 	bl	8003f94 <static_strings_deallocate>
			static_strings_deallocate(concatenated_string);
 8002414:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002418:	f103 030c 	add.w	r3, r3, #12
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	f001 fdb9 	bl	8003f94 <static_strings_deallocate>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002422:	e01c      	b.n	800245e <main+0x19d6>
		}
		else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	2208      	movs	r2, #8
 800242a:	4935      	ldr	r1, [pc, #212]	; (8002500 <main+0x1a78>)
 800242c:	482c      	ldr	r0, [pc, #176]	; (80024e0 <main+0x1a58>)
 800242e:	f001 f948 	bl	80036c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	2201      	movs	r2, #1
 8002438:	492a      	ldr	r1, [pc, #168]	; (80024e4 <main+0x1a5c>)
 800243a:	4829      	ldr	r0, [pc, #164]	; (80024e0 <main+0x1a58>)
 800243c:	f001 f941 	bl	80036c2 <HAL_UART_Transmit>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002440:	e00d      	b.n	800245e <main+0x19d6>
		}
	}
	else{
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	2208      	movs	r2, #8
 8002448:	4924      	ldr	r1, [pc, #144]	; (80024dc <main+0x1a54>)
 800244a:	4825      	ldr	r0, [pc, #148]	; (80024e0 <main+0x1a58>)
 800244c:	f001 f939 	bl	80036c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	2201      	movs	r2, #1
 8002456:	4923      	ldr	r1, [pc, #140]	; (80024e4 <main+0x1a5c>)
 8002458:	4821      	ldr	r0, [pc, #132]	; (80024e0 <main+0x1a58>)
 800245a:	f001 f932 	bl	80036c2 <HAL_UART_Transmit>
	}

	// test 63

	HAL_UART_Transmit(&huart1,static_strings_new_line->string,static_strings_new_line->length,HAL_MAX_DELAY);
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <main+0x1a7c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <main+0x1a7c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	889a      	ldrh	r2, [r3, #4]
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	481c      	ldr	r0, [pc, #112]	; (80024e0 <main+0x1a58>)
 8002470:	f001 f927 	bl	80036c2 <HAL_UART_Transmit>

	// test 64

	static_strings_string_descriptor *empty = static_strings_allocate(0);
 8002474:	2000      	movs	r0, #0
 8002476:	f001 fc41 	bl	8003cfc <static_strings_allocate>
 800247a:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 800247e:	f103 0308 	add.w	r3, r3, #8
 8002482:	6018      	str	r0, [r3, #0]
	if(empty == NULL)
 8002484:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8002488:	f103 0308 	add.w	r3, r3, #8
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <main+0x1a1a>
		HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	2208      	movs	r2, #8
 8002498:	4910      	ldr	r1, [pc, #64]	; (80024dc <main+0x1a54>)
 800249a:	4811      	ldr	r0, [pc, #68]	; (80024e0 <main+0x1a58>)
 800249c:	f001 f911 	bl	80036c2 <HAL_UART_Transmit>
 80024a0:	e01b      	b.n	80024da <main+0x1a52>
	else if(!static_strings_compare(static_strings_empty,empty))
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <main+0x1a80>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f507 52de 	add.w	r2, r7, #7104	; 0x1bc0
 80024aa:	f102 0208 	add.w	r2, r2, #8
 80024ae:	6811      	ldr	r1, [r2, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 ffc0 	bl	8004436 <static_strings_compare>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <main+0x1a44>
		HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	2208      	movs	r2, #8
 80024c2:	490f      	ldr	r1, [pc, #60]	; (8002500 <main+0x1a78>)
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <main+0x1a58>)
 80024c6:	f001 f8fc 	bl	80036c2 <HAL_UART_Transmit>
 80024ca:	e006      	b.n	80024da <main+0x1a52>
	else
		HAL_UART_Transmit(&huart1,(uint8_t *)"success\r\n",9,HAL_MAX_DELAY);
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	2209      	movs	r2, #9
 80024d2:	490e      	ldr	r1, [pc, #56]	; (800250c <main+0x1a84>)
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <main+0x1a58>)
 80024d6:	f001 f8f4 	bl	80036c2 <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80024da:	e7fe      	b.n	80024da <main+0x1a52>
 80024dc:	080068a8 	.word	0x080068a8
 80024e0:	20001688 	.word	0x20001688
 80024e4:	20000684 	.word	0x20000684
 80024e8:	080068e8 	.word	0x080068e8
 80024ec:	08006904 	.word	0x08006904
 80024f0:	08006918 	.word	0x08006918
 80024f4:	0800692c 	.word	0x0800692c
 80024f8:	08006920 	.word	0x08006920
 80024fc:	080068dc 	.word	0x080068dc
 8002500:	0800689c 	.word	0x0800689c
 8002504:	20000014 	.word	0x20000014
 8002508:	20000020 	.word	0x20000020
 800250c:	08006938 	.word	0x08006938

08002510 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b090      	sub	sp, #64	; 0x40
 8002514:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002516:	f107 0318 	add.w	r3, r7, #24
 800251a:	2228      	movs	r2, #40	; 0x28
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f002 f959 	bl	80047d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002532:	2301      	movs	r3, #1
 8002534:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002540:	2301      	movs	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002544:	2302      	movs	r3, #2
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800254e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fc49 	bl	8002df0 <HAL_RCC_OscConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8002564:	f000 f866 	bl	8002634 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002568:	230f      	movs	r3, #15
 800256a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800256c:	2302      	movs	r3, #2
 800256e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002578:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f000 feb4 	bl	80032f0 <HAL_RCC_ClockConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <SystemClock_Config+0x82>
	{
		Error_Handler();
 800258e:	f000 f851 	bl	8002634 <Error_Handler>
	}
}
 8002592:	bf00      	nop
 8002594:	3740      	adds	r7, #64	; 0x40
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <MX_USART1_UART_Init+0x50>)
 80025a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025d4:	f001 f828 	bl	8003628 <HAL_UART_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80025de:	f000 f829 	bl	8002634 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20001688 	.word	0x20001688
 80025ec:	40013800 	.word	0x40013800

080025f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_GPIO_Init+0x40>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <MX_GPIO_Init+0x40>)
 80025fc:	f043 0320 	orr.w	r3, r3, #32
 8002600:	6193      	str	r3, [r2, #24]
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <MX_GPIO_Init+0x40>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <MX_GPIO_Init+0x40>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <MX_GPIO_Init+0x40>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <MX_GPIO_Init+0x40>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]

}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40021000 	.word	0x40021000

08002634 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_MspInit+0x5c>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	4a14      	ldr	r2, [pc, #80]	; (800269c <HAL_MspInit+0x5c>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6193      	str	r3, [r2, #24]
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_MspInit+0x5c>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_MspInit+0x5c>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_MspInit+0x5c>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_MspInit+0x5c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_MspInit+0x60>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_MspInit+0x60>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010000 	.word	0x40010000

080026a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_UART_MspInit+0x8c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d131      	bne.n	8002728 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4619      	mov	r1, r3
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <HAL_UART_MspInit+0x94>)
 800270a:	f000 fa17 	bl	8002b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <HAL_UART_MspInit+0x94>)
 8002724:	f000 fa0a 	bl	8002b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40013800 	.word	0x40013800
 8002734:	40021000 	.word	0x40021000
 8002738:	40010800 	.word	0x40010800

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <HardFault_Handler+0x4>

0800274e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <MemManage_Handler+0x4>

08002754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <BusFault_Handler+0x4>

0800275a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <UsageFault_Handler+0x4>

08002760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002788:	f000 f8d8 	bl	800293c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002798:	4a14      	ldr	r2, [pc, #80]	; (80027ec <_sbrk+0x5c>)
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <_sbrk+0x60>)
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a4:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <_sbrk+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <_sbrk+0x64>)
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <_sbrk+0x68>)
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <_sbrk+0x64>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d207      	bcs.n	80027d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c0:	f001 ffd4 	bl	800476c <__errno>
 80027c4:	4602      	mov	r2, r0
 80027c6:	230c      	movs	r3, #12
 80027c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	e009      	b.n	80027e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <_sbrk+0x64>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <_sbrk+0x64>)
 80027e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20005000 	.word	0x20005000
 80027f0:	00000400 	.word	0x00000400
 80027f4:	20000210 	.word	0x20000210
 80027f8:	200018a0 	.word	0x200018a0

080027fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <SystemInit+0x5c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <SystemInit+0x5c>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <SystemInit+0x5c>)
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4911      	ldr	r1, [pc, #68]	; (8002858 <SystemInit+0x5c>)
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <SystemInit+0x60>)
 8002814:	4013      	ands	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <SystemInit+0x5c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <SystemInit+0x5c>)
 800281e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <SystemInit+0x5c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SystemInit+0x5c>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <SystemInit+0x5c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <SystemInit+0x5c>)
 800283a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800283e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SystemInit+0x5c>)
 8002842:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002846:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SystemInit+0x64>)
 800284a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40021000 	.word	0x40021000
 800285c:	f8ff0000 	.word	0xf8ff0000
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002864:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002866:	e003      	b.n	8002870 <LoopCopyDataInit>

08002868 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800286a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800286c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800286e:	3104      	adds	r1, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002870:	480a      	ldr	r0, [pc, #40]	; (800289c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002874:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002876:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002878:	d3f6      	bcc.n	8002868 <CopyDataInit>
  ldr r2, =_sbss
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800287c:	e002      	b.n	8002884 <LoopFillZerobss>

0800287e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002880:	f842 3b04 	str.w	r3, [r2], #4

08002884 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002886:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002888:	d3f9      	bcc.n	800287e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800288a:	f7ff ffb7 	bl	80027fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288e:	f001 ff73 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002892:	f7fe f8f9 	bl	8000a88 <main>
  bx lr
 8002896:	4770      	bx	lr
  ldr r3, =_sidata
 8002898:	08007828 	.word	0x08007828
  ldr r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028a0:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 80028a4:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 80028a8:	200018a0 	.word	0x200018a0

080028ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC1_2_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_Init+0x28>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_Init+0x28>)
 80028ba:	f043 0310 	orr.w	r3, r3, #16
 80028be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 f907 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 f808 	bl	80028dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff feb8 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x54>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_InitTick+0x58>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f911 	bl	8002b22 <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00e      	b.n	8002928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d80a      	bhi.n	8002926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f000 f8e7 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <HAL_InitTick+0x5c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000000 	.word	0x20000000
 8002934:	20000008 	.word	0x20000008
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x1c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_IncTick+0x20>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <HAL_IncTick+0x20>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000008 	.word	0x20000008
 800295c:	20001898 	.word	0x20001898

08002960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_GetTick+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20001898 	.word	0x20001898

08002974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800299c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	60d3      	str	r3, [r2, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <__NVIC_GetPriorityGrouping+0x18>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 0307 	and.w	r3, r3, #7
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f7ff ff90 	bl	80029d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff49 	bl	8002974 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff5e 	bl	80029bc <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff90 	bl	8002a2c <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5f 	bl	80029d8 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffb0 	bl	8002a90 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b08b      	sub	sp, #44	; 0x2c
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4e:	e127      	b.n	8002da0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b50:	2201      	movs	r2, #1
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 8116 	bne.w	8002d9a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b12      	cmp	r3, #18
 8002b74:	d034      	beq.n	8002be0 <HAL_GPIO_Init+0xa4>
 8002b76:	2b12      	cmp	r3, #18
 8002b78:	d80d      	bhi.n	8002b96 <HAL_GPIO_Init+0x5a>
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x9a>
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d804      	bhi.n	8002b8c <HAL_GPIO_Init+0x50>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d031      	beq.n	8002bea <HAL_GPIO_Init+0xae>
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d01c      	beq.n	8002bc4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b8a:	e048      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d043      	beq.n	8002c18 <HAL_GPIO_Init+0xdc>
 8002b90:	2b11      	cmp	r3, #17
 8002b92:	d01b      	beq.n	8002bcc <HAL_GPIO_Init+0x90>
          break;
 8002b94:	e043      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b96:	4a89      	ldr	r2, [pc, #548]	; (8002dbc <HAL_GPIO_Init+0x280>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d026      	beq.n	8002bea <HAL_GPIO_Init+0xae>
 8002b9c:	4a87      	ldr	r2, [pc, #540]	; (8002dbc <HAL_GPIO_Init+0x280>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d806      	bhi.n	8002bb0 <HAL_GPIO_Init+0x74>
 8002ba2:	4a87      	ldr	r2, [pc, #540]	; (8002dc0 <HAL_GPIO_Init+0x284>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d020      	beq.n	8002bea <HAL_GPIO_Init+0xae>
 8002ba8:	4a86      	ldr	r2, [pc, #536]	; (8002dc4 <HAL_GPIO_Init+0x288>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01d      	beq.n	8002bea <HAL_GPIO_Init+0xae>
          break;
 8002bae:	e036      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bb0:	4a85      	ldr	r2, [pc, #532]	; (8002dc8 <HAL_GPIO_Init+0x28c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0xae>
 8002bb6:	4a85      	ldr	r2, [pc, #532]	; (8002dcc <HAL_GPIO_Init+0x290>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d016      	beq.n	8002bea <HAL_GPIO_Init+0xae>
 8002bbc:	4a84      	ldr	r2, [pc, #528]	; (8002dd0 <HAL_GPIO_Init+0x294>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0xae>
          break;
 8002bc2:	e02c      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	623b      	str	r3, [r7, #32]
          break;
 8002bca:	e028      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	623b      	str	r3, [r7, #32]
          break;
 8002bd4:	e023      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	3308      	adds	r3, #8
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e01e      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	330c      	adds	r3, #12
 8002be6:	623b      	str	r3, [r7, #32]
          break;
 8002be8:	e019      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e012      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c00:	2308      	movs	r3, #8
 8002c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	611a      	str	r2, [r3, #16]
          break;
 8002c0a:	e008      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	615a      	str	r2, [r3, #20]
          break;
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2bff      	cmp	r3, #255	; 0xff
 8002c22:	d801      	bhi.n	8002c28 <HAL_GPIO_Init+0xec>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	e001      	b.n	8002c2c <HAL_GPIO_Init+0xf0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2bff      	cmp	r3, #255	; 0xff
 8002c32:	d802      	bhi.n	8002c3a <HAL_GPIO_Init+0xfe>
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x104>
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	3b08      	subs	r3, #8
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	210f      	movs	r1, #15
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	401a      	ands	r2, r3
 8002c52:	6a39      	ldr	r1, [r7, #32]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8096 	beq.w	8002d9a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c6e:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_GPIO_Init+0x298>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_GPIO_Init+0x298>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6193      	str	r3, [r2, #24]
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_GPIO_Init+0x298>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c86:	4a54      	ldr	r2, [pc, #336]	; (8002dd8 <HAL_GPIO_Init+0x29c>)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4b      	ldr	r2, [pc, #300]	; (8002ddc <HAL_GPIO_Init+0x2a0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x19e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4a      	ldr	r2, [pc, #296]	; (8002de0 <HAL_GPIO_Init+0x2a4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x19a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a49      	ldr	r2, [pc, #292]	; (8002de4 <HAL_GPIO_Init+0x2a8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x196>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a48      	ldr	r2, [pc, #288]	; (8002de8 <HAL_GPIO_Init+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x192>
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x1a0>
 8002cce:	2304      	movs	r3, #4
 8002cd0:	e004      	b.n	8002cdc <HAL_GPIO_Init+0x1a0>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_Init+0x1a0>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x1a0>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cde:	f002 0203 	and.w	r2, r2, #3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cec:	493a      	ldr	r1, [pc, #232]	; (8002dd8 <HAL_GPIO_Init+0x29c>)
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4938      	ldr	r1, [pc, #224]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
 8002d12:	e006      	b.n	8002d22 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	4933      	ldr	r1, [pc, #204]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	492e      	ldr	r1, [pc, #184]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
 8002d3a:	e006      	b.n	8002d4a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	4929      	ldr	r1, [pc, #164]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	4924      	ldr	r1, [pc, #144]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
 8002d62:	e006      	b.n	8002d72 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	491f      	ldr	r1, [pc, #124]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	491a      	ldr	r1, [pc, #104]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60cb      	str	r3, [r1, #12]
 8002d8a:	e006      	b.n	8002d9a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	4915      	ldr	r1, [pc, #84]	; (8002dec <HAL_GPIO_Init+0x2b0>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f47f aed0 	bne.w	8002b50 <HAL_GPIO_Init+0x14>
  }
}
 8002db0:	bf00      	nop
 8002db2:	372c      	adds	r7, #44	; 0x2c
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	10210000 	.word	0x10210000
 8002dc0:	10110000 	.word	0x10110000
 8002dc4:	10120000 	.word	0x10120000
 8002dc8:	10310000 	.word	0x10310000
 8002dcc:	10320000 	.word	0x10320000
 8002dd0:	10220000 	.word	0x10220000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	40010c00 	.word	0x40010c00
 8002de4:	40011000 	.word	0x40011000
 8002de8:	40011400 	.word	0x40011400
 8002dec:	40010400 	.word	0x40010400

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e26c      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8087 	beq.w	8002f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e10:	4b92      	ldr	r3, [pc, #584]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d00c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e1c:	4b8f      	ldr	r3, [pc, #572]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d112      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5e>
 8002e28:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	4b89      	ldr	r3, [pc, #548]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x12c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d168      	bne.n	8002f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e246      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x76>
 8002e58:	4b80      	ldr	r3, [pc, #512]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a7f      	ldr	r2, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e02e      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x98>
 8002e6e:	4b7b      	ldr	r3, [pc, #492]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7a      	ldr	r2, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b78      	ldr	r3, [pc, #480]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a77      	ldr	r2, [pc, #476]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0xbc>
 8002e92:	4b72      	ldr	r3, [pc, #456]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a71      	ldr	r2, [pc, #452]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
 8002eac:	4b6b      	ldr	r3, [pc, #428]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6a      	ldr	r2, [pc, #424]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b68      	ldr	r3, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a67      	ldr	r2, [pc, #412]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7ff fd48 	bl	8002960 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7ff fd44 	bl	8002960 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1fa      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe4>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff fd34 	bl	8002960 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff fd30 	bl	8002960 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1e6      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x10c>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d063      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x18c>
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x176>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e1ba      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4939      	ldr	r1, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e03a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x270>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7ff fce9 	bl	8002960 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f92:	f7ff fce5 	bl	8002960 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e19b      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	4b2d      	ldr	r3, [pc, #180]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4927      	ldr	r1, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fcc8 	bl	8002960 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7ff fcc4 	bl	8002960 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e17a      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03a      	beq.n	8003074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d019      	beq.n	800303a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <HAL_RCC_OscConfig+0x274>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7ff fca8 	bl	8002960 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003014:	f7ff fca4 	bl	8002960 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e15a      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCC_OscConfig+0x26c>)
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003032:	2001      	movs	r0, #1
 8003034:	f000 fada 	bl	80035ec <RCC_Delay>
 8003038:	e01c      	b.n	8003074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_RCC_OscConfig+0x274>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7ff fc8e 	bl	8002960 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003046:	e00f      	b.n	8003068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7ff fc8a 	bl	8002960 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d908      	bls.n	8003068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e140      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	42420000 	.word	0x42420000
 8003064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b9e      	ldr	r3, [pc, #632]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e9      	bne.n	8003048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a6 	beq.w	80031ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b97      	ldr	r3, [pc, #604]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b94      	ldr	r3, [pc, #592]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4a93      	ldr	r2, [pc, #588]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	61d3      	str	r3, [r2, #28]
 800309e:	4b91      	ldr	r3, [pc, #580]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b8e      	ldr	r3, [pc, #568]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d118      	bne.n	80030ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ba:	4b8b      	ldr	r3, [pc, #556]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a8a      	ldr	r2, [pc, #552]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7ff fc4b 	bl	8002960 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ce:	f7ff fc47 	bl	8002960 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b64      	cmp	r3, #100	; 0x64
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0fd      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <HAL_RCC_OscConfig+0x4f8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x312>
 80030f4:	4b7b      	ldr	r3, [pc, #492]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a7a      	ldr	r2, [pc, #488]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	e02d      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x334>
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	6213      	str	r3, [r2, #32]
 8003116:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4a72      	ldr	r2, [pc, #456]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	6213      	str	r3, [r2, #32]
 8003122:	e01c      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_OscConfig+0x356>
 800312c:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4a69      	ldr	r2, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	e00b      	b.n	800315e <HAL_RCC_OscConfig+0x36e>
 8003146:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4a66      	ldr	r2, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6213      	str	r3, [r2, #32]
 8003152:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a63      	ldr	r2, [pc, #396]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	f023 0304 	bic.w	r3, r3, #4
 800315c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d015      	beq.n	8003192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7ff fbfb 	bl	8002960 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7ff fbf7 	bl	8002960 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0ab      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ee      	beq.n	800316e <HAL_RCC_OscConfig+0x37e>
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7ff fbe5 	bl	8002960 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7ff fbe1 	bl	8002960 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e095      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ee      	bne.n	800319a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a47      	ldr	r2, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8081 	beq.w	80032da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d8:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d061      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d146      	bne.n	800327a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <HAL_RCC_OscConfig+0x4fc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7ff fbb5 	bl	8002960 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7ff fbb1 	bl	8002960 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e067      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320c:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d108      	bne.n	8003234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	492d      	ldr	r1, [pc, #180]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a19      	ldr	r1, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	430b      	orrs	r3, r1
 8003246:	4927      	ldr	r1, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x4fc>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7ff fb85 	bl	8002960 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325a:	f7ff fb81 	bl	8002960 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e037      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x46a>
 8003278:	e02f      	b.n	80032da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_RCC_OscConfig+0x4fc>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff fb6e 	bl	8002960 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7ff fb6a 	bl	8002960 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e020      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x498>
 80032a6:	e018      	b.n	80032da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e013      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	42420060 	.word	0x42420060

080032f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0d0      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b6a      	ldr	r3, [pc, #424]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4965      	ldr	r1, [pc, #404]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b63      	ldr	r3, [pc, #396]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0b8      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800334c:	4b59      	ldr	r3, [pc, #356]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003364:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a52      	ldr	r2, [pc, #328]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800336e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	494d      	ldr	r1, [pc, #308]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d040      	beq.n	8003410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d115      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e07f      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e073      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e06b      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ce:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4936      	ldr	r1, [pc, #216]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e0:	f7ff fabe 	bl	8002960 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7ff faba 	bl	8002960 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e053      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 020c 	and.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	429a      	cmp	r2, r3
 800340e:	d1eb      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d210      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	4922      	ldr	r1, [pc, #136]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e032      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4916      	ldr	r1, [pc, #88]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	490e      	ldr	r1, [pc, #56]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347e:	f000 f821 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 8003482:	4601      	mov	r1, r0
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
 8003492:	fa21 f303 	lsr.w	r3, r1, r3
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1cc>)
 8003498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800349a:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_ClockConfig+0x1d0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fa1c 	bl	80028dc <HAL_InitTick>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40021000 	.word	0x40021000
 80034b8:	080075ac 	.word	0x080075ac
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b490      	push	{r4, r7}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034cc:	1d3c      	adds	r4, r7, #4
 80034ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d4:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x40>
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d003      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x46>
 8003502:	e02d      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003506:	623b      	str	r3, [r7, #32]
      break;
 8003508:	e02d      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	0c9b      	lsrs	r3, r3, #18
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003516:	4413      	add	r3, r2
 8003518:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800351c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_RCC_GetSysClockFreq+0xb8>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0c5b      	lsrs	r3, r3, #17
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003536:	4413      	add	r3, r2
 8003538:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800353c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003542:	fb02 f203 	mul.w	r2, r2, r3
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
 800354e:	e004      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	623b      	str	r3, [r7, #32]
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003562:	623b      	str	r3, [r7, #32]
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	6a3b      	ldr	r3, [r7, #32]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bc90      	pop	{r4, r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	08007570 	.word	0x08007570
 8003578:	08007580 	.word	0x08007580
 800357c:	40021000 	.word	0x40021000
 8003580:	007a1200 	.word	0x007a1200
 8003584:	003d0900 	.word	0x003d0900

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <HAL_RCC_GetHCLKFreq+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff2 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a4:	4601      	mov	r1, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	080075bc 	.word	0x080075bc

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffde 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035cc:	4601      	mov	r1, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0adb      	lsrs	r3, r3, #11
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4a03      	ldr	r2, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	080075bc 	.word	0x080075bc

080035ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <RCC_Delay+0x34>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <RCC_Delay+0x38>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a5b      	lsrs	r3, r3, #9
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003608:	bf00      	nop
  }
  while (Delay --);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	60fa      	str	r2, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <RCC_Delay+0x1c>
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e03f      	b.n	80036ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff f828 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f90b 	bl	8003888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b088      	sub	sp, #32
 80036c6:	af02      	add	r7, sp, #8
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	f040 8083 	bne.w	80037ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_Transmit+0x2e>
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e07b      	b.n	80037ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Transmit+0x40>
 80036fe:	2302      	movs	r3, #2
 8003700:	e074      	b.n	80037ec <HAL_UART_Transmit+0x12a>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2221      	movs	r2, #33	; 0x21
 8003714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003718:	f7ff f922 	bl	8002960 <HAL_GetTick>
 800371c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800372a:	e042      	b.n	80037b2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d122      	bne.n	800378a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2200      	movs	r2, #0
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f850 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e046      	b.n	80037ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003770:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3302      	adds	r3, #2
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	e017      	b.n	80037b2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3301      	adds	r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	e013      	b.n	80037b2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f82d 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e023      	b.n	80037ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	60ba      	str	r2, [r7, #8]
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1b7      	bne.n	800372c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f814 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e00a      	b.n	80037ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003804:	e02c      	b.n	8003860 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d028      	beq.n	8003860 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x30>
 8003814:	f7ff f8a4 	bl	8002960 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	429a      	cmp	r2, r3
 8003822:	d21d      	bcs.n	8003860 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003832:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e00f      	b.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	429a      	cmp	r2, r3
 800387c:	d0c3      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038c2:	f023 030c 	bic.w	r3, r3, #12
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	68f9      	ldr	r1, [r7, #12]
 80038cc:	430b      	orrs	r3, r1
 80038ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a52      	ldr	r2, [pc, #328]	; (8003a34 <UART_SetConfig+0x1ac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d14e      	bne.n	800398e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038f0:	f7ff fe68 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 80038f4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <UART_SetConfig+0x1b0>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	0119      	lsls	r1, r3, #4
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009a      	lsls	r2, r3, #2
 8003920:	441a      	add	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	fbb2 f2f3 	udiv	r2, r2, r3
 800392c:	4b42      	ldr	r3, [pc, #264]	; (8003a38 <UART_SetConfig+0x1b0>)
 800392e:	fba3 0302 	umull	r0, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2064      	movs	r0, #100	; 0x64
 8003936:	fb00 f303 	mul.w	r3, r0, r3
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	3332      	adds	r3, #50	; 0x32
 8003940:	4a3d      	ldr	r2, [pc, #244]	; (8003a38 <UART_SetConfig+0x1b0>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394c:	4419      	add	r1, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fbb2 f2f3 	udiv	r2, r2, r3
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <UART_SetConfig+0x1b0>)
 8003966:	fba3 0302 	umull	r0, r3, r3, r2
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2064      	movs	r0, #100	; 0x64
 800396e:	fb00 f303 	mul.w	r3, r0, r3
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	3332      	adds	r3, #50	; 0x32
 8003978:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <UART_SetConfig+0x1b0>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	f003 020f 	and.w	r2, r3, #15
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	440a      	add	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800398c:	e04d      	b.n	8003a2a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800398e:	f7ff fe05 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 8003992:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4a23      	ldr	r2, [pc, #140]	; (8003a38 <UART_SetConfig+0x1b0>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	0119      	lsls	r1, r3, #4
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009a      	lsls	r2, r3, #2
 80039be:	441a      	add	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <UART_SetConfig+0x1b0>)
 80039cc:	fba3 0302 	umull	r0, r3, r3, r2
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	2064      	movs	r0, #100	; 0x64
 80039d4:	fb00 f303 	mul.w	r3, r0, r3
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	3332      	adds	r3, #50	; 0x32
 80039de:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <UART_SetConfig+0x1b0>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ea:	4419      	add	r1, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <UART_SetConfig+0x1b0>)
 8003a04:	fba3 0302 	umull	r0, r3, r3, r2
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	2064      	movs	r0, #100	; 0x64
 8003a0c:	fb00 f303 	mul.w	r3, r0, r3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	3332      	adds	r3, #50	; 0x32
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <UART_SetConfig+0x1b0>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	440a      	add	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40013800 	.word	0x40013800
 8003a38:	51eb851f 	.word	0x51eb851f

08003a3c <static_strings_init>:
static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

static_strings_string_descriptor *static_strings_new_line = &(static_strings_string_descriptor){(uint8_t *)"\r\n",2,STATIC_STRINGS_STRING_TYPE_CUSTOM,STATIC_STRINGS_STRING_STATUS_CONSTANT};
static_strings_string_descriptor *static_strings_empty = &(static_strings_string_descriptor){(uint8_t *)"\0",0,STATIC_STRINGS_STRING_TYPE_CUSTOM,STATIC_STRINGS_STRING_STATUS_CONSTANT};

void static_strings_init(){
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	e018      	b.n	8003a7a <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2232      	movs	r2, #50	; 0x32
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <static_strings_init+0x14c>)
 8003a52:	441a      	add	r2, r3
 8003a54:	494d      	ldr	r1, [pc, #308]	; (8003b8c <static_strings_init+0x150>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 8003a5c:	4a4b      	ldr	r2, [pc, #300]	; (8003b8c <static_strings_init+0x150>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	2200      	movs	r2, #0
 8003a66:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003a68:	4a48      	ldr	r2, [pc, #288]	; (8003b8c <static_strings_init+0x150>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	2200      	movs	r2, #0
 8003a72:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3301      	adds	r3, #1
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b09      	cmp	r3, #9
 8003a7e:	dde3      	ble.n	8003a48 <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003a80:	2300      	movs	r3, #0
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	e018      	b.n	8003ab8 <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2264      	movs	r2, #100	; 0x64
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <static_strings_init+0x154>)
 8003a90:	441a      	add	r2, r3
 8003a92:	4940      	ldr	r1, [pc, #256]	; (8003b94 <static_strings_init+0x158>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 8003a9a:	4a3e      	ldr	r2, [pc, #248]	; (8003b94 <static_strings_init+0x158>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003aa6:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <static_strings_init+0x158>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	dde3      	ble.n	8003a86 <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	e018      	b.n	8003af6 <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	22c8      	movs	r2, #200	; 0xc8
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <static_strings_init+0x15c>)
 8003ace:	441a      	add	r2, r3
 8003ad0:	4932      	ldr	r1, [pc, #200]	; (8003b9c <static_strings_init+0x160>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <static_strings_init+0x160>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <static_strings_init+0x160>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	2200      	movs	r2, #0
 8003aee:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3301      	adds	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	dde3      	ble.n	8003ac4 <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003afc:	2300      	movs	r3, #0
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	e019      	b.n	8003b36 <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <static_strings_init+0x164>)
 8003b0e:	441a      	add	r2, r3
 8003b10:	4924      	ldr	r1, [pc, #144]	; (8003ba4 <static_strings_init+0x168>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <static_strings_init+0x168>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	2203      	movs	r2, #3
 8003b22:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003b24:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <static_strings_init+0x168>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3301      	adds	r3, #1
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	dde2      	ble.n	8003b02 <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	e019      	b.n	8003b76 <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b48:	fb02 f303 	mul.w	r3, r2, r3
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <static_strings_init+0x16c>)
 8003b4e:	441a      	add	r2, r3
 8003b50:	4916      	ldr	r1, [pc, #88]	; (8003bac <static_strings_init+0x170>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <static_strings_init+0x170>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	2204      	movs	r2, #4
 8003b62:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003b64:	4a11      	ldr	r2, [pc, #68]	; (8003bac <static_strings_init+0x170>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3301      	adds	r3, #1
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	dde2      	ble.n	8003b42 <static_strings_init+0x106>
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000490 	.word	0x20000490
 8003b8c:	20001250 	.word	0x20001250
 8003b90:	20000238 	.word	0x20000238
 8003b94:	20001858 	.word	0x20001858
 8003b98:	200016c8 	.word	0x200016c8
 8003b9c:	20001240 	.word	0x20001240
 8003ba0:	200012a0 	.word	0x200012a0
 8003ba4:	20001888 	.word	0x20001888
 8003ba8:	20000688 	.word	0x20000688
 8003bac:	20000228 	.word	0x20000228

08003bb0 <static_strings_get_string_max_length>:

int static_strings_get_string_max_length(static_strings_string_descriptor *string){
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	if(string->type == STATIC_STRINGS_STRING_TYPE_CUSTOM){
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	799b      	ldrb	r3, [r3, #6]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d102      	bne.n	8003bc6 <static_strings_get_string_max_length+0x16>
		return string->length;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	889b      	ldrh	r3, [r3, #4]
 8003bc4:	e01d      	b.n	8003c02 <static_strings_get_string_max_length+0x52>
	}
	else{
		switch(string->type){
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	799b      	ldrb	r3, [r3, #6]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d818      	bhi.n	8003c00 <static_strings_get_string_max_length+0x50>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <static_strings_get_string_max_length+0x24>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003be9 	.word	0x08003be9
 8003bd8:	08003bed 	.word	0x08003bed
 8003bdc:	08003bf1 	.word	0x08003bf1
 8003be0:	08003bf5 	.word	0x08003bf5
 8003be4:	08003bfb 	.word	0x08003bfb
			case STATIC_STRINGS_STRING_TYPE_VERY_SHORT:
				return STATIC_STRINGS_VERY_SHORT_STRING_SIZE;
 8003be8:	2332      	movs	r3, #50	; 0x32
 8003bea:	e00a      	b.n	8003c02 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_SHORT:
				return STATIC_STRINGS_SHORT_STRING_SIZE;
 8003bec:	2364      	movs	r3, #100	; 0x64
 8003bee:	e008      	b.n	8003c02 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_MEDIUM:
				return STATIC_STRINGS_MEDIUM_STRING_SIZE;
 8003bf0:	23c8      	movs	r3, #200	; 0xc8
 8003bf2:	e006      	b.n	8003c02 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_LONG:
				return STATIC_STRINGS_LONG_STRING_SIZE;
 8003bf4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bf8:	e003      	b.n	8003c02 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_VERY_LONG:
				return STATIC_STRINGS_VERY_LONG_STRING_SIZE;
 8003bfa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003bfe:	e000      	b.n	8003c02 <static_strings_get_string_max_length+0x52>
				break;
		}
	}
	return 0;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <static_strings_copy>:

static_strings_string_descriptor *static_strings_copy(static_strings_string_descriptor *copy_to,static_strings_string_descriptor *copy_from,uint16_t copy_to_offset){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
	if(copy_to == NULL || copy_from == NULL){
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <static_strings_copy+0x1a>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <static_strings_copy+0x1e>
		return NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e022      	b.n	8003c70 <static_strings_copy+0x64>
	}
	if(static_strings_get_string_max_length(copy_to) <= copy_from->length + copy_to_offset){
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff ffc0 	bl	8003bb0 <static_strings_get_string_max_length>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	889b      	ldrh	r3, [r3, #4]
 8003c36:	4619      	mov	r1, r3
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	440b      	add	r3, r1
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	dc04      	bgt.n	8003c4a <static_strings_copy+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_OVERFLOW;
 8003c40:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <static_strings_copy+0x6c>)
 8003c42:	2206      	movs	r2, #6
 8003c44:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e012      	b.n	8003c70 <static_strings_copy+0x64>
	}
	memcpy(copy_to->string + copy_to_offset,copy_from->string,copy_from->length);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	18d0      	adds	r0, r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	889b      	ldrh	r3, [r3, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 fdb0 	bl	80047c0 <memcpy>
	copy_to->length = copy_from->length + copy_to_offset;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	889a      	ldrh	r2, [r3, #4]
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	4413      	add	r3, r2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	809a      	strh	r2, [r3, #4]
	return copy_to;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000684 	.word	0x20000684

08003c7c <static_strings_move>:

static_strings_string_descriptor *static_strings_move(static_strings_string_descriptor *move_to,static_strings_string_descriptor *move_from,uint16_t move_to_offset){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
	if(static_strings_copy(move_to,move_from,move_to_offset) == NULL){
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff ffbb 	bl	8003c0c <static_strings_copy>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <static_strings_move+0x24>
		return NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e003      	b.n	8003ca8 <static_strings_move+0x2c>
	}
	static_strings_deallocate(move_from);
 8003ca0:	68b8      	ldr	r0, [r7, #8]
 8003ca2:	f000 f977 	bl	8003f94 <static_strings_deallocate>
	return move_to;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <static_strings_clone>:

static_strings_string_descriptor *static_strings_clone(static_strings_string_descriptor *clone_from){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	if(clone_from == NULL){
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <static_strings_clone+0x12>
		return NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e018      	b.n	8003cf4 <static_strings_clone+0x44>
	}
	static_strings_string_descriptor *cloned_string = static_strings_allocate(clone_from->length);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	889b      	ldrh	r3, [r3, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f818 	bl	8003cfc <static_strings_allocate>
 8003ccc:	60f8      	str	r0, [r7, #12]
	if(cloned_string == NULL){
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <static_strings_clone+0x28>
		return NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e00d      	b.n	8003cf4 <static_strings_clone+0x44>
	}
	memcpy(cloned_string->string,clone_from->string,clone_from->length);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	889b      	ldrh	r3, [r3, #4]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f000 fd6b 	bl	80047c0 <memcpy>
	cloned_string->length = clone_from->length;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	889a      	ldrh	r2, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	809a      	strh	r2, [r3, #4]
	return cloned_string;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	2b32      	cmp	r3, #50	; 0x32
 8003d0a:	d829      	bhi.n	8003d60 <static_strings_allocate+0x64>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e023      	b.n	8003d5a <static_strings_allocate+0x5e>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003d12:	4a78      	ldr	r2, [pc, #480]	; (8003ef4 <static_strings_allocate+0x1f8>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	79db      	ldrb	r3, [r3, #7]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d119      	bne.n	8003d54 <static_strings_allocate+0x58>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003d20:	4a74      	ldr	r2, [pc, #464]	; (8003ef4 <static_strings_allocate+0x1f8>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	2201      	movs	r2, #1
 8003d2a:	71da      	strb	r2, [r3, #7]
				static_strings_very_short_strings_descriptors[i].length = 0;
 8003d2c:	4a71      	ldr	r2, [pc, #452]	; (8003ef4 <static_strings_allocate+0x1f8>)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	2200      	movs	r2, #0
 8003d36:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_short_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_SHORT_STRING_SIZE);
 8003d38:	4a6e      	ldr	r2, [pc, #440]	; (8003ef4 <static_strings_allocate+0x1f8>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d40:	2232      	movs	r2, #50	; 0x32
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fd46 	bl	80047d6 <memset>
				return &static_strings_very_short_strings_descriptors[i];
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4a69      	ldr	r2, [pc, #420]	; (8003ef4 <static_strings_allocate+0x1f8>)
 8003d50:	4413      	add	r3, r2
 8003d52:	e0cb      	b.n	8003eec <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	ddd8      	ble.n	8003d12 <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d829      	bhi.n	8003dba <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	e023      	b.n	8003db4 <static_strings_allocate+0xb8>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003d6c:	4a62      	ldr	r2, [pc, #392]	; (8003ef8 <static_strings_allocate+0x1fc>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	79db      	ldrb	r3, [r3, #7]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d119      	bne.n	8003dae <static_strings_allocate+0xb2>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003d7a:	4a5f      	ldr	r2, [pc, #380]	; (8003ef8 <static_strings_allocate+0x1fc>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	2201      	movs	r2, #1
 8003d84:	71da      	strb	r2, [r3, #7]
				static_strings_short_strings_descriptors[i].length = 0;
 8003d86:	4a5c      	ldr	r2, [pc, #368]	; (8003ef8 <static_strings_allocate+0x1fc>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	2200      	movs	r2, #0
 8003d90:	809a      	strh	r2, [r3, #4]
				memset(static_strings_short_strings_descriptors[i].string,0,STATIC_STRINGS_SHORT_STRING_SIZE);
 8003d92:	4a59      	ldr	r2, [pc, #356]	; (8003ef8 <static_strings_allocate+0x1fc>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d9a:	2264      	movs	r2, #100	; 0x64
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fd19 	bl	80047d6 <memset>
				return &static_strings_short_strings_descriptors[i];
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4a53      	ldr	r2, [pc, #332]	; (8003ef8 <static_strings_allocate+0x1fc>)
 8003daa:	4413      	add	r3, r2
 8003dac:	e09e      	b.n	8003eec <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	ddd8      	ble.n	8003d6c <static_strings_allocate+0x70>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2bc8      	cmp	r3, #200	; 0xc8
 8003dbe:	d829      	bhi.n	8003e14 <static_strings_allocate+0x118>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e023      	b.n	8003e0e <static_strings_allocate+0x112>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003dc6:	4a4d      	ldr	r2, [pc, #308]	; (8003efc <static_strings_allocate+0x200>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	79db      	ldrb	r3, [r3, #7]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d119      	bne.n	8003e08 <static_strings_allocate+0x10c>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003dd4:	4a49      	ldr	r2, [pc, #292]	; (8003efc <static_strings_allocate+0x200>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	2201      	movs	r2, #1
 8003dde:	71da      	strb	r2, [r3, #7]
				static_strings_medium_strings_descriptors[i].length = 0;
 8003de0:	4a46      	ldr	r2, [pc, #280]	; (8003efc <static_strings_allocate+0x200>)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	2200      	movs	r2, #0
 8003dea:	809a      	strh	r2, [r3, #4]
				memset(static_strings_medium_strings_descriptors[i].string,0,STATIC_STRINGS_MEDIUM_STRING_SIZE);
 8003dec:	4a43      	ldr	r2, [pc, #268]	; (8003efc <static_strings_allocate+0x200>)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003df4:	22c8      	movs	r2, #200	; 0xc8
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fcec 	bl	80047d6 <memset>
				return &static_strings_medium_strings_descriptors[i];
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4a3e      	ldr	r2, [pc, #248]	; (8003efc <static_strings_allocate+0x200>)
 8003e04:	4413      	add	r3, r2
 8003e06:	e071      	b.n	8003eec <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	ddd8      	ble.n	8003dc6 <static_strings_allocate+0xca>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e1a:	d82a      	bhi.n	8003e72 <static_strings_allocate+0x176>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e024      	b.n	8003e6c <static_strings_allocate+0x170>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003e22:	4a37      	ldr	r2, [pc, #220]	; (8003f00 <static_strings_allocate+0x204>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	79db      	ldrb	r3, [r3, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11a      	bne.n	8003e66 <static_strings_allocate+0x16a>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003e30:	4a33      	ldr	r2, [pc, #204]	; (8003f00 <static_strings_allocate+0x204>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	2201      	movs	r2, #1
 8003e3a:	71da      	strb	r2, [r3, #7]
				static_strings_long_strings_descriptors[i].length = 0;
 8003e3c:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <static_strings_allocate+0x204>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	2200      	movs	r2, #0
 8003e46:	809a      	strh	r2, [r3, #4]
				memset(static_strings_long_strings_descriptors[i].string,0,STATIC_STRINGS_LONG_STRING_SIZE);
 8003e48:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <static_strings_allocate+0x204>)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fcbd 	bl	80047d6 <memset>
				return &static_strings_long_strings_descriptors[i];
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <static_strings_allocate+0x204>)
 8003e62:	4413      	add	r3, r2
 8003e64:	e042      	b.n	8003eec <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	ddd7      	ble.n	8003e22 <static_strings_allocate+0x126>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d82a      	bhi.n	8003ed2 <static_strings_allocate+0x1d6>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e024      	b.n	8003ecc <static_strings_allocate+0x1d0>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003e82:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <static_strings_allocate+0x208>)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	79db      	ldrb	r3, [r3, #7]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d11a      	bne.n	8003ec6 <static_strings_allocate+0x1ca>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <static_strings_allocate+0x208>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	2201      	movs	r2, #1
 8003e9a:	71da      	strb	r2, [r3, #7]
				static_strings_very_long_strings_descriptors[i].length = 0;
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <static_strings_allocate+0x208>)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_long_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_LONG_STRING_SIZE);
 8003ea8:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <static_strings_allocate+0x208>)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003eb0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fc8d 	bl	80047d6 <memset>
				return &static_strings_very_long_strings_descriptors[i];
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <static_strings_allocate+0x208>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	e012      	b.n	8003eec <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	ddd7      	ble.n	8003e82 <static_strings_allocate+0x186>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d803      	bhi.n	8003ee4 <static_strings_allocate+0x1e8>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <static_strings_allocate+0x20c>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e002      	b.n	8003eea <static_strings_allocate+0x1ee>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <static_strings_allocate+0x20c>)
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20001250 	.word	0x20001250
 8003ef8:	20001858 	.word	0x20001858
 8003efc:	20001240 	.word	0x20001240
 8003f00:	20001888 	.word	0x20001888
 8003f04:	20000228 	.word	0x20000228
 8003f08:	20000684 	.word	0x20000684

08003f0c <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f86b 	bl	8003ff0 <static_strings_strlen>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e014      	b.n	8003f52 <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8003f28:	89fb      	ldrh	r3, [r7, #14]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fee6 	bl	8003cfc <static_strings_allocate>
 8003f30:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <static_strings_save+0x30>
		return descriptor;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	e00a      	b.n	8003f52 <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	89fa      	ldrh	r2, [r7, #14]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fc3b 	bl	80047c0 <memcpy>
	descriptor->length = string_length;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	89fa      	ldrh	r2, [r7, #14]
 8003f4e:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8003f50:	68bb      	ldr	r3, [r7, #8]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2205      	movs	r2, #5
 8003f68:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f838 	bl	8003ff0 <static_strings_strlen>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	889b      	ldrh	r3, [r3, #4]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	if(string_descriptor->status != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	79db      	ldrb	r3, [r3, #7]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d002      	beq.n	8003faa <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	71da      	strb	r2, [r3, #7]
	}
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	889b      	ldrh	r3, [r3, #4]
 8003fc4:	3b02      	subs	r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b0d      	cmp	r3, #13
 8003fcc:	d008      	beq.n	8003fe0 <static_strings_is_line+0x2c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	889b      	ldrh	r3, [r3, #4]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b0a      	cmp	r3, #10
 8003fde:	d101      	bne.n	8003fe4 <static_strings_is_line+0x30>
		return 1;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <static_strings_is_line+0x32>
	}
	return 0;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	81fb      	strh	r3, [r7, #14]
 8003ffc:	e01e      	b.n	800403c <static_strings_strlen+0x4c>
		if( *(string + length) == '\r' && length < STATIC_STRINGS_VERY_LONG_STRING_SIZE - 1){
 8003ffe:	89fb      	ldrh	r3, [r7, #14]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b0d      	cmp	r3, #13
 8004008:	d10f      	bne.n	800402a <static_strings_strlen+0x3a>
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	f240 52da 	movw	r2, #1498	; 0x5da
 8004010:	4293      	cmp	r3, r2
 8004012:	d80a      	bhi.n	800402a <static_strings_strlen+0x3a>
			if(*(string + length + 1) == '\n'){
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	3301      	adds	r3, #1
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b0a      	cmp	r3, #10
 8004020:	d103      	bne.n	800402a <static_strings_strlen+0x3a>
				length += 2;
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	3302      	adds	r3, #2
 8004026:	81fb      	strh	r3, [r7, #14]
				break;
 8004028:	e00f      	b.n	800404a <static_strings_strlen+0x5a>
			}
		}
		if( *(string + length) == '\0'){
 800402a:	89fb      	ldrh	r3, [r7, #14]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <static_strings_strlen+0x58>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8004036:	89fb      	ldrh	r3, [r7, #14]
 8004038:	3301      	adds	r3, #1
 800403a:	81fb      	strh	r3, [r7, #14]
 800403c:	89fb      	ldrh	r3, [r7, #14]
 800403e:	f240 52db 	movw	r2, #1499	; 0x5db
 8004042:	4293      	cmp	r3, r2
 8004044:	d9db      	bls.n	8003ffe <static_strings_strlen+0xe>
 8004046:	e000      	b.n	800404a <static_strings_strlen+0x5a>
			break;
 8004048:	bf00      	nop
		}
	}
	if(length >= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 800404a:	89fb      	ldrh	r3, [r7, #14]
 800404c:	f240 52db 	movw	r2, #1499	; 0x5db
 8004050:	4293      	cmp	r3, r2
 8004052:	d904      	bls.n	800405e <static_strings_strlen+0x6e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <static_strings_strlen+0x7c>)
 8004056:	2203      	movs	r2, #3
 8004058:	701a      	strb	r2, [r3, #0]
		return 0;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <static_strings_strlen+0x70>
	}
	else{
		return length;
 800405e:	89fb      	ldrh	r3, [r7, #14]
	}
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	20000684 	.word	0x20000684

08004070 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 800407c:	4a07      	ldr	r2, [pc, #28]	; (800409c <static_strings_string_splitter_set_parameters+0x2c>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <static_strings_string_splitter_set_parameters+0x2c>)
 8004088:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 800408a:	4a04      	ldr	r2, [pc, #16]	; (800409c <static_strings_string_splitter_set_parameters+0x2c>)
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	7213      	strb	r3, [r2, #8]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000214 	.word	0x20000214

080040a0 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor **string_descriptor){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4929      	ldr	r1, [pc, #164]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040b4:	6809      	ldr	r1, [r1, #0]
 80040b6:	8889      	ldrh	r1, [r1, #4]
 80040b8:	440b      	add	r3, r1
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d101      	bne.n	80040c2 <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	e045      	b.n	800414e <static_strings_string_splitter_get_next_token+0xae>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 80040c2:	4b25      	ldr	r3, [pc, #148]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 80040c8:	bf00      	nop
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	60fa      	str	r2, [r7, #12]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	4b21      	ldr	r3, [pc, #132]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040d4:	7a1b      	ldrb	r3, [r3, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d009      	beq.n	80040ee <static_strings_string_splitter_get_next_token+0x4e>
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	8892      	ldrh	r2, [r2, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d3ed      	bcc.n	80040ca <static_strings_string_splitter_get_next_token+0x2a>

	int token_length;
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	8892      	ldrh	r2, [r2, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d105      	bne.n	800410e <static_strings_string_splitter_get_next_token+0x6e>
		token_length = current_position - static_strings_string_splitter.next_token_start;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 8004106:	6852      	ldr	r2, [r2, #4]
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	e005      	b.n	800411a <static_strings_string_splitter_get_next_token+0x7a>
	}
	else{
		token_length = current_position - static_strings_string_splitter.next_token_start - 1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a11      	ldr	r2, [pc, #68]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 8004112:	6852      	ldr	r2, [r2, #4]
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	3b01      	subs	r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
	}
	*string_descriptor = static_strings_allocate(token_length);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	b29b      	uxth	r3, r3
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fdec 	bl	8003cfc <static_strings_allocate>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	601a      	str	r2, [r3, #0]
	memcpy((*string_descriptor)->string,static_strings_string_splitter.next_token_start,token_length);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	4619      	mov	r1, r3
 8004138:	f000 fb42 	bl	80047c0 <memcpy>
	(*string_descriptor)->length = token_length;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	b292      	uxth	r2, r2
 8004144:	809a      	strh	r2, [r3, #4]
	static_strings_string_splitter.next_token_start = current_position;
 8004146:	4a04      	ldr	r2, [pc, #16]	; (8004158 <static_strings_string_splitter_get_next_token+0xb8>)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6053      	str	r3, [r2, #4]
	return 1;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000214 	.word	0x20000214

0800415c <static_strings_substring>:

static_strings_string_descriptor *static_strings_substring(static_strings_string_descriptor* string,uint16_t start_index,uint16_t finish_index){
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	803b      	strh	r3, [r7, #0]
	if(start_index < 0 || start_index >= string->length){
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	889b      	ldrh	r3, [r3, #4]
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	429a      	cmp	r2, r3
 8004174:	d304      	bcc.n	8004180 <static_strings_substring+0x24>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_START_INDEX_OUT_OF_RANGE;
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <static_strings_substring+0x80>)
 8004178:	2204      	movs	r2, #4
 800417a:	701a      	strb	r2, [r3, #0]
		return NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	e028      	b.n	80041d2 <static_strings_substring+0x76>
	}
	if(finish_index <= 0 || finish_index > string->length){
 8004180:	883b      	ldrh	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <static_strings_substring+0x34>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	889b      	ldrh	r3, [r3, #4]
 800418a:	883a      	ldrh	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d904      	bls.n	800419a <static_strings_substring+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_FINISH_INDEX_OUT_OF_RANGE;
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <static_strings_substring+0x80>)
 8004192:	2205      	movs	r2, #5
 8004194:	701a      	strb	r2, [r3, #0]
		return NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	e01b      	b.n	80041d2 <static_strings_substring+0x76>
	}
	uint16_t substring_length = finish_index - start_index;
 800419a:	883a      	ldrh	r2, [r7, #0]
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	81fb      	strh	r3, [r7, #14]
	static_strings_string_descriptor *substring = static_strings_allocate(substring_length);
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fda9 	bl	8003cfc <static_strings_allocate>
 80041aa:	60b8      	str	r0, [r7, #8]
	if(substring == NULL){
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <static_strings_substring+0x5a>
		return substring;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	e00d      	b.n	80041d2 <static_strings_substring+0x76>
	}
	memcpy(substring->string,string->string + start_index,substring_length);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	887b      	ldrh	r3, [r7, #2]
 80041c0:	4413      	add	r3, r2
 80041c2:	89fa      	ldrh	r2, [r7, #14]
 80041c4:	4619      	mov	r1, r3
 80041c6:	f000 fafb 	bl	80047c0 <memcpy>
	substring->length = substring_length;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	89fa      	ldrh	r2, [r7, #14]
 80041ce:	809a      	strh	r2, [r3, #4]
	return substring;
 80041d0:	68bb      	ldr	r3, [r7, #8]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000684 	.word	0x20000684

080041e0 <static_strings_concatenate>:

static_strings_string_descriptor *static_strings_concatenate(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	int concatenated_string_length = concatenate_at->length + concatenate->length;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	889b      	ldrh	r3, [r3, #4]
 80041ee:	461a      	mov	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	889b      	ldrh	r3, [r3, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(concatenated_string_length);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fd7d 	bl	8003cfc <static_strings_allocate>
 8004202:	60b8      	str	r0, [r7, #8]
	if(concatenated_string == NULL){
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <static_strings_concatenate+0x34>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <static_strings_concatenate+0x70>)
 800420c:	2203      	movs	r2, #3
 800420e:	701a      	strb	r2, [r3, #0]
		return concatenated_string;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	e019      	b.n	8004248 <static_strings_concatenate+0x68>
	}
	memcpy(concatenated_string->string,concatenate_at->string,concatenate_at->length);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	889b      	ldrh	r3, [r3, #4]
 8004220:	461a      	mov	r2, r3
 8004222:	f000 facd 	bl	80047c0 <memcpy>
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	8892      	ldrh	r2, [r2, #4]
 800422e:	1898      	adds	r0, r3, r2
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	889b      	ldrh	r3, [r3, #4]
 8004238:	461a      	mov	r2, r3
 800423a:	f000 fac1 	bl	80047c0 <memcpy>
	concatenated_string->length = concatenated_string_length;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	b29a      	uxth	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	809a      	strh	r2, [r3, #4]
	return concatenated_string;
 8004246:	68bb      	ldr	r3, [r7, #8]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000684 	.word	0x20000684

08004254 <static_strings_concatenate_and_clean>:

static_strings_string_descriptor *static_strings_concatenate_and_clean(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	static_strings_string_descriptor* concatenated_string = static_strings_concatenate(concatenate_at,concatenate);
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ffbd 	bl	80041e0 <static_strings_concatenate>
 8004266:	60f8      	str	r0, [r7, #12]
	if(concatenated_string == NULL){
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <static_strings_concatenate_and_clean+0x1e>
		return concatenated_string;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	e003      	b.n	800427a <static_strings_concatenate_and_clean+0x26>
	}
	static_strings_deallocate(concatenate_at);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fe8e 	bl	8003f94 <static_strings_deallocate>
	return concatenated_string;
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <static_strings_concatenate_and_clean_both>:

static_strings_string_descriptor *static_strings_concatenate_and_clean_both(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
	static_strings_string_descriptor* concatenated_string = static_strings_concatenate(concatenate_at,concatenate);
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ffa6 	bl	80041e0 <static_strings_concatenate>
 8004294:	60f8      	str	r0, [r7, #12]
	if(concatenated_string == NULL){
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <static_strings_concatenate_and_clean_both+0x1e>
		return concatenated_string;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	e006      	b.n	80042ae <static_strings_concatenate_and_clean_both+0x2c>
	}
	static_strings_deallocate(concatenate_at);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff fe77 	bl	8003f94 <static_strings_deallocate>
	static_strings_deallocate(concatenate);
 80042a6:	6838      	ldr	r0, [r7, #0]
 80042a8:	f7ff fe74 	bl	8003f94 <static_strings_deallocate>
	return concatenated_string;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <static_strings_concatenate_all>:

static_strings_string_descriptor *static_strings_concatenate_all(uint16_t arguments_quantity,...){
 80042b6:	b40f      	push	{r0, r1, r2, r3}
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
	va_list arguments_list;
	int i;
	va_start(arguments_list, arguments_quantity);
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	603b      	str	r3, [r7, #0]
	static_strings_string_descriptor *next_string_to_concatenate;
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(0);
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7ff fd19 	bl	8003cfc <static_strings_allocate>
 80042ca:	60b8      	str	r0, [r7, #8]
	concatenated_string->length = 0;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < arguments_quantity;i++){
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e00c      	b.n	80042f2 <static_strings_concatenate_all+0x3c>
		next_string_to_concatenate = va_arg(arguments_list, static_strings_string_descriptor *);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	603a      	str	r2, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	607b      	str	r3, [r7, #4]
		concatenated_string = static_strings_concatenate_and_clean(concatenated_string,next_string_to_concatenate);
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	68b8      	ldr	r0, [r7, #8]
 80042e6:	f7ff ffb5 	bl	8004254 <static_strings_concatenate_and_clean>
 80042ea:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < arguments_quantity;i++){
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3301      	adds	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	8b3b      	ldrh	r3, [r7, #24]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	dbee      	blt.n	80042d8 <static_strings_concatenate_all+0x22>
	}
	va_end(arguments_list);
	return concatenated_string;
 80042fa:	68bb      	ldr	r3, [r7, #8]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004306:	b004      	add	sp, #16
 8004308:	4770      	bx	lr

0800430a <static_strings_concatenate_and_clean_all>:

static_strings_string_descriptor *static_strings_concatenate_and_clean_all(uint16_t arguments_quantity,...){
 800430a:	b40f      	push	{r0, r1, r2, r3}
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
	va_list arguments_list;
	int i;
	va_start(arguments_list, arguments_quantity);
 8004312:	f107 031c 	add.w	r3, r7, #28
 8004316:	603b      	str	r3, [r7, #0]
	static_strings_string_descriptor *next_string_to_concatenate;
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(0);
 8004318:	2000      	movs	r0, #0
 800431a:	f7ff fcef 	bl	8003cfc <static_strings_allocate>
 800431e:	60b8      	str	r0, [r7, #8]
	concatenated_string->length = 0;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < arguments_quantity;i++){
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e00f      	b.n	800434c <static_strings_concatenate_and_clean_all+0x42>
		next_string_to_concatenate = va_arg(arguments_list, static_strings_string_descriptor *);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	1d1a      	adds	r2, r3, #4
 8004330:	603a      	str	r2, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	607b      	str	r3, [r7, #4]
		concatenated_string = static_strings_concatenate_and_clean(concatenated_string,next_string_to_concatenate);
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	68b8      	ldr	r0, [r7, #8]
 800433a:	f7ff ff8b 	bl	8004254 <static_strings_concatenate_and_clean>
 800433e:	60b8      	str	r0, [r7, #8]
		static_strings_deallocate(next_string_to_concatenate);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff fe27 	bl	8003f94 <static_strings_deallocate>
	for (i = 0; i < arguments_quantity;i++){
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3301      	adds	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	8b3b      	ldrh	r3, [r7, #24]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	429a      	cmp	r2, r3
 8004352:	dbeb      	blt.n	800432c <static_strings_concatenate_and_clean_all+0x22>
	}
	va_end(arguments_list);
	return concatenated_string;
 8004354:	68bb      	ldr	r3, [r7, #8]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004360:	b004      	add	sp, #16
 8004362:	4770      	bx	lr

08004364 <static_strings_contains_string>:

int static_strings_contains_string(static_strings_string_descriptor* search_in,static_strings_string_descriptor* search_for){
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
	if(search_in->length < search_for->length){
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	889a      	ldrh	r2, [r3, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	889b      	ldrh	r3, [r3, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d201      	bcs.n	800437e <static_strings_contains_string+0x1a>
		return 0;
 800437a:	2300      	movs	r3, #0
 800437c:	e034      	b.n	80043e8 <static_strings_contains_string+0x84>
	}
	int i,j;
	int searched_string_found;
	for(i = 0;search_for->length <= search_in->length - i;i++){
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e026      	b.n	80043d2 <static_strings_contains_string+0x6e>
		searched_string_found = 1;
 8004384:	2301      	movs	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < search_for->length;j++){
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e013      	b.n	80043b6 <static_strings_contains_string+0x52>
			if( *(search_in->string + i + j) != *(search_for->string + j) ){
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	440b      	add	r3, r1
 8004398:	4413      	add	r3, r2
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	440b      	add	r3, r1
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d002      	beq.n	80043b0 <static_strings_contains_string+0x4c>
				searched_string_found = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
				break;
 80043ae:	e008      	b.n	80043c2 <static_strings_contains_string+0x5e>
		for(j = 0; j < search_for->length;j++){
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3301      	adds	r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	889b      	ldrh	r3, [r3, #4]
 80043ba:	461a      	mov	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4293      	cmp	r3, r2
 80043c0:	dbe5      	blt.n	800438e <static_strings_contains_string+0x2a>
			}
		}
		if(searched_string_found){
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <static_strings_contains_string+0x68>
			return 1;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e00d      	b.n	80043e8 <static_strings_contains_string+0x84>
	for(i = 0;search_for->length <= search_in->length - i;i++){
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3301      	adds	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	889b      	ldrh	r3, [r3, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	889b      	ldrh	r3, [r3, #4]
 80043dc:	4619      	mov	r1, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1acb      	subs	r3, r1, r3
 80043e2:	429a      	cmp	r2, r3
 80043e4:	ddce      	ble.n	8004384 <static_strings_contains_string+0x20>
		}
	}
	return 0;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <static_strings_contains_char>:

int static_strings_contains_char(static_strings_string_descriptor* search_in,uint8_t search_for){
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i = 0;i < search_in->length;i++){
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e00c      	b.n	800441e <static_strings_contains_char+0x2c>
		if( *(search_in->string + i) == search_for){
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	429a      	cmp	r2, r3
 8004412:	d101      	bne.n	8004418 <static_strings_contains_char+0x26>
			return 1;
 8004414:	2301      	movs	r3, #1
 8004416:	e009      	b.n	800442c <static_strings_contains_char+0x3a>
	for(i = 0;i < search_in->length;i++){
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	889b      	ldrh	r3, [r3, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4293      	cmp	r3, r2
 8004428:	dbec      	blt.n	8004404 <static_strings_contains_char+0x12>
		}
	}
	return 0;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <static_strings_compare>:

int static_strings_compare(static_strings_string_descriptor* compare_string_one,static_strings_string_descriptor* compare_string_two){
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
	if(compare_string_one->length != compare_string_two->length){
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	889a      	ldrh	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	889b      	ldrh	r3, [r3, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <static_strings_compare+0x1a>
		return 0;
 800444c:	2300      	movs	r3, #0
 800444e:	e01a      	b.n	8004486 <static_strings_compare+0x50>
	}
	int i;
	for(i = 0;i < compare_string_one->length;i++){
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e010      	b.n	8004478 <static_strings_compare+0x42>
		if(*(compare_string_one->string + i) != *(compare_string_two->string + i)){
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	440b      	add	r3, r1
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <static_strings_compare+0x3c>
			return 0;
 800446e:	2300      	movs	r3, #0
 8004470:	e009      	b.n	8004486 <static_strings_compare+0x50>
	for(i = 0;i < compare_string_one->length;i++){
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	889b      	ldrh	r3, [r3, #4]
 800447c:	461a      	mov	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4293      	cmp	r3, r2
 8004482:	dbe8      	blt.n	8004456 <static_strings_compare+0x20>
		}
	}
	return 1;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <static_strings_uint8_to_string>:

static_strings_string_descriptor *static_strings_uint8_to_string(uint8_t uint8){
 8004490:	b580      	push	{r7, lr}
 8004492:	b092      	sub	sp, #72	; 0x48
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
	uint8_t uint8_temp_string[50];
	sprintf((char *)uint8_temp_string,"%" PRIu8,uint8);
 800449a:	79fa      	ldrb	r2, [r7, #7]
 800449c:	f107 030c 	add.w	r3, r7, #12
 80044a0:	4914      	ldr	r1, [pc, #80]	; (80044f4 <static_strings_uint8_to_string+0x64>)
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fdee 	bl	8005084 <siprintf>
	uint16_t uint8_string_length = static_strings_strlen(uint8_temp_string);
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fd9f 	bl	8003ff0 <static_strings_strlen>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint8_string = static_strings_allocate(uint8_string_length);
 80044b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fc1d 	bl	8003cfc <static_strings_allocate>
 80044c2:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint8_string == NULL){
 80044c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <static_strings_uint8_to_string+0x3e>
		return uint8_string;
 80044ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044cc:	e00d      	b.n	80044ea <static_strings_uint8_to_string+0x5a>
	}
	memcpy(uint8_string->string,uint8_temp_string,uint8_string_length);
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80044d6:	f107 010c 	add.w	r1, r7, #12
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f970 	bl	80047c0 <memcpy>
	uint8_string->length = uint8_string_length;
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80044e6:	809a      	strh	r2, [r3, #4]
	return uint8_string;
 80044e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3748      	adds	r7, #72	; 0x48
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	0800758c 	.word	0x0800758c

080044f8 <static_strings_uint16_to_string>:

static_strings_string_descriptor *static_strings_uint16_to_string(uint16_t uint16){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b092      	sub	sp, #72	; 0x48
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	80fb      	strh	r3, [r7, #6]
	uint8_t uint16_temp_string[50];
	sprintf((char *)uint16_temp_string,"%" PRIu16,uint16);
 8004502:	88fa      	ldrh	r2, [r7, #6]
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	4914      	ldr	r1, [pc, #80]	; (800455c <static_strings_uint16_to_string+0x64>)
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fdba 	bl	8005084 <siprintf>
	uint16_t uint16_string_length = static_strings_strlen(uint16_temp_string);
 8004510:	f107 030c 	add.w	r3, r7, #12
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fd6b 	bl	8003ff0 <static_strings_strlen>
 800451a:	4603      	mov	r3, r0
 800451c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint16_string = static_strings_allocate(uint16_string_length);
 8004520:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fbe9 	bl	8003cfc <static_strings_allocate>
 800452a:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint16_string == NULL){
 800452c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <static_strings_uint16_to_string+0x3e>
		return uint16_string;
 8004532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004534:	e00d      	b.n	8004552 <static_strings_uint16_to_string+0x5a>
	}
	memcpy(uint16_string->string,uint16_temp_string,uint16_string_length);
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800453e:	f107 010c 	add.w	r1, r7, #12
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f93c 	bl	80047c0 <memcpy>
	uint16_string->length = uint16_string_length;
 8004548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800454e:	809a      	strh	r2, [r3, #4]
	return uint16_string;
 8004550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004552:	4618      	mov	r0, r3
 8004554:	3748      	adds	r7, #72	; 0x48
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	08007590 	.word	0x08007590

08004560 <static_strings_uint32_to_string>:

static_strings_string_descriptor *static_strings_uint32_to_string(uint32_t uint32){
 8004560:	b580      	push	{r7, lr}
 8004562:	b092      	sub	sp, #72	; 0x48
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	uint8_t uint32_temp_string[50];
	sprintf((char *)uint32_temp_string,"%" PRIu32,uint32);
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4914      	ldr	r1, [pc, #80]	; (80045c0 <static_strings_uint32_to_string+0x60>)
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fd87 	bl	8005084 <siprintf>
	uint16_t uint32_string_length = static_strings_strlen(uint32_temp_string);
 8004576:	f107 030c 	add.w	r3, r7, #12
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fd38 	bl	8003ff0 <static_strings_strlen>
 8004580:	4603      	mov	r3, r0
 8004582:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint32_string = static_strings_allocate(uint32_string_length);
 8004586:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fbb6 	bl	8003cfc <static_strings_allocate>
 8004590:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint32_string == NULL){
 8004592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <static_strings_uint32_to_string+0x3c>
		return uint32_string;
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	e00d      	b.n	80045b8 <static_strings_uint32_to_string+0x58>
	}
	memcpy(uint32_string->string,uint32_temp_string,uint32_string_length);
 800459c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80045a4:	f107 010c 	add.w	r1, r7, #12
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f909 	bl	80047c0 <memcpy>
	uint32_string->length = uint32_string_length;
 80045ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80045b4:	809a      	strh	r2, [r3, #4]
	return uint32_string;
 80045b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3748      	adds	r7, #72	; 0x48
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	08007594 	.word	0x08007594

080045c4 <static_strings_int8_to_string>:

static_strings_string_descriptor *static_strings_int8_to_string(int8_t int8){
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b092      	sub	sp, #72	; 0x48
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	71fb      	strb	r3, [r7, #7]
	uint8_t int8_temp_string[50];
	sprintf((char *)int8_temp_string,"%" PRId8,int8);
 80045ce:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80045d2:	f107 030c 	add.w	r3, r7, #12
 80045d6:	4914      	ldr	r1, [pc, #80]	; (8004628 <static_strings_int8_to_string+0x64>)
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fd53 	bl	8005084 <siprintf>
	uint16_t int8_string_length = static_strings_strlen(int8_temp_string);
 80045de:	f107 030c 	add.w	r3, r7, #12
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fd04 	bl	8003ff0 <static_strings_strlen>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int8_string = static_strings_allocate(int8_string_length);
 80045ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fb82 	bl	8003cfc <static_strings_allocate>
 80045f8:	6438      	str	r0, [r7, #64]	; 0x40
	if(int8_string == NULL){
 80045fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <static_strings_int8_to_string+0x40>
		return int8_string;
 8004600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004602:	e00d      	b.n	8004620 <static_strings_int8_to_string+0x5c>
	}
	memcpy(int8_string->string,int8_temp_string,int8_string_length);
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800460c:	f107 010c 	add.w	r1, r7, #12
 8004610:	4618      	mov	r0, r3
 8004612:	f000 f8d5 	bl	80047c0 <memcpy>
	int8_string->length = int8_string_length;
 8004616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004618:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800461c:	809a      	strh	r2, [r3, #4]
	return int8_string;
 800461e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004620:	4618      	mov	r0, r3
 8004622:	3748      	adds	r7, #72	; 0x48
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	08007598 	.word	0x08007598

0800462c <static_strings_int16_to_string>:

static_strings_string_descriptor *static_strings_int16_to_string(int16_t int16){
 800462c:	b580      	push	{r7, lr}
 800462e:	b092      	sub	sp, #72	; 0x48
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	80fb      	strh	r3, [r7, #6]
	uint8_t int16_temp_string[50];
	sprintf((char *)int16_temp_string,"%" PRId16,int16);
 8004636:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	4914      	ldr	r1, [pc, #80]	; (8004690 <static_strings_int16_to_string+0x64>)
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fd1f 	bl	8005084 <siprintf>
	int16_t int16_string_length = static_strings_strlen(int16_temp_string);
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fcd0 	bl	8003ff0 <static_strings_strlen>
 8004650:	4603      	mov	r3, r0
 8004652:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int16_string = static_strings_allocate(int16_string_length);
 8004656:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fb4e 	bl	8003cfc <static_strings_allocate>
 8004660:	6438      	str	r0, [r7, #64]	; 0x40
	if(int16_string == NULL){
 8004662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <static_strings_int16_to_string+0x40>
		return int16_string;
 8004668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466a:	e00d      	b.n	8004688 <static_strings_int16_to_string+0x5c>
	}
	memcpy(int16_string->string,int16_temp_string,int16_string_length);
 800466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8004674:	f107 010c 	add.w	r1, r7, #12
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f8a1 	bl	80047c0 <memcpy>
	int16_string->length = int16_string_length;
 800467e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004684:	809a      	strh	r2, [r3, #4]
	return int16_string;
 8004686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004688:	4618      	mov	r0, r3
 800468a:	3748      	adds	r7, #72	; 0x48
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	0800759c 	.word	0x0800759c

08004694 <static_strings_float_to_string>:
	memcpy(int32_string->string,int32_temp_string,int32_string_length);
	int32_string->length = int32_string_length;
	return int32_string;
}

static_strings_string_descriptor *static_strings_float_to_string(float float_arg){
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b093      	sub	sp, #76	; 0x4c
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	uint8_t float_temp_string[50];
	sprintf((char *)float_temp_string,"%f",float_arg);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fb fec3 	bl	8000428 <__aeabi_f2d>
 80046a2:	4603      	mov	r3, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	f107 000c 	add.w	r0, r7, #12
 80046aa:	461a      	mov	r2, r3
 80046ac:	4623      	mov	r3, r4
 80046ae:	4914      	ldr	r1, [pc, #80]	; (8004700 <static_strings_float_to_string+0x6c>)
 80046b0:	f000 fce8 	bl	8005084 <siprintf>
	int16_t float_string_length = static_strings_strlen(float_temp_string);
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fc99 	bl	8003ff0 <static_strings_strlen>
 80046be:	4603      	mov	r3, r0
 80046c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *float_string = static_strings_allocate(float_string_length);
 80046c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fb17 	bl	8003cfc <static_strings_allocate>
 80046ce:	6438      	str	r0, [r7, #64]	; 0x40
	if(float_string == NULL){
 80046d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <static_strings_float_to_string+0x46>
		return float_string;
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d8:	e00d      	b.n	80046f6 <static_strings_float_to_string+0x62>
	}
	memcpy(float_string->string,float_temp_string,float_string_length);
 80046da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80046e2:	f107 010c 	add.w	r1, r7, #12
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f86a 	bl	80047c0 <memcpy>
	float_string->length = float_string_length;
 80046ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80046f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f2:	809a      	strh	r2, [r3, #4]
	return float_string;
 80046f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	374c      	adds	r7, #76	; 0x4c
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}
 80046fe:	bf00      	nop
 8004700:	080075a4 	.word	0x080075a4

08004704 <static_strings_double_to_string>:

static_strings_string_descriptor *static_strings_double_to_string(double double_arg){
 8004704:	b580      	push	{r7, lr}
 8004706:	b092      	sub	sp, #72	; 0x48
 8004708:	af00      	add	r7, sp, #0
 800470a:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t double_temp_string[50];
	sprintf((char *)double_temp_string,"%lf",double_arg);
 800470e:	f107 000c 	add.w	r0, r7, #12
 8004712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004716:	4914      	ldr	r1, [pc, #80]	; (8004768 <static_strings_double_to_string+0x64>)
 8004718:	f000 fcb4 	bl	8005084 <siprintf>
	int16_t double_string_length = static_strings_strlen(double_temp_string);
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fc65 	bl	8003ff0 <static_strings_strlen>
 8004726:	4603      	mov	r3, r0
 8004728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *double_string = static_strings_allocate(double_string_length);
 800472c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fae3 	bl	8003cfc <static_strings_allocate>
 8004736:	6438      	str	r0, [r7, #64]	; 0x40
	if(double_string == NULL){
 8004738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <static_strings_double_to_string+0x3e>
		return double_string;
 800473e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004740:	e00d      	b.n	800475e <static_strings_double_to_string+0x5a>
	}
	memcpy(double_string->string,double_temp_string,double_string_length);
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800474a:	f107 010c 	add.w	r1, r7, #12
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f836 	bl	80047c0 <memcpy>
	double_string->length = double_string_length;
 8004754:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475a:	809a      	strh	r2, [r3, #4]
	return double_string;
 800475c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800475e:	4618      	mov	r0, r3
 8004760:	3748      	adds	r7, #72	; 0x48
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	080075a8 	.word	0x080075a8

0800476c <__errno>:
 800476c:	4b01      	ldr	r3, [pc, #4]	; (8004774 <__errno+0x8>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000024 	.word	0x20000024

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	2500      	movs	r5, #0
 800477c:	4e0c      	ldr	r6, [pc, #48]	; (80047b0 <__libc_init_array+0x38>)
 800477e:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 8004780:	1ba4      	subs	r4, r4, r6
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	42a5      	cmp	r5, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	f002 f85c 	bl	8006844 <_init>
 800478c:	2500      	movs	r5, #0
 800478e:	4e0a      	ldr	r6, [pc, #40]	; (80047b8 <__libc_init_array+0x40>)
 8004790:	4c0a      	ldr	r4, [pc, #40]	; (80047bc <__libc_init_array+0x44>)
 8004792:	1ba4      	subs	r4, r4, r6
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	42a5      	cmp	r5, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047a0:	4798      	blx	r3
 80047a2:	3501      	adds	r5, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047aa:	4798      	blx	r3
 80047ac:	3501      	adds	r5, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08007820 	.word	0x08007820
 80047b4:	08007820 	.word	0x08007820
 80047b8:	08007820 	.word	0x08007820
 80047bc:	08007824 	.word	0x08007824

080047c0 <memcpy>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	1e43      	subs	r3, r0, #1
 80047c4:	440a      	add	r2, r1
 80047c6:	4291      	cmp	r1, r2
 80047c8:	d100      	bne.n	80047cc <memcpy+0xc>
 80047ca:	bd10      	pop	{r4, pc}
 80047cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047d4:	e7f7      	b.n	80047c6 <memcpy+0x6>

080047d6 <memset>:
 80047d6:	4603      	mov	r3, r0
 80047d8:	4402      	add	r2, r0
 80047da:	4293      	cmp	r3, r2
 80047dc:	d100      	bne.n	80047e0 <memset+0xa>
 80047de:	4770      	bx	lr
 80047e0:	f803 1b01 	strb.w	r1, [r3], #1
 80047e4:	e7f9      	b.n	80047da <memset+0x4>

080047e6 <__cvt>:
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	461e      	mov	r6, r3
 80047ee:	bfbb      	ittet	lt
 80047f0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80047f4:	461e      	movlt	r6, r3
 80047f6:	2300      	movge	r3, #0
 80047f8:	232d      	movlt	r3, #45	; 0x2d
 80047fa:	b088      	sub	sp, #32
 80047fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80047fe:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004802:	f027 0720 	bic.w	r7, r7, #32
 8004806:	2f46      	cmp	r7, #70	; 0x46
 8004808:	4614      	mov	r4, r2
 800480a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800480c:	700b      	strb	r3, [r1, #0]
 800480e:	d004      	beq.n	800481a <__cvt+0x34>
 8004810:	2f45      	cmp	r7, #69	; 0x45
 8004812:	d100      	bne.n	8004816 <__cvt+0x30>
 8004814:	3501      	adds	r5, #1
 8004816:	2302      	movs	r3, #2
 8004818:	e000      	b.n	800481c <__cvt+0x36>
 800481a:	2303      	movs	r3, #3
 800481c:	aa07      	add	r2, sp, #28
 800481e:	9204      	str	r2, [sp, #16]
 8004820:	aa06      	add	r2, sp, #24
 8004822:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004826:	e9cd 3500 	strd	r3, r5, [sp]
 800482a:	4622      	mov	r2, r4
 800482c:	4633      	mov	r3, r6
 800482e:	f000 fcd7 	bl	80051e0 <_dtoa_r>
 8004832:	2f47      	cmp	r7, #71	; 0x47
 8004834:	4680      	mov	r8, r0
 8004836:	d102      	bne.n	800483e <__cvt+0x58>
 8004838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800483a:	07db      	lsls	r3, r3, #31
 800483c:	d526      	bpl.n	800488c <__cvt+0xa6>
 800483e:	2f46      	cmp	r7, #70	; 0x46
 8004840:	eb08 0905 	add.w	r9, r8, r5
 8004844:	d111      	bne.n	800486a <__cvt+0x84>
 8004846:	f898 3000 	ldrb.w	r3, [r8]
 800484a:	2b30      	cmp	r3, #48	; 0x30
 800484c:	d10a      	bne.n	8004864 <__cvt+0x7e>
 800484e:	2200      	movs	r2, #0
 8004850:	2300      	movs	r3, #0
 8004852:	4620      	mov	r0, r4
 8004854:	4631      	mov	r1, r6
 8004856:	f7fc f8a7 	bl	80009a8 <__aeabi_dcmpeq>
 800485a:	b918      	cbnz	r0, 8004864 <__cvt+0x7e>
 800485c:	f1c5 0501 	rsb	r5, r5, #1
 8004860:	f8ca 5000 	str.w	r5, [sl]
 8004864:	f8da 3000 	ldr.w	r3, [sl]
 8004868:	4499      	add	r9, r3
 800486a:	2200      	movs	r2, #0
 800486c:	2300      	movs	r3, #0
 800486e:	4620      	mov	r0, r4
 8004870:	4631      	mov	r1, r6
 8004872:	f7fc f899 	bl	80009a8 <__aeabi_dcmpeq>
 8004876:	b938      	cbnz	r0, 8004888 <__cvt+0xa2>
 8004878:	2230      	movs	r2, #48	; 0x30
 800487a:	9b07      	ldr	r3, [sp, #28]
 800487c:	454b      	cmp	r3, r9
 800487e:	d205      	bcs.n	800488c <__cvt+0xa6>
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	9107      	str	r1, [sp, #28]
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e7f8      	b.n	800487a <__cvt+0x94>
 8004888:	f8cd 901c 	str.w	r9, [sp, #28]
 800488c:	4640      	mov	r0, r8
 800488e:	9b07      	ldr	r3, [sp, #28]
 8004890:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004892:	eba3 0308 	sub.w	r3, r3, r8
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	b008      	add	sp, #32
 800489a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800489e <__exponent>:
 800489e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048a0:	2900      	cmp	r1, #0
 80048a2:	bfb4      	ite	lt
 80048a4:	232d      	movlt	r3, #45	; 0x2d
 80048a6:	232b      	movge	r3, #43	; 0x2b
 80048a8:	4604      	mov	r4, r0
 80048aa:	bfb8      	it	lt
 80048ac:	4249      	neglt	r1, r1
 80048ae:	2909      	cmp	r1, #9
 80048b0:	f804 2b02 	strb.w	r2, [r4], #2
 80048b4:	7043      	strb	r3, [r0, #1]
 80048b6:	dd21      	ble.n	80048fc <__exponent+0x5e>
 80048b8:	f10d 0307 	add.w	r3, sp, #7
 80048bc:	461f      	mov	r7, r3
 80048be:	260a      	movs	r6, #10
 80048c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80048c4:	fb06 1115 	mls	r1, r6, r5, r1
 80048c8:	2d09      	cmp	r5, #9
 80048ca:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80048ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048d2:	f103 32ff 	add.w	r2, r3, #4294967295
 80048d6:	4629      	mov	r1, r5
 80048d8:	dc09      	bgt.n	80048ee <__exponent+0x50>
 80048da:	3130      	adds	r1, #48	; 0x30
 80048dc:	3b02      	subs	r3, #2
 80048de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048e2:	42bb      	cmp	r3, r7
 80048e4:	4622      	mov	r2, r4
 80048e6:	d304      	bcc.n	80048f2 <__exponent+0x54>
 80048e8:	1a10      	subs	r0, r2, r0
 80048ea:	b003      	add	sp, #12
 80048ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ee:	4613      	mov	r3, r2
 80048f0:	e7e6      	b.n	80048c0 <__exponent+0x22>
 80048f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048f6:	f804 2b01 	strb.w	r2, [r4], #1
 80048fa:	e7f2      	b.n	80048e2 <__exponent+0x44>
 80048fc:	2330      	movs	r3, #48	; 0x30
 80048fe:	4419      	add	r1, r3
 8004900:	7083      	strb	r3, [r0, #2]
 8004902:	1d02      	adds	r2, r0, #4
 8004904:	70c1      	strb	r1, [r0, #3]
 8004906:	e7ef      	b.n	80048e8 <__exponent+0x4a>

08004908 <_printf_float>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	b091      	sub	sp, #68	; 0x44
 800490e:	460c      	mov	r4, r1
 8004910:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004912:	4693      	mov	fp, r2
 8004914:	461e      	mov	r6, r3
 8004916:	4605      	mov	r5, r0
 8004918:	f001 fa16 	bl	8005d48 <_localeconv_r>
 800491c:	6803      	ldr	r3, [r0, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	9309      	str	r3, [sp, #36]	; 0x24
 8004922:	f7fb fc15 	bl	8000150 <strlen>
 8004926:	2300      	movs	r3, #0
 8004928:	930e      	str	r3, [sp, #56]	; 0x38
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	900a      	str	r0, [sp, #40]	; 0x28
 800492e:	3307      	adds	r3, #7
 8004930:	f023 0307 	bic.w	r3, r3, #7
 8004934:	f103 0208 	add.w	r2, r3, #8
 8004938:	f894 8018 	ldrb.w	r8, [r4, #24]
 800493c:	f8d4 a000 	ldr.w	sl, [r4]
 8004940:	603a      	str	r2, [r7, #0]
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800494a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800494e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004952:	930b      	str	r3, [sp, #44]	; 0x2c
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	4ba6      	ldr	r3, [pc, #664]	; (8004bf4 <_printf_float+0x2ec>)
 800495a:	4638      	mov	r0, r7
 800495c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800495e:	f7fc f855 	bl	8000a0c <__aeabi_dcmpun>
 8004962:	bb68      	cbnz	r0, 80049c0 <_printf_float+0xb8>
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	4ba2      	ldr	r3, [pc, #648]	; (8004bf4 <_printf_float+0x2ec>)
 800496a:	4638      	mov	r0, r7
 800496c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800496e:	f7fc f82f 	bl	80009d0 <__aeabi_dcmple>
 8004972:	bb28      	cbnz	r0, 80049c0 <_printf_float+0xb8>
 8004974:	2200      	movs	r2, #0
 8004976:	2300      	movs	r3, #0
 8004978:	4638      	mov	r0, r7
 800497a:	4649      	mov	r1, r9
 800497c:	f7fc f81e 	bl	80009bc <__aeabi_dcmplt>
 8004980:	b110      	cbz	r0, 8004988 <_printf_float+0x80>
 8004982:	232d      	movs	r3, #45	; 0x2d
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004988:	4f9b      	ldr	r7, [pc, #620]	; (8004bf8 <_printf_float+0x2f0>)
 800498a:	4b9c      	ldr	r3, [pc, #624]	; (8004bfc <_printf_float+0x2f4>)
 800498c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004990:	bf98      	it	ls
 8004992:	461f      	movls	r7, r3
 8004994:	2303      	movs	r3, #3
 8004996:	f04f 0900 	mov.w	r9, #0
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	f02a 0304 	bic.w	r3, sl, #4
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	9600      	str	r6, [sp, #0]
 80049a4:	465b      	mov	r3, fp
 80049a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80049a8:	4621      	mov	r1, r4
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 f9e2 	bl	8004d74 <_printf_common>
 80049b0:	3001      	adds	r0, #1
 80049b2:	f040 8090 	bne.w	8004ad6 <_printf_float+0x1ce>
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	b011      	add	sp, #68	; 0x44
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	463a      	mov	r2, r7
 80049c2:	464b      	mov	r3, r9
 80049c4:	4638      	mov	r0, r7
 80049c6:	4649      	mov	r1, r9
 80049c8:	f7fc f820 	bl	8000a0c <__aeabi_dcmpun>
 80049cc:	b110      	cbz	r0, 80049d4 <_printf_float+0xcc>
 80049ce:	4f8c      	ldr	r7, [pc, #560]	; (8004c00 <_printf_float+0x2f8>)
 80049d0:	4b8c      	ldr	r3, [pc, #560]	; (8004c04 <_printf_float+0x2fc>)
 80049d2:	e7db      	b.n	800498c <_printf_float+0x84>
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	a80d      	add	r0, sp, #52	; 0x34
 80049de:	a90e      	add	r1, sp, #56	; 0x38
 80049e0:	d140      	bne.n	8004a64 <_printf_float+0x15c>
 80049e2:	2306      	movs	r3, #6
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	f04f 0c00 	mov.w	ip, #0
 80049ea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80049ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80049f2:	6863      	ldr	r3, [r4, #4]
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	463a      	mov	r2, r7
 80049fe:	464b      	mov	r3, r9
 8004a00:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004a04:	4628      	mov	r0, r5
 8004a06:	f7ff feee 	bl	80047e6 <__cvt>
 8004a0a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004a0e:	2b47      	cmp	r3, #71	; 0x47
 8004a10:	4607      	mov	r7, r0
 8004a12:	d109      	bne.n	8004a28 <_printf_float+0x120>
 8004a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a16:	1cd8      	adds	r0, r3, #3
 8004a18:	db02      	blt.n	8004a20 <_printf_float+0x118>
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	dd47      	ble.n	8004ab0 <_printf_float+0x1a8>
 8004a20:	f1a8 0802 	sub.w	r8, r8, #2
 8004a24:	fa5f f888 	uxtb.w	r8, r8
 8004a28:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004a2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a2e:	d824      	bhi.n	8004a7a <_printf_float+0x172>
 8004a30:	3901      	subs	r1, #1
 8004a32:	4642      	mov	r2, r8
 8004a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a38:	910d      	str	r1, [sp, #52]	; 0x34
 8004a3a:	f7ff ff30 	bl	800489e <__exponent>
 8004a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a40:	4681      	mov	r9, r0
 8004a42:	1813      	adds	r3, r2, r0
 8004a44:	2a01      	cmp	r2, #1
 8004a46:	6123      	str	r3, [r4, #16]
 8004a48:	dc02      	bgt.n	8004a50 <_printf_float+0x148>
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	07d1      	lsls	r1, r2, #31
 8004a4e:	d501      	bpl.n	8004a54 <_printf_float+0x14c>
 8004a50:	3301      	adds	r3, #1
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0a2      	beq.n	80049a2 <_printf_float+0x9a>
 8004a5c:	232d      	movs	r3, #45	; 0x2d
 8004a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a62:	e79e      	b.n	80049a2 <_printf_float+0x9a>
 8004a64:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004a68:	f000 816e 	beq.w	8004d48 <_printf_float+0x440>
 8004a6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a70:	d1b9      	bne.n	80049e6 <_printf_float+0xde>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1b7      	bne.n	80049e6 <_printf_float+0xde>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e7b4      	b.n	80049e4 <_printf_float+0xdc>
 8004a7a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004a7e:	d119      	bne.n	8004ab4 <_printf_float+0x1ac>
 8004a80:	2900      	cmp	r1, #0
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	dd0c      	ble.n	8004aa0 <_printf_float+0x198>
 8004a86:	6121      	str	r1, [r4, #16]
 8004a88:	b913      	cbnz	r3, 8004a90 <_printf_float+0x188>
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	07d2      	lsls	r2, r2, #31
 8004a8e:	d502      	bpl.n	8004a96 <_printf_float+0x18e>
 8004a90:	3301      	adds	r3, #1
 8004a92:	440b      	add	r3, r1
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a98:	f04f 0900 	mov.w	r9, #0
 8004a9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a9e:	e7d9      	b.n	8004a54 <_printf_float+0x14c>
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_printf_float+0x1a0>
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	07d0      	lsls	r0, r2, #31
 8004aa6:	d501      	bpl.n	8004aac <_printf_float+0x1a4>
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	e7f3      	b.n	8004a94 <_printf_float+0x18c>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e7f1      	b.n	8004a94 <_printf_float+0x18c>
 8004ab0:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004ab4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	db05      	blt.n	8004ac8 <_printf_float+0x1c0>
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	6123      	str	r3, [r4, #16]
 8004ac0:	07d1      	lsls	r1, r2, #31
 8004ac2:	d5e8      	bpl.n	8004a96 <_printf_float+0x18e>
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	e7e5      	b.n	8004a94 <_printf_float+0x18c>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bfcc      	ite	gt
 8004acc:	2301      	movgt	r3, #1
 8004ace:	f1c3 0302 	rsble	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	e7de      	b.n	8004a94 <_printf_float+0x18c>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	055a      	lsls	r2, r3, #21
 8004ada:	d407      	bmi.n	8004aec <_printf_float+0x1e4>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	463a      	mov	r2, r7
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b0      	blx	r6
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d129      	bne.n	8004b3e <_printf_float+0x236>
 8004aea:	e764      	b.n	80049b6 <_printf_float+0xae>
 8004aec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004af0:	f240 80d7 	bls.w	8004ca2 <_printf_float+0x39a>
 8004af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	f7fb ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8004b00:	b388      	cbz	r0, 8004b66 <_printf_float+0x25e>
 8004b02:	2301      	movs	r3, #1
 8004b04:	4a40      	ldr	r2, [pc, #256]	; (8004c08 <_printf_float+0x300>)
 8004b06:	4659      	mov	r1, fp
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b0      	blx	r6
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f af52 	beq.w	80049b6 <_printf_float+0xae>
 8004b12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b16:	429a      	cmp	r2, r3
 8004b18:	db02      	blt.n	8004b20 <_printf_float+0x218>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	07d8      	lsls	r0, r3, #31
 8004b1e:	d50e      	bpl.n	8004b3e <_printf_float+0x236>
 8004b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b24:	4659      	mov	r1, fp
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b0      	blx	r6
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f43f af43 	beq.w	80049b6 <_printf_float+0xae>
 8004b30:	2700      	movs	r7, #0
 8004b32:	f104 081a 	add.w	r8, r4, #26
 8004b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	42bb      	cmp	r3, r7
 8004b3c:	dc09      	bgt.n	8004b52 <_printf_float+0x24a>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	079f      	lsls	r7, r3, #30
 8004b42:	f100 80fd 	bmi.w	8004d40 <_printf_float+0x438>
 8004b46:	68e0      	ldr	r0, [r4, #12]
 8004b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	bfb8      	it	lt
 8004b4e:	4618      	movlt	r0, r3
 8004b50:	e733      	b.n	80049ba <_printf_float+0xb2>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4642      	mov	r2, r8
 8004b56:	4659      	mov	r1, fp
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b0      	blx	r6
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f43f af2a 	beq.w	80049b6 <_printf_float+0xae>
 8004b62:	3701      	adds	r7, #1
 8004b64:	e7e7      	b.n	8004b36 <_printf_float+0x22e>
 8004b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dc2b      	bgt.n	8004bc4 <_printf_float+0x2bc>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <_printf_float+0x300>)
 8004b70:	4659      	mov	r1, fp
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b0      	blx	r6
 8004b76:	3001      	adds	r0, #1
 8004b78:	f43f af1d 	beq.w	80049b6 <_printf_float+0xae>
 8004b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b7e:	b923      	cbnz	r3, 8004b8a <_printf_float+0x282>
 8004b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b82:	b913      	cbnz	r3, 8004b8a <_printf_float+0x282>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	07d9      	lsls	r1, r3, #31
 8004b88:	d5d9      	bpl.n	8004b3e <_printf_float+0x236>
 8004b8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b8e:	4659      	mov	r1, fp
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b0      	blx	r6
 8004b94:	3001      	adds	r0, #1
 8004b96:	f43f af0e 	beq.w	80049b6 <_printf_float+0xae>
 8004b9a:	f04f 0800 	mov.w	r8, #0
 8004b9e:	f104 091a 	add.w	r9, r4, #26
 8004ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	4543      	cmp	r3, r8
 8004ba8:	dc01      	bgt.n	8004bae <_printf_float+0x2a6>
 8004baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bac:	e797      	b.n	8004ade <_printf_float+0x1d6>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	464a      	mov	r2, r9
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b0      	blx	r6
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f43f aefc 	beq.w	80049b6 <_printf_float+0xae>
 8004bbe:	f108 0801 	add.w	r8, r8, #1
 8004bc2:	e7ee      	b.n	8004ba2 <_printf_float+0x29a>
 8004bc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	bfa8      	it	ge
 8004bcc:	461a      	movge	r2, r3
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	4690      	mov	r8, r2
 8004bd2:	dd07      	ble.n	8004be4 <_printf_float+0x2dc>
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	463a      	mov	r2, r7
 8004bda:	4628      	mov	r0, r5
 8004bdc:	47b0      	blx	r6
 8004bde:	3001      	adds	r0, #1
 8004be0:	f43f aee9 	beq.w	80049b6 <_printf_float+0xae>
 8004be4:	f104 031a 	add.w	r3, r4, #26
 8004be8:	f04f 0a00 	mov.w	sl, #0
 8004bec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bf2:	e015      	b.n	8004c20 <_printf_float+0x318>
 8004bf4:	7fefffff 	.word	0x7fefffff
 8004bf8:	080075c8 	.word	0x080075c8
 8004bfc:	080075c4 	.word	0x080075c4
 8004c00:	080075d0 	.word	0x080075d0
 8004c04:	080075cc 	.word	0x080075cc
 8004c08:	080075d4 	.word	0x080075d4
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c10:	4659      	mov	r1, fp
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b0      	blx	r6
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f aecd 	beq.w	80049b6 <_printf_float+0xae>
 8004c1c:	f10a 0a01 	add.w	sl, sl, #1
 8004c20:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004c24:	eba9 0308 	sub.w	r3, r9, r8
 8004c28:	4553      	cmp	r3, sl
 8004c2a:	dcef      	bgt.n	8004c0c <_printf_float+0x304>
 8004c2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c30:	429a      	cmp	r2, r3
 8004c32:	444f      	add	r7, r9
 8004c34:	db14      	blt.n	8004c60 <_printf_float+0x358>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	07da      	lsls	r2, r3, #31
 8004c3a:	d411      	bmi.n	8004c60 <_printf_float+0x358>
 8004c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c40:	eba3 0209 	sub.w	r2, r3, r9
 8004c44:	eba3 0901 	sub.w	r9, r3, r1
 8004c48:	4591      	cmp	r9, r2
 8004c4a:	bfa8      	it	ge
 8004c4c:	4691      	movge	r9, r2
 8004c4e:	f1b9 0f00 	cmp.w	r9, #0
 8004c52:	dc0d      	bgt.n	8004c70 <_printf_float+0x368>
 8004c54:	2700      	movs	r7, #0
 8004c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c5a:	f104 081a 	add.w	r8, r4, #26
 8004c5e:	e018      	b.n	8004c92 <_printf_float+0x38a>
 8004c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c64:	4659      	mov	r1, fp
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b0      	blx	r6
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d1e6      	bne.n	8004c3c <_printf_float+0x334>
 8004c6e:	e6a2      	b.n	80049b6 <_printf_float+0xae>
 8004c70:	464b      	mov	r3, r9
 8004c72:	463a      	mov	r2, r7
 8004c74:	4659      	mov	r1, fp
 8004c76:	4628      	mov	r0, r5
 8004c78:	47b0      	blx	r6
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d1ea      	bne.n	8004c54 <_printf_float+0x34c>
 8004c7e:	e69a      	b.n	80049b6 <_printf_float+0xae>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4642      	mov	r2, r8
 8004c84:	4659      	mov	r1, fp
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b0      	blx	r6
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	f43f ae93 	beq.w	80049b6 <_printf_float+0xae>
 8004c90:	3701      	adds	r7, #1
 8004c92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	eba3 0309 	sub.w	r3, r3, r9
 8004c9c:	42bb      	cmp	r3, r7
 8004c9e:	dcef      	bgt.n	8004c80 <_printf_float+0x378>
 8004ca0:	e74d      	b.n	8004b3e <_printf_float+0x236>
 8004ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ca4:	2a01      	cmp	r2, #1
 8004ca6:	dc01      	bgt.n	8004cac <_printf_float+0x3a4>
 8004ca8:	07db      	lsls	r3, r3, #31
 8004caa:	d538      	bpl.n	8004d1e <_printf_float+0x416>
 8004cac:	2301      	movs	r3, #1
 8004cae:	463a      	mov	r2, r7
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	47b0      	blx	r6
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f ae7d 	beq.w	80049b6 <_printf_float+0xae>
 8004cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b0      	blx	r6
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f107 0701 	add.w	r7, r7, #1
 8004ccc:	f43f ae73 	beq.w	80049b6 <_printf_float+0xae>
 8004cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f103 38ff 	add.w	r8, r3, #4294967295
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f7fb fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce2:	b9c0      	cbnz	r0, 8004d16 <_printf_float+0x40e>
 8004ce4:	4643      	mov	r3, r8
 8004ce6:	463a      	mov	r2, r7
 8004ce8:	4659      	mov	r1, fp
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b0      	blx	r6
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d10d      	bne.n	8004d0e <_printf_float+0x406>
 8004cf2:	e660      	b.n	80049b6 <_printf_float+0xae>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b0      	blx	r6
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f ae59 	beq.w	80049b6 <_printf_float+0xae>
 8004d04:	3701      	adds	r7, #1
 8004d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	42bb      	cmp	r3, r7
 8004d0c:	dcf2      	bgt.n	8004cf4 <_printf_float+0x3ec>
 8004d0e:	464b      	mov	r3, r9
 8004d10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d14:	e6e4      	b.n	8004ae0 <_printf_float+0x1d8>
 8004d16:	2700      	movs	r7, #0
 8004d18:	f104 081a 	add.w	r8, r4, #26
 8004d1c:	e7f3      	b.n	8004d06 <_printf_float+0x3fe>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e7e1      	b.n	8004ce6 <_printf_float+0x3de>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4642      	mov	r2, r8
 8004d26:	4659      	mov	r1, fp
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b0      	blx	r6
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f ae42 	beq.w	80049b6 <_printf_float+0xae>
 8004d32:	3701      	adds	r7, #1
 8004d34:	68e3      	ldr	r3, [r4, #12]
 8004d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	42bb      	cmp	r3, r7
 8004d3c:	dcf1      	bgt.n	8004d22 <_printf_float+0x41a>
 8004d3e:	e702      	b.n	8004b46 <_printf_float+0x23e>
 8004d40:	2700      	movs	r7, #0
 8004d42:	f104 0819 	add.w	r8, r4, #25
 8004d46:	e7f5      	b.n	8004d34 <_printf_float+0x42c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f43f ae94 	beq.w	8004a76 <_printf_float+0x16e>
 8004d4e:	f04f 0c00 	mov.w	ip, #0
 8004d52:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004d56:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004d5a:	6022      	str	r2, [r4, #0]
 8004d5c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004d60:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	463a      	mov	r2, r7
 8004d68:	464b      	mov	r3, r9
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f7ff fd3b 	bl	80047e6 <__cvt>
 8004d70:	4607      	mov	r7, r0
 8004d72:	e64f      	b.n	8004a14 <_printf_float+0x10c>

08004d74 <_printf_common>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	4691      	mov	r9, r2
 8004d7a:	461f      	mov	r7, r3
 8004d7c:	688a      	ldr	r2, [r1, #8]
 8004d7e:	690b      	ldr	r3, [r1, #16]
 8004d80:	4606      	mov	r6, r0
 8004d82:	4293      	cmp	r3, r2
 8004d84:	bfb8      	it	lt
 8004d86:	4613      	movlt	r3, r2
 8004d88:	f8c9 3000 	str.w	r3, [r9]
 8004d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d90:	460c      	mov	r4, r1
 8004d92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d96:	b112      	cbz	r2, 8004d9e <_printf_common+0x2a>
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f8c9 3000 	str.w	r3, [r9]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0699      	lsls	r1, r3, #26
 8004da2:	bf42      	ittt	mi
 8004da4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004da8:	3302      	addmi	r3, #2
 8004daa:	f8c9 3000 	strmi.w	r3, [r9]
 8004dae:	6825      	ldr	r5, [r4, #0]
 8004db0:	f015 0506 	ands.w	r5, r5, #6
 8004db4:	d107      	bne.n	8004dc6 <_printf_common+0x52>
 8004db6:	f104 0a19 	add.w	sl, r4, #25
 8004dba:	68e3      	ldr	r3, [r4, #12]
 8004dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	42ab      	cmp	r3, r5
 8004dc4:	dc29      	bgt.n	8004e1a <_printf_common+0xa6>
 8004dc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	3300      	adds	r3, #0
 8004dce:	bf18      	it	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	0692      	lsls	r2, r2, #26
 8004dd4:	d42e      	bmi.n	8004e34 <_printf_common+0xc0>
 8004dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dda:	4639      	mov	r1, r7
 8004ddc:	4630      	mov	r0, r6
 8004dde:	47c0      	blx	r8
 8004de0:	3001      	adds	r0, #1
 8004de2:	d021      	beq.n	8004e28 <_printf_common+0xb4>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	68e5      	ldr	r5, [r4, #12]
 8004de8:	f003 0306 	and.w	r3, r3, #6
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	bf18      	it	ne
 8004df0:	2500      	movne	r5, #0
 8004df2:	f8d9 2000 	ldr.w	r2, [r9]
 8004df6:	f04f 0900 	mov.w	r9, #0
 8004dfa:	bf08      	it	eq
 8004dfc:	1aad      	subeq	r5, r5, r2
 8004dfe:	68a3      	ldr	r3, [r4, #8]
 8004e00:	6922      	ldr	r2, [r4, #16]
 8004e02:	bf08      	it	eq
 8004e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	bfc4      	itt	gt
 8004e0c:	1a9b      	subgt	r3, r3, r2
 8004e0e:	18ed      	addgt	r5, r5, r3
 8004e10:	341a      	adds	r4, #26
 8004e12:	454d      	cmp	r5, r9
 8004e14:	d11a      	bne.n	8004e4c <_printf_common+0xd8>
 8004e16:	2000      	movs	r0, #0
 8004e18:	e008      	b.n	8004e2c <_printf_common+0xb8>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4639      	mov	r1, r7
 8004e20:	4630      	mov	r0, r6
 8004e22:	47c0      	blx	r8
 8004e24:	3001      	adds	r0, #1
 8004e26:	d103      	bne.n	8004e30 <_printf_common+0xbc>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	3501      	adds	r5, #1
 8004e32:	e7c2      	b.n	8004dba <_printf_common+0x46>
 8004e34:	2030      	movs	r0, #48	; 0x30
 8004e36:	18e1      	adds	r1, r4, r3
 8004e38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e42:	4422      	add	r2, r4
 8004e44:	3302      	adds	r3, #2
 8004e46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e4a:	e7c4      	b.n	8004dd6 <_printf_common+0x62>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4622      	mov	r2, r4
 8004e50:	4639      	mov	r1, r7
 8004e52:	4630      	mov	r0, r6
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d0e6      	beq.n	8004e28 <_printf_common+0xb4>
 8004e5a:	f109 0901 	add.w	r9, r9, #1
 8004e5e:	e7d8      	b.n	8004e12 <_printf_common+0x9e>

08004e60 <_printf_i>:
 8004e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e68:	460c      	mov	r4, r1
 8004e6a:	7e09      	ldrb	r1, [r1, #24]
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	296e      	cmp	r1, #110	; 0x6e
 8004e70:	4617      	mov	r7, r2
 8004e72:	4606      	mov	r6, r0
 8004e74:	4698      	mov	r8, r3
 8004e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e78:	f000 80b3 	beq.w	8004fe2 <_printf_i+0x182>
 8004e7c:	d822      	bhi.n	8004ec4 <_printf_i+0x64>
 8004e7e:	2963      	cmp	r1, #99	; 0x63
 8004e80:	d036      	beq.n	8004ef0 <_printf_i+0x90>
 8004e82:	d80a      	bhi.n	8004e9a <_printf_i+0x3a>
 8004e84:	2900      	cmp	r1, #0
 8004e86:	f000 80b9 	beq.w	8004ffc <_printf_i+0x19c>
 8004e8a:	2958      	cmp	r1, #88	; 0x58
 8004e8c:	f000 8083 	beq.w	8004f96 <_printf_i+0x136>
 8004e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e98:	e032      	b.n	8004f00 <_printf_i+0xa0>
 8004e9a:	2964      	cmp	r1, #100	; 0x64
 8004e9c:	d001      	beq.n	8004ea2 <_printf_i+0x42>
 8004e9e:	2969      	cmp	r1, #105	; 0x69
 8004ea0:	d1f6      	bne.n	8004e90 <_printf_i+0x30>
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	6813      	ldr	r3, [r2, #0]
 8004ea6:	0605      	lsls	r5, r0, #24
 8004ea8:	f103 0104 	add.w	r1, r3, #4
 8004eac:	d52a      	bpl.n	8004f04 <_printf_i+0xa4>
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	da03      	bge.n	8004ebe <_printf_i+0x5e>
 8004eb6:	222d      	movs	r2, #45	; 0x2d
 8004eb8:	425b      	negs	r3, r3
 8004eba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ebe:	486f      	ldr	r0, [pc, #444]	; (800507c <_printf_i+0x21c>)
 8004ec0:	220a      	movs	r2, #10
 8004ec2:	e039      	b.n	8004f38 <_printf_i+0xd8>
 8004ec4:	2973      	cmp	r1, #115	; 0x73
 8004ec6:	f000 809d 	beq.w	8005004 <_printf_i+0x1a4>
 8004eca:	d808      	bhi.n	8004ede <_printf_i+0x7e>
 8004ecc:	296f      	cmp	r1, #111	; 0x6f
 8004ece:	d020      	beq.n	8004f12 <_printf_i+0xb2>
 8004ed0:	2970      	cmp	r1, #112	; 0x70
 8004ed2:	d1dd      	bne.n	8004e90 <_printf_i+0x30>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f043 0320 	orr.w	r3, r3, #32
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	e003      	b.n	8004ee6 <_printf_i+0x86>
 8004ede:	2975      	cmp	r1, #117	; 0x75
 8004ee0:	d017      	beq.n	8004f12 <_printf_i+0xb2>
 8004ee2:	2978      	cmp	r1, #120	; 0x78
 8004ee4:	d1d4      	bne.n	8004e90 <_printf_i+0x30>
 8004ee6:	2378      	movs	r3, #120	; 0x78
 8004ee8:	4865      	ldr	r0, [pc, #404]	; (8005080 <_printf_i+0x220>)
 8004eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eee:	e055      	b.n	8004f9c <_printf_i+0x13c>
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef6:	1d19      	adds	r1, r3, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6011      	str	r1, [r2, #0]
 8004efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f00:	2301      	movs	r3, #1
 8004f02:	e08c      	b.n	800501e <_printf_i+0x1be>
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f0a:	6011      	str	r1, [r2, #0]
 8004f0c:	bf18      	it	ne
 8004f0e:	b21b      	sxthne	r3, r3
 8004f10:	e7cf      	b.n	8004eb2 <_printf_i+0x52>
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	6825      	ldr	r5, [r4, #0]
 8004f16:	1d18      	adds	r0, r3, #4
 8004f18:	6010      	str	r0, [r2, #0]
 8004f1a:	0628      	lsls	r0, r5, #24
 8004f1c:	d501      	bpl.n	8004f22 <_printf_i+0xc2>
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	e002      	b.n	8004f28 <_printf_i+0xc8>
 8004f22:	0668      	lsls	r0, r5, #25
 8004f24:	d5fb      	bpl.n	8004f1e <_printf_i+0xbe>
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	296f      	cmp	r1, #111	; 0x6f
 8004f2a:	bf14      	ite	ne
 8004f2c:	220a      	movne	r2, #10
 8004f2e:	2208      	moveq	r2, #8
 8004f30:	4852      	ldr	r0, [pc, #328]	; (800507c <_printf_i+0x21c>)
 8004f32:	2100      	movs	r1, #0
 8004f34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f38:	6865      	ldr	r5, [r4, #4]
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	60a5      	str	r5, [r4, #8]
 8004f3e:	f2c0 8095 	blt.w	800506c <_printf_i+0x20c>
 8004f42:	6821      	ldr	r1, [r4, #0]
 8004f44:	f021 0104 	bic.w	r1, r1, #4
 8004f48:	6021      	str	r1, [r4, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d13d      	bne.n	8004fca <_printf_i+0x16a>
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	f040 808e 	bne.w	8005070 <_printf_i+0x210>
 8004f54:	4665      	mov	r5, ip
 8004f56:	2a08      	cmp	r2, #8
 8004f58:	d10b      	bne.n	8004f72 <_printf_i+0x112>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	07db      	lsls	r3, r3, #31
 8004f5e:	d508      	bpl.n	8004f72 <_printf_i+0x112>
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	bfde      	ittt	le
 8004f68:	2330      	movle	r3, #48	; 0x30
 8004f6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f72:	ebac 0305 	sub.w	r3, ip, r5
 8004f76:	6123      	str	r3, [r4, #16]
 8004f78:	f8cd 8000 	str.w	r8, [sp]
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	aa03      	add	r2, sp, #12
 8004f80:	4621      	mov	r1, r4
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff fef6 	bl	8004d74 <_printf_common>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d14d      	bne.n	8005028 <_printf_i+0x1c8>
 8004f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f90:	b005      	add	sp, #20
 8004f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f96:	4839      	ldr	r0, [pc, #228]	; (800507c <_printf_i+0x21c>)
 8004f98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f9c:	6813      	ldr	r3, [r2, #0]
 8004f9e:	6821      	ldr	r1, [r4, #0]
 8004fa0:	1d1d      	adds	r5, r3, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6015      	str	r5, [r2, #0]
 8004fa6:	060a      	lsls	r2, r1, #24
 8004fa8:	d50b      	bpl.n	8004fc2 <_printf_i+0x162>
 8004faa:	07ca      	lsls	r2, r1, #31
 8004fac:	bf44      	itt	mi
 8004fae:	f041 0120 	orrmi.w	r1, r1, #32
 8004fb2:	6021      	strmi	r1, [r4, #0]
 8004fb4:	b91b      	cbnz	r3, 8004fbe <_printf_i+0x15e>
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	f022 0220 	bic.w	r2, r2, #32
 8004fbc:	6022      	str	r2, [r4, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	e7b7      	b.n	8004f32 <_printf_i+0xd2>
 8004fc2:	064d      	lsls	r5, r1, #25
 8004fc4:	bf48      	it	mi
 8004fc6:	b29b      	uxthmi	r3, r3
 8004fc8:	e7ef      	b.n	8004faa <_printf_i+0x14a>
 8004fca:	4665      	mov	r5, ip
 8004fcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fd0:	fb02 3311 	mls	r3, r2, r1, r3
 8004fd4:	5cc3      	ldrb	r3, [r0, r3]
 8004fd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fda:	460b      	mov	r3, r1
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d1f5      	bne.n	8004fcc <_printf_i+0x16c>
 8004fe0:	e7b9      	b.n	8004f56 <_printf_i+0xf6>
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	1d18      	adds	r0, r3, #4
 8004fe8:	6961      	ldr	r1, [r4, #20]
 8004fea:	6010      	str	r0, [r2, #0]
 8004fec:	0628      	lsls	r0, r5, #24
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	d501      	bpl.n	8004ff6 <_printf_i+0x196>
 8004ff2:	6019      	str	r1, [r3, #0]
 8004ff4:	e002      	b.n	8004ffc <_printf_i+0x19c>
 8004ff6:	066a      	lsls	r2, r5, #25
 8004ff8:	d5fb      	bpl.n	8004ff2 <_printf_i+0x192>
 8004ffa:	8019      	strh	r1, [r3, #0]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4665      	mov	r5, ip
 8005000:	6123      	str	r3, [r4, #16]
 8005002:	e7b9      	b.n	8004f78 <_printf_i+0x118>
 8005004:	6813      	ldr	r3, [r2, #0]
 8005006:	1d19      	adds	r1, r3, #4
 8005008:	6011      	str	r1, [r2, #0]
 800500a:	681d      	ldr	r5, [r3, #0]
 800500c:	6862      	ldr	r2, [r4, #4]
 800500e:	2100      	movs	r1, #0
 8005010:	4628      	mov	r0, r5
 8005012:	f000 feaf 	bl	8005d74 <memchr>
 8005016:	b108      	cbz	r0, 800501c <_printf_i+0x1bc>
 8005018:	1b40      	subs	r0, r0, r5
 800501a:	6060      	str	r0, [r4, #4]
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	2300      	movs	r3, #0
 8005022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005026:	e7a7      	b.n	8004f78 <_printf_i+0x118>
 8005028:	6923      	ldr	r3, [r4, #16]
 800502a:	462a      	mov	r2, r5
 800502c:	4639      	mov	r1, r7
 800502e:	4630      	mov	r0, r6
 8005030:	47c0      	blx	r8
 8005032:	3001      	adds	r0, #1
 8005034:	d0aa      	beq.n	8004f8c <_printf_i+0x12c>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	079b      	lsls	r3, r3, #30
 800503a:	d413      	bmi.n	8005064 <_printf_i+0x204>
 800503c:	68e0      	ldr	r0, [r4, #12]
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	4298      	cmp	r0, r3
 8005042:	bfb8      	it	lt
 8005044:	4618      	movlt	r0, r3
 8005046:	e7a3      	b.n	8004f90 <_printf_i+0x130>
 8005048:	2301      	movs	r3, #1
 800504a:	464a      	mov	r2, r9
 800504c:	4639      	mov	r1, r7
 800504e:	4630      	mov	r0, r6
 8005050:	47c0      	blx	r8
 8005052:	3001      	adds	r0, #1
 8005054:	d09a      	beq.n	8004f8c <_printf_i+0x12c>
 8005056:	3501      	adds	r5, #1
 8005058:	68e3      	ldr	r3, [r4, #12]
 800505a:	9a03      	ldr	r2, [sp, #12]
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	42ab      	cmp	r3, r5
 8005060:	dcf2      	bgt.n	8005048 <_printf_i+0x1e8>
 8005062:	e7eb      	b.n	800503c <_printf_i+0x1dc>
 8005064:	2500      	movs	r5, #0
 8005066:	f104 0919 	add.w	r9, r4, #25
 800506a:	e7f5      	b.n	8005058 <_printf_i+0x1f8>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ac      	bne.n	8004fca <_printf_i+0x16a>
 8005070:	7803      	ldrb	r3, [r0, #0]
 8005072:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005076:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800507a:	e76c      	b.n	8004f56 <_printf_i+0xf6>
 800507c:	080075d6 	.word	0x080075d6
 8005080:	080075e7 	.word	0x080075e7

08005084 <siprintf>:
 8005084:	b40e      	push	{r1, r2, r3}
 8005086:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800508a:	b500      	push	{lr}
 800508c:	b09c      	sub	sp, #112	; 0x70
 800508e:	ab1d      	add	r3, sp, #116	; 0x74
 8005090:	9002      	str	r0, [sp, #8]
 8005092:	9006      	str	r0, [sp, #24]
 8005094:	9107      	str	r1, [sp, #28]
 8005096:	9104      	str	r1, [sp, #16]
 8005098:	4808      	ldr	r0, [pc, #32]	; (80050bc <siprintf+0x38>)
 800509a:	4909      	ldr	r1, [pc, #36]	; (80050c0 <siprintf+0x3c>)
 800509c:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a0:	9105      	str	r1, [sp, #20]
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	a902      	add	r1, sp, #8
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	f001 fa5c 	bl	8006564 <_svfiprintf_r>
 80050ac:	2200      	movs	r2, #0
 80050ae:	9b02      	ldr	r3, [sp, #8]
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	b01c      	add	sp, #112	; 0x70
 80050b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b8:	b003      	add	sp, #12
 80050ba:	4770      	bx	lr
 80050bc:	20000024 	.word	0x20000024
 80050c0:	ffff0208 	.word	0xffff0208

080050c4 <quorem>:
 80050c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c8:	6903      	ldr	r3, [r0, #16]
 80050ca:	690c      	ldr	r4, [r1, #16]
 80050cc:	4680      	mov	r8, r0
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	f2c0 8084 	blt.w	80051dc <quorem+0x118>
 80050d4:	3c01      	subs	r4, #1
 80050d6:	f101 0714 	add.w	r7, r1, #20
 80050da:	f100 0614 	add.w	r6, r0, #20
 80050de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050e6:	3501      	adds	r5, #1
 80050e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80050ec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80050f0:	eb06 030c 	add.w	r3, r6, ip
 80050f4:	eb07 090c 	add.w	r9, r7, ip
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	b39d      	cbz	r5, 8005164 <quorem+0xa0>
 80050fc:	f04f 0a00 	mov.w	sl, #0
 8005100:	4638      	mov	r0, r7
 8005102:	46b6      	mov	lr, r6
 8005104:	46d3      	mov	fp, sl
 8005106:	f850 2b04 	ldr.w	r2, [r0], #4
 800510a:	b293      	uxth	r3, r2
 800510c:	fb05 a303 	mla	r3, r5, r3, sl
 8005110:	0c12      	lsrs	r2, r2, #16
 8005112:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005116:	fb05 a202 	mla	r2, r5, r2, sl
 800511a:	b29b      	uxth	r3, r3
 800511c:	ebab 0303 	sub.w	r3, fp, r3
 8005120:	f8de b000 	ldr.w	fp, [lr]
 8005124:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005128:	fa1f fb8b 	uxth.w	fp, fp
 800512c:	445b      	add	r3, fp
 800512e:	fa1f fb82 	uxth.w	fp, r2
 8005132:	f8de 2000 	ldr.w	r2, [lr]
 8005136:	4581      	cmp	r9, r0
 8005138:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800513c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005140:	b29b      	uxth	r3, r3
 8005142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005146:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800514a:	f84e 3b04 	str.w	r3, [lr], #4
 800514e:	d2da      	bcs.n	8005106 <quorem+0x42>
 8005150:	f856 300c 	ldr.w	r3, [r6, ip]
 8005154:	b933      	cbnz	r3, 8005164 <quorem+0xa0>
 8005156:	9b01      	ldr	r3, [sp, #4]
 8005158:	3b04      	subs	r3, #4
 800515a:	429e      	cmp	r6, r3
 800515c:	461a      	mov	r2, r3
 800515e:	d331      	bcc.n	80051c4 <quorem+0x100>
 8005160:	f8c8 4010 	str.w	r4, [r8, #16]
 8005164:	4640      	mov	r0, r8
 8005166:	f001 f827 	bl	80061b8 <__mcmp>
 800516a:	2800      	cmp	r0, #0
 800516c:	db26      	blt.n	80051bc <quorem+0xf8>
 800516e:	4630      	mov	r0, r6
 8005170:	f04f 0c00 	mov.w	ip, #0
 8005174:	3501      	adds	r5, #1
 8005176:	f857 1b04 	ldr.w	r1, [r7], #4
 800517a:	f8d0 e000 	ldr.w	lr, [r0]
 800517e:	b28b      	uxth	r3, r1
 8005180:	ebac 0303 	sub.w	r3, ip, r3
 8005184:	fa1f f28e 	uxth.w	r2, lr
 8005188:	4413      	add	r3, r2
 800518a:	0c0a      	lsrs	r2, r1, #16
 800518c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005194:	b29b      	uxth	r3, r3
 8005196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800519a:	45b9      	cmp	r9, r7
 800519c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051a0:	f840 3b04 	str.w	r3, [r0], #4
 80051a4:	d2e7      	bcs.n	8005176 <quorem+0xb2>
 80051a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80051aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80051ae:	b92a      	cbnz	r2, 80051bc <quorem+0xf8>
 80051b0:	3b04      	subs	r3, #4
 80051b2:	429e      	cmp	r6, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	d30b      	bcc.n	80051d0 <quorem+0x10c>
 80051b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80051bc:	4628      	mov	r0, r5
 80051be:	b003      	add	sp, #12
 80051c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	3b04      	subs	r3, #4
 80051c8:	2a00      	cmp	r2, #0
 80051ca:	d1c9      	bne.n	8005160 <quorem+0x9c>
 80051cc:	3c01      	subs	r4, #1
 80051ce:	e7c4      	b.n	800515a <quorem+0x96>
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	3b04      	subs	r3, #4
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	d1ef      	bne.n	80051b8 <quorem+0xf4>
 80051d8:	3c01      	subs	r4, #1
 80051da:	e7ea      	b.n	80051b2 <quorem+0xee>
 80051dc:	2000      	movs	r0, #0
 80051de:	e7ee      	b.n	80051be <quorem+0xfa>

080051e0 <_dtoa_r>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	4616      	mov	r6, r2
 80051e6:	461f      	mov	r7, r3
 80051e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051ea:	b095      	sub	sp, #84	; 0x54
 80051ec:	4604      	mov	r4, r0
 80051ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80051f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80051f6:	b93d      	cbnz	r5, 8005208 <_dtoa_r+0x28>
 80051f8:	2010      	movs	r0, #16
 80051fa:	f000 fdb3 	bl	8005d64 <malloc>
 80051fe:	6260      	str	r0, [r4, #36]	; 0x24
 8005200:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005204:	6005      	str	r5, [r0, #0]
 8005206:	60c5      	str	r5, [r0, #12]
 8005208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	b151      	cbz	r1, 8005224 <_dtoa_r+0x44>
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	2301      	movs	r3, #1
 8005212:	4093      	lsls	r3, r2
 8005214:	604a      	str	r2, [r1, #4]
 8005216:	608b      	str	r3, [r1, #8]
 8005218:	4620      	mov	r0, r4
 800521a:	f000 fded 	bl	8005df8 <_Bfree>
 800521e:	2200      	movs	r2, #0
 8005220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	1e3b      	subs	r3, r7, #0
 8005226:	bfaf      	iteee	ge
 8005228:	2300      	movge	r3, #0
 800522a:	2201      	movlt	r2, #1
 800522c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005230:	9303      	strlt	r3, [sp, #12]
 8005232:	bfac      	ite	ge
 8005234:	f8c8 3000 	strge.w	r3, [r8]
 8005238:	f8c8 2000 	strlt.w	r2, [r8]
 800523c:	4bae      	ldr	r3, [pc, #696]	; (80054f8 <_dtoa_r+0x318>)
 800523e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005242:	ea33 0308 	bics.w	r3, r3, r8
 8005246:	d11b      	bne.n	8005280 <_dtoa_r+0xa0>
 8005248:	f242 730f 	movw	r3, #9999	; 0x270f
 800524c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	9b02      	ldr	r3, [sp, #8]
 8005252:	b923      	cbnz	r3, 800525e <_dtoa_r+0x7e>
 8005254:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005258:	2800      	cmp	r0, #0
 800525a:	f000 8545 	beq.w	8005ce8 <_dtoa_r+0xb08>
 800525e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005260:	b953      	cbnz	r3, 8005278 <_dtoa_r+0x98>
 8005262:	4ba6      	ldr	r3, [pc, #664]	; (80054fc <_dtoa_r+0x31c>)
 8005264:	e021      	b.n	80052aa <_dtoa_r+0xca>
 8005266:	4ba6      	ldr	r3, [pc, #664]	; (8005500 <_dtoa_r+0x320>)
 8005268:	9306      	str	r3, [sp, #24]
 800526a:	3308      	adds	r3, #8
 800526c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	9806      	ldr	r0, [sp, #24]
 8005272:	b015      	add	sp, #84	; 0x54
 8005274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005278:	4ba0      	ldr	r3, [pc, #640]	; (80054fc <_dtoa_r+0x31c>)
 800527a:	9306      	str	r3, [sp, #24]
 800527c:	3303      	adds	r3, #3
 800527e:	e7f5      	b.n	800526c <_dtoa_r+0x8c>
 8005280:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005284:	2200      	movs	r2, #0
 8005286:	2300      	movs	r3, #0
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f7fb fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005290:	4682      	mov	sl, r0
 8005292:	b160      	cbz	r0, 80052ae <_dtoa_r+0xce>
 8005294:	2301      	movs	r3, #1
 8005296:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8520 	beq.w	8005ce2 <_dtoa_r+0xb02>
 80052a2:	4b98      	ldr	r3, [pc, #608]	; (8005504 <_dtoa_r+0x324>)
 80052a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	9306      	str	r3, [sp, #24]
 80052ac:	e7e0      	b.n	8005270 <_dtoa_r+0x90>
 80052ae:	ab12      	add	r3, sp, #72	; 0x48
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	ab13      	add	r3, sp, #76	; 0x4c
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	4632      	mov	r2, r6
 80052b8:	463b      	mov	r3, r7
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 fff4 	bl	80062a8 <__d2b>
 80052c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80052c4:	4683      	mov	fp, r0
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	d07d      	beq.n	80053c6 <_dtoa_r+0x1e6>
 80052ca:	46b0      	mov	r8, r6
 80052cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80052d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80052d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80052e0:	2200      	movs	r2, #0
 80052e2:	4b89      	ldr	r3, [pc, #548]	; (8005508 <_dtoa_r+0x328>)
 80052e4:	4640      	mov	r0, r8
 80052e6:	4649      	mov	r1, r9
 80052e8:	f7fa ff3e 	bl	8000168 <__aeabi_dsub>
 80052ec:	a37c      	add	r3, pc, #496	; (adr r3, 80054e0 <_dtoa_r+0x300>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fb f8f1 	bl	80004d8 <__aeabi_dmul>
 80052f6:	a37c      	add	r3, pc, #496	; (adr r3, 80054e8 <_dtoa_r+0x308>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fa ff36 	bl	800016c <__adddf3>
 8005300:	4606      	mov	r6, r0
 8005302:	4628      	mov	r0, r5
 8005304:	460f      	mov	r7, r1
 8005306:	f7fb f87d 	bl	8000404 <__aeabi_i2d>
 800530a:	a379      	add	r3, pc, #484	; (adr r3, 80054f0 <_dtoa_r+0x310>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fb f8e2 	bl	80004d8 <__aeabi_dmul>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4630      	mov	r0, r6
 800531a:	4639      	mov	r1, r7
 800531c:	f7fa ff26 	bl	800016c <__adddf3>
 8005320:	4606      	mov	r6, r0
 8005322:	460f      	mov	r7, r1
 8005324:	f7fb fb88 	bl	8000a38 <__aeabi_d2iz>
 8005328:	2200      	movs	r2, #0
 800532a:	4682      	mov	sl, r0
 800532c:	2300      	movs	r3, #0
 800532e:	4630      	mov	r0, r6
 8005330:	4639      	mov	r1, r7
 8005332:	f7fb fb43 	bl	80009bc <__aeabi_dcmplt>
 8005336:	b148      	cbz	r0, 800534c <_dtoa_r+0x16c>
 8005338:	4650      	mov	r0, sl
 800533a:	f7fb f863 	bl	8000404 <__aeabi_i2d>
 800533e:	4632      	mov	r2, r6
 8005340:	463b      	mov	r3, r7
 8005342:	f7fb fb31 	bl	80009a8 <__aeabi_dcmpeq>
 8005346:	b908      	cbnz	r0, 800534c <_dtoa_r+0x16c>
 8005348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800534c:	f1ba 0f16 	cmp.w	sl, #22
 8005350:	d85a      	bhi.n	8005408 <_dtoa_r+0x228>
 8005352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005356:	496d      	ldr	r1, [pc, #436]	; (800550c <_dtoa_r+0x32c>)
 8005358:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800535c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005360:	f7fb fb4a 	bl	80009f8 <__aeabi_dcmpgt>
 8005364:	2800      	cmp	r0, #0
 8005366:	d051      	beq.n	800540c <_dtoa_r+0x22c>
 8005368:	2300      	movs	r3, #0
 800536a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800536e:	930d      	str	r3, [sp, #52]	; 0x34
 8005370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005372:	1b5d      	subs	r5, r3, r5
 8005374:	1e6b      	subs	r3, r5, #1
 8005376:	9307      	str	r3, [sp, #28]
 8005378:	bf43      	ittte	mi
 800537a:	2300      	movmi	r3, #0
 800537c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005380:	9307      	strmi	r3, [sp, #28]
 8005382:	f04f 0900 	movpl.w	r9, #0
 8005386:	f1ba 0f00 	cmp.w	sl, #0
 800538a:	db41      	blt.n	8005410 <_dtoa_r+0x230>
 800538c:	9b07      	ldr	r3, [sp, #28]
 800538e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005392:	4453      	add	r3, sl
 8005394:	9307      	str	r3, [sp, #28]
 8005396:	2300      	movs	r3, #0
 8005398:	9308      	str	r3, [sp, #32]
 800539a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800539c:	2b09      	cmp	r3, #9
 800539e:	f200 808f 	bhi.w	80054c0 <_dtoa_r+0x2e0>
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	bfc4      	itt	gt
 80053a6:	3b04      	subgt	r3, #4
 80053a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80053aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053ac:	bfc8      	it	gt
 80053ae:	2500      	movgt	r5, #0
 80053b0:	f1a3 0302 	sub.w	r3, r3, #2
 80053b4:	bfd8      	it	le
 80053b6:	2501      	movle	r5, #1
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	f200 808d 	bhi.w	80054d8 <_dtoa_r+0x2f8>
 80053be:	e8df f003 	tbb	[pc, r3]
 80053c2:	7d7b      	.short	0x7d7b
 80053c4:	6f2f      	.short	0x6f2f
 80053c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80053ca:	441d      	add	r5, r3
 80053cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80053d0:	2820      	cmp	r0, #32
 80053d2:	dd13      	ble.n	80053fc <_dtoa_r+0x21c>
 80053d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	fa08 f800 	lsl.w	r8, r8, r0
 80053de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053e2:	fa23 f000 	lsr.w	r0, r3, r0
 80053e6:	ea48 0000 	orr.w	r0, r8, r0
 80053ea:	f7fa fffb 	bl	80003e4 <__aeabi_ui2d>
 80053ee:	2301      	movs	r3, #1
 80053f0:	4680      	mov	r8, r0
 80053f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80053f6:	3d01      	subs	r5, #1
 80053f8:	9310      	str	r3, [sp, #64]	; 0x40
 80053fa:	e771      	b.n	80052e0 <_dtoa_r+0x100>
 80053fc:	9b02      	ldr	r3, [sp, #8]
 80053fe:	f1c0 0020 	rsb	r0, r0, #32
 8005402:	fa03 f000 	lsl.w	r0, r3, r0
 8005406:	e7f0      	b.n	80053ea <_dtoa_r+0x20a>
 8005408:	2301      	movs	r3, #1
 800540a:	e7b0      	b.n	800536e <_dtoa_r+0x18e>
 800540c:	900d      	str	r0, [sp, #52]	; 0x34
 800540e:	e7af      	b.n	8005370 <_dtoa_r+0x190>
 8005410:	f1ca 0300 	rsb	r3, sl, #0
 8005414:	9308      	str	r3, [sp, #32]
 8005416:	2300      	movs	r3, #0
 8005418:	eba9 090a 	sub.w	r9, r9, sl
 800541c:	930c      	str	r3, [sp, #48]	; 0x30
 800541e:	e7bc      	b.n	800539a <_dtoa_r+0x1ba>
 8005420:	2301      	movs	r3, #1
 8005422:	9309      	str	r3, [sp, #36]	; 0x24
 8005424:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005426:	2b00      	cmp	r3, #0
 8005428:	dd74      	ble.n	8005514 <_dtoa_r+0x334>
 800542a:	4698      	mov	r8, r3
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	2200      	movs	r2, #0
 8005430:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005432:	6072      	str	r2, [r6, #4]
 8005434:	2204      	movs	r2, #4
 8005436:	f102 0014 	add.w	r0, r2, #20
 800543a:	4298      	cmp	r0, r3
 800543c:	6871      	ldr	r1, [r6, #4]
 800543e:	d96e      	bls.n	800551e <_dtoa_r+0x33e>
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fca5 	bl	8005d90 <_Balloc>
 8005446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005448:	6030      	str	r0, [r6, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1b8 0f0e 	cmp.w	r8, #14
 8005450:	9306      	str	r3, [sp, #24]
 8005452:	f200 80ed 	bhi.w	8005630 <_dtoa_r+0x450>
 8005456:	2d00      	cmp	r5, #0
 8005458:	f000 80ea 	beq.w	8005630 <_dtoa_r+0x450>
 800545c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005460:	f1ba 0f00 	cmp.w	sl, #0
 8005464:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005468:	dd77      	ble.n	800555a <_dtoa_r+0x37a>
 800546a:	4a28      	ldr	r2, [pc, #160]	; (800550c <_dtoa_r+0x32c>)
 800546c:	f00a 030f 	and.w	r3, sl, #15
 8005470:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005478:	06f0      	lsls	r0, r6, #27
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005482:	d568      	bpl.n	8005556 <_dtoa_r+0x376>
 8005484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005488:	4b21      	ldr	r3, [pc, #132]	; (8005510 <_dtoa_r+0x330>)
 800548a:	2503      	movs	r5, #3
 800548c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005490:	f7fb f94c 	bl	800072c <__aeabi_ddiv>
 8005494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005498:	f006 060f 	and.w	r6, r6, #15
 800549c:	4f1c      	ldr	r7, [pc, #112]	; (8005510 <_dtoa_r+0x330>)
 800549e:	e04f      	b.n	8005540 <_dtoa_r+0x360>
 80054a0:	2301      	movs	r3, #1
 80054a2:	9309      	str	r3, [sp, #36]	; 0x24
 80054a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054a6:	4453      	add	r3, sl
 80054a8:	f103 0801 	add.w	r8, r3, #1
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	4643      	mov	r3, r8
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bfb8      	it	lt
 80054b4:	2301      	movlt	r3, #1
 80054b6:	e7ba      	b.n	800542e <_dtoa_r+0x24e>
 80054b8:	2300      	movs	r3, #0
 80054ba:	e7b2      	b.n	8005422 <_dtoa_r+0x242>
 80054bc:	2300      	movs	r3, #0
 80054be:	e7f0      	b.n	80054a2 <_dtoa_r+0x2c2>
 80054c0:	2501      	movs	r5, #1
 80054c2:	2300      	movs	r3, #0
 80054c4:	9509      	str	r5, [sp, #36]	; 0x24
 80054c6:	931e      	str	r3, [sp, #120]	; 0x78
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295
 80054cc:	2200      	movs	r2, #0
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	4698      	mov	r8, r3
 80054d2:	2312      	movs	r3, #18
 80054d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80054d6:	e7aa      	b.n	800542e <_dtoa_r+0x24e>
 80054d8:	2301      	movs	r3, #1
 80054da:	9309      	str	r3, [sp, #36]	; 0x24
 80054dc:	e7f4      	b.n	80054c8 <_dtoa_r+0x2e8>
 80054de:	bf00      	nop
 80054e0:	636f4361 	.word	0x636f4361
 80054e4:	3fd287a7 	.word	0x3fd287a7
 80054e8:	8b60c8b3 	.word	0x8b60c8b3
 80054ec:	3fc68a28 	.word	0x3fc68a28
 80054f0:	509f79fb 	.word	0x509f79fb
 80054f4:	3fd34413 	.word	0x3fd34413
 80054f8:	7ff00000 	.word	0x7ff00000
 80054fc:	08007601 	.word	0x08007601
 8005500:	080075f8 	.word	0x080075f8
 8005504:	080075d5 	.word	0x080075d5
 8005508:	3ff80000 	.word	0x3ff80000
 800550c:	08007630 	.word	0x08007630
 8005510:	08007608 	.word	0x08007608
 8005514:	2301      	movs	r3, #1
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	4698      	mov	r8, r3
 800551a:	461a      	mov	r2, r3
 800551c:	e7da      	b.n	80054d4 <_dtoa_r+0x2f4>
 800551e:	3101      	adds	r1, #1
 8005520:	6071      	str	r1, [r6, #4]
 8005522:	0052      	lsls	r2, r2, #1
 8005524:	e787      	b.n	8005436 <_dtoa_r+0x256>
 8005526:	07f1      	lsls	r1, r6, #31
 8005528:	d508      	bpl.n	800553c <_dtoa_r+0x35c>
 800552a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800552e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005532:	f7fa ffd1 	bl	80004d8 <__aeabi_dmul>
 8005536:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800553a:	3501      	adds	r5, #1
 800553c:	1076      	asrs	r6, r6, #1
 800553e:	3708      	adds	r7, #8
 8005540:	2e00      	cmp	r6, #0
 8005542:	d1f0      	bne.n	8005526 <_dtoa_r+0x346>
 8005544:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554c:	f7fb f8ee 	bl	800072c <__aeabi_ddiv>
 8005550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005554:	e01b      	b.n	800558e <_dtoa_r+0x3ae>
 8005556:	2502      	movs	r5, #2
 8005558:	e7a0      	b.n	800549c <_dtoa_r+0x2bc>
 800555a:	f000 80a4 	beq.w	80056a6 <_dtoa_r+0x4c6>
 800555e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005562:	f1ca 0600 	rsb	r6, sl, #0
 8005566:	4ba0      	ldr	r3, [pc, #640]	; (80057e8 <_dtoa_r+0x608>)
 8005568:	f006 020f 	and.w	r2, r6, #15
 800556c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f7fa ffb0 	bl	80004d8 <__aeabi_dmul>
 8005578:	2502      	movs	r5, #2
 800557a:	2300      	movs	r3, #0
 800557c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005580:	4f9a      	ldr	r7, [pc, #616]	; (80057ec <_dtoa_r+0x60c>)
 8005582:	1136      	asrs	r6, r6, #4
 8005584:	2e00      	cmp	r6, #0
 8005586:	f040 8083 	bne.w	8005690 <_dtoa_r+0x4b0>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e0      	bne.n	8005550 <_dtoa_r+0x370>
 800558e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 808a 	beq.w	80056aa <_dtoa_r+0x4ca>
 8005596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800559a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800559e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055a2:	2200      	movs	r2, #0
 80055a4:	4b92      	ldr	r3, [pc, #584]	; (80057f0 <_dtoa_r+0x610>)
 80055a6:	f7fb fa09 	bl	80009bc <__aeabi_dcmplt>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d07d      	beq.n	80056aa <_dtoa_r+0x4ca>
 80055ae:	f1b8 0f00 	cmp.w	r8, #0
 80055b2:	d07a      	beq.n	80056aa <_dtoa_r+0x4ca>
 80055b4:	9b04      	ldr	r3, [sp, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	dd36      	ble.n	8005628 <_dtoa_r+0x448>
 80055ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055be:	2200      	movs	r2, #0
 80055c0:	4b8c      	ldr	r3, [pc, #560]	; (80057f4 <_dtoa_r+0x614>)
 80055c2:	f7fa ff89 	bl	80004d8 <__aeabi_dmul>
 80055c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ca:	9e04      	ldr	r6, [sp, #16]
 80055cc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80055d0:	3501      	adds	r5, #1
 80055d2:	4628      	mov	r0, r5
 80055d4:	f7fa ff16 	bl	8000404 <__aeabi_i2d>
 80055d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055dc:	f7fa ff7c 	bl	80004d8 <__aeabi_dmul>
 80055e0:	2200      	movs	r2, #0
 80055e2:	4b85      	ldr	r3, [pc, #532]	; (80057f8 <_dtoa_r+0x618>)
 80055e4:	f7fa fdc2 	bl	800016c <__adddf3>
 80055e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80055ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80055f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	d15c      	bne.n	80056b0 <_dtoa_r+0x4d0>
 80055f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	4b7f      	ldr	r3, [pc, #508]	; (80057fc <_dtoa_r+0x61c>)
 80055fe:	f7fa fdb3 	bl	8000168 <__aeabi_dsub>
 8005602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005604:	462b      	mov	r3, r5
 8005606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800560a:	f7fb f9f5 	bl	80009f8 <__aeabi_dcmpgt>
 800560e:	2800      	cmp	r0, #0
 8005610:	f040 8281 	bne.w	8005b16 <_dtoa_r+0x936>
 8005614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800561a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800561e:	f7fb f9cd 	bl	80009bc <__aeabi_dcmplt>
 8005622:	2800      	cmp	r0, #0
 8005624:	f040 8275 	bne.w	8005b12 <_dtoa_r+0x932>
 8005628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800562c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005632:	2b00      	cmp	r3, #0
 8005634:	f2c0 814b 	blt.w	80058ce <_dtoa_r+0x6ee>
 8005638:	f1ba 0f0e 	cmp.w	sl, #14
 800563c:	f300 8147 	bgt.w	80058ce <_dtoa_r+0x6ee>
 8005640:	4b69      	ldr	r3, [pc, #420]	; (80057e8 <_dtoa_r+0x608>)
 8005642:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800564e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005650:	2b00      	cmp	r3, #0
 8005652:	f280 80d7 	bge.w	8005804 <_dtoa_r+0x624>
 8005656:	f1b8 0f00 	cmp.w	r8, #0
 800565a:	f300 80d3 	bgt.w	8005804 <_dtoa_r+0x624>
 800565e:	f040 8257 	bne.w	8005b10 <_dtoa_r+0x930>
 8005662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005666:	2200      	movs	r2, #0
 8005668:	4b64      	ldr	r3, [pc, #400]	; (80057fc <_dtoa_r+0x61c>)
 800566a:	f7fa ff35 	bl	80004d8 <__aeabi_dmul>
 800566e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005672:	f7fb f9b7 	bl	80009e4 <__aeabi_dcmpge>
 8005676:	4646      	mov	r6, r8
 8005678:	4647      	mov	r7, r8
 800567a:	2800      	cmp	r0, #0
 800567c:	f040 822d 	bne.w	8005ada <_dtoa_r+0x8fa>
 8005680:	9b06      	ldr	r3, [sp, #24]
 8005682:	9a06      	ldr	r2, [sp, #24]
 8005684:	1c5d      	adds	r5, r3, #1
 8005686:	2331      	movs	r3, #49	; 0x31
 8005688:	f10a 0a01 	add.w	sl, sl, #1
 800568c:	7013      	strb	r3, [r2, #0]
 800568e:	e228      	b.n	8005ae2 <_dtoa_r+0x902>
 8005690:	07f2      	lsls	r2, r6, #31
 8005692:	d505      	bpl.n	80056a0 <_dtoa_r+0x4c0>
 8005694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005698:	f7fa ff1e 	bl	80004d8 <__aeabi_dmul>
 800569c:	2301      	movs	r3, #1
 800569e:	3501      	adds	r5, #1
 80056a0:	1076      	asrs	r6, r6, #1
 80056a2:	3708      	adds	r7, #8
 80056a4:	e76e      	b.n	8005584 <_dtoa_r+0x3a4>
 80056a6:	2502      	movs	r5, #2
 80056a8:	e771      	b.n	800558e <_dtoa_r+0x3ae>
 80056aa:	4657      	mov	r7, sl
 80056ac:	4646      	mov	r6, r8
 80056ae:	e790      	b.n	80055d2 <_dtoa_r+0x3f2>
 80056b0:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <_dtoa_r+0x608>)
 80056b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80056b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80056ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d048      	beq.n	8005752 <_dtoa_r+0x572>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	2000      	movs	r0, #0
 80056c6:	494e      	ldr	r1, [pc, #312]	; (8005800 <_dtoa_r+0x620>)
 80056c8:	f7fb f830 	bl	800072c <__aeabi_ddiv>
 80056cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056d0:	f7fa fd4a 	bl	8000168 <__aeabi_dsub>
 80056d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056d8:	9d06      	ldr	r5, [sp, #24]
 80056da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056de:	f7fb f9ab 	bl	8000a38 <__aeabi_d2iz>
 80056e2:	9011      	str	r0, [sp, #68]	; 0x44
 80056e4:	f7fa fe8e 	bl	8000404 <__aeabi_i2d>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f0:	f7fa fd3a 	bl	8000168 <__aeabi_dsub>
 80056f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056fa:	3330      	adds	r3, #48	; 0x30
 80056fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005700:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005704:	f7fb f95a 	bl	80009bc <__aeabi_dcmplt>
 8005708:	2800      	cmp	r0, #0
 800570a:	d163      	bne.n	80057d4 <_dtoa_r+0x5f4>
 800570c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005710:	2000      	movs	r0, #0
 8005712:	4937      	ldr	r1, [pc, #220]	; (80057f0 <_dtoa_r+0x610>)
 8005714:	f7fa fd28 	bl	8000168 <__aeabi_dsub>
 8005718:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800571c:	f7fb f94e 	bl	80009bc <__aeabi_dcmplt>
 8005720:	2800      	cmp	r0, #0
 8005722:	f040 80b5 	bne.w	8005890 <_dtoa_r+0x6b0>
 8005726:	9b06      	ldr	r3, [sp, #24]
 8005728:	1aeb      	subs	r3, r5, r3
 800572a:	429e      	cmp	r6, r3
 800572c:	f77f af7c 	ble.w	8005628 <_dtoa_r+0x448>
 8005730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005734:	2200      	movs	r2, #0
 8005736:	4b2f      	ldr	r3, [pc, #188]	; (80057f4 <_dtoa_r+0x614>)
 8005738:	f7fa fece 	bl	80004d8 <__aeabi_dmul>
 800573c:	2200      	movs	r2, #0
 800573e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005746:	4b2b      	ldr	r3, [pc, #172]	; (80057f4 <_dtoa_r+0x614>)
 8005748:	f7fa fec6 	bl	80004d8 <__aeabi_dmul>
 800574c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005750:	e7c3      	b.n	80056da <_dtoa_r+0x4fa>
 8005752:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005756:	f7fa febf 	bl	80004d8 <__aeabi_dmul>
 800575a:	9b06      	ldr	r3, [sp, #24]
 800575c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005760:	199d      	adds	r5, r3, r6
 8005762:	461e      	mov	r6, r3
 8005764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005768:	f7fb f966 	bl	8000a38 <__aeabi_d2iz>
 800576c:	9011      	str	r0, [sp, #68]	; 0x44
 800576e:	f7fa fe49 	bl	8000404 <__aeabi_i2d>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800577a:	f7fa fcf5 	bl	8000168 <__aeabi_dsub>
 800577e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005784:	3330      	adds	r3, #48	; 0x30
 8005786:	f806 3b01 	strb.w	r3, [r6], #1
 800578a:	42ae      	cmp	r6, r5
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	d124      	bne.n	80057dc <_dtoa_r+0x5fc>
 8005792:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <_dtoa_r+0x620>)
 8005798:	f7fa fce8 	bl	800016c <__adddf3>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a4:	f7fb f928 	bl	80009f8 <__aeabi_dcmpgt>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d171      	bne.n	8005890 <_dtoa_r+0x6b0>
 80057ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057b0:	2000      	movs	r0, #0
 80057b2:	4913      	ldr	r1, [pc, #76]	; (8005800 <_dtoa_r+0x620>)
 80057b4:	f7fa fcd8 	bl	8000168 <__aeabi_dsub>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c0:	f7fb f8fc 	bl	80009bc <__aeabi_dcmplt>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f43f af2f 	beq.w	8005628 <_dtoa_r+0x448>
 80057ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057ce:	1e6a      	subs	r2, r5, #1
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d001      	beq.n	80057d8 <_dtoa_r+0x5f8>
 80057d4:	46ba      	mov	sl, r7
 80057d6:	e04a      	b.n	800586e <_dtoa_r+0x68e>
 80057d8:	4615      	mov	r5, r2
 80057da:	e7f6      	b.n	80057ca <_dtoa_r+0x5ea>
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <_dtoa_r+0x614>)
 80057de:	f7fa fe7b 	bl	80004d8 <__aeabi_dmul>
 80057e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e6:	e7bd      	b.n	8005764 <_dtoa_r+0x584>
 80057e8:	08007630 	.word	0x08007630
 80057ec:	08007608 	.word	0x08007608
 80057f0:	3ff00000 	.word	0x3ff00000
 80057f4:	40240000 	.word	0x40240000
 80057f8:	401c0000 	.word	0x401c0000
 80057fc:	40140000 	.word	0x40140000
 8005800:	3fe00000 	.word	0x3fe00000
 8005804:	9d06      	ldr	r5, [sp, #24]
 8005806:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800580a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa ff8b 	bl	800072c <__aeabi_ddiv>
 8005816:	f7fb f90f 	bl	8000a38 <__aeabi_d2iz>
 800581a:	4681      	mov	r9, r0
 800581c:	f7fa fdf2 	bl	8000404 <__aeabi_i2d>
 8005820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005824:	f7fa fe58 	bl	80004d8 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	f7fa fc9a 	bl	8000168 <__aeabi_dsub>
 8005834:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005838:	f805 6b01 	strb.w	r6, [r5], #1
 800583c:	9e06      	ldr	r6, [sp, #24]
 800583e:	4602      	mov	r2, r0
 8005840:	1bae      	subs	r6, r5, r6
 8005842:	45b0      	cmp	r8, r6
 8005844:	460b      	mov	r3, r1
 8005846:	d135      	bne.n	80058b4 <_dtoa_r+0x6d4>
 8005848:	f7fa fc90 	bl	800016c <__adddf3>
 800584c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005850:	4606      	mov	r6, r0
 8005852:	460f      	mov	r7, r1
 8005854:	f7fb f8d0 	bl	80009f8 <__aeabi_dcmpgt>
 8005858:	b9c8      	cbnz	r0, 800588e <_dtoa_r+0x6ae>
 800585a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	f7fb f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 8005866:	b110      	cbz	r0, 800586e <_dtoa_r+0x68e>
 8005868:	f019 0f01 	tst.w	r9, #1
 800586c:	d10f      	bne.n	800588e <_dtoa_r+0x6ae>
 800586e:	4659      	mov	r1, fp
 8005870:	4620      	mov	r0, r4
 8005872:	f000 fac1 	bl	8005df8 <_Bfree>
 8005876:	2300      	movs	r3, #0
 8005878:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800587a:	702b      	strb	r3, [r5, #0]
 800587c:	f10a 0301 	add.w	r3, sl, #1
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005884:	2b00      	cmp	r3, #0
 8005886:	f43f acf3 	beq.w	8005270 <_dtoa_r+0x90>
 800588a:	601d      	str	r5, [r3, #0]
 800588c:	e4f0      	b.n	8005270 <_dtoa_r+0x90>
 800588e:	4657      	mov	r7, sl
 8005890:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005894:	1e6b      	subs	r3, r5, #1
 8005896:	2a39      	cmp	r2, #57	; 0x39
 8005898:	d106      	bne.n	80058a8 <_dtoa_r+0x6c8>
 800589a:	9a06      	ldr	r2, [sp, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d107      	bne.n	80058b0 <_dtoa_r+0x6d0>
 80058a0:	2330      	movs	r3, #48	; 0x30
 80058a2:	7013      	strb	r3, [r2, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	3701      	adds	r7, #1
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	3201      	adds	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e791      	b.n	80057d4 <_dtoa_r+0x5f4>
 80058b0:	461d      	mov	r5, r3
 80058b2:	e7ed      	b.n	8005890 <_dtoa_r+0x6b0>
 80058b4:	2200      	movs	r2, #0
 80058b6:	4b99      	ldr	r3, [pc, #612]	; (8005b1c <_dtoa_r+0x93c>)
 80058b8:	f7fa fe0e 	bl	80004d8 <__aeabi_dmul>
 80058bc:	2200      	movs	r2, #0
 80058be:	2300      	movs	r3, #0
 80058c0:	4606      	mov	r6, r0
 80058c2:	460f      	mov	r7, r1
 80058c4:	f7fb f870 	bl	80009a8 <__aeabi_dcmpeq>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d09e      	beq.n	800580a <_dtoa_r+0x62a>
 80058cc:	e7cf      	b.n	800586e <_dtoa_r+0x68e>
 80058ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	f000 8088 	beq.w	80059e6 <_dtoa_r+0x806>
 80058d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058d8:	2a01      	cmp	r2, #1
 80058da:	dc6d      	bgt.n	80059b8 <_dtoa_r+0x7d8>
 80058dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058de:	2a00      	cmp	r2, #0
 80058e0:	d066      	beq.n	80059b0 <_dtoa_r+0x7d0>
 80058e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058e6:	464d      	mov	r5, r9
 80058e8:	9e08      	ldr	r6, [sp, #32]
 80058ea:	9a07      	ldr	r2, [sp, #28]
 80058ec:	2101      	movs	r1, #1
 80058ee:	441a      	add	r2, r3
 80058f0:	4620      	mov	r0, r4
 80058f2:	4499      	add	r9, r3
 80058f4:	9207      	str	r2, [sp, #28]
 80058f6:	f000 fb1f 	bl	8005f38 <__i2b>
 80058fa:	4607      	mov	r7, r0
 80058fc:	2d00      	cmp	r5, #0
 80058fe:	dd0b      	ble.n	8005918 <_dtoa_r+0x738>
 8005900:	9b07      	ldr	r3, [sp, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	dd08      	ble.n	8005918 <_dtoa_r+0x738>
 8005906:	42ab      	cmp	r3, r5
 8005908:	bfa8      	it	ge
 800590a:	462b      	movge	r3, r5
 800590c:	9a07      	ldr	r2, [sp, #28]
 800590e:	eba9 0903 	sub.w	r9, r9, r3
 8005912:	1aed      	subs	r5, r5, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	9307      	str	r3, [sp, #28]
 8005918:	9b08      	ldr	r3, [sp, #32]
 800591a:	b1eb      	cbz	r3, 8005958 <_dtoa_r+0x778>
 800591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d065      	beq.n	80059ee <_dtoa_r+0x80e>
 8005922:	b18e      	cbz	r6, 8005948 <_dtoa_r+0x768>
 8005924:	4639      	mov	r1, r7
 8005926:	4632      	mov	r2, r6
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fba3 	bl	8006074 <__pow5mult>
 800592e:	465a      	mov	r2, fp
 8005930:	4601      	mov	r1, r0
 8005932:	4607      	mov	r7, r0
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fb08 	bl	8005f4a <__multiply>
 800593a:	4659      	mov	r1, fp
 800593c:	900a      	str	r0, [sp, #40]	; 0x28
 800593e:	4620      	mov	r0, r4
 8005940:	f000 fa5a 	bl	8005df8 <_Bfree>
 8005944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005946:	469b      	mov	fp, r3
 8005948:	9b08      	ldr	r3, [sp, #32]
 800594a:	1b9a      	subs	r2, r3, r6
 800594c:	d004      	beq.n	8005958 <_dtoa_r+0x778>
 800594e:	4659      	mov	r1, fp
 8005950:	4620      	mov	r0, r4
 8005952:	f000 fb8f 	bl	8006074 <__pow5mult>
 8005956:	4683      	mov	fp, r0
 8005958:	2101      	movs	r1, #1
 800595a:	4620      	mov	r0, r4
 800595c:	f000 faec 	bl	8005f38 <__i2b>
 8005960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005962:	4606      	mov	r6, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 81c6 	beq.w	8005cf6 <_dtoa_r+0xb16>
 800596a:	461a      	mov	r2, r3
 800596c:	4601      	mov	r1, r0
 800596e:	4620      	mov	r0, r4
 8005970:	f000 fb80 	bl	8006074 <__pow5mult>
 8005974:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005976:	4606      	mov	r6, r0
 8005978:	2b01      	cmp	r3, #1
 800597a:	dc3e      	bgt.n	80059fa <_dtoa_r+0x81a>
 800597c:	9b02      	ldr	r3, [sp, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d137      	bne.n	80059f2 <_dtoa_r+0x812>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005988:	2b00      	cmp	r3, #0
 800598a:	d134      	bne.n	80059f6 <_dtoa_r+0x816>
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005992:	0d1b      	lsrs	r3, r3, #20
 8005994:	051b      	lsls	r3, r3, #20
 8005996:	b12b      	cbz	r3, 80059a4 <_dtoa_r+0x7c4>
 8005998:	9b07      	ldr	r3, [sp, #28]
 800599a:	f109 0901 	add.w	r9, r9, #1
 800599e:	3301      	adds	r3, #1
 80059a0:	9307      	str	r3, [sp, #28]
 80059a2:	2301      	movs	r3, #1
 80059a4:	9308      	str	r3, [sp, #32]
 80059a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d128      	bne.n	80059fe <_dtoa_r+0x81e>
 80059ac:	2001      	movs	r0, #1
 80059ae:	e02e      	b.n	8005a0e <_dtoa_r+0x82e>
 80059b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059b6:	e796      	b.n	80058e6 <_dtoa_r+0x706>
 80059b8:	9b08      	ldr	r3, [sp, #32]
 80059ba:	f108 36ff 	add.w	r6, r8, #4294967295
 80059be:	42b3      	cmp	r3, r6
 80059c0:	bfb7      	itett	lt
 80059c2:	9b08      	ldrlt	r3, [sp, #32]
 80059c4:	1b9e      	subge	r6, r3, r6
 80059c6:	1af2      	sublt	r2, r6, r3
 80059c8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80059ca:	bfbf      	itttt	lt
 80059cc:	9608      	strlt	r6, [sp, #32]
 80059ce:	189b      	addlt	r3, r3, r2
 80059d0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80059d2:	2600      	movlt	r6, #0
 80059d4:	f1b8 0f00 	cmp.w	r8, #0
 80059d8:	bfb9      	ittee	lt
 80059da:	eba9 0508 	sublt.w	r5, r9, r8
 80059de:	2300      	movlt	r3, #0
 80059e0:	464d      	movge	r5, r9
 80059e2:	4643      	movge	r3, r8
 80059e4:	e781      	b.n	80058ea <_dtoa_r+0x70a>
 80059e6:	9e08      	ldr	r6, [sp, #32]
 80059e8:	464d      	mov	r5, r9
 80059ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059ec:	e786      	b.n	80058fc <_dtoa_r+0x71c>
 80059ee:	9a08      	ldr	r2, [sp, #32]
 80059f0:	e7ad      	b.n	800594e <_dtoa_r+0x76e>
 80059f2:	2300      	movs	r3, #0
 80059f4:	e7d6      	b.n	80059a4 <_dtoa_r+0x7c4>
 80059f6:	9b02      	ldr	r3, [sp, #8]
 80059f8:	e7d4      	b.n	80059a4 <_dtoa_r+0x7c4>
 80059fa:	2300      	movs	r3, #0
 80059fc:	9308      	str	r3, [sp, #32]
 80059fe:	6933      	ldr	r3, [r6, #16]
 8005a00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a04:	6918      	ldr	r0, [r3, #16]
 8005a06:	f000 fa49 	bl	8005e9c <__hi0bits>
 8005a0a:	f1c0 0020 	rsb	r0, r0, #32
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	4418      	add	r0, r3
 8005a12:	f010 001f 	ands.w	r0, r0, #31
 8005a16:	d047      	beq.n	8005aa8 <_dtoa_r+0x8c8>
 8005a18:	f1c0 0320 	rsb	r3, r0, #32
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	dd3b      	ble.n	8005a98 <_dtoa_r+0x8b8>
 8005a20:	9b07      	ldr	r3, [sp, #28]
 8005a22:	f1c0 001c 	rsb	r0, r0, #28
 8005a26:	4481      	add	r9, r0
 8005a28:	4405      	add	r5, r0
 8005a2a:	4403      	add	r3, r0
 8005a2c:	9307      	str	r3, [sp, #28]
 8005a2e:	f1b9 0f00 	cmp.w	r9, #0
 8005a32:	dd05      	ble.n	8005a40 <_dtoa_r+0x860>
 8005a34:	4659      	mov	r1, fp
 8005a36:	464a      	mov	r2, r9
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fb69 	bl	8006110 <__lshift>
 8005a3e:	4683      	mov	fp, r0
 8005a40:	9b07      	ldr	r3, [sp, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dd05      	ble.n	8005a52 <_dtoa_r+0x872>
 8005a46:	4631      	mov	r1, r6
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 fb60 	bl	8006110 <__lshift>
 8005a50:	4606      	mov	r6, r0
 8005a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a54:	b353      	cbz	r3, 8005aac <_dtoa_r+0x8cc>
 8005a56:	4631      	mov	r1, r6
 8005a58:	4658      	mov	r0, fp
 8005a5a:	f000 fbad 	bl	80061b8 <__mcmp>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	da24      	bge.n	8005aac <_dtoa_r+0x8cc>
 8005a62:	2300      	movs	r3, #0
 8005a64:	4659      	mov	r1, fp
 8005a66:	220a      	movs	r2, #10
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 f9dc 	bl	8005e26 <__multadd>
 8005a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a74:	4683      	mov	fp, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8144 	beq.w	8005d04 <_dtoa_r+0xb24>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4639      	mov	r1, r7
 8005a80:	220a      	movs	r2, #10
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f9cf 	bl	8005e26 <__multadd>
 8005a88:	9b04      	ldr	r3, [sp, #16]
 8005a8a:	4607      	mov	r7, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc4d      	bgt.n	8005b2c <_dtoa_r+0x94c>
 8005a90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	dd4a      	ble.n	8005b2c <_dtoa_r+0x94c>
 8005a96:	e011      	b.n	8005abc <_dtoa_r+0x8dc>
 8005a98:	d0c9      	beq.n	8005a2e <_dtoa_r+0x84e>
 8005a9a:	9a07      	ldr	r2, [sp, #28]
 8005a9c:	331c      	adds	r3, #28
 8005a9e:	441a      	add	r2, r3
 8005aa0:	4499      	add	r9, r3
 8005aa2:	441d      	add	r5, r3
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	e7c1      	b.n	8005a2c <_dtoa_r+0x84c>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	e7f6      	b.n	8005a9a <_dtoa_r+0x8ba>
 8005aac:	f1b8 0f00 	cmp.w	r8, #0
 8005ab0:	dc36      	bgt.n	8005b20 <_dtoa_r+0x940>
 8005ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	dd33      	ble.n	8005b20 <_dtoa_r+0x940>
 8005ab8:	f8cd 8010 	str.w	r8, [sp, #16]
 8005abc:	9b04      	ldr	r3, [sp, #16]
 8005abe:	b963      	cbnz	r3, 8005ada <_dtoa_r+0x8fa>
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	2205      	movs	r2, #5
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 f9ae 	bl	8005e26 <__multadd>
 8005aca:	4601      	mov	r1, r0
 8005acc:	4606      	mov	r6, r0
 8005ace:	4658      	mov	r0, fp
 8005ad0:	f000 fb72 	bl	80061b8 <__mcmp>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f73f add3 	bgt.w	8005680 <_dtoa_r+0x4a0>
 8005ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005adc:	9d06      	ldr	r5, [sp, #24]
 8005ade:	ea6f 0a03 	mvn.w	sl, r3
 8005ae2:	f04f 0900 	mov.w	r9, #0
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f985 	bl	8005df8 <_Bfree>
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	f43f aebd 	beq.w	800586e <_dtoa_r+0x68e>
 8005af4:	f1b9 0f00 	cmp.w	r9, #0
 8005af8:	d005      	beq.n	8005b06 <_dtoa_r+0x926>
 8005afa:	45b9      	cmp	r9, r7
 8005afc:	d003      	beq.n	8005b06 <_dtoa_r+0x926>
 8005afe:	4649      	mov	r1, r9
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 f979 	bl	8005df8 <_Bfree>
 8005b06:	4639      	mov	r1, r7
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 f975 	bl	8005df8 <_Bfree>
 8005b0e:	e6ae      	b.n	800586e <_dtoa_r+0x68e>
 8005b10:	2600      	movs	r6, #0
 8005b12:	4637      	mov	r7, r6
 8005b14:	e7e1      	b.n	8005ada <_dtoa_r+0x8fa>
 8005b16:	46ba      	mov	sl, r7
 8005b18:	4637      	mov	r7, r6
 8005b1a:	e5b1      	b.n	8005680 <_dtoa_r+0x4a0>
 8005b1c:	40240000 	.word	0x40240000
 8005b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b22:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80f3 	beq.w	8005d12 <_dtoa_r+0xb32>
 8005b2c:	2d00      	cmp	r5, #0
 8005b2e:	dd05      	ble.n	8005b3c <_dtoa_r+0x95c>
 8005b30:	4639      	mov	r1, r7
 8005b32:	462a      	mov	r2, r5
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 faeb 	bl	8006110 <__lshift>
 8005b3a:	4607      	mov	r7, r0
 8005b3c:	9b08      	ldr	r3, [sp, #32]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04c      	beq.n	8005bdc <_dtoa_r+0x9fc>
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 f923 	bl	8005d90 <_Balloc>
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	f107 010c 	add.w	r1, r7, #12
 8005b52:	3202      	adds	r2, #2
 8005b54:	0092      	lsls	r2, r2, #2
 8005b56:	300c      	adds	r0, #12
 8005b58:	f7fe fe32 	bl	80047c0 <memcpy>
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fad5 	bl	8006110 <__lshift>
 8005b66:	46b9      	mov	r9, r7
 8005b68:	4607      	mov	r7, r0
 8005b6a:	9b06      	ldr	r3, [sp, #24]
 8005b6c:	9307      	str	r3, [sp, #28]
 8005b6e:	9b02      	ldr	r3, [sp, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	9308      	str	r3, [sp, #32]
 8005b76:	4631      	mov	r1, r6
 8005b78:	4658      	mov	r0, fp
 8005b7a:	f7ff faa3 	bl	80050c4 <quorem>
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4605      	mov	r5, r0
 8005b82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b86:	4658      	mov	r0, fp
 8005b88:	f000 fb16 	bl	80061b8 <__mcmp>
 8005b8c:	463a      	mov	r2, r7
 8005b8e:	9002      	str	r0, [sp, #8]
 8005b90:	4631      	mov	r1, r6
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 fb2a 	bl	80061ec <__mdiff>
 8005b98:	68c3      	ldr	r3, [r0, #12]
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	bb03      	cbnz	r3, 8005be0 <_dtoa_r+0xa00>
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	9009      	str	r0, [sp, #36]	; 0x24
 8005ba2:	4658      	mov	r0, fp
 8005ba4:	f000 fb08 	bl	80061b8 <__mcmp>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bac:	4611      	mov	r1, r2
 8005bae:	4620      	mov	r0, r4
 8005bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb2:	f000 f921 	bl	8005df8 <_Bfree>
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	b9a3      	cbnz	r3, 8005be4 <_dtoa_r+0xa04>
 8005bba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005bbc:	b992      	cbnz	r2, 8005be4 <_dtoa_r+0xa04>
 8005bbe:	9a08      	ldr	r2, [sp, #32]
 8005bc0:	b982      	cbnz	r2, 8005be4 <_dtoa_r+0xa04>
 8005bc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bc6:	d029      	beq.n	8005c1c <_dtoa_r+0xa3c>
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dd01      	ble.n	8005bd2 <_dtoa_r+0x9f2>
 8005bce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005bd2:	9b07      	ldr	r3, [sp, #28]
 8005bd4:	1c5d      	adds	r5, r3, #1
 8005bd6:	f883 8000 	strb.w	r8, [r3]
 8005bda:	e784      	b.n	8005ae6 <_dtoa_r+0x906>
 8005bdc:	4638      	mov	r0, r7
 8005bde:	e7c2      	b.n	8005b66 <_dtoa_r+0x986>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e7e3      	b.n	8005bac <_dtoa_r+0x9cc>
 8005be4:	9a02      	ldr	r2, [sp, #8]
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	db04      	blt.n	8005bf4 <_dtoa_r+0xa14>
 8005bea:	d123      	bne.n	8005c34 <_dtoa_r+0xa54>
 8005bec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005bee:	bb0a      	cbnz	r2, 8005c34 <_dtoa_r+0xa54>
 8005bf0:	9a08      	ldr	r2, [sp, #32]
 8005bf2:	b9fa      	cbnz	r2, 8005c34 <_dtoa_r+0xa54>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	ddec      	ble.n	8005bd2 <_dtoa_r+0x9f2>
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fa87 	bl	8006110 <__lshift>
 8005c02:	4631      	mov	r1, r6
 8005c04:	4683      	mov	fp, r0
 8005c06:	f000 fad7 	bl	80061b8 <__mcmp>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	dc03      	bgt.n	8005c16 <_dtoa_r+0xa36>
 8005c0e:	d1e0      	bne.n	8005bd2 <_dtoa_r+0x9f2>
 8005c10:	f018 0f01 	tst.w	r8, #1
 8005c14:	d0dd      	beq.n	8005bd2 <_dtoa_r+0x9f2>
 8005c16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c1a:	d1d8      	bne.n	8005bce <_dtoa_r+0x9ee>
 8005c1c:	9b07      	ldr	r3, [sp, #28]
 8005c1e:	9a07      	ldr	r2, [sp, #28]
 8005c20:	1c5d      	adds	r5, r3, #1
 8005c22:	2339      	movs	r3, #57	; 0x39
 8005c24:	7013      	strb	r3, [r2, #0]
 8005c26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c2a:	1e6a      	subs	r2, r5, #1
 8005c2c:	2b39      	cmp	r3, #57	; 0x39
 8005c2e:	d04d      	beq.n	8005ccc <_dtoa_r+0xaec>
 8005c30:	3301      	adds	r3, #1
 8005c32:	e052      	b.n	8005cda <_dtoa_r+0xafa>
 8005c34:	9a07      	ldr	r2, [sp, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f102 0501 	add.w	r5, r2, #1
 8005c3c:	dd06      	ble.n	8005c4c <_dtoa_r+0xa6c>
 8005c3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c42:	d0eb      	beq.n	8005c1c <_dtoa_r+0xa3c>
 8005c44:	f108 0801 	add.w	r8, r8, #1
 8005c48:	9b07      	ldr	r3, [sp, #28]
 8005c4a:	e7c4      	b.n	8005bd6 <_dtoa_r+0x9f6>
 8005c4c:	9b06      	ldr	r3, [sp, #24]
 8005c4e:	9a04      	ldr	r2, [sp, #16]
 8005c50:	1aeb      	subs	r3, r5, r3
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c58:	d021      	beq.n	8005c9e <_dtoa_r+0xabe>
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	220a      	movs	r2, #10
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f8e0 	bl	8005e26 <__multadd>
 8005c66:	45b9      	cmp	r9, r7
 8005c68:	4683      	mov	fp, r0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	f04f 020a 	mov.w	r2, #10
 8005c72:	4649      	mov	r1, r9
 8005c74:	4620      	mov	r0, r4
 8005c76:	d105      	bne.n	8005c84 <_dtoa_r+0xaa4>
 8005c78:	f000 f8d5 	bl	8005e26 <__multadd>
 8005c7c:	4681      	mov	r9, r0
 8005c7e:	4607      	mov	r7, r0
 8005c80:	9507      	str	r5, [sp, #28]
 8005c82:	e778      	b.n	8005b76 <_dtoa_r+0x996>
 8005c84:	f000 f8cf 	bl	8005e26 <__multadd>
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4681      	mov	r9, r0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	220a      	movs	r2, #10
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 f8c8 	bl	8005e26 <__multadd>
 8005c96:	4607      	mov	r7, r0
 8005c98:	e7f2      	b.n	8005c80 <_dtoa_r+0xaa0>
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 fa34 	bl	8006110 <__lshift>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4683      	mov	fp, r0
 8005cac:	f000 fa84 	bl	80061b8 <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dcb8      	bgt.n	8005c26 <_dtoa_r+0xa46>
 8005cb4:	d102      	bne.n	8005cbc <_dtoa_r+0xadc>
 8005cb6:	f018 0f01 	tst.w	r8, #1
 8005cba:	d1b4      	bne.n	8005c26 <_dtoa_r+0xa46>
 8005cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cc0:	1e6a      	subs	r2, r5, #1
 8005cc2:	2b30      	cmp	r3, #48	; 0x30
 8005cc4:	f47f af0f 	bne.w	8005ae6 <_dtoa_r+0x906>
 8005cc8:	4615      	mov	r5, r2
 8005cca:	e7f7      	b.n	8005cbc <_dtoa_r+0xadc>
 8005ccc:	9b06      	ldr	r3, [sp, #24]
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d105      	bne.n	8005cde <_dtoa_r+0xafe>
 8005cd2:	2331      	movs	r3, #49	; 0x31
 8005cd4:	9a06      	ldr	r2, [sp, #24]
 8005cd6:	f10a 0a01 	add.w	sl, sl, #1
 8005cda:	7013      	strb	r3, [r2, #0]
 8005cdc:	e703      	b.n	8005ae6 <_dtoa_r+0x906>
 8005cde:	4615      	mov	r5, r2
 8005ce0:	e7a1      	b.n	8005c26 <_dtoa_r+0xa46>
 8005ce2:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <_dtoa_r+0xb60>)
 8005ce4:	f7ff bae1 	b.w	80052aa <_dtoa_r+0xca>
 8005ce8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f47f aabb 	bne.w	8005266 <_dtoa_r+0x86>
 8005cf0:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <_dtoa_r+0xb64>)
 8005cf2:	f7ff bada 	b.w	80052aa <_dtoa_r+0xca>
 8005cf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	f77f ae3f 	ble.w	800597c <_dtoa_r+0x79c>
 8005cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d00:	9308      	str	r3, [sp, #32]
 8005d02:	e653      	b.n	80059ac <_dtoa_r+0x7cc>
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dc03      	bgt.n	8005d12 <_dtoa_r+0xb32>
 8005d0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	f73f aed5 	bgt.w	8005abc <_dtoa_r+0x8dc>
 8005d12:	9d06      	ldr	r5, [sp, #24]
 8005d14:	4631      	mov	r1, r6
 8005d16:	4658      	mov	r0, fp
 8005d18:	f7ff f9d4 	bl	80050c4 <quorem>
 8005d1c:	9b06      	ldr	r3, [sp, #24]
 8005d1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d22:	f805 8b01 	strb.w	r8, [r5], #1
 8005d26:	9a04      	ldr	r2, [sp, #16]
 8005d28:	1aeb      	subs	r3, r5, r3
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	ddb5      	ble.n	8005c9a <_dtoa_r+0xaba>
 8005d2e:	4659      	mov	r1, fp
 8005d30:	2300      	movs	r3, #0
 8005d32:	220a      	movs	r2, #10
 8005d34:	4620      	mov	r0, r4
 8005d36:	f000 f876 	bl	8005e26 <__multadd>
 8005d3a:	4683      	mov	fp, r0
 8005d3c:	e7ea      	b.n	8005d14 <_dtoa_r+0xb34>
 8005d3e:	bf00      	nop
 8005d40:	080075d4 	.word	0x080075d4
 8005d44:	080075f8 	.word	0x080075f8

08005d48 <_localeconv_r>:
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <_localeconv_r+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a18      	ldr	r0, [r3, #32]
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <_localeconv_r+0x18>)
 8005d50:	2800      	cmp	r0, #0
 8005d52:	bf08      	it	eq
 8005d54:	4618      	moveq	r0, r3
 8005d56:	30f0      	adds	r0, #240	; 0xf0
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20000024 	.word	0x20000024
 8005d60:	20000088 	.word	0x20000088

08005d64 <malloc>:
 8005d64:	4b02      	ldr	r3, [pc, #8]	; (8005d70 <malloc+0xc>)
 8005d66:	4601      	mov	r1, r0
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f000 bb47 	b.w	80063fc <_malloc_r>
 8005d6e:	bf00      	nop
 8005d70:	20000024 	.word	0x20000024

08005d74 <memchr>:
 8005d74:	b510      	push	{r4, lr}
 8005d76:	b2c9      	uxtb	r1, r1
 8005d78:	4402      	add	r2, r0
 8005d7a:	4290      	cmp	r0, r2
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	d101      	bne.n	8005d84 <memchr+0x10>
 8005d80:	2300      	movs	r3, #0
 8005d82:	e003      	b.n	8005d8c <memchr+0x18>
 8005d84:	781c      	ldrb	r4, [r3, #0]
 8005d86:	3001      	adds	r0, #1
 8005d88:	428c      	cmp	r4, r1
 8005d8a:	d1f6      	bne.n	8005d7a <memchr+0x6>
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd10      	pop	{r4, pc}

08005d90 <_Balloc>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d94:	4604      	mov	r4, r0
 8005d96:	460e      	mov	r6, r1
 8005d98:	b93d      	cbnz	r5, 8005daa <_Balloc+0x1a>
 8005d9a:	2010      	movs	r0, #16
 8005d9c:	f7ff ffe2 	bl	8005d64 <malloc>
 8005da0:	6260      	str	r0, [r4, #36]	; 0x24
 8005da2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005da6:	6005      	str	r5, [r0, #0]
 8005da8:	60c5      	str	r5, [r0, #12]
 8005daa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005dac:	68eb      	ldr	r3, [r5, #12]
 8005dae:	b183      	cbz	r3, 8005dd2 <_Balloc+0x42>
 8005db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005db8:	b9b8      	cbnz	r0, 8005dea <_Balloc+0x5a>
 8005dba:	2101      	movs	r1, #1
 8005dbc:	fa01 f506 	lsl.w	r5, r1, r6
 8005dc0:	1d6a      	adds	r2, r5, #5
 8005dc2:	0092      	lsls	r2, r2, #2
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 fabe 	bl	8006346 <_calloc_r>
 8005dca:	b160      	cbz	r0, 8005de6 <_Balloc+0x56>
 8005dcc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005dd0:	e00e      	b.n	8005df0 <_Balloc+0x60>
 8005dd2:	2221      	movs	r2, #33	; 0x21
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 fab5 	bl	8006346 <_calloc_r>
 8005ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dde:	60e8      	str	r0, [r5, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e4      	bne.n	8005db0 <_Balloc+0x20>
 8005de6:	2000      	movs	r0, #0
 8005de8:	bd70      	pop	{r4, r5, r6, pc}
 8005dea:	6802      	ldr	r2, [r0, #0]
 8005dec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005df0:	2300      	movs	r3, #0
 8005df2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005df6:	e7f7      	b.n	8005de8 <_Balloc+0x58>

08005df8 <_Bfree>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	b93c      	cbnz	r4, 8005e12 <_Bfree+0x1a>
 8005e02:	2010      	movs	r0, #16
 8005e04:	f7ff ffae 	bl	8005d64 <malloc>
 8005e08:	6270      	str	r0, [r6, #36]	; 0x24
 8005e0a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e0e:	6004      	str	r4, [r0, #0]
 8005e10:	60c4      	str	r4, [r0, #12]
 8005e12:	b13d      	cbz	r5, 8005e24 <_Bfree+0x2c>
 8005e14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e16:	686a      	ldr	r2, [r5, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e1e:	6029      	str	r1, [r5, #0]
 8005e20:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e24:	bd70      	pop	{r4, r5, r6, pc}

08005e26 <__multadd>:
 8005e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	461f      	mov	r7, r3
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	2300      	movs	r3, #0
 8005e32:	690d      	ldr	r5, [r1, #16]
 8005e34:	f101 0c14 	add.w	ip, r1, #20
 8005e38:	f8dc 0000 	ldr.w	r0, [ip]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	b281      	uxth	r1, r0
 8005e40:	fb02 7101 	mla	r1, r2, r1, r7
 8005e44:	0c00      	lsrs	r0, r0, #16
 8005e46:	0c0f      	lsrs	r7, r1, #16
 8005e48:	fb02 7000 	mla	r0, r2, r0, r7
 8005e4c:	b289      	uxth	r1, r1
 8005e4e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e52:	429d      	cmp	r5, r3
 8005e54:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e58:	f84c 1b04 	str.w	r1, [ip], #4
 8005e5c:	dcec      	bgt.n	8005e38 <__multadd+0x12>
 8005e5e:	b1d7      	cbz	r7, 8005e96 <__multadd+0x70>
 8005e60:	68a3      	ldr	r3, [r4, #8]
 8005e62:	42ab      	cmp	r3, r5
 8005e64:	dc12      	bgt.n	8005e8c <__multadd+0x66>
 8005e66:	6861      	ldr	r1, [r4, #4]
 8005e68:	4630      	mov	r0, r6
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	f7ff ff90 	bl	8005d90 <_Balloc>
 8005e70:	4680      	mov	r8, r0
 8005e72:	6922      	ldr	r2, [r4, #16]
 8005e74:	f104 010c 	add.w	r1, r4, #12
 8005e78:	3202      	adds	r2, #2
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	300c      	adds	r0, #12
 8005e7e:	f7fe fc9f 	bl	80047c0 <memcpy>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4630      	mov	r0, r6
 8005e86:	f7ff ffb7 	bl	8005df8 <_Bfree>
 8005e8a:	4644      	mov	r4, r8
 8005e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e90:	3501      	adds	r5, #1
 8005e92:	615f      	str	r7, [r3, #20]
 8005e94:	6125      	str	r5, [r4, #16]
 8005e96:	4620      	mov	r0, r4
 8005e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e9c <__hi0bits>:
 8005e9c:	0c02      	lsrs	r2, r0, #16
 8005e9e:	0412      	lsls	r2, r2, #16
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	b9b2      	cbnz	r2, 8005ed2 <__hi0bits+0x36>
 8005ea4:	0403      	lsls	r3, r0, #16
 8005ea6:	2010      	movs	r0, #16
 8005ea8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005eac:	bf04      	itt	eq
 8005eae:	021b      	lsleq	r3, r3, #8
 8005eb0:	3008      	addeq	r0, #8
 8005eb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005eb6:	bf04      	itt	eq
 8005eb8:	011b      	lsleq	r3, r3, #4
 8005eba:	3004      	addeq	r0, #4
 8005ebc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ec0:	bf04      	itt	eq
 8005ec2:	009b      	lsleq	r3, r3, #2
 8005ec4:	3002      	addeq	r0, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db06      	blt.n	8005ed8 <__hi0bits+0x3c>
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	d503      	bpl.n	8005ed6 <__hi0bits+0x3a>
 8005ece:	3001      	adds	r0, #1
 8005ed0:	4770      	bx	lr
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e7e8      	b.n	8005ea8 <__hi0bits+0xc>
 8005ed6:	2020      	movs	r0, #32
 8005ed8:	4770      	bx	lr

08005eda <__lo0bits>:
 8005eda:	6803      	ldr	r3, [r0, #0]
 8005edc:	4601      	mov	r1, r0
 8005ede:	f013 0207 	ands.w	r2, r3, #7
 8005ee2:	d00b      	beq.n	8005efc <__lo0bits+0x22>
 8005ee4:	07da      	lsls	r2, r3, #31
 8005ee6:	d423      	bmi.n	8005f30 <__lo0bits+0x56>
 8005ee8:	0798      	lsls	r0, r3, #30
 8005eea:	bf49      	itett	mi
 8005eec:	085b      	lsrmi	r3, r3, #1
 8005eee:	089b      	lsrpl	r3, r3, #2
 8005ef0:	2001      	movmi	r0, #1
 8005ef2:	600b      	strmi	r3, [r1, #0]
 8005ef4:	bf5c      	itt	pl
 8005ef6:	600b      	strpl	r3, [r1, #0]
 8005ef8:	2002      	movpl	r0, #2
 8005efa:	4770      	bx	lr
 8005efc:	b298      	uxth	r0, r3
 8005efe:	b9a8      	cbnz	r0, 8005f2c <__lo0bits+0x52>
 8005f00:	2010      	movs	r0, #16
 8005f02:	0c1b      	lsrs	r3, r3, #16
 8005f04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f08:	bf04      	itt	eq
 8005f0a:	0a1b      	lsreq	r3, r3, #8
 8005f0c:	3008      	addeq	r0, #8
 8005f0e:	071a      	lsls	r2, r3, #28
 8005f10:	bf04      	itt	eq
 8005f12:	091b      	lsreq	r3, r3, #4
 8005f14:	3004      	addeq	r0, #4
 8005f16:	079a      	lsls	r2, r3, #30
 8005f18:	bf04      	itt	eq
 8005f1a:	089b      	lsreq	r3, r3, #2
 8005f1c:	3002      	addeq	r0, #2
 8005f1e:	07da      	lsls	r2, r3, #31
 8005f20:	d402      	bmi.n	8005f28 <__lo0bits+0x4e>
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	d006      	beq.n	8005f34 <__lo0bits+0x5a>
 8005f26:	3001      	adds	r0, #1
 8005f28:	600b      	str	r3, [r1, #0]
 8005f2a:	4770      	bx	lr
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	e7e9      	b.n	8005f04 <__lo0bits+0x2a>
 8005f30:	2000      	movs	r0, #0
 8005f32:	4770      	bx	lr
 8005f34:	2020      	movs	r0, #32
 8005f36:	4770      	bx	lr

08005f38 <__i2b>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	f7ff ff27 	bl	8005d90 <_Balloc>
 8005f42:	2201      	movs	r2, #1
 8005f44:	6144      	str	r4, [r0, #20]
 8005f46:	6102      	str	r2, [r0, #16]
 8005f48:	bd10      	pop	{r4, pc}

08005f4a <__multiply>:
 8005f4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4e:	4614      	mov	r4, r2
 8005f50:	690a      	ldr	r2, [r1, #16]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	4688      	mov	r8, r1
 8005f56:	429a      	cmp	r2, r3
 8005f58:	bfbe      	ittt	lt
 8005f5a:	460b      	movlt	r3, r1
 8005f5c:	46a0      	movlt	r8, r4
 8005f5e:	461c      	movlt	r4, r3
 8005f60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f70:	eb07 0609 	add.w	r6, r7, r9
 8005f74:	42b3      	cmp	r3, r6
 8005f76:	bfb8      	it	lt
 8005f78:	3101      	addlt	r1, #1
 8005f7a:	f7ff ff09 	bl	8005d90 <_Balloc>
 8005f7e:	f100 0514 	add.w	r5, r0, #20
 8005f82:	462b      	mov	r3, r5
 8005f84:	2200      	movs	r2, #0
 8005f86:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f8a:	4573      	cmp	r3, lr
 8005f8c:	d316      	bcc.n	8005fbc <__multiply+0x72>
 8005f8e:	f104 0214 	add.w	r2, r4, #20
 8005f92:	f108 0114 	add.w	r1, r8, #20
 8005f96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	9b00      	ldr	r3, [sp, #0]
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d80c      	bhi.n	8005fc2 <__multiply+0x78>
 8005fa8:	2e00      	cmp	r6, #0
 8005faa:	dd03      	ble.n	8005fb4 <__multiply+0x6a>
 8005fac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d05d      	beq.n	8006070 <__multiply+0x126>
 8005fb4:	6106      	str	r6, [r0, #16]
 8005fb6:	b003      	add	sp, #12
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	f843 2b04 	str.w	r2, [r3], #4
 8005fc0:	e7e3      	b.n	8005f8a <__multiply+0x40>
 8005fc2:	f8b2 b000 	ldrh.w	fp, [r2]
 8005fc6:	f1bb 0f00 	cmp.w	fp, #0
 8005fca:	d023      	beq.n	8006014 <__multiply+0xca>
 8005fcc:	4689      	mov	r9, r1
 8005fce:	46ac      	mov	ip, r5
 8005fd0:	f04f 0800 	mov.w	r8, #0
 8005fd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005fd8:	f8dc a000 	ldr.w	sl, [ip]
 8005fdc:	b2a3      	uxth	r3, r4
 8005fde:	fa1f fa8a 	uxth.w	sl, sl
 8005fe2:	fb0b a303 	mla	r3, fp, r3, sl
 8005fe6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005fea:	f8dc 4000 	ldr.w	r4, [ip]
 8005fee:	4443      	add	r3, r8
 8005ff0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ff4:	fb0b 840a 	mla	r4, fp, sl, r8
 8005ff8:	46e2      	mov	sl, ip
 8005ffa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006004:	454f      	cmp	r7, r9
 8006006:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800600a:	f84a 3b04 	str.w	r3, [sl], #4
 800600e:	d82b      	bhi.n	8006068 <__multiply+0x11e>
 8006010:	f8cc 8004 	str.w	r8, [ip, #4]
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	3204      	adds	r2, #4
 8006018:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800601c:	f1ba 0f00 	cmp.w	sl, #0
 8006020:	d020      	beq.n	8006064 <__multiply+0x11a>
 8006022:	4689      	mov	r9, r1
 8006024:	46a8      	mov	r8, r5
 8006026:	f04f 0b00 	mov.w	fp, #0
 800602a:	682b      	ldr	r3, [r5, #0]
 800602c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006030:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006034:	b29b      	uxth	r3, r3
 8006036:	fb0a 440c 	mla	r4, sl, ip, r4
 800603a:	46c4      	mov	ip, r8
 800603c:	445c      	add	r4, fp
 800603e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006042:	f84c 3b04 	str.w	r3, [ip], #4
 8006046:	f859 3b04 	ldr.w	r3, [r9], #4
 800604a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	fb0a b303 	mla	r3, sl, r3, fp
 8006054:	454f      	cmp	r7, r9
 8006056:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800605a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800605e:	d805      	bhi.n	800606c <__multiply+0x122>
 8006060:	f8c8 3004 	str.w	r3, [r8, #4]
 8006064:	3504      	adds	r5, #4
 8006066:	e79b      	b.n	8005fa0 <__multiply+0x56>
 8006068:	46d4      	mov	ip, sl
 800606a:	e7b3      	b.n	8005fd4 <__multiply+0x8a>
 800606c:	46e0      	mov	r8, ip
 800606e:	e7dd      	b.n	800602c <__multiply+0xe2>
 8006070:	3e01      	subs	r6, #1
 8006072:	e799      	b.n	8005fa8 <__multiply+0x5e>

08006074 <__pow5mult>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	4615      	mov	r5, r2
 800607a:	f012 0203 	ands.w	r2, r2, #3
 800607e:	4606      	mov	r6, r0
 8006080:	460f      	mov	r7, r1
 8006082:	d007      	beq.n	8006094 <__pow5mult+0x20>
 8006084:	4c21      	ldr	r4, [pc, #132]	; (800610c <__pow5mult+0x98>)
 8006086:	3a01      	subs	r2, #1
 8006088:	2300      	movs	r3, #0
 800608a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800608e:	f7ff feca 	bl	8005e26 <__multadd>
 8006092:	4607      	mov	r7, r0
 8006094:	10ad      	asrs	r5, r5, #2
 8006096:	d035      	beq.n	8006104 <__pow5mult+0x90>
 8006098:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800609a:	b93c      	cbnz	r4, 80060ac <__pow5mult+0x38>
 800609c:	2010      	movs	r0, #16
 800609e:	f7ff fe61 	bl	8005d64 <malloc>
 80060a2:	6270      	str	r0, [r6, #36]	; 0x24
 80060a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060a8:	6004      	str	r4, [r0, #0]
 80060aa:	60c4      	str	r4, [r0, #12]
 80060ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060b4:	b94c      	cbnz	r4, 80060ca <__pow5mult+0x56>
 80060b6:	f240 2171 	movw	r1, #625	; 0x271
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ff3c 	bl	8005f38 <__i2b>
 80060c0:	2300      	movs	r3, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80060c8:	6003      	str	r3, [r0, #0]
 80060ca:	f04f 0800 	mov.w	r8, #0
 80060ce:	07eb      	lsls	r3, r5, #31
 80060d0:	d50a      	bpl.n	80060e8 <__pow5mult+0x74>
 80060d2:	4639      	mov	r1, r7
 80060d4:	4622      	mov	r2, r4
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ff37 	bl	8005f4a <__multiply>
 80060dc:	4681      	mov	r9, r0
 80060de:	4639      	mov	r1, r7
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff fe89 	bl	8005df8 <_Bfree>
 80060e6:	464f      	mov	r7, r9
 80060e8:	106d      	asrs	r5, r5, #1
 80060ea:	d00b      	beq.n	8006104 <__pow5mult+0x90>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	b938      	cbnz	r0, 8006100 <__pow5mult+0x8c>
 80060f0:	4622      	mov	r2, r4
 80060f2:	4621      	mov	r1, r4
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff ff28 	bl	8005f4a <__multiply>
 80060fa:	6020      	str	r0, [r4, #0]
 80060fc:	f8c0 8000 	str.w	r8, [r0]
 8006100:	4604      	mov	r4, r0
 8006102:	e7e4      	b.n	80060ce <__pow5mult+0x5a>
 8006104:	4638      	mov	r0, r7
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610a:	bf00      	nop
 800610c:	080076f8 	.word	0x080076f8

08006110 <__lshift>:
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	460c      	mov	r4, r1
 8006116:	4607      	mov	r7, r0
 8006118:	4616      	mov	r6, r2
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006120:	eb0a 0903 	add.w	r9, sl, r3
 8006124:	6849      	ldr	r1, [r1, #4]
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	f109 0501 	add.w	r5, r9, #1
 800612c:	42ab      	cmp	r3, r5
 800612e:	db32      	blt.n	8006196 <__lshift+0x86>
 8006130:	4638      	mov	r0, r7
 8006132:	f7ff fe2d 	bl	8005d90 <_Balloc>
 8006136:	2300      	movs	r3, #0
 8006138:	4680      	mov	r8, r0
 800613a:	461a      	mov	r2, r3
 800613c:	f100 0114 	add.w	r1, r0, #20
 8006140:	4553      	cmp	r3, sl
 8006142:	db2b      	blt.n	800619c <__lshift+0x8c>
 8006144:	6920      	ldr	r0, [r4, #16]
 8006146:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800614a:	f104 0314 	add.w	r3, r4, #20
 800614e:	f016 021f 	ands.w	r2, r6, #31
 8006152:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006156:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800615a:	d025      	beq.n	80061a8 <__lshift+0x98>
 800615c:	2000      	movs	r0, #0
 800615e:	f1c2 0e20 	rsb	lr, r2, #32
 8006162:	468a      	mov	sl, r1
 8006164:	681e      	ldr	r6, [r3, #0]
 8006166:	4096      	lsls	r6, r2
 8006168:	4330      	orrs	r0, r6
 800616a:	f84a 0b04 	str.w	r0, [sl], #4
 800616e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006172:	459c      	cmp	ip, r3
 8006174:	fa20 f00e 	lsr.w	r0, r0, lr
 8006178:	d814      	bhi.n	80061a4 <__lshift+0x94>
 800617a:	6048      	str	r0, [r1, #4]
 800617c:	b108      	cbz	r0, 8006182 <__lshift+0x72>
 800617e:	f109 0502 	add.w	r5, r9, #2
 8006182:	3d01      	subs	r5, #1
 8006184:	4638      	mov	r0, r7
 8006186:	f8c8 5010 	str.w	r5, [r8, #16]
 800618a:	4621      	mov	r1, r4
 800618c:	f7ff fe34 	bl	8005df8 <_Bfree>
 8006190:	4640      	mov	r0, r8
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	3101      	adds	r1, #1
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	e7c7      	b.n	800612c <__lshift+0x1c>
 800619c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061a0:	3301      	adds	r3, #1
 80061a2:	e7cd      	b.n	8006140 <__lshift+0x30>
 80061a4:	4651      	mov	r1, sl
 80061a6:	e7dc      	b.n	8006162 <__lshift+0x52>
 80061a8:	3904      	subs	r1, #4
 80061aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ae:	459c      	cmp	ip, r3
 80061b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80061b4:	d8f9      	bhi.n	80061aa <__lshift+0x9a>
 80061b6:	e7e4      	b.n	8006182 <__lshift+0x72>

080061b8 <__mcmp>:
 80061b8:	6903      	ldr	r3, [r0, #16]
 80061ba:	690a      	ldr	r2, [r1, #16]
 80061bc:	b530      	push	{r4, r5, lr}
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	d10c      	bne.n	80061dc <__mcmp+0x24>
 80061c2:	0092      	lsls	r2, r2, #2
 80061c4:	3014      	adds	r0, #20
 80061c6:	3114      	adds	r1, #20
 80061c8:	1884      	adds	r4, r0, r2
 80061ca:	4411      	add	r1, r2
 80061cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061d4:	4295      	cmp	r5, r2
 80061d6:	d003      	beq.n	80061e0 <__mcmp+0x28>
 80061d8:	d305      	bcc.n	80061e6 <__mcmp+0x2e>
 80061da:	2301      	movs	r3, #1
 80061dc:	4618      	mov	r0, r3
 80061de:	bd30      	pop	{r4, r5, pc}
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d3f3      	bcc.n	80061cc <__mcmp+0x14>
 80061e4:	e7fa      	b.n	80061dc <__mcmp+0x24>
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	e7f7      	b.n	80061dc <__mcmp+0x24>

080061ec <__mdiff>:
 80061ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	460d      	mov	r5, r1
 80061f2:	4607      	mov	r7, r0
 80061f4:	4611      	mov	r1, r2
 80061f6:	4628      	mov	r0, r5
 80061f8:	4614      	mov	r4, r2
 80061fa:	f7ff ffdd 	bl	80061b8 <__mcmp>
 80061fe:	1e06      	subs	r6, r0, #0
 8006200:	d108      	bne.n	8006214 <__mdiff+0x28>
 8006202:	4631      	mov	r1, r6
 8006204:	4638      	mov	r0, r7
 8006206:	f7ff fdc3 	bl	8005d90 <_Balloc>
 800620a:	2301      	movs	r3, #1
 800620c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006214:	bfa4      	itt	ge
 8006216:	4623      	movge	r3, r4
 8006218:	462c      	movge	r4, r5
 800621a:	4638      	mov	r0, r7
 800621c:	6861      	ldr	r1, [r4, #4]
 800621e:	bfa6      	itte	ge
 8006220:	461d      	movge	r5, r3
 8006222:	2600      	movge	r6, #0
 8006224:	2601      	movlt	r6, #1
 8006226:	f7ff fdb3 	bl	8005d90 <_Balloc>
 800622a:	f04f 0e00 	mov.w	lr, #0
 800622e:	60c6      	str	r6, [r0, #12]
 8006230:	692b      	ldr	r3, [r5, #16]
 8006232:	6926      	ldr	r6, [r4, #16]
 8006234:	f104 0214 	add.w	r2, r4, #20
 8006238:	f105 0914 	add.w	r9, r5, #20
 800623c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006240:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006244:	f100 0114 	add.w	r1, r0, #20
 8006248:	f852 ab04 	ldr.w	sl, [r2], #4
 800624c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006250:	fa1f f38a 	uxth.w	r3, sl
 8006254:	4473      	add	r3, lr
 8006256:	b2ac      	uxth	r4, r5
 8006258:	1b1b      	subs	r3, r3, r4
 800625a:	0c2c      	lsrs	r4, r5, #16
 800625c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006260:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006264:	b29b      	uxth	r3, r3
 8006266:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800626a:	45c8      	cmp	r8, r9
 800626c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006270:	4694      	mov	ip, r2
 8006272:	f841 4b04 	str.w	r4, [r1], #4
 8006276:	d8e7      	bhi.n	8006248 <__mdiff+0x5c>
 8006278:	45bc      	cmp	ip, r7
 800627a:	d304      	bcc.n	8006286 <__mdiff+0x9a>
 800627c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006280:	b183      	cbz	r3, 80062a4 <__mdiff+0xb8>
 8006282:	6106      	str	r6, [r0, #16]
 8006284:	e7c4      	b.n	8006210 <__mdiff+0x24>
 8006286:	f85c 4b04 	ldr.w	r4, [ip], #4
 800628a:	b2a2      	uxth	r2, r4
 800628c:	4472      	add	r2, lr
 800628e:	1413      	asrs	r3, r2, #16
 8006290:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006294:	b292      	uxth	r2, r2
 8006296:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800629a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800629e:	f841 2b04 	str.w	r2, [r1], #4
 80062a2:	e7e9      	b.n	8006278 <__mdiff+0x8c>
 80062a4:	3e01      	subs	r6, #1
 80062a6:	e7e9      	b.n	800627c <__mdiff+0x90>

080062a8 <__d2b>:
 80062a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062ac:	461c      	mov	r4, r3
 80062ae:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80062b2:	2101      	movs	r1, #1
 80062b4:	4690      	mov	r8, r2
 80062b6:	f7ff fd6b 	bl	8005d90 <_Balloc>
 80062ba:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80062be:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80062c2:	4607      	mov	r7, r0
 80062c4:	bb34      	cbnz	r4, 8006314 <__d2b+0x6c>
 80062c6:	9201      	str	r2, [sp, #4]
 80062c8:	f1b8 0200 	subs.w	r2, r8, #0
 80062cc:	d027      	beq.n	800631e <__d2b+0x76>
 80062ce:	a802      	add	r0, sp, #8
 80062d0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80062d4:	f7ff fe01 	bl	8005eda <__lo0bits>
 80062d8:	9900      	ldr	r1, [sp, #0]
 80062da:	b1f0      	cbz	r0, 800631a <__d2b+0x72>
 80062dc:	9a01      	ldr	r2, [sp, #4]
 80062de:	f1c0 0320 	rsb	r3, r0, #32
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	430b      	orrs	r3, r1
 80062e8:	40c2      	lsrs	r2, r0
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	9201      	str	r2, [sp, #4]
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2102      	movne	r1, #2
 80062f6:	2101      	moveq	r1, #1
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	6139      	str	r1, [r7, #16]
 80062fc:	b1c4      	cbz	r4, 8006330 <__d2b+0x88>
 80062fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006302:	4404      	add	r4, r0
 8006304:	6034      	str	r4, [r6, #0]
 8006306:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800630a:	6028      	str	r0, [r5, #0]
 800630c:	4638      	mov	r0, r7
 800630e:	b002      	add	sp, #8
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006318:	e7d5      	b.n	80062c6 <__d2b+0x1e>
 800631a:	6179      	str	r1, [r7, #20]
 800631c:	e7e7      	b.n	80062ee <__d2b+0x46>
 800631e:	a801      	add	r0, sp, #4
 8006320:	f7ff fddb 	bl	8005eda <__lo0bits>
 8006324:	2101      	movs	r1, #1
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	6139      	str	r1, [r7, #16]
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	3020      	adds	r0, #32
 800632e:	e7e5      	b.n	80062fc <__d2b+0x54>
 8006330:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006334:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	6918      	ldr	r0, [r3, #16]
 800633c:	f7ff fdae 	bl	8005e9c <__hi0bits>
 8006340:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006344:	e7e1      	b.n	800630a <__d2b+0x62>

08006346 <_calloc_r>:
 8006346:	b538      	push	{r3, r4, r5, lr}
 8006348:	fb02 f401 	mul.w	r4, r2, r1
 800634c:	4621      	mov	r1, r4
 800634e:	f000 f855 	bl	80063fc <_malloc_r>
 8006352:	4605      	mov	r5, r0
 8006354:	b118      	cbz	r0, 800635e <_calloc_r+0x18>
 8006356:	4622      	mov	r2, r4
 8006358:	2100      	movs	r1, #0
 800635a:	f7fe fa3c 	bl	80047d6 <memset>
 800635e:	4628      	mov	r0, r5
 8006360:	bd38      	pop	{r3, r4, r5, pc}
	...

08006364 <_free_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4605      	mov	r5, r0
 8006368:	2900      	cmp	r1, #0
 800636a:	d043      	beq.n	80063f4 <_free_r+0x90>
 800636c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006370:	1f0c      	subs	r4, r1, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	bfb8      	it	lt
 8006376:	18e4      	addlt	r4, r4, r3
 8006378:	f000 fa27 	bl	80067ca <__malloc_lock>
 800637c:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <_free_r+0x94>)
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	4610      	mov	r0, r2
 8006382:	b933      	cbnz	r3, 8006392 <_free_r+0x2e>
 8006384:	6063      	str	r3, [r4, #4]
 8006386:	6014      	str	r4, [r2, #0]
 8006388:	4628      	mov	r0, r5
 800638a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800638e:	f000 ba1d 	b.w	80067cc <__malloc_unlock>
 8006392:	42a3      	cmp	r3, r4
 8006394:	d90b      	bls.n	80063ae <_free_r+0x4a>
 8006396:	6821      	ldr	r1, [r4, #0]
 8006398:	1862      	adds	r2, r4, r1
 800639a:	4293      	cmp	r3, r2
 800639c:	bf01      	itttt	eq
 800639e:	681a      	ldreq	r2, [r3, #0]
 80063a0:	685b      	ldreq	r3, [r3, #4]
 80063a2:	1852      	addeq	r2, r2, r1
 80063a4:	6022      	streq	r2, [r4, #0]
 80063a6:	6063      	str	r3, [r4, #4]
 80063a8:	6004      	str	r4, [r0, #0]
 80063aa:	e7ed      	b.n	8006388 <_free_r+0x24>
 80063ac:	4613      	mov	r3, r2
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	b10a      	cbz	r2, 80063b6 <_free_r+0x52>
 80063b2:	42a2      	cmp	r2, r4
 80063b4:	d9fa      	bls.n	80063ac <_free_r+0x48>
 80063b6:	6819      	ldr	r1, [r3, #0]
 80063b8:	1858      	adds	r0, r3, r1
 80063ba:	42a0      	cmp	r0, r4
 80063bc:	d10b      	bne.n	80063d6 <_free_r+0x72>
 80063be:	6820      	ldr	r0, [r4, #0]
 80063c0:	4401      	add	r1, r0
 80063c2:	1858      	adds	r0, r3, r1
 80063c4:	4282      	cmp	r2, r0
 80063c6:	6019      	str	r1, [r3, #0]
 80063c8:	d1de      	bne.n	8006388 <_free_r+0x24>
 80063ca:	6810      	ldr	r0, [r2, #0]
 80063cc:	6852      	ldr	r2, [r2, #4]
 80063ce:	4401      	add	r1, r0
 80063d0:	6019      	str	r1, [r3, #0]
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	e7d8      	b.n	8006388 <_free_r+0x24>
 80063d6:	d902      	bls.n	80063de <_free_r+0x7a>
 80063d8:	230c      	movs	r3, #12
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	e7d4      	b.n	8006388 <_free_r+0x24>
 80063de:	6820      	ldr	r0, [r4, #0]
 80063e0:	1821      	adds	r1, r4, r0
 80063e2:	428a      	cmp	r2, r1
 80063e4:	bf01      	itttt	eq
 80063e6:	6811      	ldreq	r1, [r2, #0]
 80063e8:	6852      	ldreq	r2, [r2, #4]
 80063ea:	1809      	addeq	r1, r1, r0
 80063ec:	6021      	streq	r1, [r4, #0]
 80063ee:	6062      	str	r2, [r4, #4]
 80063f0:	605c      	str	r4, [r3, #4]
 80063f2:	e7c9      	b.n	8006388 <_free_r+0x24>
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	bf00      	nop
 80063f8:	20000220 	.word	0x20000220

080063fc <_malloc_r>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	1ccd      	adds	r5, r1, #3
 8006400:	f025 0503 	bic.w	r5, r5, #3
 8006404:	3508      	adds	r5, #8
 8006406:	2d0c      	cmp	r5, #12
 8006408:	bf38      	it	cc
 800640a:	250c      	movcc	r5, #12
 800640c:	2d00      	cmp	r5, #0
 800640e:	4606      	mov	r6, r0
 8006410:	db01      	blt.n	8006416 <_malloc_r+0x1a>
 8006412:	42a9      	cmp	r1, r5
 8006414:	d903      	bls.n	800641e <_malloc_r+0x22>
 8006416:	230c      	movs	r3, #12
 8006418:	6033      	str	r3, [r6, #0]
 800641a:	2000      	movs	r0, #0
 800641c:	bd70      	pop	{r4, r5, r6, pc}
 800641e:	f000 f9d4 	bl	80067ca <__malloc_lock>
 8006422:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <_malloc_r+0xac>)
 8006424:	6814      	ldr	r4, [r2, #0]
 8006426:	4621      	mov	r1, r4
 8006428:	b991      	cbnz	r1, 8006450 <_malloc_r+0x54>
 800642a:	4c20      	ldr	r4, [pc, #128]	; (80064ac <_malloc_r+0xb0>)
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	b91b      	cbnz	r3, 8006438 <_malloc_r+0x3c>
 8006430:	4630      	mov	r0, r6
 8006432:	f000 f98f 	bl	8006754 <_sbrk_r>
 8006436:	6020      	str	r0, [r4, #0]
 8006438:	4629      	mov	r1, r5
 800643a:	4630      	mov	r0, r6
 800643c:	f000 f98a 	bl	8006754 <_sbrk_r>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d124      	bne.n	800648e <_malloc_r+0x92>
 8006444:	230c      	movs	r3, #12
 8006446:	4630      	mov	r0, r6
 8006448:	6033      	str	r3, [r6, #0]
 800644a:	f000 f9bf 	bl	80067cc <__malloc_unlock>
 800644e:	e7e4      	b.n	800641a <_malloc_r+0x1e>
 8006450:	680b      	ldr	r3, [r1, #0]
 8006452:	1b5b      	subs	r3, r3, r5
 8006454:	d418      	bmi.n	8006488 <_malloc_r+0x8c>
 8006456:	2b0b      	cmp	r3, #11
 8006458:	d90f      	bls.n	800647a <_malloc_r+0x7e>
 800645a:	600b      	str	r3, [r1, #0]
 800645c:	18cc      	adds	r4, r1, r3
 800645e:	50cd      	str	r5, [r1, r3]
 8006460:	4630      	mov	r0, r6
 8006462:	f000 f9b3 	bl	80067cc <__malloc_unlock>
 8006466:	f104 000b 	add.w	r0, r4, #11
 800646a:	1d23      	adds	r3, r4, #4
 800646c:	f020 0007 	bic.w	r0, r0, #7
 8006470:	1ac3      	subs	r3, r0, r3
 8006472:	d0d3      	beq.n	800641c <_malloc_r+0x20>
 8006474:	425a      	negs	r2, r3
 8006476:	50e2      	str	r2, [r4, r3]
 8006478:	e7d0      	b.n	800641c <_malloc_r+0x20>
 800647a:	684b      	ldr	r3, [r1, #4]
 800647c:	428c      	cmp	r4, r1
 800647e:	bf16      	itet	ne
 8006480:	6063      	strne	r3, [r4, #4]
 8006482:	6013      	streq	r3, [r2, #0]
 8006484:	460c      	movne	r4, r1
 8006486:	e7eb      	b.n	8006460 <_malloc_r+0x64>
 8006488:	460c      	mov	r4, r1
 800648a:	6849      	ldr	r1, [r1, #4]
 800648c:	e7cc      	b.n	8006428 <_malloc_r+0x2c>
 800648e:	1cc4      	adds	r4, r0, #3
 8006490:	f024 0403 	bic.w	r4, r4, #3
 8006494:	42a0      	cmp	r0, r4
 8006496:	d005      	beq.n	80064a4 <_malloc_r+0xa8>
 8006498:	1a21      	subs	r1, r4, r0
 800649a:	4630      	mov	r0, r6
 800649c:	f000 f95a 	bl	8006754 <_sbrk_r>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d0cf      	beq.n	8006444 <_malloc_r+0x48>
 80064a4:	6025      	str	r5, [r4, #0]
 80064a6:	e7db      	b.n	8006460 <_malloc_r+0x64>
 80064a8:	20000220 	.word	0x20000220
 80064ac:	20000224 	.word	0x20000224

080064b0 <__ssputs_r>:
 80064b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	688e      	ldr	r6, [r1, #8]
 80064b6:	4682      	mov	sl, r0
 80064b8:	429e      	cmp	r6, r3
 80064ba:	460c      	mov	r4, r1
 80064bc:	4690      	mov	r8, r2
 80064be:	4699      	mov	r9, r3
 80064c0:	d837      	bhi.n	8006532 <__ssputs_r+0x82>
 80064c2:	898a      	ldrh	r2, [r1, #12]
 80064c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064c8:	d031      	beq.n	800652e <__ssputs_r+0x7e>
 80064ca:	2302      	movs	r3, #2
 80064cc:	6825      	ldr	r5, [r4, #0]
 80064ce:	6909      	ldr	r1, [r1, #16]
 80064d0:	1a6f      	subs	r7, r5, r1
 80064d2:	6965      	ldr	r5, [r4, #20]
 80064d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80064dc:	f109 0301 	add.w	r3, r9, #1
 80064e0:	443b      	add	r3, r7
 80064e2:	429d      	cmp	r5, r3
 80064e4:	bf38      	it	cc
 80064e6:	461d      	movcc	r5, r3
 80064e8:	0553      	lsls	r3, r2, #21
 80064ea:	d530      	bpl.n	800654e <__ssputs_r+0x9e>
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7ff ff85 	bl	80063fc <_malloc_r>
 80064f2:	4606      	mov	r6, r0
 80064f4:	b950      	cbnz	r0, 800650c <__ssputs_r+0x5c>
 80064f6:	230c      	movs	r3, #12
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	f8ca 3000 	str.w	r3, [sl]
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650c:	463a      	mov	r2, r7
 800650e:	6921      	ldr	r1, [r4, #16]
 8006510:	f7fe f956 	bl	80047c0 <memcpy>
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800651a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	6126      	str	r6, [r4, #16]
 8006522:	443e      	add	r6, r7
 8006524:	6026      	str	r6, [r4, #0]
 8006526:	464e      	mov	r6, r9
 8006528:	6165      	str	r5, [r4, #20]
 800652a:	1bed      	subs	r5, r5, r7
 800652c:	60a5      	str	r5, [r4, #8]
 800652e:	454e      	cmp	r6, r9
 8006530:	d900      	bls.n	8006534 <__ssputs_r+0x84>
 8006532:	464e      	mov	r6, r9
 8006534:	4632      	mov	r2, r6
 8006536:	4641      	mov	r1, r8
 8006538:	6820      	ldr	r0, [r4, #0]
 800653a:	f000 f92d 	bl	8006798 <memmove>
 800653e:	68a3      	ldr	r3, [r4, #8]
 8006540:	2000      	movs	r0, #0
 8006542:	1b9b      	subs	r3, r3, r6
 8006544:	60a3      	str	r3, [r4, #8]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	441e      	add	r6, r3
 800654a:	6026      	str	r6, [r4, #0]
 800654c:	e7dc      	b.n	8006508 <__ssputs_r+0x58>
 800654e:	462a      	mov	r2, r5
 8006550:	f000 f93d 	bl	80067ce <_realloc_r>
 8006554:	4606      	mov	r6, r0
 8006556:	2800      	cmp	r0, #0
 8006558:	d1e2      	bne.n	8006520 <__ssputs_r+0x70>
 800655a:	6921      	ldr	r1, [r4, #16]
 800655c:	4650      	mov	r0, sl
 800655e:	f7ff ff01 	bl	8006364 <_free_r>
 8006562:	e7c8      	b.n	80064f6 <__ssputs_r+0x46>

08006564 <_svfiprintf_r>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	461d      	mov	r5, r3
 800656a:	898b      	ldrh	r3, [r1, #12]
 800656c:	b09d      	sub	sp, #116	; 0x74
 800656e:	061f      	lsls	r7, r3, #24
 8006570:	4680      	mov	r8, r0
 8006572:	460c      	mov	r4, r1
 8006574:	4616      	mov	r6, r2
 8006576:	d50f      	bpl.n	8006598 <_svfiprintf_r+0x34>
 8006578:	690b      	ldr	r3, [r1, #16]
 800657a:	b96b      	cbnz	r3, 8006598 <_svfiprintf_r+0x34>
 800657c:	2140      	movs	r1, #64	; 0x40
 800657e:	f7ff ff3d 	bl	80063fc <_malloc_r>
 8006582:	6020      	str	r0, [r4, #0]
 8006584:	6120      	str	r0, [r4, #16]
 8006586:	b928      	cbnz	r0, 8006594 <_svfiprintf_r+0x30>
 8006588:	230c      	movs	r3, #12
 800658a:	f8c8 3000 	str.w	r3, [r8]
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	e0c8      	b.n	8006726 <_svfiprintf_r+0x1c2>
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	6163      	str	r3, [r4, #20]
 8006598:	2300      	movs	r3, #0
 800659a:	9309      	str	r3, [sp, #36]	; 0x24
 800659c:	2320      	movs	r3, #32
 800659e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065a2:	2330      	movs	r3, #48	; 0x30
 80065a4:	f04f 0b01 	mov.w	fp, #1
 80065a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ac:	9503      	str	r5, [sp, #12]
 80065ae:	4637      	mov	r7, r6
 80065b0:	463d      	mov	r5, r7
 80065b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065b6:	b10b      	cbz	r3, 80065bc <_svfiprintf_r+0x58>
 80065b8:	2b25      	cmp	r3, #37	; 0x25
 80065ba:	d13e      	bne.n	800663a <_svfiprintf_r+0xd6>
 80065bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80065c0:	d00b      	beq.n	80065da <_svfiprintf_r+0x76>
 80065c2:	4653      	mov	r3, sl
 80065c4:	4632      	mov	r2, r6
 80065c6:	4621      	mov	r1, r4
 80065c8:	4640      	mov	r0, r8
 80065ca:	f7ff ff71 	bl	80064b0 <__ssputs_r>
 80065ce:	3001      	adds	r0, #1
 80065d0:	f000 80a4 	beq.w	800671c <_svfiprintf_r+0x1b8>
 80065d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d6:	4453      	add	r3, sl
 80065d8:	9309      	str	r3, [sp, #36]	; 0x24
 80065da:	783b      	ldrb	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 809d 	beq.w	800671c <_svfiprintf_r+0x1b8>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f04f 32ff 	mov.w	r2, #4294967295
 80065e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065f4:	931a      	str	r3, [sp, #104]	; 0x68
 80065f6:	462f      	mov	r7, r5
 80065f8:	2205      	movs	r2, #5
 80065fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065fe:	4850      	ldr	r0, [pc, #320]	; (8006740 <_svfiprintf_r+0x1dc>)
 8006600:	f7ff fbb8 	bl	8005d74 <memchr>
 8006604:	9b04      	ldr	r3, [sp, #16]
 8006606:	b9d0      	cbnz	r0, 800663e <_svfiprintf_r+0xda>
 8006608:	06d9      	lsls	r1, r3, #27
 800660a:	bf44      	itt	mi
 800660c:	2220      	movmi	r2, #32
 800660e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006612:	071a      	lsls	r2, r3, #28
 8006614:	bf44      	itt	mi
 8006616:	222b      	movmi	r2, #43	; 0x2b
 8006618:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800661c:	782a      	ldrb	r2, [r5, #0]
 800661e:	2a2a      	cmp	r2, #42	; 0x2a
 8006620:	d015      	beq.n	800664e <_svfiprintf_r+0xea>
 8006622:	462f      	mov	r7, r5
 8006624:	2000      	movs	r0, #0
 8006626:	250a      	movs	r5, #10
 8006628:	9a07      	ldr	r2, [sp, #28]
 800662a:	4639      	mov	r1, r7
 800662c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006630:	3b30      	subs	r3, #48	; 0x30
 8006632:	2b09      	cmp	r3, #9
 8006634:	d94d      	bls.n	80066d2 <_svfiprintf_r+0x16e>
 8006636:	b1b8      	cbz	r0, 8006668 <_svfiprintf_r+0x104>
 8006638:	e00f      	b.n	800665a <_svfiprintf_r+0xf6>
 800663a:	462f      	mov	r7, r5
 800663c:	e7b8      	b.n	80065b0 <_svfiprintf_r+0x4c>
 800663e:	4a40      	ldr	r2, [pc, #256]	; (8006740 <_svfiprintf_r+0x1dc>)
 8006640:	463d      	mov	r5, r7
 8006642:	1a80      	subs	r0, r0, r2
 8006644:	fa0b f000 	lsl.w	r0, fp, r0
 8006648:	4318      	orrs	r0, r3
 800664a:	9004      	str	r0, [sp, #16]
 800664c:	e7d3      	b.n	80065f6 <_svfiprintf_r+0x92>
 800664e:	9a03      	ldr	r2, [sp, #12]
 8006650:	1d11      	adds	r1, r2, #4
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	9103      	str	r1, [sp, #12]
 8006656:	2a00      	cmp	r2, #0
 8006658:	db01      	blt.n	800665e <_svfiprintf_r+0xfa>
 800665a:	9207      	str	r2, [sp, #28]
 800665c:	e004      	b.n	8006668 <_svfiprintf_r+0x104>
 800665e:	4252      	negs	r2, r2
 8006660:	f043 0302 	orr.w	r3, r3, #2
 8006664:	9207      	str	r2, [sp, #28]
 8006666:	9304      	str	r3, [sp, #16]
 8006668:	783b      	ldrb	r3, [r7, #0]
 800666a:	2b2e      	cmp	r3, #46	; 0x2e
 800666c:	d10c      	bne.n	8006688 <_svfiprintf_r+0x124>
 800666e:	787b      	ldrb	r3, [r7, #1]
 8006670:	2b2a      	cmp	r3, #42	; 0x2a
 8006672:	d133      	bne.n	80066dc <_svfiprintf_r+0x178>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	3702      	adds	r7, #2
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	9203      	str	r2, [sp, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfb8      	it	lt
 8006682:	f04f 33ff 	movlt.w	r3, #4294967295
 8006686:	9305      	str	r3, [sp, #20]
 8006688:	4d2e      	ldr	r5, [pc, #184]	; (8006744 <_svfiprintf_r+0x1e0>)
 800668a:	2203      	movs	r2, #3
 800668c:	7839      	ldrb	r1, [r7, #0]
 800668e:	4628      	mov	r0, r5
 8006690:	f7ff fb70 	bl	8005d74 <memchr>
 8006694:	b138      	cbz	r0, 80066a6 <_svfiprintf_r+0x142>
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	1b40      	subs	r0, r0, r5
 800669a:	fa03 f000 	lsl.w	r0, r3, r0
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	3701      	adds	r7, #1
 80066a2:	4303      	orrs	r3, r0
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	7839      	ldrb	r1, [r7, #0]
 80066a8:	2206      	movs	r2, #6
 80066aa:	4827      	ldr	r0, [pc, #156]	; (8006748 <_svfiprintf_r+0x1e4>)
 80066ac:	1c7e      	adds	r6, r7, #1
 80066ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066b2:	f7ff fb5f 	bl	8005d74 <memchr>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d038      	beq.n	800672c <_svfiprintf_r+0x1c8>
 80066ba:	4b24      	ldr	r3, [pc, #144]	; (800674c <_svfiprintf_r+0x1e8>)
 80066bc:	bb13      	cbnz	r3, 8006704 <_svfiprintf_r+0x1a0>
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	f023 0307 	bic.w	r3, r3, #7
 80066c6:	3308      	adds	r3, #8
 80066c8:	9303      	str	r3, [sp, #12]
 80066ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066cc:	444b      	add	r3, r9
 80066ce:	9309      	str	r3, [sp, #36]	; 0x24
 80066d0:	e76d      	b.n	80065ae <_svfiprintf_r+0x4a>
 80066d2:	fb05 3202 	mla	r2, r5, r2, r3
 80066d6:	2001      	movs	r0, #1
 80066d8:	460f      	mov	r7, r1
 80066da:	e7a6      	b.n	800662a <_svfiprintf_r+0xc6>
 80066dc:	2300      	movs	r3, #0
 80066de:	250a      	movs	r5, #10
 80066e0:	4619      	mov	r1, r3
 80066e2:	3701      	adds	r7, #1
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	4638      	mov	r0, r7
 80066e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ec:	3a30      	subs	r2, #48	; 0x30
 80066ee:	2a09      	cmp	r2, #9
 80066f0:	d903      	bls.n	80066fa <_svfiprintf_r+0x196>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0c8      	beq.n	8006688 <_svfiprintf_r+0x124>
 80066f6:	9105      	str	r1, [sp, #20]
 80066f8:	e7c6      	b.n	8006688 <_svfiprintf_r+0x124>
 80066fa:	fb05 2101 	mla	r1, r5, r1, r2
 80066fe:	2301      	movs	r3, #1
 8006700:	4607      	mov	r7, r0
 8006702:	e7f0      	b.n	80066e6 <_svfiprintf_r+0x182>
 8006704:	ab03      	add	r3, sp, #12
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	4622      	mov	r2, r4
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <_svfiprintf_r+0x1ec>)
 800670c:	a904      	add	r1, sp, #16
 800670e:	4640      	mov	r0, r8
 8006710:	f7fe f8fa 	bl	8004908 <_printf_float>
 8006714:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006718:	4681      	mov	r9, r0
 800671a:	d1d6      	bne.n	80066ca <_svfiprintf_r+0x166>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	065b      	lsls	r3, r3, #25
 8006720:	f53f af35 	bmi.w	800658e <_svfiprintf_r+0x2a>
 8006724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006726:	b01d      	add	sp, #116	; 0x74
 8006728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672c:	ab03      	add	r3, sp, #12
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4622      	mov	r2, r4
 8006732:	4b07      	ldr	r3, [pc, #28]	; (8006750 <_svfiprintf_r+0x1ec>)
 8006734:	a904      	add	r1, sp, #16
 8006736:	4640      	mov	r0, r8
 8006738:	f7fe fb92 	bl	8004e60 <_printf_i>
 800673c:	e7ea      	b.n	8006714 <_svfiprintf_r+0x1b0>
 800673e:	bf00      	nop
 8006740:	08007704 	.word	0x08007704
 8006744:	0800770a 	.word	0x0800770a
 8006748:	0800770e 	.word	0x0800770e
 800674c:	08004909 	.word	0x08004909
 8006750:	080064b1 	.word	0x080064b1

08006754 <_sbrk_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	2300      	movs	r3, #0
 8006758:	4c05      	ldr	r4, [pc, #20]	; (8006770 <_sbrk_r+0x1c>)
 800675a:	4605      	mov	r5, r0
 800675c:	4608      	mov	r0, r1
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	f7fc f816 	bl	8002790 <_sbrk>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_sbrk_r+0x1a>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	b103      	cbz	r3, 800676e <_sbrk_r+0x1a>
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	2000189c 	.word	0x2000189c

08006774 <__ascii_mbtowc>:
 8006774:	b082      	sub	sp, #8
 8006776:	b901      	cbnz	r1, 800677a <__ascii_mbtowc+0x6>
 8006778:	a901      	add	r1, sp, #4
 800677a:	b142      	cbz	r2, 800678e <__ascii_mbtowc+0x1a>
 800677c:	b14b      	cbz	r3, 8006792 <__ascii_mbtowc+0x1e>
 800677e:	7813      	ldrb	r3, [r2, #0]
 8006780:	600b      	str	r3, [r1, #0]
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	1c10      	adds	r0, r2, #0
 8006786:	bf18      	it	ne
 8006788:	2001      	movne	r0, #1
 800678a:	b002      	add	sp, #8
 800678c:	4770      	bx	lr
 800678e:	4610      	mov	r0, r2
 8006790:	e7fb      	b.n	800678a <__ascii_mbtowc+0x16>
 8006792:	f06f 0001 	mvn.w	r0, #1
 8006796:	e7f8      	b.n	800678a <__ascii_mbtowc+0x16>

08006798 <memmove>:
 8006798:	4288      	cmp	r0, r1
 800679a:	b510      	push	{r4, lr}
 800679c:	eb01 0302 	add.w	r3, r1, r2
 80067a0:	d807      	bhi.n	80067b2 <memmove+0x1a>
 80067a2:	1e42      	subs	r2, r0, #1
 80067a4:	4299      	cmp	r1, r3
 80067a6:	d00a      	beq.n	80067be <memmove+0x26>
 80067a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067b0:	e7f8      	b.n	80067a4 <memmove+0xc>
 80067b2:	4283      	cmp	r3, r0
 80067b4:	d9f5      	bls.n	80067a2 <memmove+0xa>
 80067b6:	1881      	adds	r1, r0, r2
 80067b8:	1ad2      	subs	r2, r2, r3
 80067ba:	42d3      	cmn	r3, r2
 80067bc:	d100      	bne.n	80067c0 <memmove+0x28>
 80067be:	bd10      	pop	{r4, pc}
 80067c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067c8:	e7f7      	b.n	80067ba <memmove+0x22>

080067ca <__malloc_lock>:
 80067ca:	4770      	bx	lr

080067cc <__malloc_unlock>:
 80067cc:	4770      	bx	lr

080067ce <_realloc_r>:
 80067ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d0:	4607      	mov	r7, r0
 80067d2:	4614      	mov	r4, r2
 80067d4:	460e      	mov	r6, r1
 80067d6:	b921      	cbnz	r1, 80067e2 <_realloc_r+0x14>
 80067d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067dc:	4611      	mov	r1, r2
 80067de:	f7ff be0d 	b.w	80063fc <_malloc_r>
 80067e2:	b922      	cbnz	r2, 80067ee <_realloc_r+0x20>
 80067e4:	f7ff fdbe 	bl	8006364 <_free_r>
 80067e8:	4625      	mov	r5, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ee:	f000 f821 	bl	8006834 <_malloc_usable_size_r>
 80067f2:	42a0      	cmp	r0, r4
 80067f4:	d20f      	bcs.n	8006816 <_realloc_r+0x48>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff fdff 	bl	80063fc <_malloc_r>
 80067fe:	4605      	mov	r5, r0
 8006800:	2800      	cmp	r0, #0
 8006802:	d0f2      	beq.n	80067ea <_realloc_r+0x1c>
 8006804:	4631      	mov	r1, r6
 8006806:	4622      	mov	r2, r4
 8006808:	f7fd ffda 	bl	80047c0 <memcpy>
 800680c:	4631      	mov	r1, r6
 800680e:	4638      	mov	r0, r7
 8006810:	f7ff fda8 	bl	8006364 <_free_r>
 8006814:	e7e9      	b.n	80067ea <_realloc_r+0x1c>
 8006816:	4635      	mov	r5, r6
 8006818:	e7e7      	b.n	80067ea <_realloc_r+0x1c>

0800681a <__ascii_wctomb>:
 800681a:	b149      	cbz	r1, 8006830 <__ascii_wctomb+0x16>
 800681c:	2aff      	cmp	r2, #255	; 0xff
 800681e:	bf8b      	itete	hi
 8006820:	238a      	movhi	r3, #138	; 0x8a
 8006822:	700a      	strbls	r2, [r1, #0]
 8006824:	6003      	strhi	r3, [r0, #0]
 8006826:	2001      	movls	r0, #1
 8006828:	bf88      	it	hi
 800682a:	f04f 30ff 	movhi.w	r0, #4294967295
 800682e:	4770      	bx	lr
 8006830:	4608      	mov	r0, r1
 8006832:	4770      	bx	lr

08006834 <_malloc_usable_size_r>:
 8006834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006838:	1f18      	subs	r0, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	bfbc      	itt	lt
 800683e:	580b      	ldrlt	r3, [r1, r0]
 8006840:	18c0      	addlt	r0, r0, r3
 8006842:	4770      	bx	lr

08006844 <_init>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr

08006850 <_fini>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr
