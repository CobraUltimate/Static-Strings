
static_strings_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f88  080063e0  080063e0  000163e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007368  08007368  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007368  08007368  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800736c  0800736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd8  200001dc  0800754c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  0800754c  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089b2  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c3  00000000  00000000  00028bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  0002a280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002a950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013ef7  00000000  00000000  0002af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000064c7  00000000  00000000  0003ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b72f  00000000  00000000  00045356  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0a85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000249c  00000000  00000000  000b0b00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080063c4 	.word	0x080063c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080063c4 	.word	0x080063c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	f5ad 5dd5 	sub.w	sp, sp, #6816	; 0x1aa0
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f001 fd65 	bl	8002560 <HAL_Init>

  /* USER CODE BEGIN Init */
  static_strings_init();
 8000a96:	f002 fe29 	bl	80036ec <static_strings_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f001 fb91 	bl	80021c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9e:	f001 fbff 	bl	80022a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aa2:	f001 fbd3 	bl	800224c <MX_USART1_UART_Init>

  //test 1

  uint8_t very_long_string[700];
  uint16_t i;
  for(i = 0; i < 699; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000aac:	f102 020e 	add.w	r2, r2, #14
 8000ab0:	8013      	strh	r3, [r2, #0]
 8000ab2:	e013      	b.n	8000adc <main+0x54>
	  very_long_string[i] = 'a';
 8000ab4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000ab8:	f103 030e 	add.w	r3, r3, #14
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8000ac2:	2161      	movs	r1, #97	; 0x61
 8000ac4:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 699; i++){
 8000ac6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000aca:	f103 030e 	add.w	r3, r3, #14
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000ad6:	f102 020e 	add.w	r2, r2, #14
 8000ada:	8013      	strh	r3, [r2, #0]
 8000adc:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000ae0:	f103 030e 	add.w	r3, r3, #14
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	f240 22ba 	movw	r2, #698	; 0x2ba
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d9e2      	bls.n	8000ab4 <main+0x2c>
  }
  very_long_string[699] = '\0';
 8000aee:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
  static_strings_string_descriptor *very_long_string_descriptor = static_strings_save(very_long_string);
 8000af8:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f80f 	bl	8003b20 <static_strings_save>
 8000b02:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000b06:	f103 0304 	add.w	r3, r3, #4
 8000b0a:	6018      	str	r0, [r3, #0]
  char length[6];
  sprintf(length,"%04d",very_long_string_descriptor->length);
 8000b0c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000b10:	f103 0304 	add.w	r3, r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	889b      	ldrh	r3, [r3, #4]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b1e:	f103 0318 	add.w	r3, r3, #24
 8000b22:	49cd      	ldr	r1, [pc, #820]	; (8000e58 <main+0x3d0>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 f86b 	bl	8004c00 <siprintf>
  length[4] = '\r';
 8000b2a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b2e:	f103 0318 	add.w	r3, r3, #24
 8000b32:	220d      	movs	r2, #13
 8000b34:	711a      	strb	r2, [r3, #4]
  length[5] = '\n';
 8000b36:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b3a:	f103 0318 	add.w	r3, r3, #24
 8000b3e:	220a      	movs	r2, #10
 8000b40:	715a      	strb	r2, [r3, #5]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000b42:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000b46:	f101 0118 	add.w	r1, r1, #24
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	2206      	movs	r2, #6
 8000b50:	48c2      	ldr	r0, [pc, #776]	; (8000e5c <main+0x3d4>)
 8000b52:	f002 fc0e 	bl	8003372 <HAL_UART_Transmit>
  char type[3];
  type[0] = very_long_string_descriptor->type + 48;
 8000b56:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000b5a:	f103 0304 	add.w	r3, r3, #4
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	799b      	ldrb	r3, [r3, #6]
 8000b62:	3330      	adds	r3, #48	; 0x30
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b6a:	f103 0314 	add.w	r3, r3, #20
 8000b6e:	701a      	strb	r2, [r3, #0]
  type[1] = '\r';
 8000b70:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b74:	f103 0314 	add.w	r3, r3, #20
 8000b78:	220d      	movs	r2, #13
 8000b7a:	705a      	strb	r2, [r3, #1]
  type[2] = '\n';
 8000b7c:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000b80:	f103 0314 	add.w	r3, r3, #20
 8000b84:	220a      	movs	r2, #10
 8000b86:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000b88:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000b8c:	f101 0114 	add.w	r1, r1, #20
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	2203      	movs	r2, #3
 8000b96:	48b1      	ldr	r0, [pc, #708]	; (8000e5c <main+0x3d4>)
 8000b98:	f002 fbeb 	bl	8003372 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)very_long_string_descriptor->string,very_long_string_descriptor->length,HAL_MAX_DELAY);
 8000b9c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000ba0:	f103 0304 	add.w	r3, r3, #4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000bac:	f103 0304 	add.w	r3, r3, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	889a      	ldrh	r2, [r3, #4]
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	48a8      	ldr	r0, [pc, #672]	; (8000e5c <main+0x3d4>)
 8000bba:	f002 fbda 	bl	8003372 <HAL_UART_Transmit>

  static_strings_deallocate(very_long_string_descriptor);
 8000bbe:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000bc2:	f103 0304 	add.w	r3, r3, #4
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	f002 ffee 	bl	8003ba8 <static_strings_deallocate>

  uint8_t test_very_short_strings[10][50] = {"rapmr\r\n","ejkxjde7wp\r\n","rmp642c8un8bcjj\r\n","5ynn4y8caurm3trzwq4j\r\n","hwcqtzcn4gc8avg4d4zi7nr9f\r\n","tgt62yw9jnugwbg3pgzax73z6uix7g\r\n","bwn8czmxkhexdiw77v4gk4xu2yqtqibv2jn\r\n","eykku6i7j36kewjbwvpd5x9viggdhreqe9amk7ub\r\n","mpjkqkrn22q4xzvpt897fwjjurgtj3vczmmhy64d8qgww\r\n","wgxfec343aaku5axbjt5w2e5cz63r9bbydqun88ukj9iwint\r\n"};
 8000bcc:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8000bd0:	4aa3      	ldr	r2, [pc, #652]	; (8000e60 <main+0x3d8>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f003 fbae 	bl	800433c <memcpy>
  uint8_t test_short_strings[6][100] = {"b6cwufw3yyfz4kdxmpmjbt8p5kq43m8hynkanabtjrgrc4iitx8tvdbkgima\r\n","j85npdf3rjtf8egmja2cxuqgu6z4h38ikaue7evfqytbuw5b95pjmqvnhejmjkc8c\r\n","bduzvngtikgxbm2wc4wrwq75ti4c5cvavcna7k4cur4mi56gegbfnc5jd6i484efri9ddh\r\n","44upv7qtmzngmbp7gdbfnumhx82iwpz8vtp9dd7vyq4yn56jqfj7g5pd44gxg9t5tw466u6gbum\r\n","5gpxtjyj79j438uif2ukmyj67v5hebnh45tpaxa9cc92t28nwct2hghqb7kf96vrzz9dqj6hcfqtjfyi\r\n","e7gbz5rqwhmr3bq6jfuav9hgya8fthpi4jn6yiwgd5hmv9mjke8r8eva7dbzyr2pn9wavx386u6dnj6zdkerc\r\n"};
 8000be0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8000be4:	f103 0308 	add.w	r3, r3, #8
 8000be8:	4a9e      	ldr	r2, [pc, #632]	; (8000e64 <main+0x3dc>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	4611      	mov	r1, r2
 8000bee:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f003 fba2 	bl	800433c <memcpy>
  uint8_t test_medium_strings[2][200] = {"27wnc489rtjak6963r7c8mw4zmm7nxkhneu9wbg6nemurramx4yx6zipi2kmjh3n9hr6aci9dcku5w87ez8fkr5fnuzdk8q74ekkwgfnm3kq7dk82d24vujdpupp83rbfw5bnci7h5zx6iuzadukvc\r\n","ieckbpek2tuq837haz8cy78dpki9eav589t2bx5ffkx44kcj9tw5hwqyfqwgi5mjrww2i39jg9hz7djdddyp3b6uyy69cniwzeu8y4kgv2xmkji97dpxcfhr\r\n"};
 8000bf8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8000bfc:	f103 0318 	add.w	r3, r3, #24
 8000c00:	4a99      	ldr	r2, [pc, #612]	; (8000e68 <main+0x3e0>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	4611      	mov	r1, r2
 8000c06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f003 fb96 	bl	800433c <memcpy>
  uint8_t test_long_string[500] = "2j97e72cutbnqwcc4rg6rvqniyravzyqj4k7ee44pwvwmi2kvdk3vmmbr7396q7uajqmukehfn7qhr9pj4k974wbiw6dxr9ckmmj4bnkd5ndxn6ia27rjyyhdnrgk2kgdrqfhkeq8jwdz9rgd6wyw52yqxz5v873j7q9gc3bwfmiv6deutkj7fvvg8m877tgtnq5a5ueqd589prwfk5ex7bjixicnhb3x9n9m5vqtpbtgzx4vvbc9jcqrpfbgxjpvawrkeyjkk7aifkfr6xjerkxz7bk6cekpqttf72788m23qaz7xncba4g8dvayzwqqyev6ie3dgyfyew2rew6nba9nte3p5\r\n";
 8000c10:	f607 74a4 	addw	r4, r7, #4004	; 0xfa4
 8000c14:	4b95      	ldr	r3, [pc, #596]	; (8000e6c <main+0x3e4>)
 8000c16:	4620      	mov	r0, r4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f240 1361 	movw	r3, #353	; 0x161
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f003 fb8c 	bl	800433c <memcpy>
 8000c24:	f204 1361 	addw	r3, r4, #353	; 0x161
 8000c28:	2293      	movs	r2, #147	; 0x93
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fb90 	bl	8004352 <memset>
  uint8_t test_very_long_string[1000] = "3ghgwfrwyrzzdhr2929pnvm7ht4bgvq6bii7cz7ajp98475pgbwt3tww7prn86y7e6gdhvda923y4wzu5xwex9a8ntjf243h94z848k9fhym39qrt8ypp9rcge8drmxfeb9bn5mryc738w2mdk8weyxnti2zy9a7j3w7947qhce3bvv5d8yjxxt7ncik4muju5zcqzab5vf2wvz49w3j8v23u3grci33hdxvniy7h2p2r4b4xig3j5nfnn6m2qvmw5b5hzii32mrh7ebr2tuaqgdxn8xbecjpnvpv7timpd7cpqyubdjczaftwrrum8bdtfqzp4wr8him9n3g4nc347f264jhzb7w6bmyh9gj3zwrau6czz67ybq2cdh6p7cdbyvk88u5rfh9xi3u6fgbzfnu9b9qv6kd4mxhc6t758tad8n4i396qw2v3r2th3dag8d7h837ibpdx8v8njvkg7dh9j5rqmnvktcegmtxaprhxky8f6ppwcgeei29a6z3inht7kzm9x62muqc6cijrzfqm3yvukurwge4mi5fnzb5gqbz279kbpzy484ndrc2vrczwa2zmvjvdad39vjtwqp\r\n";
 8000c32:	f607 34bc 	addw	r4, r7, #3004	; 0xbbc
 8000c36:	4b8e      	ldr	r3, [pc, #568]	; (8000e70 <main+0x3e8>)
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f240 235b 	movw	r3, #603	; 0x25b
 8000c40:	461a      	mov	r2, r3
 8000c42:	f003 fb7b 	bl	800433c <memcpy>
 8000c46:	f204 235b 	addw	r3, r4, #603	; 0x25b
 8000c4a:	f240 128d 	movw	r2, #397	; 0x18d
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 fb7e 	bl	8004352 <memset>

  static_strings_string_descriptor *string_descriptor;

  //test 2

  string_descriptor = static_strings_save(test_very_long_string);
 8000c56:	f607 33bc 	addw	r3, r7, #3004	; 0xbbc
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 ff60 	bl	8003b20 <static_strings_save>
 8000c60:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000c64:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000c66:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	889b      	ldrh	r3, [r3, #4]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000c74:	f103 0318 	add.w	r3, r3, #24
 8000c78:	4977      	ldr	r1, [pc, #476]	; (8000e58 <main+0x3d0>)
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 ffc0 	bl	8004c00 <siprintf>
  length[4] = '\r';
 8000c80:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000c84:	f103 0318 	add.w	r3, r3, #24
 8000c88:	220d      	movs	r2, #13
 8000c8a:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000c8c:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000c90:	f101 0118 	add.w	r1, r1, #24
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	2206      	movs	r2, #6
 8000c9a:	4870      	ldr	r0, [pc, #448]	; (8000e5c <main+0x3d4>)
 8000c9c:	f002 fb69 	bl	8003372 <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000ca0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	799b      	ldrb	r3, [r3, #6]
 8000ca8:	3330      	adds	r3, #48	; 0x30
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000cb0:	f103 0314 	add.w	r3, r3, #20
 8000cb4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000cb6:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000cba:	f101 0114 	add.w	r1, r1, #20
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4865      	ldr	r0, [pc, #404]	; (8000e5c <main+0x3d4>)
 8000cc6:	f002 fb54 	bl	8003372 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000cca:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	889a      	ldrh	r2, [r3, #4]
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	485f      	ldr	r0, [pc, #380]	; (8000e5c <main+0x3d4>)
 8000ce0:	f002 fb47 	bl	8003372 <HAL_UART_Transmit>

  //test 3

  string_descriptor = static_strings_save(test_long_string);
 8000ce4:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 ff19 	bl	8003b20 <static_strings_save>
 8000cee:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000cf2:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8000cf4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	889b      	ldrh	r3, [r3, #4]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d02:	f103 0318 	add.w	r3, r3, #24
 8000d06:	4954      	ldr	r1, [pc, #336]	; (8000e58 <main+0x3d0>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 ff79 	bl	8004c00 <siprintf>
  length[4] = '\r';
 8000d0e:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d12:	f103 0318 	add.w	r3, r3, #24
 8000d16:	220d      	movs	r2, #13
 8000d18:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000d1a:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000d1e:	f101 0118 	add.w	r1, r1, #24
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2206      	movs	r2, #6
 8000d28:	484c      	ldr	r0, [pc, #304]	; (8000e5c <main+0x3d4>)
 8000d2a:	f002 fb22 	bl	8003372 <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 8000d2e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	3330      	adds	r3, #48	; 0x30
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d3e:	f103 0314 	add.w	r3, r3, #20
 8000d42:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000d44:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000d48:	f101 0114 	add.w	r1, r1, #20
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	2203      	movs	r2, #3
 8000d52:	4842      	ldr	r0, [pc, #264]	; (8000e5c <main+0x3d4>)
 8000d54:	f002 fb0d 	bl	8003372 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000d58:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6819      	ldr	r1, [r3, #0]
 8000d60:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	889a      	ldrh	r2, [r3, #4]
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	483b      	ldr	r0, [pc, #236]	; (8000e5c <main+0x3d4>)
 8000d6e:	f002 fb00 	bl	8003372 <HAL_UART_Transmit>

  //test 4,5

  for(i = 0; i < 2; i++){
 8000d72:	2300      	movs	r3, #0
 8000d74:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000d78:	f102 020e 	add.w	r2, r2, #14
 8000d7c:	8013      	strh	r3, [r2, #0]
 8000d7e:	e05c      	b.n	8000e3a <main+0x3b2>
  	  string_descriptor = static_strings_save(test_medium_strings[i]);
 8000d80:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000d84:	f103 030e 	add.w	r3, r3, #14
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8000d8e:	f102 0218 	add.w	r2, r2, #24
 8000d92:	21c8      	movs	r1, #200	; 0xc8
 8000d94:	fb01 f303 	mul.w	r3, r1, r3
 8000d98:	4413      	add	r3, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fec0 	bl	8003b20 <static_strings_save>
 8000da0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000da4:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000da6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	889b      	ldrh	r3, [r3, #4]
 8000dae:	461a      	mov	r2, r3
 8000db0:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000db4:	f103 0318 	add.w	r3, r3, #24
 8000db8:	4927      	ldr	r1, [pc, #156]	; (8000e58 <main+0x3d0>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 ff20 	bl	8004c00 <siprintf>
  	  length[4] = '\r';
 8000dc0:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000dc4:	f103 0318 	add.w	r3, r3, #24
 8000dc8:	220d      	movs	r2, #13
 8000dca:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000dcc:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000dd0:	f101 0118 	add.w	r1, r1, #24
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	2206      	movs	r2, #6
 8000dda:	4820      	ldr	r0, [pc, #128]	; (8000e5c <main+0x3d4>)
 8000ddc:	f002 fac9 	bl	8003372 <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000de0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	799b      	ldrb	r3, [r3, #6]
 8000de8:	3330      	adds	r3, #48	; 0x30
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000df0:	f103 0314 	add.w	r3, r3, #20
 8000df4:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000df6:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000dfa:	f101 0114 	add.w	r1, r1, #20
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	2203      	movs	r2, #3
 8000e04:	4815      	ldr	r0, [pc, #84]	; (8000e5c <main+0x3d4>)
 8000e06:	f002 fab4 	bl	8003372 <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000e0a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	889a      	ldrh	r2, [r3, #4]
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <main+0x3d4>)
 8000e20:	f002 faa7 	bl	8003372 <HAL_UART_Transmit>
  for(i = 0; i < 2; i++){
 8000e24:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000e28:	f103 030e 	add.w	r3, r3, #14
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000e34:	f102 020e 	add.w	r2, r2, #14
 8000e38:	8013      	strh	r3, [r2, #0]
 8000e3a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000e3e:	f103 030e 	add.w	r3, r3, #14
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d99b      	bls.n	8000d80 <main+0x2f8>
  }

  //test 6-11

  for(i = 0; i < 6; i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000e4e:	f102 020e 	add.w	r2, r2, #14
 8000e52:	8013      	strh	r3, [r2, #0]
 8000e54:	e06b      	b.n	8000f2e <main+0x4a6>
 8000e56:	bf00      	nop
 8000e58:	080063e0 	.word	0x080063e0
 8000e5c:	20000ca4 	.word	0x20000ca4
 8000e60:	08006490 	.word	0x08006490
 8000e64:	08006684 	.word	0x08006684
 8000e68:	080068dc 	.word	0x080068dc
 8000e6c:	08006a6c 	.word	0x08006a6c
 8000e70:	08006c60 	.word	0x08006c60
  	  string_descriptor = static_strings_save(test_short_strings[i]);
 8000e74:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000e78:	f103 030e 	add.w	r3, r3, #14
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8000e82:	f102 0208 	add.w	r2, r2, #8
 8000e86:	2164      	movs	r1, #100	; 0x64
 8000e88:	fb01 f303 	mul.w	r3, r1, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fe46 	bl	8003b20 <static_strings_save>
 8000e94:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000e98:	6018      	str	r0, [r3, #0]
  	  sprintf(length,"%04d",string_descriptor->length);
 8000e9a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	889b      	ldrh	r3, [r3, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000ea8:	f103 0318 	add.w	r3, r3, #24
 8000eac:	49cf      	ldr	r1, [pc, #828]	; (80011ec <main+0x764>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 fea6 	bl	8004c00 <siprintf>
  	  length[4] = '\r';
 8000eb4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000eb8:	f103 0318 	add.w	r3, r3, #24
 8000ebc:	220d      	movs	r2, #13
 8000ebe:	711a      	strb	r2, [r3, #4]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000ec0:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000ec4:	f101 0118 	add.w	r1, r1, #24
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	2206      	movs	r2, #6
 8000ece:	48c8      	ldr	r0, [pc, #800]	; (80011f0 <main+0x768>)
 8000ed0:	f002 fa4f 	bl	8003372 <HAL_UART_Transmit>
  	  type[0] = string_descriptor->type + 48;
 8000ed4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	799b      	ldrb	r3, [r3, #6]
 8000edc:	3330      	adds	r3, #48	; 0x30
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000ee4:	f103 0314 	add.w	r3, r3, #20
 8000ee8:	701a      	strb	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000eea:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000eee:	f101 0114 	add.w	r1, r1, #20
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	48bd      	ldr	r0, [pc, #756]	; (80011f0 <main+0x768>)
 8000efa:	f002 fa3a 	bl	8003372 <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000efe:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	889a      	ldrh	r2, [r3, #4]
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	48b7      	ldr	r0, [pc, #732]	; (80011f0 <main+0x768>)
 8000f14:	f002 fa2d 	bl	8003372 <HAL_UART_Transmit>
  for(i = 0; i < 6; i++){
 8000f18:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f1c:	f103 030e 	add.w	r3, r3, #14
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000f28:	f102 020e 	add.w	r2, r2, #14
 8000f2c:	8013      	strh	r3, [r2, #0]
 8000f2e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f32:	f103 030e 	add.w	r3, r3, #14
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d99b      	bls.n	8000e74 <main+0x3ec>
  }

  //test 12-21

  static_strings_string_descriptor *string_descriptor_deallocate = NULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000f42:	f102 0208 	add.w	r2, r2, #8
 8000f46:	6013      	str	r3, [r2, #0]
  for(i = 0; i < 10; i++){
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000f4e:	f102 020e 	add.w	r2, r2, #14
 8000f52:	8013      	strh	r3, [r2, #0]
 8000f54:	e069      	b.n	800102a <main+0x5a2>
	  string_descriptor = static_strings_save(test_very_short_strings[i]);
 8000f56:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f5a:	f103 030e 	add.w	r3, r3, #14
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	f507 52ac 	add.w	r2, r7, #5504	; 0x1580
 8000f64:	2132      	movs	r1, #50	; 0x32
 8000f66:	fb01 f303 	mul.w	r3, r1, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fdd7 	bl	8003b20 <static_strings_save>
 8000f72:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f76:	6018      	str	r0, [r3, #0]
	  if(i == 6){
 8000f78:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f7c:	f103 030e 	add.w	r3, r3, #14
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d107      	bne.n	8000f96 <main+0x50e>
		  string_descriptor_deallocate = string_descriptor;
 8000f86:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8000f90:	f102 0208 	add.w	r2, r2, #8
 8000f94:	6013      	str	r3, [r2, #0]
	  }
	  sprintf(length,"%04d",string_descriptor->length);
 8000f96:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	889b      	ldrh	r3, [r3, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000fa4:	f103 0318 	add.w	r3, r3, #24
 8000fa8:	4990      	ldr	r1, [pc, #576]	; (80011ec <main+0x764>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fe28 	bl	8004c00 <siprintf>
	  length[4] = '\r';
 8000fb0:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000fb4:	f103 0318 	add.w	r3, r3, #24
 8000fb8:	220d      	movs	r2, #13
 8000fba:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 8000fbc:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000fc0:	f101 0118 	add.w	r1, r1, #24
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	2206      	movs	r2, #6
 8000fca:	4889      	ldr	r0, [pc, #548]	; (80011f0 <main+0x768>)
 8000fcc:	f002 f9d1 	bl	8003372 <HAL_UART_Transmit>
	  type[0] = string_descriptor->type + 48;
 8000fd0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	799b      	ldrb	r3, [r3, #6]
 8000fd8:	3330      	adds	r3, #48	; 0x30
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000fe0:	f103 0314 	add.w	r3, r3, #20
 8000fe4:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 8000fe6:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 8000fea:	f101 0114 	add.w	r1, r1, #20
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	487e      	ldr	r0, [pc, #504]	; (80011f0 <main+0x768>)
 8000ff6:	f002 f9bc 	bl	8003372 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 8000ffa:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	889a      	ldrh	r2, [r3, #4]
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	4878      	ldr	r0, [pc, #480]	; (80011f0 <main+0x768>)
 8001010:	f002 f9af 	bl	8003372 <HAL_UART_Transmit>
  for(i = 0; i < 10; i++){
 8001014:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001018:	f103 030e 	add.w	r3, r3, #14
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001024:	f102 020e 	add.w	r2, r2, #14
 8001028:	8013      	strh	r3, [r2, #0]
 800102a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800102e:	f103 030e 	add.w	r3, r3, #14
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b09      	cmp	r3, #9
 8001036:	d98e      	bls.n	8000f56 <main+0x4ce>
  }

  //test 22

  static_strings_deallocate(string_descriptor_deallocate);
 8001038:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800103c:	f103 0308 	add.w	r3, r3, #8
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f002 fdb1 	bl	8003ba8 <static_strings_deallocate>
  uint8_t test_short_string[50] = "reallocate_test\r\n";
 8001046:	f607 3688 	addw	r6, r7, #2952	; 0xb88
 800104a:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <main+0x76c>)
 800104c:	4634      	mov	r4, r6
 800104e:	461d      	mov	r5, r3
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	8023      	strh	r3, [r4, #0]
 8001058:	f106 0312 	add.w	r3, r6, #18
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f003 f976 	bl	8004352 <memset>
  string_descriptor = static_strings_save(test_short_string);
 8001066:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fd58 	bl	8003b20 <static_strings_save>
 8001070:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001074:	6018      	str	r0, [r3, #0]
  sprintf(length,"%04d",string_descriptor->length);
 8001076:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	889b      	ldrh	r3, [r3, #4]
 800107e:	461a      	mov	r2, r3
 8001080:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8001084:	f103 0318 	add.w	r3, r3, #24
 8001088:	4958      	ldr	r1, [pc, #352]	; (80011ec <main+0x764>)
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fdb8 	bl	8004c00 <siprintf>
  length[4] = '\r';
 8001090:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8001094:	f103 0318 	add.w	r3, r3, #24
 8001098:	220d      	movs	r2, #13
 800109a:	711a      	strb	r2, [r3, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)length,6,HAL_MAX_DELAY);
 800109c:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80010a0:	f101 0118 	add.w	r1, r1, #24
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	2206      	movs	r2, #6
 80010aa:	4851      	ldr	r0, [pc, #324]	; (80011f0 <main+0x768>)
 80010ac:	f002 f961 	bl	8003372 <HAL_UART_Transmit>
  type[0] = string_descriptor->type + 48;
 80010b0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	799b      	ldrb	r3, [r3, #6]
 80010b8:	3330      	adds	r3, #48	; 0x30
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 80010c0:	f103 0314 	add.w	r3, r3, #20
 80010c4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,(uint8_t *)type,3,HAL_MAX_DELAY);
 80010c6:	f507 51bb 	add.w	r1, r7, #5984	; 0x1760
 80010ca:	f101 0114 	add.w	r1, r1, #20
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	2203      	movs	r2, #3
 80010d4:	4846      	ldr	r0, [pc, #280]	; (80011f0 <main+0x768>)
 80010d6:	f002 f94c 	bl	8003372 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80010da:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6819      	ldr	r1, [r3, #0]
 80010e2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	889a      	ldrh	r2, [r3, #4]
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	4840      	ldr	r0, [pc, #256]	; (80011f0 <main+0x768>)
 80010f0:	f002 f93f 	bl	8003372 <HAL_UART_Transmit>

  //test 23

  uint8_t pointer[12];
  sprintf((char *)pointer,"%10p",string_descriptor_deallocate);
 80010f4:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 80010f8:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80010fc:	f102 0208 	add.w	r2, r2, #8
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	493d      	ldr	r1, [pc, #244]	; (80011f8 <main+0x770>)
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fd7b 	bl	8004c00 <siprintf>
  pointer[10] = '\r';
 800110a:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 800110e:	220d      	movs	r2, #13
 8001110:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 8001112:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 8001116:	220a      	movs	r2, #10
 8001118:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 800111a:	f607 317c 	addw	r1, r7, #2940	; 0xb7c
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	220c      	movs	r2, #12
 8001124:	4832      	ldr	r0, [pc, #200]	; (80011f0 <main+0x768>)
 8001126:	f002 f924 	bl	8003372 <HAL_UART_Transmit>

  sprintf((char *)pointer,"%10p",string_descriptor);
 800112a:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 800112e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	4930      	ldr	r1, [pc, #192]	; (80011f8 <main+0x770>)
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fd62 	bl	8004c00 <siprintf>
  pointer[10] = '\r';
 800113c:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 8001140:	220d      	movs	r2, #13
 8001142:	729a      	strb	r2, [r3, #10]
  pointer[11] = '\n';
 8001144:	f607 337c 	addw	r3, r7, #2940	; 0xb7c
 8001148:	220a      	movs	r2, #10
 800114a:	72da      	strb	r2, [r3, #11]
  HAL_UART_Transmit(&huart1,pointer,12,HAL_MAX_DELAY);
 800114c:	f607 317c 	addw	r1, r7, #2940	; 0xb7c
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	220c      	movs	r2, #12
 8001156:	4826      	ldr	r0, [pc, #152]	; (80011f0 <main+0x768>)
 8001158:	f002 f90b 	bl	8003372 <HAL_UART_Transmit>
  uint8_t error_code_char;

  //test 24

  uint8_t no_memory_string[800];
  for(i = 0; i < 798; i++){
 800115c:	2300      	movs	r3, #0
 800115e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001162:	f102 020e 	add.w	r2, r2, #14
 8001166:	8013      	strh	r3, [r2, #0]
 8001168:	e014      	b.n	8001194 <main+0x70c>
	  no_memory_string[i] = 'a';
 800116a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800116e:	f103 030e 	add.w	r3, r3, #14
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8001178:	3b18      	subs	r3, #24
 800117a:	2161      	movs	r1, #97	; 0x61
 800117c:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 798; i++){
 800117e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001182:	f103 030e 	add.w	r3, r3, #14
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800118e:	f102 020e 	add.w	r2, r2, #14
 8001192:	8013      	strh	r3, [r2, #0]
 8001194:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001198:	f103 030e 	add.w	r3, r3, #14
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	f240 321d 	movw	r2, #797	; 0x31d
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d9e1      	bls.n	800116a <main+0x6e2>
  }
  no_memory_string[798] = '\r';
 80011a6:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80011aa:	3b18      	subs	r3, #24
 80011ac:	220d      	movs	r2, #13
 80011ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  no_memory_string[799] = '\n';
 80011b2:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80011b6:	3b18      	subs	r3, #24
 80011b8:	220a      	movs	r2, #10
 80011ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  string_descriptor = static_strings_save(no_memory_string);
 80011be:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80011c2:	3b18      	subs	r3, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fcab 	bl	8003b20 <static_strings_save>
 80011ca:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80011ce:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 80011d0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d112      	bne.n	8001200 <main+0x778>
	  error_code_char = static_strings_error_code + 48;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <main+0x774>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3330      	adds	r3, #48	; 0x30
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e00e      	b.n	8001208 <main+0x780>
 80011ea:	bf00      	nop
 80011ec:	080063e0 	.word	0x080063e0
 80011f0:	20000ca4 	.word	0x20000ca4
 80011f4:	08007048 	.word	0x08007048
 80011f8:	080063e8 	.word	0x080063e8
 80011fc:	20000664 	.word	0x20000664
  }
  else{
	  error_code_char = '3';
 8001200:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8001204:	2233      	movs	r2, #51	; 0x33
 8001206:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 8001208:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2201      	movs	r2, #1
 8001212:	48af      	ldr	r0, [pc, #700]	; (80014d0 <main+0xa48>)
 8001214:	f002 f8ad 	bl	8003372 <HAL_UART_Transmit>

  //test 25

  uint8_t unallocable_invalid_string[1200];
  for(i = 0; i < 1198; i++){
 8001218:	2300      	movs	r3, #0
 800121a:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800121e:	f102 020e 	add.w	r2, r2, #14
 8001222:	8013      	strh	r3, [r2, #0]
 8001224:	e014      	b.n	8001250 <main+0x7c8>
	  unallocable_invalid_string[i] = 'a';
 8001226:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800122a:	f103 030e 	add.w	r3, r3, #14
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001234:	3b08      	subs	r3, #8
 8001236:	2161      	movs	r1, #97	; 0x61
 8001238:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 1198; i++){
 800123a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800123e:	f103 030e 	add.w	r3, r3, #14
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800124a:	f102 020e 	add.w	r2, r2, #14
 800124e:	8013      	strh	r3, [r2, #0]
 8001250:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001254:	f103 030e 	add.w	r3, r3, #14
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	f240 42ad 	movw	r2, #1197	; 0x4ad
 800125e:	4293      	cmp	r3, r2
 8001260:	d9e1      	bls.n	8001226 <main+0x79e>
  }
  unallocable_invalid_string[1198] = '\r';
 8001262:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001266:	3b08      	subs	r3, #8
 8001268:	220d      	movs	r2, #13
 800126a:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
  unallocable_invalid_string[1199] = '\n';
 800126e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001272:	3b08      	subs	r3, #8
 8001274:	220a      	movs	r2, #10
 8001276:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
  string_descriptor = static_strings_save(unallocable_invalid_string);
 800127a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800127e:	3b08      	subs	r3, #8
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fc4d 	bl	8003b20 <static_strings_save>
 8001286:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800128a:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 800128c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d107      	bne.n	80012a6 <main+0x81e>
	  error_code_char = static_strings_error_code + 48;
 8001296:	4b8f      	ldr	r3, [pc, #572]	; (80014d4 <main+0xa4c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3330      	adds	r3, #48	; 0x30
 800129c:	b2da      	uxtb	r2, r3
 800129e:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e003      	b.n	80012ae <main+0x826>
  }
  else{
	  error_code_char = '4';
 80012a6:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 80012aa:	2234      	movs	r2, #52	; 0x34
 80012ac:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 80012ae:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	2201      	movs	r2, #1
 80012b8:	4885      	ldr	r0, [pc, #532]	; (80014d0 <main+0xa48>)
 80012ba:	f002 f85a 	bl	8003372 <HAL_UART_Transmit>

  //test 26

  uint8_t no_line_end_invalid_string[800];
  for(i = 0; i < 800; i++){
 80012be:	2300      	movs	r3, #0
 80012c0:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80012c4:	f102 020e 	add.w	r2, r2, #14
 80012c8:	8013      	strh	r3, [r2, #0]
 80012ca:	e014      	b.n	80012f6 <main+0x86e>
	  no_line_end_invalid_string[i] = 'a';
 80012cc:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80012d0:	f103 030e 	add.w	r3, r3, #14
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012da:	3b08      	subs	r3, #8
 80012dc:	2161      	movs	r1, #97	; 0x61
 80012de:	5499      	strb	r1, [r3, r2]
  for(i = 0; i < 800; i++){
 80012e0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80012e4:	f103 030e 	add.w	r3, r3, #14
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80012f0:	f102 020e 	add.w	r2, r2, #14
 80012f4:	8013      	strh	r3, [r2, #0]
 80012f6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80012fa:	f103 030e 	add.w	r3, r3, #14
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001304:	d3e2      	bcc.n	80012cc <main+0x844>
  }
  string_descriptor = static_strings_save(no_line_end_invalid_string);
 8001306:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800130a:	3b08      	subs	r3, #8
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fc07 	bl	8003b20 <static_strings_save>
 8001312:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001316:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8001318:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d107      	bne.n	8001332 <main+0x8aa>
	  error_code_char = static_strings_error_code + 48;
 8001322:	4b6c      	ldr	r3, [pc, #432]	; (80014d4 <main+0xa4c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	b2da      	uxtb	r2, r3
 800132a:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e003      	b.n	800133a <main+0x8b2>
  }
  else{
	  error_code_char = '5';
 8001332:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8001336:	2235      	movs	r2, #53	; 0x35
 8001338:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 800133a:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	2201      	movs	r2, #1
 8001344:	4862      	ldr	r0, [pc, #392]	; (80014d0 <main+0xa48>)
 8001346:	f002 f814 	bl	8003372 <HAL_UART_Transmit>

  //test 27

  string_descriptor = static_strings_allocate(1200);
 800134a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800134e:	f002 fb2d 	bl	80039ac <static_strings_allocate>
 8001352:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001356:	6018      	str	r0, [r3, #0]
  if(string_descriptor == NULL){
 8001358:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d107      	bne.n	8001372 <main+0x8ea>
  	  error_code_char = static_strings_error_code + 48;
 8001362:	4b5c      	ldr	r3, [pc, #368]	; (80014d4 <main+0xa4c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	3330      	adds	r3, #48	; 0x30
 8001368:	b2da      	uxtb	r2, r3
 800136a:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e003      	b.n	800137a <main+0x8f2>
  }
  else{
  	  error_code_char = '6';
 8001372:	f607 337b 	addw	r3, r7, #2939	; 0xb7b
 8001376:	2236      	movs	r2, #54	; 0x36
 8001378:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Transmit(&huart1,&error_code_char,1,HAL_MAX_DELAY);
 800137a:	f607 317b 	addw	r1, r7, #2939	; 0xb7b
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	2201      	movs	r2, #1
 8001384:	4852      	ldr	r0, [pc, #328]	; (80014d0 <main+0xa48>)
 8001386:	f001 fff4 	bl	8003372 <HAL_UART_Transmit>

  //test 28

  uint8_t custom[10] = "123,56,89\0";
 800138a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800138e:	3b14      	subs	r3, #20
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <main+0xa50>)
 8001392:	ca07      	ldmia	r2, {r0, r1, r2}
 8001394:	c303      	stmia	r3!, {r0, r1}
 8001396:	801a      	strh	r2, [r3, #0]
  static_strings_string_descriptor custom_string_descriptor;
  string_descriptor = &custom_string_descriptor;
 8001398:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800139c:	3b1c      	subs	r3, #28
 800139e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80013a2:	6013      	str	r3, [r2, #0]
  static_strings_create_custom_string(string_descriptor,custom);
 80013a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013a8:	3b14      	subs	r3, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	f002 fbdc 	bl	8003b6e <static_strings_create_custom_string>
  HAL_UART_Transmit(&huart1,string_descriptor->string,string_descriptor->length,HAL_MAX_DELAY);
 80013b6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	889a      	ldrh	r2, [r3, #4]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	4841      	ldr	r0, [pc, #260]	; (80014d0 <main+0xa48>)
 80013cc:	f001 ffd1 	bl	8003372 <HAL_UART_Transmit>

  // test 29

  if(static_strings_is_line(string_descriptor)){
 80013d0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	f002 fbf7 	bl	8003bc8 <static_strings_is_line>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <main+0x968>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	2203      	movs	r2, #3
 80013e6:	493d      	ldr	r1, [pc, #244]	; (80014dc <main+0xa54>)
 80013e8:	4839      	ldr	r0, [pc, #228]	; (80014d0 <main+0xa48>)
 80013ea:	f001 ffc2 	bl	8003372 <HAL_UART_Transmit>
 80013ee:	e006      	b.n	80013fe <main+0x976>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	2203      	movs	r2, #3
 80013f6:	493a      	ldr	r1, [pc, #232]	; (80014e0 <main+0xa58>)
 80013f8:	4835      	ldr	r0, [pc, #212]	; (80014d0 <main+0xa48>)
 80013fa:	f001 ffba 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 30

  uint8_t custom_line[10] = "123,56,8\r\n";
 80013fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001402:	3b08      	subs	r3, #8
 8001404:	4a37      	ldr	r2, [pc, #220]	; (80014e4 <main+0xa5c>)
 8001406:	ca07      	ldmia	r2, {r0, r1, r2}
 8001408:	c303      	stmia	r3!, {r0, r1}
 800140a:	801a      	strh	r2, [r3, #0]
  static_strings_create_custom_string(string_descriptor,custom_line);
 800140c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001410:	3b08      	subs	r3, #8
 8001412:	4619      	mov	r1, r3
 8001414:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f002 fba8 	bl	8003b6e <static_strings_create_custom_string>

  if(static_strings_is_line(string_descriptor)){
 800141e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f002 fbd0 	bl	8003bc8 <static_strings_is_line>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <main+0x9b6>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	2203      	movs	r2, #3
 8001434:	4929      	ldr	r1, [pc, #164]	; (80014dc <main+0xa54>)
 8001436:	4826      	ldr	r0, [pc, #152]	; (80014d0 <main+0xa48>)
 8001438:	f001 ff9b 	bl	8003372 <HAL_UART_Transmit>
 800143c:	e006      	b.n	800144c <main+0x9c4>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	2203      	movs	r2, #3
 8001444:	4926      	ldr	r1, [pc, #152]	; (80014e0 <main+0xa58>)
 8001446:	4822      	ldr	r0, [pc, #136]	; (80014d0 <main+0xa48>)
 8001448:	f001 ff93 	bl	8003372 <HAL_UART_Transmit>
  }

  // reset all descriptors
  static_strings_init();
 800144c:	f002 f94e 	bl	80036ec <static_strings_init>

  // test 31-33

  static_strings_string_descriptor *token;
  static_strings_string_splitter_set_parameters(string_descriptor,',');
 8001450:	212c      	movs	r1, #44	; 0x2c
 8001452:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f002 fc14 	bl	8003c84 <static_strings_string_splitter_set_parameters>
  while(static_strings_string_splitter_get_next_token(&token)){
 800145c:	e015      	b.n	800148a <main+0xa02>
	  HAL_UART_Transmit(&huart1,token->string,token->length,HAL_MAX_DELAY);
 800145e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001462:	3b0c      	subs	r3, #12
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800146c:	3b0c      	subs	r3, #12
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	889a      	ldrh	r2, [r3, #4]
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <main+0xa48>)
 8001478:	f001 ff7b 	bl	8003372 <HAL_UART_Transmit>
	  static_strings_deallocate(token);
 800147c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001480:	3b0c      	subs	r3, #12
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fb8f 	bl	8003ba8 <static_strings_deallocate>
  while(static_strings_string_splitter_get_next_token(&token)){
 800148a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800148e:	3b0c      	subs	r3, #12
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fc0f 	bl	8003cb4 <static_strings_string_splitter_get_next_token>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e0      	bne.n	800145e <main+0x9d6>
  }

  // test 34

  int next_token_result = static_strings_string_splitter_get_next_token(&token);
 800149c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014a0:	3b0c      	subs	r3, #12
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fc06 	bl	8003cb4 <static_strings_string_splitter_get_next_token>
 80014a8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80014ac:	f103 031c 	add.w	r3, r3, #28
 80014b0:	6018      	str	r0, [r3, #0]
  if(next_token_result){
 80014b2:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80014b6:	f103 031c 	add.w	r3, r3, #28
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <main+0xa60>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	2203      	movs	r2, #3
 80014c6:	4905      	ldr	r1, [pc, #20]	; (80014dc <main+0xa54>)
 80014c8:	4801      	ldr	r0, [pc, #4]	; (80014d0 <main+0xa48>)
 80014ca:	f001 ff52 	bl	8003372 <HAL_UART_Transmit>
 80014ce:	e012      	b.n	80014f6 <main+0xa6e>
 80014d0:	20000ca4 	.word	0x20000ca4
 80014d4:	20000664 	.word	0x20000664
 80014d8:	0800707c 	.word	0x0800707c
 80014dc:	080063f0 	.word	0x080063f0
 80014e0:	080063f4 	.word	0x080063f4
 80014e4:	08007088 	.word	0x08007088
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	2203      	movs	r2, #3
 80014ee:	49c4      	ldr	r1, [pc, #784]	; (8001800 <main+0xd78>)
 80014f0:	48c4      	ldr	r0, [pc, #784]	; (8001804 <main+0xd7c>)
 80014f2:	f001 ff3e 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 35

  static_strings_create_custom_string(string_descriptor,custom);
 80014f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014fa:	3b14      	subs	r3, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f002 fb33 	bl	8003b6e <static_strings_create_custom_string>
  static_strings_string_descriptor *substring = static_strings_substring(string_descriptor,2,8);
 8001508:	2208      	movs	r2, #8
 800150a:	2102      	movs	r1, #2
 800150c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	f002 fc2d 	bl	8003d70 <static_strings_substring>
 8001516:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800151a:	f103 0318 	add.w	r3, r3, #24
 800151e:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 8001520:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001524:	f103 0318 	add.w	r3, r3, #24
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d017      	beq.n	800155e <main+0xad6>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 800152e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001532:	f103 0318 	add.w	r3, r3, #24
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800153e:	f103 0318 	add.w	r3, r3, #24
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	889a      	ldrh	r2, [r3, #4]
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	48ae      	ldr	r0, [pc, #696]	; (8001804 <main+0xd7c>)
 800154c:	f001 ff11 	bl	8003372 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8001550:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001554:	f103 0318 	add.w	r3, r3, #24
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f002 fb25 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 36

  substring = static_strings_substring(string_descriptor,0,string_descriptor->length);
 800155e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	889b      	ldrh	r3, [r3, #4]
 8001566:	461a      	mov	r2, r3
 8001568:	2100      	movs	r1, #0
 800156a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f002 fbfe 	bl	8003d70 <static_strings_substring>
 8001574:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001578:	f103 0318 	add.w	r3, r3, #24
 800157c:	6018      	str	r0, [r3, #0]
  if(substring != NULL){
 800157e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001582:	f103 0318 	add.w	r3, r3, #24
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d017      	beq.n	80015bc <main+0xb34>
	  HAL_UART_Transmit(&huart1,substring->string,substring->length,HAL_MAX_DELAY);
 800158c:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001590:	f103 0318 	add.w	r3, r3, #24
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800159c:	f103 0318 	add.w	r3, r3, #24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	889a      	ldrh	r2, [r3, #4]
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	4896      	ldr	r0, [pc, #600]	; (8001804 <main+0xd7c>)
 80015aa:	f001 fee2 	bl	8003372 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 80015ae:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80015b2:	f103 0318 	add.w	r3, r3, #24
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f002 faf6 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 37

  substring = static_strings_substring(string_descriptor,0,12);
 80015bc:	220c      	movs	r2, #12
 80015be:	2100      	movs	r1, #0
 80015c0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	f002 fbd3 	bl	8003d70 <static_strings_substring>
 80015ca:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80015ce:	f103 0318 	add.w	r3, r3, #24
 80015d2:	6018      	str	r0, [r3, #0]
  if (substring != NULL) {
 80015d4:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80015d8:	f103 0318 	add.w	r3, r3, #24
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00e      	beq.n	8001600 <main+0xb78>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	2203      	movs	r2, #3
 80015e8:	4987      	ldr	r1, [pc, #540]	; (8001808 <main+0xd80>)
 80015ea:	4886      	ldr	r0, [pc, #536]	; (8001804 <main+0xd7c>)
 80015ec:	f001 fec1 	bl	8003372 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 80015f0:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80015f4:	f103 0318 	add.w	r3, r3, #24
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	f002 fad5 	bl	8003ba8 <static_strings_deallocate>
 80015fe:	e006      	b.n	800160e <main+0xb86>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	2203      	movs	r2, #3
 8001606:	497e      	ldr	r1, [pc, #504]	; (8001800 <main+0xd78>)
 8001608:	487e      	ldr	r0, [pc, #504]	; (8001804 <main+0xd7c>)
 800160a:	f001 feb2 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 38

  substring = static_strings_substring(string_descriptor,-2,5);
 800160e:	2205      	movs	r2, #5
 8001610:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001614:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f002 fba9 	bl	8003d70 <static_strings_substring>
 800161e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001622:	f103 0318 	add.w	r3, r3, #24
 8001626:	6018      	str	r0, [r3, #0]
  if (substring != NULL){
 8001628:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800162c:	f103 0318 	add.w	r3, r3, #24
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00e      	beq.n	8001654 <main+0xbcc>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2203      	movs	r2, #3
 800163c:	4972      	ldr	r1, [pc, #456]	; (8001808 <main+0xd80>)
 800163e:	4871      	ldr	r0, [pc, #452]	; (8001804 <main+0xd7c>)
 8001640:	f001 fe97 	bl	8003372 <HAL_UART_Transmit>
	  static_strings_deallocate(substring);
 8001644:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001648:	f103 0318 	add.w	r3, r3, #24
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	f002 faab 	bl	8003ba8 <static_strings_deallocate>
 8001652:	e006      	b.n	8001662 <main+0xbda>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	2203      	movs	r2, #3
 800165a:	4969      	ldr	r1, [pc, #420]	; (8001800 <main+0xd78>)
 800165c:	4869      	ldr	r0, [pc, #420]	; (8001804 <main+0xd7c>)
 800165e:	f001 fe88 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 39

  uint8_t concatenate_at_memory[] = "Hello \0";
 8001662:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001666:	3b14      	subs	r3, #20
 8001668:	4a68      	ldr	r2, [pc, #416]	; (800180c <main+0xd84>)
 800166a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166e:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate_at;
  static_strings_create_custom_string(&concatenate_at,concatenate_at_memory);
 8001672:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001676:	3a14      	subs	r2, #20
 8001678:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800167c:	3b1c      	subs	r3, #28
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fa74 	bl	8003b6e <static_strings_create_custom_string>
  uint8_t concatenate_memory[] = "World\r\n";
 8001686:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800168a:	3b04      	subs	r3, #4
 800168c:	4a60      	ldr	r2, [pc, #384]	; (8001810 <main+0xd88>)
 800168e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001692:	e883 0003 	stmia.w	r3, {r0, r1}
  static_strings_string_descriptor concatenate;
  static_strings_create_custom_string(&concatenate,concatenate_memory);
 8001696:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800169a:	3a04      	subs	r2, #4
 800169c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016a0:	3b0c      	subs	r3, #12
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fa62 	bl	8003b6e <static_strings_create_custom_string>
  static_strings_string_descriptor *concatenated;
  concatenated = static_strings_concatenate(&concatenate_at,&concatenate);
 80016aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016ae:	3a0c      	subs	r2, #12
 80016b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016b4:	3b1c      	subs	r3, #28
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fb9b 	bl	8003df4 <static_strings_concatenate>
 80016be:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80016c2:	f103 0314 	add.w	r3, r3, #20
 80016c6:	6018      	str	r0, [r3, #0]
  if (concatenated != NULL) {
 80016c8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80016cc:	f103 0314 	add.w	r3, r3, #20
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d017      	beq.n	8001706 <main+0xc7e>
  	  HAL_UART_Transmit(&huart1,concatenated->string,concatenated->length,HAL_MAX_DELAY);
 80016d6:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80016da:	f103 0314 	add.w	r3, r3, #20
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80016e6:	f103 0314 	add.w	r3, r3, #20
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	889a      	ldrh	r2, [r3, #4]
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	4844      	ldr	r0, [pc, #272]	; (8001804 <main+0xd7c>)
 80016f4:	f001 fe3d 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(concatenated);
 80016f8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80016fc:	f103 0314 	add.w	r3, r3, #20
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f002 fa51 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 40

  if(static_strings_contains_string(concatenated,&concatenate_at)){
 8001706:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800170a:	3b1c      	subs	r3, #28
 800170c:	4619      	mov	r1, r3
 800170e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001712:	f103 0314 	add.w	r3, r3, #20
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	f002 fbe2 	bl	8003ee0 <static_strings_contains_string>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <main+0xcaa>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	2203      	movs	r2, #3
 8001728:	4937      	ldr	r1, [pc, #220]	; (8001808 <main+0xd80>)
 800172a:	4836      	ldr	r0, [pc, #216]	; (8001804 <main+0xd7c>)
 800172c:	f001 fe21 	bl	8003372 <HAL_UART_Transmit>
 8001730:	e006      	b.n	8001740 <main+0xcb8>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2203      	movs	r2, #3
 8001738:	4931      	ldr	r1, [pc, #196]	; (8001800 <main+0xd78>)
 800173a:	4832      	ldr	r0, [pc, #200]	; (8001804 <main+0xd7c>)
 800173c:	f001 fe19 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 41

  if(static_strings_contains_string(concatenated,&concatenate)){
 8001740:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001744:	3b0c      	subs	r3, #12
 8001746:	4619      	mov	r1, r3
 8001748:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800174c:	f103 0314 	add.w	r3, r3, #20
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f002 fbc5 	bl	8003ee0 <static_strings_contains_string>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <main+0xce4>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	2203      	movs	r2, #3
 8001762:	4929      	ldr	r1, [pc, #164]	; (8001808 <main+0xd80>)
 8001764:	4827      	ldr	r0, [pc, #156]	; (8001804 <main+0xd7c>)
 8001766:	f001 fe04 	bl	8003372 <HAL_UART_Transmit>
 800176a:	e006      	b.n	800177a <main+0xcf2>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2203      	movs	r2, #3
 8001772:	4923      	ldr	r1, [pc, #140]	; (8001800 <main+0xd78>)
 8001774:	4823      	ldr	r0, [pc, #140]	; (8001804 <main+0xd7c>)
 8001776:	f001 fdfc 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 42

  uint8_t non_contained_memory[] = "Hill\0";
 800177a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800177e:	3b14      	subs	r3, #20
 8001780:	4a24      	ldr	r2, [pc, #144]	; (8001814 <main+0xd8c>)
 8001782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001786:	6018      	str	r0, [r3, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor non_contained;
  static_strings_create_custom_string(&non_contained,non_contained_memory);
 800178c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001790:	3a14      	subs	r2, #20
 8001792:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001796:	3b1c      	subs	r3, #28
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f002 f9e7 	bl	8003b6e <static_strings_create_custom_string>
  if(static_strings_contains_string(concatenated,&non_contained)){
 80017a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017a4:	3b1c      	subs	r3, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80017ac:	f103 0314 	add.w	r3, r3, #20
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	f002 fb95 	bl	8003ee0 <static_strings_contains_string>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <main+0xd44>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	2203      	movs	r2, #3
 80017c2:	4911      	ldr	r1, [pc, #68]	; (8001808 <main+0xd80>)
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <main+0xd7c>)
 80017c6:	f001 fdd4 	bl	8003372 <HAL_UART_Transmit>
 80017ca:	e006      	b.n	80017da <main+0xd52>
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	2203      	movs	r2, #3
 80017d2:	490b      	ldr	r1, [pc, #44]	; (8001800 <main+0xd78>)
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <main+0xd7c>)
 80017d6:	f001 fdcc 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 43

  if(static_strings_contains_char(concatenated,'W')){
 80017da:	2157      	movs	r1, #87	; 0x57
 80017dc:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80017e0:	f103 0314 	add.w	r3, r3, #20
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	f002 fbc2 	bl	8003f6e <static_strings_contains_char>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <main+0xd90>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	2203      	movs	r2, #3
 80017f6:	4904      	ldr	r1, [pc, #16]	; (8001808 <main+0xd80>)
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <main+0xd7c>)
 80017fa:	f001 fdba 	bl	8003372 <HAL_UART_Transmit>
 80017fe:	e012      	b.n	8001826 <main+0xd9e>
 8001800:	080063f4 	.word	0x080063f4
 8001804:	20000ca4 	.word	0x20000ca4
 8001808:	080063f0 	.word	0x080063f0
 800180c:	08007094 	.word	0x08007094
 8001810:	0800709c 	.word	0x0800709c
 8001814:	080070a4 	.word	0x080070a4
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	2203      	movs	r2, #3
 800181e:	4951      	ldr	r1, [pc, #324]	; (8001964 <main+0xedc>)
 8001820:	4851      	ldr	r0, [pc, #324]	; (8001968 <main+0xee0>)
 8001822:	f001 fda6 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 44

  if(static_strings_contains_char(concatenated,'e')){
 8001826:	2165      	movs	r1, #101	; 0x65
 8001828:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800182c:	f103 0314 	add.w	r3, r3, #20
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f002 fb9c 	bl	8003f6e <static_strings_contains_char>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <main+0xdc4>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	2203      	movs	r2, #3
 8001842:	494a      	ldr	r1, [pc, #296]	; (800196c <main+0xee4>)
 8001844:	4848      	ldr	r0, [pc, #288]	; (8001968 <main+0xee0>)
 8001846:	f001 fd94 	bl	8003372 <HAL_UART_Transmit>
 800184a:	e006      	b.n	800185a <main+0xdd2>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	2203      	movs	r2, #3
 8001852:	4944      	ldr	r1, [pc, #272]	; (8001964 <main+0xedc>)
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <main+0xee0>)
 8001856:	f001 fd8c 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 45

  if(static_strings_contains_char(concatenated,'m')){
 800185a:	216d      	movs	r1, #109	; 0x6d
 800185c:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001860:	f103 0314 	add.w	r3, r3, #20
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	f002 fb82 	bl	8003f6e <static_strings_contains_char>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <main+0xdf8>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	2203      	movs	r2, #3
 8001876:	493d      	ldr	r1, [pc, #244]	; (800196c <main+0xee4>)
 8001878:	483b      	ldr	r0, [pc, #236]	; (8001968 <main+0xee0>)
 800187a:	f001 fd7a 	bl	8003372 <HAL_UART_Transmit>
 800187e:	e006      	b.n	800188e <main+0xe06>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	2203      	movs	r2, #3
 8001886:	4937      	ldr	r1, [pc, #220]	; (8001964 <main+0xedc>)
 8001888:	4837      	ldr	r0, [pc, #220]	; (8001968 <main+0xee0>)
 800188a:	f001 fd72 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 46

  uint8_t equal_a_memory[] = "Hall\0";
 800188e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001892:	3b04      	subs	r3, #4
 8001894:	4a36      	ldr	r2, [pc, #216]	; (8001970 <main+0xee8>)
 8001896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189a:	6018      	str	r0, [r3, #0]
 800189c:	3304      	adds	r3, #4
 800189e:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_a;
  uint8_t equal_b_memory[] = "Hall\0";
 80018a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a4:	3b14      	subs	r3, #20
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <main+0xee8>)
 80018a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ac:	6018      	str	r0, [r3, #0]
 80018ae:	3304      	adds	r3, #4
 80018b0:	8019      	strh	r1, [r3, #0]
  static_strings_string_descriptor equal_b;
  uint8_t non_equal_memory[] = "oil\0";
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	3b04      	subs	r3, #4
 80018b8:	4a2e      	ldr	r2, [pc, #184]	; (8001974 <main+0xeec>)
 80018ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018be:	6018      	str	r0, [r3, #0]
 80018c0:	3304      	adds	r3, #4
 80018c2:	7019      	strb	r1, [r3, #0]
  static_strings_string_descriptor non_equal;
  static_strings_create_custom_string(&equal_a,equal_a_memory);
 80018c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018c8:	3a04      	subs	r2, #4
 80018ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ce:	3b0c      	subs	r3, #12
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 f94b 	bl	8003b6e <static_strings_create_custom_string>
  static_strings_create_custom_string(&equal_b,equal_b_memory);
 80018d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018dc:	3a14      	subs	r2, #20
 80018de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e2:	3b1c      	subs	r3, #28
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 f941 	bl	8003b6e <static_strings_create_custom_string>
  static_strings_create_custom_string(&non_equal,non_equal_memory);
 80018ec:	f107 0210 	add.w	r2, r7, #16
 80018f0:	3a04      	subs	r2, #4
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	3b0c      	subs	r3, #12
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 f937 	bl	8003b6e <static_strings_create_custom_string>

  if(static_strings_compare(&equal_a,&equal_b)){
 8001900:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001904:	3a1c      	subs	r2, #28
 8001906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190a:	3b0c      	subs	r3, #12
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fb4f 	bl	8003fb2 <static_strings_compare>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <main+0xea2>
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	2203      	movs	r2, #3
 8001920:	4912      	ldr	r1, [pc, #72]	; (800196c <main+0xee4>)
 8001922:	4811      	ldr	r0, [pc, #68]	; (8001968 <main+0xee0>)
 8001924:	f001 fd25 	bl	8003372 <HAL_UART_Transmit>
 8001928:	e006      	b.n	8001938 <main+0xeb0>
  }
  else{
  	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	2203      	movs	r2, #3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <main+0xedc>)
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <main+0xee0>)
 8001934:	f001 fd1d 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 47

  if(static_strings_compare(&equal_a,&non_equal)){
 8001938:	f107 0210 	add.w	r2, r7, #16
 800193c:	3a0c      	subs	r2, #12
 800193e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001942:	3b0c      	subs	r3, #12
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fb33 	bl	8003fb2 <static_strings_compare>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d012      	beq.n	8001978 <main+0xef0>
	  HAL_UART_Transmit(&huart1,(uint8_t *)"1\r\n",3,HAL_MAX_DELAY);
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	2203      	movs	r2, #3
 8001958:	4904      	ldr	r1, [pc, #16]	; (800196c <main+0xee4>)
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <main+0xee0>)
 800195c:	f001 fd09 	bl	8003372 <HAL_UART_Transmit>
 8001960:	e011      	b.n	8001986 <main+0xefe>
 8001962:	bf00      	nop
 8001964:	080063f4 	.word	0x080063f4
 8001968:	20000ca4 	.word	0x20000ca4
 800196c:	080063f0 	.word	0x080063f0
 8001970:	080070ac 	.word	0x080070ac
 8001974:	080070b4 	.word	0x080070b4
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"0\r\n",3,HAL_MAX_DELAY);
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	2203      	movs	r2, #3
 800197e:	49ce      	ldr	r1, [pc, #824]	; (8001cb8 <main+0x1230>)
 8001980:	48ce      	ldr	r0, [pc, #824]	; (8001cbc <main+0x1234>)
 8001982:	f001 fcf6 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 48

  static_strings_string_descriptor *var_string;
  uint8_t uint8 = 200;
 8001986:	23c8      	movs	r3, #200	; 0xc8
 8001988:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 800198c:	f102 0213 	add.w	r2, r2, #19
 8001990:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_uint8_to_string(uint8);
 8001992:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001996:	f103 0313 	add.w	r3, r3, #19
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fb35 	bl	800400c <static_strings_uint8_to_string>
 80019a2:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019a6:	f103 030c 	add.w	r3, r3, #12
 80019aa:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 80019ac:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019b0:	f103 030c 	add.w	r3, r3, #12
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d017      	beq.n	80019ea <main+0xf62>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 80019ba:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019be:	f103 030c 	add.w	r3, r3, #12
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019ca:	f103 030c 	add.w	r3, r3, #12
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	889a      	ldrh	r2, [r3, #4]
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	48b9      	ldr	r0, [pc, #740]	; (8001cbc <main+0x1234>)
 80019d8:	f001 fccb 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 80019dc:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019e0:	f103 030c 	add.w	r3, r3, #12
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f002 f8df 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 49

  uint16_t uint16 = 64200;
 80019ea:	f64f 23c8 	movw	r3, #64200	; 0xfac8
 80019ee:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 80019f2:	f102 020a 	add.w	r2, r2, #10
 80019f6:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_uint16_to_string(uint16);
 80019f8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019fc:	f103 030a 	add.w	r3, r3, #10
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fb36 	bl	8004074 <static_strings_uint16_to_string>
 8001a08:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a0c:	f103 030c 	add.w	r3, r3, #12
 8001a10:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001a12:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a16:	f103 030c 	add.w	r3, r3, #12
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d017      	beq.n	8001a50 <main+0xfc8>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001a20:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a24:	f103 030c 	add.w	r3, r3, #12
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a30:	f103 030c 	add.w	r3, r3, #12
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	889a      	ldrh	r2, [r3, #4]
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	489f      	ldr	r0, [pc, #636]	; (8001cbc <main+0x1234>)
 8001a3e:	f001 fc98 	bl	8003372 <HAL_UART_Transmit>
	  static_strings_deallocate(var_string);
 8001a42:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a46:	f103 030c 	add.w	r3, r3, #12
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	f002 f8ac 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 50

  uint32_t uint32 = 1000064200;
 8001a50:	4b9b      	ldr	r3, [pc, #620]	; (8001cc0 <main+0x1238>)
 8001a52:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001a56:	f102 0204 	add.w	r2, r2, #4
 8001a5a:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(uint32);
 8001a5c:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a60:	f103 0304 	add.w	r3, r3, #4
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	f002 fb39 	bl	80040dc <static_strings_uint32_to_string>
 8001a6a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a6e:	f103 030c 	add.w	r3, r3, #12
 8001a72:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001a74:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a78:	f103 030c 	add.w	r3, r3, #12
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d017      	beq.n	8001ab2 <main+0x102a>
	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001a82:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a86:	f103 030c 	add.w	r3, r3, #12
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001a92:	f103 030c 	add.w	r3, r3, #12
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	889a      	ldrh	r2, [r3, #4]
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	4887      	ldr	r0, [pc, #540]	; (8001cbc <main+0x1234>)
 8001aa0:	f001 fc67 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001aa4:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001aa8:	f103 030c 	add.w	r3, r3, #12
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f002 f87b 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 51

  int8_t int8 = 100;
 8001ab2:	2364      	movs	r3, #100	; 0x64
 8001ab4:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001ab8:	f102 0203 	add.w	r2, r2, #3
 8001abc:	7013      	strb	r3, [r2, #0]
  var_string = static_strings_int8_to_string(int8);
 8001abe:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001ac2:	f103 0303 	add.w	r3, r3, #3
 8001ac6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fb38 	bl	8004140 <static_strings_int8_to_string>
 8001ad0:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001ad4:	f103 030c 	add.w	r3, r3, #12
 8001ad8:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001ada:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001ade:	f103 030c 	add.w	r3, r3, #12
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d017      	beq.n	8001b18 <main+0x1090>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001ae8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001aec:	f103 030c 	add.w	r3, r3, #12
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001af8:	f103 030c 	add.w	r3, r3, #12
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	889a      	ldrh	r2, [r3, #4]
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	486d      	ldr	r0, [pc, #436]	; (8001cbc <main+0x1234>)
 8001b06:	f001 fc34 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001b0a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b0e:	f103 030c 	add.w	r3, r3, #12
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f002 f848 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 52

  int16_t int16 = -32100;
 8001b18:	f248 239c 	movw	r3, #33436	; 0x829c
 8001b1c:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001b20:	8013      	strh	r3, [r2, #0]
  var_string = static_strings_int16_to_string(int16);
 8001b22:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fb3c 	bl	80041a8 <static_strings_int16_to_string>
 8001b30:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b34:	f103 030c 	add.w	r3, r3, #12
 8001b38:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001b3a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b3e:	f103 030c 	add.w	r3, r3, #12
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <main+0x10f0>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001b48:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b4c:	f103 030c 	add.w	r3, r3, #12
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b58:	f103 030c 	add.w	r3, r3, #12
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	889a      	ldrh	r2, [r3, #4]
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	4855      	ldr	r0, [pc, #340]	; (8001cbc <main+0x1234>)
 8001b66:	f001 fc04 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001b6a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b6e:	f103 030c 	add.w	r3, r3, #12
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	f002 f818 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 53

  int32_t int32 = 500032100;
 8001b78:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <main+0x123c>)
 8001b7a:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001b7e:	f102 021c 	add.w	r2, r2, #28
 8001b82:	6013      	str	r3, [r2, #0]
  var_string = static_strings_uint32_to_string(int32);
 8001b84:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001b88:	f103 031c 	add.w	r3, r3, #28
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 faa4 	bl	80040dc <static_strings_uint32_to_string>
 8001b94:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b98:	f103 030c 	add.w	r3, r3, #12
 8001b9c:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001b9e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001ba2:	f103 030c 	add.w	r3, r3, #12
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d017      	beq.n	8001bdc <main+0x1154>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001bac:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001bb0:	f103 030c 	add.w	r3, r3, #12
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001bbc:	f103 030c 	add.w	r3, r3, #12
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	889a      	ldrh	r2, [r3, #4]
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc8:	483c      	ldr	r0, [pc, #240]	; (8001cbc <main+0x1234>)
 8001bca:	f001 fbd2 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001bce:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001bd2:	f103 030c 	add.w	r3, r3, #12
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	f001 ffe6 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 54

  float float_number = 19.60232;
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <main+0x1240>)
 8001bde:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001be2:	f102 0218 	add.w	r2, r2, #24
 8001be6:	6013      	str	r3, [r2, #0]
  var_string = static_strings_float_to_string(float_number);
 8001be8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001bec:	f103 0318 	add.w	r3, r3, #24
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f002 fb0d 	bl	8004210 <static_strings_float_to_string>
 8001bf6:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001bfa:	f103 030c 	add.w	r3, r3, #12
 8001bfe:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c00:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c04:	f103 030c 	add.w	r3, r3, #12
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d017      	beq.n	8001c3e <main+0x11b6>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c0e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c12:	f103 030c 	add.w	r3, r3, #12
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c1e:	f103 030c 	add.w	r3, r3, #12
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	889a      	ldrh	r2, [r3, #4]
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	4824      	ldr	r0, [pc, #144]	; (8001cbc <main+0x1234>)
 8001c2c:	f001 fba1 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001c30:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c34:	f103 030c 	add.w	r3, r3, #12
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	f001 ffb5 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 55

  double double_number = -1924.2342;
 8001c3e:	a41c      	add	r4, pc, #112	; (adr r4, 8001cb0 <main+0x1228>)
 8001c40:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c44:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8001c48:	f102 0210 	add.w	r2, r2, #16
 8001c4c:	e9c2 3400 	strd	r3, r4, [r2]
  var_string = static_strings_double_to_string(double_number);
 8001c50:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001c54:	f103 0310 	add.w	r3, r3, #16
 8001c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5c:	f002 fb10 	bl	8004280 <static_strings_double_to_string>
 8001c60:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c64:	f103 030c 	add.w	r3, r3, #12
 8001c68:	6018      	str	r0, [r3, #0]
  if(var_string != NULL){
 8001c6a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c6e:	f103 030c 	add.w	r3, r3, #12
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d017      	beq.n	8001ca8 <main+0x1220>
  	  HAL_UART_Transmit(&huart1,var_string->string,var_string->length,HAL_MAX_DELAY);
 8001c78:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c7c:	f103 030c 	add.w	r3, r3, #12
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c88:	f103 030c 	add.w	r3, r3, #12
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	889a      	ldrh	r2, [r3, #4]
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <main+0x1234>)
 8001c96:	f001 fb6c 	bl	8003372 <HAL_UART_Transmit>
  	  static_strings_deallocate(var_string);
 8001c9a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c9e:	f103 030c 	add.w	r3, r3, #12
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f001 ff80 	bl	8003ba8 <static_strings_deallocate>
  }

  // test 56

  static_strings_string_descriptor *copy_test_source_string = static_strings_save((uint8_t *)"I am a copy test\r\n");
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <main+0x1244>)
 8001caa:	f001 ff39 	bl	8003b20 <static_strings_save>
 8001cae:	e00f      	b.n	8001cd0 <main+0x1248>
 8001cb0:	d21ff2e5 	.word	0xd21ff2e5
 8001cb4:	c09e10ef 	.word	0xc09e10ef
 8001cb8:	080063f4 	.word	0x080063f4
 8001cbc:	20000ca4 	.word	0x20000ca4
 8001cc0:	3b9bc4c8 	.word	0x3b9bc4c8
 8001cc4:	1dcde264 	.word	0x1dcde264
 8001cc8:	419cd18d 	.word	0x419cd18d
 8001ccc:	080063f8 	.word	0x080063f8
 8001cd0:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001cd4:	f103 030c 	add.w	r3, r3, #12
 8001cd8:	6018      	str	r0, [r3, #0]
  if(copy_test_source_string != NULL){
 8001cda:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001cde:	f103 030c 	add.w	r3, r3, #12
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d046      	beq.n	8001d76 <main+0x12ee>
	  static_strings_string_descriptor *copy_test_target_string = static_strings_allocate(100);
 8001ce8:	2064      	movs	r0, #100	; 0x64
 8001cea:	f001 fe5f 	bl	80039ac <static_strings_allocate>
 8001cee:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001cf2:	f103 0308 	add.w	r3, r3, #8
 8001cf6:	6018      	str	r0, [r3, #0]
	  if(static_strings_copy(copy_test_target_string,copy_test_source_string,0) != NULL){
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001cfe:	f103 030c 	add.w	r3, r3, #12
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001d08:	f103 0308 	add.w	r3, r3, #8
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	f001 fdd5 	bl	80038bc <static_strings_copy>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01f      	beq.n	8001d58 <main+0x12d0>
		  HAL_UART_Transmit(&huart1,copy_test_target_string->string,copy_test_target_string->length,HAL_MAX_DELAY);
 8001d18:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001d1c:	f103 0308 	add.w	r3, r3, #8
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001d28:	f103 0308 	add.w	r3, r3, #8
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	889a      	ldrh	r2, [r3, #4]
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	48ba      	ldr	r0, [pc, #744]	; (8002020 <main+0x1598>)
 8001d36:	f001 fb1c 	bl	8003372 <HAL_UART_Transmit>
		  static_strings_deallocate(copy_test_source_string);
 8001d3a:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001d3e:	f103 030c 	add.w	r3, r3, #12
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	f001 ff30 	bl	8003ba8 <static_strings_deallocate>
		  static_strings_deallocate(copy_test_target_string);
 8001d48:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001d4c:	f103 0308 	add.w	r3, r3, #8
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	f001 ff29 	bl	8003ba8 <static_strings_deallocate>
 8001d56:	e01c      	b.n	8001d92 <main+0x130a>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	49b1      	ldr	r1, [pc, #708]	; (8002024 <main+0x159c>)
 8001d60:	48af      	ldr	r0, [pc, #700]	; (8002020 <main+0x1598>)
 8001d62:	f001 fb06 	bl	8003372 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	49ae      	ldr	r1, [pc, #696]	; (8002028 <main+0x15a0>)
 8001d6e:	48ac      	ldr	r0, [pc, #688]	; (8002020 <main+0x1598>)
 8001d70:	f001 faff 	bl	8003372 <HAL_UART_Transmit>
 8001d74:	e00d      	b.n	8001d92 <main+0x130a>
	  }
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	49ab      	ldr	r1, [pc, #684]	; (800202c <main+0x15a4>)
 8001d7e:	48a8      	ldr	r0, [pc, #672]	; (8002020 <main+0x1598>)
 8001d80:	f001 faf7 	bl	8003372 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	2201      	movs	r2, #1
 8001d8a:	49a7      	ldr	r1, [pc, #668]	; (8002028 <main+0x15a0>)
 8001d8c:	48a4      	ldr	r0, [pc, #656]	; (8002020 <main+0x1598>)
 8001d8e:	f001 faf0 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 57

  static_strings_string_descriptor *clone_test_source_string = static_strings_save((uint8_t *)"I am a clone test\r\n");
 8001d92:	48a7      	ldr	r0, [pc, #668]	; (8002030 <main+0x15a8>)
 8001d94:	f001 fec4 	bl	8003b20 <static_strings_save>
 8001d98:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001d9c:	f103 0304 	add.w	r3, r3, #4
 8001da0:	6018      	str	r0, [r3, #0]
  if(copy_test_source_string != NULL){
 8001da2:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001da6:	f103 030c 	add.w	r3, r3, #12
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d037      	beq.n	8001e20 <main+0x1398>
	  static_strings_string_descriptor *clone_test_target_string = static_strings_clone(clone_test_source_string);
 8001db0:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001db4:	f103 0304 	add.w	r3, r3, #4
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f001 fdd1 	bl	8003960 <static_strings_clone>
 8001dbe:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001dc2:	6018      	str	r0, [r3, #0]
	  if(clone_test_target_string != NULL){
 8001dc4:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d019      	beq.n	8001e02 <main+0x137a>
		  HAL_UART_Transmit(&huart1,clone_test_target_string->string,clone_test_target_string->length,HAL_MAX_DELAY);
 8001dce:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	889a      	ldrh	r2, [r3, #4]
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	488f      	ldr	r0, [pc, #572]	; (8002020 <main+0x1598>)
 8001de4:	f001 fac5 	bl	8003372 <HAL_UART_Transmit>
		  static_strings_deallocate(clone_test_source_string);
 8001de8:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001dec:	f103 0304 	add.w	r3, r3, #4
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f001 fed9 	bl	8003ba8 <static_strings_deallocate>
		  static_strings_deallocate(clone_test_target_string);
 8001df6:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	f001 fed4 	bl	8003ba8 <static_strings_deallocate>
 8001e00:	e01c      	b.n	8001e3c <main+0x13b4>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	2208      	movs	r2, #8
 8001e08:	4986      	ldr	r1, [pc, #536]	; (8002024 <main+0x159c>)
 8001e0a:	4885      	ldr	r0, [pc, #532]	; (8002020 <main+0x1598>)
 8001e0c:	f001 fab1 	bl	8003372 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	2201      	movs	r2, #1
 8001e16:	4984      	ldr	r1, [pc, #528]	; (8002028 <main+0x15a0>)
 8001e18:	4881      	ldr	r0, [pc, #516]	; (8002020 <main+0x1598>)
 8001e1a:	f001 faaa 	bl	8003372 <HAL_UART_Transmit>
 8001e1e:	e00d      	b.n	8001e3c <main+0x13b4>
	  }
  }
  else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	2208      	movs	r2, #8
 8001e26:	4981      	ldr	r1, [pc, #516]	; (800202c <main+0x15a4>)
 8001e28:	487d      	ldr	r0, [pc, #500]	; (8002020 <main+0x1598>)
 8001e2a:	f001 faa2 	bl	8003372 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	2201      	movs	r2, #1
 8001e34:	497c      	ldr	r1, [pc, #496]	; (8002028 <main+0x15a0>)
 8001e36:	487a      	ldr	r0, [pc, #488]	; (8002020 <main+0x1598>)
 8001e38:	f001 fa9b 	bl	8003372 <HAL_UART_Transmit>
  }

  // test 58

	static_strings_string_descriptor *move_test_source_string = static_strings_save((uint8_t *)"I am a move test\r\n");
 8001e3c:	487d      	ldr	r0, [pc, #500]	; (8002034 <main+0x15ac>)
 8001e3e:	f001 fe6f 	bl	8003b20 <static_strings_save>
 8001e42:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001e46:	f103 031c 	add.w	r3, r3, #28
 8001e4a:	6018      	str	r0, [r3, #0]
	if(copy_test_source_string != NULL){
 8001e4c:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 8001e50:	f103 030c 	add.w	r3, r3, #12
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d057      	beq.n	8001f0a <main+0x1482>
	  static_strings_string_descriptor *move_test_target_string = static_strings_allocate(100);
 8001e5a:	2064      	movs	r0, #100	; 0x64
 8001e5c:	f001 fda6 	bl	80039ac <static_strings_allocate>
 8001e60:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001e64:	f103 0318 	add.w	r3, r3, #24
 8001e68:	6018      	str	r0, [r3, #0]
	  *move_test_target_string->string = '.';
 8001e6a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001e6e:	f103 0318 	add.w	r3, r3, #24
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	222e      	movs	r2, #46	; 0x2e
 8001e78:	701a      	strb	r2, [r3, #0]
	  if(static_strings_move(move_test_target_string,move_test_source_string,1) != NULL){
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001e80:	f103 031c 	add.w	r3, r3, #28
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001e8a:	f103 0318 	add.w	r3, r3, #24
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f001 fd4c 	bl	800392c <static_strings_move>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d028      	beq.n	8001eec <main+0x1464>
		  if(move_test_source_string->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8001e9a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001e9e:	f103 031c 	add.w	r3, r3, #28
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	79db      	ldrb	r3, [r3, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d111      	bne.n	8001ece <main+0x1446>
			HAL_UART_Transmit(&huart1,move_test_target_string->string,move_test_target_string->length,HAL_MAX_DELAY);
 8001eaa:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001eae:	f103 0318 	add.w	r3, r3, #24
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001eba:	f103 0318 	add.w	r3, r3, #24
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	889a      	ldrh	r2, [r3, #4]
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	4856      	ldr	r0, [pc, #344]	; (8002020 <main+0x1598>)
 8001ec8:	f001 fa53 	bl	8003372 <HAL_UART_Transmit>
 8001ecc:	e006      	b.n	8001edc <main+0x1454>
		  }
		  else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	4958      	ldr	r1, [pc, #352]	; (8002038 <main+0x15b0>)
 8001ed6:	4852      	ldr	r0, [pc, #328]	; (8002020 <main+0x1598>)
 8001ed8:	f001 fa4b 	bl	8003372 <HAL_UART_Transmit>
		  }
		  static_strings_deallocate(move_test_source_string);
 8001edc:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ee0:	f103 031c 	add.w	r3, r3, #28
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	f001 fe5f 	bl	8003ba8 <static_strings_deallocate>
 8001eea:	e01c      	b.n	8001f26 <main+0x149e>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	494c      	ldr	r1, [pc, #304]	; (8002024 <main+0x159c>)
 8001ef4:	484a      	ldr	r0, [pc, #296]	; (8002020 <main+0x1598>)
 8001ef6:	f001 fa3c 	bl	8003372 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	2201      	movs	r2, #1
 8001f00:	4949      	ldr	r1, [pc, #292]	; (8002028 <main+0x15a0>)
 8001f02:	4847      	ldr	r0, [pc, #284]	; (8002020 <main+0x1598>)
 8001f04:	f001 fa35 	bl	8003372 <HAL_UART_Transmit>
 8001f08:	e00d      	b.n	8001f26 <main+0x149e>
	  }
	}
	else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	2208      	movs	r2, #8
 8001f10:	4946      	ldr	r1, [pc, #280]	; (800202c <main+0x15a4>)
 8001f12:	4843      	ldr	r0, [pc, #268]	; (8002020 <main+0x1598>)
 8001f14:	f001 fa2d 	bl	8003372 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4942      	ldr	r1, [pc, #264]	; (8002028 <main+0x15a0>)
 8001f20:	483f      	ldr	r0, [pc, #252]	; (8002020 <main+0x1598>)
 8001f22:	f001 fa26 	bl	8003372 <HAL_UART_Transmit>
	}

	// test 59

	static_strings_string_descriptor *concatenate_and_clean_concatenate_at_test = static_strings_save((uint8_t *)"I am a ");
 8001f26:	4845      	ldr	r0, [pc, #276]	; (800203c <main+0x15b4>)
 8001f28:	f001 fdfa 	bl	8003b20 <static_strings_save>
 8001f2c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f30:	f103 0314 	add.w	r3, r3, #20
 8001f34:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_and_clean_concatenate_test = static_strings_save((uint8_t *)"concatenate test\r\n");
 8001f36:	4842      	ldr	r0, [pc, #264]	; (8002040 <main+0x15b8>)
 8001f38:	f001 fdf2 	bl	8003b20 <static_strings_save>
 8001f3c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f40:	f103 0310 	add.w	r3, r3, #16
 8001f44:	6018      	str	r0, [r3, #0]
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8001f46:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f4a:	f103 0314 	add.w	r3, r3, #20
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d077      	beq.n	8002044 <main+0x15bc>
 8001f54:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f58:	f103 0310 	add.w	r3, r3, #16
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d070      	beq.n	8002044 <main+0x15bc>
	  static_strings_string_descriptor *concatenated_string = static_strings_concatenate_and_clean(concatenate_and_clean_concatenate_at_test,concatenate_and_clean_concatenate_test);
 8001f62:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f66:	f103 0310 	add.w	r3, r3, #16
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f70:	f103 0314 	add.w	r3, r3, #20
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	f001 ff72 	bl	8003e5e <static_strings_concatenate_and_clean>
 8001f7a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f7e:	f103 030c 	add.w	r3, r3, #12
 8001f82:	6018      	str	r0, [r3, #0]
	  if(concatenated_string != NULL){
 8001f84:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f88:	f103 030c 	add.w	r3, r3, #12
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d036      	beq.n	8002000 <main+0x1578>
		  if(concatenate_and_clean_concatenate_at_test->status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8001f92:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001f96:	f103 0314 	add.w	r3, r3, #20
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	79db      	ldrb	r3, [r3, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d111      	bne.n	8001fc6 <main+0x153e>
			  HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 8001fa2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001fa6:	f103 030c 	add.w	r3, r3, #12
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001fb2:	f103 030c 	add.w	r3, r3, #12
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	889a      	ldrh	r2, [r3, #4]
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	4818      	ldr	r0, [pc, #96]	; (8002020 <main+0x1598>)
 8001fc0:	f001 f9d7 	bl	8003372 <HAL_UART_Transmit>
 8001fc4:	e006      	b.n	8001fd4 <main+0x154c>
		  }
		  else{
			  HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	2208      	movs	r2, #8
 8001fcc:	491a      	ldr	r1, [pc, #104]	; (8002038 <main+0x15b0>)
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <main+0x1598>)
 8001fd0:	f001 f9cf 	bl	8003372 <HAL_UART_Transmit>
		  }
		  static_strings_deallocate(concatenate_and_clean_concatenate_at_test);
 8001fd4:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001fd8:	f103 0314 	add.w	r3, r3, #20
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f001 fde3 	bl	8003ba8 <static_strings_deallocate>
		  static_strings_deallocate(concatenate_and_clean_concatenate_test);
 8001fe2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001fe6:	f103 0310 	add.w	r3, r3, #16
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f001 fddc 	bl	8003ba8 <static_strings_deallocate>
		  static_strings_deallocate(concatenated_string);
 8001ff0:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8001ff4:	f103 030c 	add.w	r3, r3, #12
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	f001 fdd5 	bl	8003ba8 <static_strings_deallocate>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 8001ffe:	e02f      	b.n	8002060 <main+0x15d8>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	2208      	movs	r2, #8
 8002006:	4907      	ldr	r1, [pc, #28]	; (8002024 <main+0x159c>)
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <main+0x1598>)
 800200a:	f001 f9b2 	bl	8003372 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	2201      	movs	r2, #1
 8002014:	4904      	ldr	r1, [pc, #16]	; (8002028 <main+0x15a0>)
 8002016:	4802      	ldr	r0, [pc, #8]	; (8002020 <main+0x1598>)
 8002018:	f001 f9ab 	bl	8003372 <HAL_UART_Transmit>
	if(concatenate_and_clean_concatenate_at_test != NULL && concatenate_and_clean_concatenate_test != NULL){
 800201c:	e020      	b.n	8002060 <main+0x15d8>
 800201e:	bf00      	nop
 8002020:	20000ca4 	.word	0x20000ca4
 8002024:	0800640c 	.word	0x0800640c
 8002028:	20000664 	.word	0x20000664
 800202c:	08006418 	.word	0x08006418
 8002030:	08006424 	.word	0x08006424
 8002034:	08006438 	.word	0x08006438
 8002038:	0800644c 	.word	0x0800644c
 800203c:	08006458 	.word	0x08006458
 8002040:	08006460 	.word	0x08006460
	  }
	}
	else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	2208      	movs	r2, #8
 800204a:	4955      	ldr	r1, [pc, #340]	; (80021a0 <main+0x1718>)
 800204c:	4855      	ldr	r0, [pc, #340]	; (80021a4 <main+0x171c>)
 800204e:	f001 f990 	bl	8003372 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	2201      	movs	r2, #1
 8002058:	4953      	ldr	r1, [pc, #332]	; (80021a8 <main+0x1720>)
 800205a:	4852      	ldr	r0, [pc, #328]	; (80021a4 <main+0x171c>)
 800205c:	f001 f989 	bl	8003372 <HAL_UART_Transmit>
	}

	// test 60

	static_strings_string_descriptor *concatenate_all_test_one = static_strings_save((uint8_t *)"I am a ");
 8002060:	4852      	ldr	r0, [pc, #328]	; (80021ac <main+0x1724>)
 8002062:	f001 fd5d 	bl	8003b20 <static_strings_save>
 8002066:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800206a:	f103 0308 	add.w	r3, r3, #8
 800206e:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_two = static_strings_save((uint8_t *)"concatenate all ");
 8002070:	484f      	ldr	r0, [pc, #316]	; (80021b0 <main+0x1728>)
 8002072:	f001 fd55 	bl	8003b20 <static_strings_save>
 8002076:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800207a:	f103 0304 	add.w	r3, r3, #4
 800207e:	6018      	str	r0, [r3, #0]
	static_strings_string_descriptor *concatenate_all_test_three = static_strings_save((uint8_t *)"test\r\n");
 8002080:	484c      	ldr	r0, [pc, #304]	; (80021b4 <main+0x172c>)
 8002082:	f001 fd4d 	bl	8003b20 <static_strings_save>
 8002086:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800208a:	6018      	str	r0, [r3, #0]
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 800208c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8002090:	f103 0308 	add.w	r3, r3, #8
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d072      	beq.n	8002180 <main+0x16f8>
 800209a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800209e:	f103 0304 	add.w	r3, r3, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d06b      	beq.n	8002180 <main+0x16f8>
 80020a8:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d066      	beq.n	8002180 <main+0x16f8>
	  static_strings_string_descriptor *concatenated_string = static_strings_concatenate_all(3,concatenate_all_test_one,concatenate_all_test_two,concatenate_all_test_three);
 80020b2:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 80020bc:	f102 0204 	add.w	r2, r2, #4
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f507 51d2 	add.w	r1, r7, #6720	; 0x1a40
 80020c6:	f101 0108 	add.w	r1, r1, #8
 80020ca:	6809      	ldr	r1, [r1, #0]
 80020cc:	2003      	movs	r0, #3
 80020ce:	f001 fedd 	bl	8003e8c <static_strings_concatenate_all>
 80020d2:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 80020d6:	f103 031c 	add.w	r3, r3, #28
 80020da:	6018      	str	r0, [r3, #0]
	  if(concatenated_string != NULL){
 80020dc:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 80020e0:	f103 031c 	add.w	r3, r3, #28
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03b      	beq.n	8002162 <main+0x16da>
		  if(concatenate_all_test_one->status == STATIC_STRINGS_STRING_STATUS_ALLOCATED){
 80020ea:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 80020ee:	f103 0308 	add.w	r3, r3, #8
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	79db      	ldrb	r3, [r3, #7]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d111      	bne.n	800211e <main+0x1696>
			HAL_UART_Transmit(&huart1,concatenated_string->string,concatenated_string->length,HAL_MAX_DELAY);
 80020fa:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 80020fe:	f103 031c 	add.w	r3, r3, #28
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 800210a:	f103 031c 	add.w	r3, r3, #28
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	889a      	ldrh	r2, [r3, #4]
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	4823      	ldr	r0, [pc, #140]	; (80021a4 <main+0x171c>)
 8002118:	f001 f92b 	bl	8003372 <HAL_UART_Transmit>
 800211c:	e006      	b.n	800212c <main+0x16a4>
		  }
		  else{
			HAL_UART_Transmit(&huart1,(uint8_t *)"error3\r\n",8,HAL_MAX_DELAY);
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	2208      	movs	r2, #8
 8002124:	4924      	ldr	r1, [pc, #144]	; (80021b8 <main+0x1730>)
 8002126:	481f      	ldr	r0, [pc, #124]	; (80021a4 <main+0x171c>)
 8002128:	f001 f923 	bl	8003372 <HAL_UART_Transmit>
		  }
		  static_strings_deallocate(concatenate_all_test_one);
 800212c:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 8002130:	f103 0308 	add.w	r3, r3, #8
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f001 fd37 	bl	8003ba8 <static_strings_deallocate>
		  static_strings_deallocate(concatenate_all_test_two);
 800213a:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800213e:	f103 0304 	add.w	r3, r3, #4
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f001 fd30 	bl	8003ba8 <static_strings_deallocate>
		  static_strings_deallocate(concatenate_all_test_three);
 8002148:	f507 53d2 	add.w	r3, r7, #6720	; 0x1a40
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	f001 fd2b 	bl	8003ba8 <static_strings_deallocate>
		  static_strings_deallocate(concatenated_string);
 8002152:	f507 53d1 	add.w	r3, r7, #6688	; 0x1a20
 8002156:	f103 031c 	add.w	r3, r3, #28
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f001 fd24 	bl	8003ba8 <static_strings_deallocate>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 8002160:	e01c      	b.n	800219c <main+0x1714>
	  }
	  else{
		  HAL_UART_Transmit(&huart1,(uint8_t *)"error2\r\n",8,HAL_MAX_DELAY);
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	2208      	movs	r2, #8
 8002168:	4914      	ldr	r1, [pc, #80]	; (80021bc <main+0x1734>)
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <main+0x171c>)
 800216c:	f001 f901 	bl	8003372 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
 8002174:	2201      	movs	r2, #1
 8002176:	490c      	ldr	r1, [pc, #48]	; (80021a8 <main+0x1720>)
 8002178:	480a      	ldr	r0, [pc, #40]	; (80021a4 <main+0x171c>)
 800217a:	f001 f8fa 	bl	8003372 <HAL_UART_Transmit>
	if(concatenate_all_test_one != NULL && concatenate_all_test_two != NULL && concatenate_all_test_three != NULL){
 800217e:	e00d      	b.n	800219c <main+0x1714>
	  }
	}
	else{
	  HAL_UART_Transmit(&huart1,(uint8_t *)"error1\r\n",8,HAL_MAX_DELAY);
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	2208      	movs	r2, #8
 8002186:	4906      	ldr	r1, [pc, #24]	; (80021a0 <main+0x1718>)
 8002188:	4806      	ldr	r0, [pc, #24]	; (80021a4 <main+0x171c>)
 800218a:	f001 f8f2 	bl	8003372 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t *)&static_strings_error_code,1,HAL_MAX_DELAY);
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	2201      	movs	r2, #1
 8002194:	4904      	ldr	r1, [pc, #16]	; (80021a8 <main+0x1720>)
 8002196:	4803      	ldr	r0, [pc, #12]	; (80021a4 <main+0x171c>)
 8002198:	f001 f8eb 	bl	8003372 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800219c:	e7fe      	b.n	800219c <main+0x1714>
 800219e:	bf00      	nop
 80021a0:	08006418 	.word	0x08006418
 80021a4:	20000ca4 	.word	0x20000ca4
 80021a8:	20000664 	.word	0x20000664
 80021ac:	08006458 	.word	0x08006458
 80021b0:	08006474 	.word	0x08006474
 80021b4:	08006488 	.word	0x08006488
 80021b8:	0800644c 	.word	0x0800644c
 80021bc:	0800640c 	.word	0x0800640c

080021c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b090      	sub	sp, #64	; 0x40
 80021c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c6:	f107 0318 	add.w	r3, r7, #24
 80021ca:	2228      	movs	r2, #40	; 0x28
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 f8bf 	bl	8004352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f0:	2301      	movs	r3, #1
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f4:	2302      	movs	r3, #2
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fc49 	bl	8002aa0 <HAL_RCC_OscConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002214:	f000 f866 	bl	80022e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002218:	230f      	movs	r3, #15
 800221a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221c:	2302      	movs	r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2102      	movs	r1, #2
 8002232:	4618      	mov	r0, r3
 8002234:	f000 feb4 	bl	8002fa0 <HAL_RCC_ClockConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800223e:	f000 f851 	bl	80022e4 <Error_Handler>
  }
}
 8002242:	bf00      	nop
 8002244:	3740      	adds	r7, #64	; 0x40
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <MX_USART1_UART_Init+0x50>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002284:	f001 f828 	bl	80032d8 <HAL_UART_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800228e:	f000 f829 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000ca4 	.word	0x20000ca4
 800229c:	40013800 	.word	0x40013800

080022a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_GPIO_Init+0x40>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <MX_GPIO_Init+0x40>)
 80022ac:	f043 0320 	orr.w	r3, r3, #32
 80022b0:	6193      	str	r3, [r2, #24]
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_GPIO_Init+0x40>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_GPIO_Init+0x40>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <MX_GPIO_Init+0x40>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6193      	str	r3, [r2, #24]
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <MX_GPIO_Init+0x40>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]

}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40021000 	.word	0x40021000

080022e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_MspInit+0x5c>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_MspInit+0x5c>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6193      	str	r3, [r2, #24]
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_MspInit+0x5c>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_MspInit+0x5c>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_MspInit+0x5c>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_MspInit+0x5c>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_MspInit+0x60>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_MspInit+0x60>)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40021000 	.word	0x40021000
 8002350:	40010000 	.word	0x40010000

08002354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_UART_MspInit+0x8c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d131      	bne.n	80023d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_UART_MspInit+0x90>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_UART_MspInit+0x90>)
 800237a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_UART_MspInit+0x90>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_UART_MspInit+0x90>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_UART_MspInit+0x90>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_UART_MspInit+0x90>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4619      	mov	r1, r3
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <HAL_UART_MspInit+0x94>)
 80023ba:	f000 fa17 	bl	80027ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_UART_MspInit+0x94>)
 80023d4:	f000 fa0a 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010800 	.word	0x40010800

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <HardFault_Handler+0x4>

080023fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <MemManage_Handler+0x4>

08002404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <BusFault_Handler+0x4>

0800240a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <UsageFault_Handler+0x4>

08002410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002438:	f000 f8d8 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <_sbrk+0x5c>)
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <_sbrk+0x60>)
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_sbrk+0x64>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <_sbrk+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d207      	bcs.n	8002480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002470:	f001 ff3a 	bl	80042e8 <__errno>
 8002474:	4602      	mov	r2, r0
 8002476:	230c      	movs	r3, #12
 8002478:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	e009      	b.n	8002494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <_sbrk+0x64>)
 8002490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20005000 	.word	0x20005000
 80024a0:	00000400 	.word	0x00000400
 80024a4:	200001f8 	.word	0x200001f8
 80024a8:	20000eb8 	.word	0x20000eb8

080024ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <SystemInit+0x5c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <SystemInit+0x5c>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <SystemInit+0x5c>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4911      	ldr	r1, [pc, #68]	; (8002508 <SystemInit+0x5c>)
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <SystemInit+0x60>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <SystemInit+0x5c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <SystemInit+0x5c>)
 80024ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <SystemInit+0x5c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SystemInit+0x5c>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <SystemInit+0x5c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <SystemInit+0x5c>)
 80024ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SystemInit+0x5c>)
 80024f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80024f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SystemInit+0x64>)
 80024fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40021000 	.word	0x40021000
 800250c:	f8ff0000 	.word	0xf8ff0000
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002514:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002516:	e003      	b.n	8002520 <LoopCopyDataInit>

08002518 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800251a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800251c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800251e:	3104      	adds	r1, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002524:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002526:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002528:	d3f6      	bcc.n	8002518 <CopyDataInit>
  ldr r2, =_sbss
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800252c:	e002      	b.n	8002534 <LoopFillZerobss>

0800252e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002530:	f842 3b04 	str.w	r3, [r2], #4

08002534 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002536:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002538:	d3f9      	bcc.n	800252e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800253a:	f7ff ffb7 	bl	80024ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253e:	f001 fed9 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002542:	f7fe faa1 	bl	8000a88 <main>
  bx lr
 8002546:	4770      	bx	lr
  ldr r3, =_sidata
 8002548:	08007370 	.word	0x08007370
  ldr r0, =_sdata
 800254c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002550:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002554:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002558:	20000eb4 	.word	0x20000eb4

0800255c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800255c:	e7fe      	b.n	800255c <ADC1_2_IRQHandler>
	...

08002560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_Init+0x28>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_Init+0x28>)
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f000 f907 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002576:	2000      	movs	r0, #0
 8002578:	f000 f808 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257c:	f7ff feb8 	bl	80022f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x54>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f911 	bl	80027d2 <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d80a      	bhi.n	80025d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f000 f8e7 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_InitTick+0x5c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000008 	.word	0x20000008
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_IncTick+0x1c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_IncTick+0x20>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_IncTick+0x20>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000008 	.word	0x20000008
 800260c:	20000eac 	.word	0x20000eac

08002610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return uwTick;
 8002614:	4b02      	ldr	r3, [pc, #8]	; (8002620 <HAL_GetTick+0x10>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000eac 	.word	0x20000eac

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	; (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f7ff ff90 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff49 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff5e 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff90 	bl	80026dc <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5f 	bl	8002688 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffb0 	bl	8002740 <SysTick_Config>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b08b      	sub	sp, #44	; 0x2c
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e127      	b.n	8002a50 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002800:	2201      	movs	r2, #1
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	429a      	cmp	r2, r3
 800281a:	f040 8116 	bne.w	8002a4a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b12      	cmp	r3, #18
 8002824:	d034      	beq.n	8002890 <HAL_GPIO_Init+0xa4>
 8002826:	2b12      	cmp	r3, #18
 8002828:	d80d      	bhi.n	8002846 <HAL_GPIO_Init+0x5a>
 800282a:	2b02      	cmp	r3, #2
 800282c:	d02b      	beq.n	8002886 <HAL_GPIO_Init+0x9a>
 800282e:	2b02      	cmp	r3, #2
 8002830:	d804      	bhi.n	800283c <HAL_GPIO_Init+0x50>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d031      	beq.n	800289a <HAL_GPIO_Init+0xae>
 8002836:	2b01      	cmp	r3, #1
 8002838:	d01c      	beq.n	8002874 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800283a:	e048      	b.n	80028ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800283c:	2b03      	cmp	r3, #3
 800283e:	d043      	beq.n	80028c8 <HAL_GPIO_Init+0xdc>
 8002840:	2b11      	cmp	r3, #17
 8002842:	d01b      	beq.n	800287c <HAL_GPIO_Init+0x90>
          break;
 8002844:	e043      	b.n	80028ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002846:	4a89      	ldr	r2, [pc, #548]	; (8002a6c <HAL_GPIO_Init+0x280>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d026      	beq.n	800289a <HAL_GPIO_Init+0xae>
 800284c:	4a87      	ldr	r2, [pc, #540]	; (8002a6c <HAL_GPIO_Init+0x280>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d806      	bhi.n	8002860 <HAL_GPIO_Init+0x74>
 8002852:	4a87      	ldr	r2, [pc, #540]	; (8002a70 <HAL_GPIO_Init+0x284>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d020      	beq.n	800289a <HAL_GPIO_Init+0xae>
 8002858:	4a86      	ldr	r2, [pc, #536]	; (8002a74 <HAL_GPIO_Init+0x288>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01d      	beq.n	800289a <HAL_GPIO_Init+0xae>
          break;
 800285e:	e036      	b.n	80028ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002860:	4a85      	ldr	r2, [pc, #532]	; (8002a78 <HAL_GPIO_Init+0x28c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0xae>
 8002866:	4a85      	ldr	r2, [pc, #532]	; (8002a7c <HAL_GPIO_Init+0x290>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d016      	beq.n	800289a <HAL_GPIO_Init+0xae>
 800286c:	4a84      	ldr	r2, [pc, #528]	; (8002a80 <HAL_GPIO_Init+0x294>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_GPIO_Init+0xae>
          break;
 8002872:	e02c      	b.n	80028ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	623b      	str	r3, [r7, #32]
          break;
 800287a:	e028      	b.n	80028ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	3304      	adds	r3, #4
 8002882:	623b      	str	r3, [r7, #32]
          break;
 8002884:	e023      	b.n	80028ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	3308      	adds	r3, #8
 800288c:	623b      	str	r3, [r7, #32]
          break;
 800288e:	e01e      	b.n	80028ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	330c      	adds	r3, #12
 8002896:	623b      	str	r3, [r7, #32]
          break;
 8002898:	e019      	b.n	80028ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028a2:	2304      	movs	r3, #4
 80028a4:	623b      	str	r3, [r7, #32]
          break;
 80028a6:	e012      	b.n	80028ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b0:	2308      	movs	r3, #8
 80028b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	611a      	str	r2, [r3, #16]
          break;
 80028ba:	e008      	b.n	80028ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028bc:	2308      	movs	r3, #8
 80028be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	615a      	str	r2, [r3, #20]
          break;
 80028c6:	e002      	b.n	80028ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2bff      	cmp	r3, #255	; 0xff
 80028d2:	d801      	bhi.n	80028d8 <HAL_GPIO_Init+0xec>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	e001      	b.n	80028dc <HAL_GPIO_Init+0xf0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2bff      	cmp	r3, #255	; 0xff
 80028e2:	d802      	bhi.n	80028ea <HAL_GPIO_Init+0xfe>
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x104>
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	3b08      	subs	r3, #8
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	210f      	movs	r1, #15
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	401a      	ands	r2, r3
 8002902:	6a39      	ldr	r1, [r7, #32]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	431a      	orrs	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8096 	beq.w	8002a4a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800291e:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_GPIO_Init+0x298>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_GPIO_Init+0x298>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6193      	str	r3, [r2, #24]
 800292a:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <HAL_GPIO_Init+0x298>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002936:	4a54      	ldr	r2, [pc, #336]	; (8002a88 <HAL_GPIO_Init+0x29c>)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <HAL_GPIO_Init+0x2a0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x19e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4a      	ldr	r2, [pc, #296]	; (8002a90 <HAL_GPIO_Init+0x2a4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x19a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <HAL_GPIO_Init+0x2a8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x196>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a48      	ldr	r2, [pc, #288]	; (8002a98 <HAL_GPIO_Init+0x2ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x192>
 800297a:	2303      	movs	r3, #3
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x1a0>
 800297e:	2304      	movs	r3, #4
 8002980:	e004      	b.n	800298c <HAL_GPIO_Init+0x1a0>
 8002982:	2302      	movs	r3, #2
 8002984:	e002      	b.n	800298c <HAL_GPIO_Init+0x1a0>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_GPIO_Init+0x1a0>
 800298a:	2300      	movs	r3, #0
 800298c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298e:	f002 0203 	and.w	r2, r2, #3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4093      	lsls	r3, r2
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800299c:	493a      	ldr	r1, [pc, #232]	; (8002a88 <HAL_GPIO_Init+0x29c>)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	3302      	adds	r3, #2
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4938      	ldr	r1, [pc, #224]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
 80029c2:	e006      	b.n	80029d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4933      	ldr	r1, [pc, #204]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	492e      	ldr	r1, [pc, #184]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
 80029ea:	e006      	b.n	80029fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4929      	ldr	r1, [pc, #164]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	4924      	ldr	r1, [pc, #144]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
 8002a12:	e006      	b.n	8002a22 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	491f      	ldr	r1, [pc, #124]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	491a      	ldr	r1, [pc, #104]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
 8002a3a:	e006      	b.n	8002a4a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	4915      	ldr	r1, [pc, #84]	; (8002a9c <HAL_GPIO_Init+0x2b0>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f47f aed0 	bne.w	8002800 <HAL_GPIO_Init+0x14>
  }
}
 8002a60:	bf00      	nop
 8002a62:	372c      	adds	r7, #44	; 0x2c
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	10210000 	.word	0x10210000
 8002a70:	10110000 	.word	0x10110000
 8002a74:	10120000 	.word	0x10120000
 8002a78:	10310000 	.word	0x10310000
 8002a7c:	10320000 	.word	0x10320000
 8002a80:	10220000 	.word	0x10220000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40010800 	.word	0x40010800
 8002a90:	40010c00 	.word	0x40010c00
 8002a94:	40011000 	.word	0x40011000
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e26c      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8087 	beq.w	8002bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac0:	4b92      	ldr	r3, [pc, #584]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d00c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002acc:	4b8f      	ldr	r3, [pc, #572]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d112      	bne.n	8002afe <HAL_RCC_OscConfig+0x5e>
 8002ad8:	4b8c      	ldr	r3, [pc, #560]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d10b      	bne.n	8002afe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae6:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d06c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x12c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d168      	bne.n	8002bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e246      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x76>
 8002b08:	4b80      	ldr	r3, [pc, #512]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7f      	ldr	r2, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e02e      	b.n	8002b74 <HAL_RCC_OscConfig+0xd4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x98>
 8002b1e:	4b7b      	ldr	r3, [pc, #492]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7a      	ldr	r2, [pc, #488]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b78      	ldr	r3, [pc, #480]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a77      	ldr	r2, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e01d      	b.n	8002b74 <HAL_RCC_OscConfig+0xd4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0xbc>
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a71      	ldr	r2, [pc, #452]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6e      	ldr	r2, [pc, #440]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCC_OscConfig+0xd4>
 8002b5c:	4b6b      	ldr	r3, [pc, #428]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6a      	ldr	r2, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a67      	ldr	r2, [pc, #412]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff fd48 	bl	8002610 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7ff fd44 	bl	8002610 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1fa      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0xe4>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fd34 	bl	8002610 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7ff fd30 	bl	8002610 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1e6      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x10c>
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bda:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002be6:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d11c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x18c>
 8002bf2:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d116      	bne.n	8002c2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x176>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e1ba      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4939      	ldr	r1, [pc, #228]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	e03a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff fce9 	bl	8002610 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c42:	f7ff fce5 	bl	8002610 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e19b      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4927      	ldr	r1, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
 8002c74:	e015      	b.n	8002ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_RCC_OscConfig+0x270>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7ff fcc8 	bl	8002610 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7ff fcc4 	bl	8002610 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e17a      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03a      	beq.n	8002d24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d019      	beq.n	8002cea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7ff fca8 	bl	8002610 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7ff fca4 	bl	8002610 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e15a      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f000 fada 	bl	800329c <RCC_Delay>
 8002ce8:	e01c      	b.n	8002d24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_OscConfig+0x274>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7ff fc8e 	bl	8002610 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf6:	e00f      	b.n	8002d18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7ff fc8a 	bl	8002610 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d908      	bls.n	8002d18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e140      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	42420000 	.word	0x42420000
 8002d14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	4b9e      	ldr	r3, [pc, #632]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e9      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80a6 	beq.w	8002e7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d36:	4b97      	ldr	r3, [pc, #604]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	4b94      	ldr	r3, [pc, #592]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4a93      	ldr	r2, [pc, #588]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	61d3      	str	r3, [r2, #28]
 8002d4e:	4b91      	ldr	r3, [pc, #580]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	4b8e      	ldr	r3, [pc, #568]	; (8002f98 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6a:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <HAL_RCC_OscConfig+0x4f8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a8a      	ldr	r2, [pc, #552]	; (8002f98 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d76:	f7ff fc4b 	bl	8002610 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7e:	f7ff fc47 	bl	8002610 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b64      	cmp	r3, #100	; 0x64
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0fd      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <HAL_RCC_OscConfig+0x4f8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x312>
 8002da4:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a7a      	ldr	r2, [pc, #488]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	e02d      	b.n	8002e0e <HAL_RCC_OscConfig+0x36e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x334>
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a75      	ldr	r2, [pc, #468]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6213      	str	r3, [r2, #32]
 8002dc6:	4b73      	ldr	r3, [pc, #460]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a72      	ldr	r2, [pc, #456]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x36e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x356>
 8002ddc:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4a6c      	ldr	r2, [pc, #432]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6213      	str	r3, [r2, #32]
 8002de8:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a69      	ldr	r2, [pc, #420]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x36e>
 8002df6:	4b67      	ldr	r3, [pc, #412]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a66      	ldr	r2, [pc, #408]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6213      	str	r3, [r2, #32]
 8002e02:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a63      	ldr	r2, [pc, #396]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7ff fbfb 	bl	8002610 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7ff fbf7 	bl	8002610 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0ab      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b57      	ldr	r3, [pc, #348]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x37e>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7ff fbe5 	bl	8002610 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7ff fbe1 	bl	8002610 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e095      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a47      	ldr	r2, [pc, #284]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8081 	beq.w	8002f8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e88:	4b42      	ldr	r3, [pc, #264]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d061      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d146      	bne.n	8002f2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCC_OscConfig+0x4fc>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7ff fbb5 	bl	8002610 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7ff fbb1 	bl	8002610 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e067      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebc:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ed2:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	492d      	ldr	r1, [pc, #180]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a19      	ldr	r1, [r3, #32]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	4927      	ldr	r1, [pc, #156]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <HAL_RCC_OscConfig+0x4fc>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7ff fb85 	bl	8002610 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7ff fb81 	bl	8002610 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e037      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x46a>
 8002f28:	e02f      	b.n	8002f8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <HAL_RCC_OscConfig+0x4fc>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7ff fb6e 	bl	8002610 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7ff fb6a 	bl	8002610 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e020      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x498>
 8002f56:	e018      	b.n	8002f8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e013      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d001      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	42420060 	.word	0x42420060

08002fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0d0      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d910      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b67      	ldr	r3, [pc, #412]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	4965      	ldr	r1, [pc, #404]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0b8      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ffc:	4b59      	ldr	r3, [pc, #356]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003006:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800301e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b50      	ldr	r3, [pc, #320]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	494d      	ldr	r1, [pc, #308]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d040      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d115      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e073      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e06b      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4936      	ldr	r1, [pc, #216]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7ff fabe 	bl	8002610 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7ff faba 	bl	8002610 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e053      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d210      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4922      	ldr	r1, [pc, #136]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e032      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4916      	ldr	r1, [pc, #88]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800312e:	f000 f821 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8003132:	4601      	mov	r1, r0
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	fa21 f303 	lsr.w	r3, r1, r3
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1cc>)
 8003148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1d0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fa1c 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000
 8003164:	40021000 	.word	0x40021000
 8003168:	080070f0 	.word	0x080070f0
 800316c:	20000000 	.word	0x20000000
 8003170:	20000004 	.word	0x20000004

08003174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	b490      	push	{r4, r7}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_GetSysClockFreq+0xb0>)
 800317c:	1d3c      	adds	r4, r7, #4
 800317e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003184:	4b28      	ldr	r3, [pc, #160]	; (8003228 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d002      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x40>
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x46>
 80031b2:	e02d      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031b6:	623b      	str	r3, [r7, #32]
      break;
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	0c9b      	lsrs	r3, r3, #18
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031c6:	4413      	add	r3, r2
 80031c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0c5b      	lsrs	r3, r3, #17
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031e6:	4413      	add	r3, r2
 80031e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031f2:	fb02 f203 	mul.w	r2, r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	e004      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	623b      	str	r3, [r7, #32]
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003212:	623b      	str	r3, [r7, #32]
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	6a3b      	ldr	r3, [r7, #32]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bc90      	pop	{r4, r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	080070bc 	.word	0x080070bc
 8003228:	080070cc 	.word	0x080070cc
 800322c:	40021000 	.word	0x40021000
 8003230:	007a1200 	.word	0x007a1200
 8003234:	003d0900 	.word	0x003d0900

08003238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <HAL_RCC_GetHCLKFreq+0x10>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000000 	.word	0x20000000

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003250:	f7ff fff2 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003254:	4601      	mov	r1, r0
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4a03      	ldr	r2, [pc, #12]	; (8003270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	08007100 	.word	0x08007100

08003274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003278:	f7ff ffde 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 800327c:	4601      	mov	r1, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	0adb      	lsrs	r3, r3, #11
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4a03      	ldr	r2, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	08007100 	.word	0x08007100

0800329c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <RCC_Delay+0x34>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <RCC_Delay+0x38>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0a5b      	lsrs	r3, r3, #9
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032b8:	bf00      	nop
  }
  while (Delay --);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	60fa      	str	r2, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f9      	bne.n	80032b8 <RCC_Delay+0x1c>
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000000 	.word	0x20000000
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e03f      	b.n	800336a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff f828 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	; 0x24
 8003308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800331a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f90b 	bl	8003538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b088      	sub	sp, #32
 8003376:	af02      	add	r7, sp, #8
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b20      	cmp	r3, #32
 8003390:	f040 8083 	bne.w	800349a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_UART_Transmit+0x2e>
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e07b      	b.n	800349c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Transmit+0x40>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e074      	b.n	800349c <HAL_UART_Transmit+0x12a>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033c8:	f7ff f922 	bl	8002610 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	88fa      	ldrh	r2, [r7, #6]
 80033d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033da:	e042      	b.n	8003462 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d122      	bne.n	800343a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2200      	movs	r2, #0
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f850 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e046      	b.n	800349c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003420:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3302      	adds	r3, #2
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	e017      	b.n	8003462 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	e013      	b.n	8003462 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f82d 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e023      	b.n	800349c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	60ba      	str	r2, [r7, #8]
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1b7      	bne.n	80033dc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2200      	movs	r2, #0
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f814 	bl	80034a4 <UART_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e00a      	b.n	800349c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e000      	b.n	800349c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b4:	e02c      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d028      	beq.n	8003510 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034c4:	f7ff f8a4 	bl	8002610 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d21d      	bcs.n	8003510 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e00f      	b.n	8003530 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	429a      	cmp	r2, r3
 800352c:	d0c3      	beq.n	80034b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003572:	f023 030c 	bic.w	r3, r3, #12
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	430b      	orrs	r3, r1
 800357e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <UART_SetConfig+0x1ac>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d14e      	bne.n	800363e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7ff fe68 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 80035a4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <UART_SetConfig+0x1b0>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	0119      	lsls	r1, r3, #4
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009a      	lsls	r2, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035dc:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <UART_SetConfig+0x1b0>)
 80035de:	fba3 0302 	umull	r0, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2064      	movs	r0, #100	; 0x64
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	3332      	adds	r3, #50	; 0x32
 80035f0:	4a3d      	ldr	r2, [pc, #244]	; (80036e8 <UART_SetConfig+0x1b0>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fc:	4419      	add	r1, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009a      	lsls	r2, r3, #2
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	fbb2 f2f3 	udiv	r2, r2, r3
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <UART_SetConfig+0x1b0>)
 8003616:	fba3 0302 	umull	r0, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2064      	movs	r0, #100	; 0x64
 800361e:	fb00 f303 	mul.w	r3, r0, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	3332      	adds	r3, #50	; 0x32
 8003628:	4a2f      	ldr	r2, [pc, #188]	; (80036e8 <UART_SetConfig+0x1b0>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	440a      	add	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800363c:	e04d      	b.n	80036da <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800363e:	f7ff fe05 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 8003642:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009a      	lsls	r2, r3, #2
 800364e:	441a      	add	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <UART_SetConfig+0x1b0>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	0119      	lsls	r1, r3, #4
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009a      	lsls	r2, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	fbb2 f2f3 	udiv	r2, r2, r3
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <UART_SetConfig+0x1b0>)
 800367c:	fba3 0302 	umull	r0, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2064      	movs	r0, #100	; 0x64
 8003684:	fb00 f303 	mul.w	r3, r0, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <UART_SetConfig+0x1b0>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369a:	4419      	add	r1, r3
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009a      	lsls	r2, r3, #2
 80036a6:	441a      	add	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <UART_SetConfig+0x1b0>)
 80036b4:	fba3 0302 	umull	r0, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	2064      	movs	r0, #100	; 0x64
 80036bc:	fb00 f303 	mul.w	r3, r0, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	3332      	adds	r3, #50	; 0x32
 80036c6:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <UART_SetConfig+0x1b0>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	f003 020f 	and.w	r2, r3, #15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	440a      	add	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40013800 	.word	0x40013800
 80036e8:	51eb851f 	.word	0x51eb851f

080036ec <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	e018      	b.n	800372a <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2232      	movs	r2, #50	; 0x32
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <static_strings_init+0x14c>)
 8003702:	441a      	add	r2, r3
 8003704:	494d      	ldr	r1, [pc, #308]	; (800383c <static_strings_init+0x150>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <static_strings_init+0x150>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	2200      	movs	r2, #0
 8003716:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003718:	4a48      	ldr	r2, [pc, #288]	; (800383c <static_strings_init+0x150>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	2200      	movs	r2, #0
 8003722:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b09      	cmp	r3, #9
 800372e:	dde3      	ble.n	80036f8 <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003730:	2300      	movs	r3, #0
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	e018      	b.n	8003768 <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2264      	movs	r2, #100	; 0x64
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	4a40      	ldr	r2, [pc, #256]	; (8003840 <static_strings_init+0x154>)
 8003740:	441a      	add	r2, r3
 8003742:	4940      	ldr	r1, [pc, #256]	; (8003844 <static_strings_init+0x158>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 800374a:	4a3e      	ldr	r2, [pc, #248]	; (8003844 <static_strings_init+0x158>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	2201      	movs	r2, #1
 8003754:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003756:	4a3b      	ldr	r2, [pc, #236]	; (8003844 <static_strings_init+0x158>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	2200      	movs	r2, #0
 8003760:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3301      	adds	r3, #1
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b05      	cmp	r3, #5
 800376c:	dde3      	ble.n	8003736 <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e018      	b.n	80037a6 <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	22c8      	movs	r2, #200	; 0xc8
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	4a32      	ldr	r2, [pc, #200]	; (8003848 <static_strings_init+0x15c>)
 800377e:	441a      	add	r2, r3
 8003780:	4932      	ldr	r1, [pc, #200]	; (800384c <static_strings_init+0x160>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 8003788:	4a30      	ldr	r2, [pc, #192]	; (800384c <static_strings_init+0x160>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	2202      	movs	r2, #2
 8003792:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <static_strings_init+0x160>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	2200      	movs	r2, #0
 800379e:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3301      	adds	r3, #1
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	dde3      	ble.n	8003774 <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80037ac:	2300      	movs	r3, #0
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	e019      	b.n	80037e6 <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <static_strings_init+0x164>)
 80037be:	441a      	add	r2, r3
 80037c0:	4924      	ldr	r1, [pc, #144]	; (8003854 <static_strings_init+0x168>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 80037c8:	4a22      	ldr	r2, [pc, #136]	; (8003854 <static_strings_init+0x168>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	2203      	movs	r2, #3
 80037d2:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80037d4:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <static_strings_init+0x168>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3301      	adds	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	dde2      	ble.n	80037b2 <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80037ec:	2300      	movs	r3, #0
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	e019      	b.n	8003826 <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <static_strings_init+0x16c>)
 80037fe:	441a      	add	r2, r3
 8003800:	4916      	ldr	r1, [pc, #88]	; (800385c <static_strings_init+0x170>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <static_strings_init+0x170>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	2204      	movs	r2, #4
 8003812:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003814:	4a11      	ldr	r2, [pc, #68]	; (800385c <static_strings_init+0x170>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	2200      	movs	r2, #0
 800381e:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3301      	adds	r3, #1
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	dde2      	ble.n	80037f2 <static_strings_init+0x106>
	}
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000470 	.word	0x20000470
 800383c:	20000a60 	.word	0x20000a60
 8003840:	20000218 	.word	0x20000218
 8003844:	20000e74 	.word	0x20000e74
 8003848:	20000ce4 	.word	0x20000ce4
 800384c:	20000a50 	.word	0x20000a50
 8003850:	20000ab0 	.word	0x20000ab0
 8003854:	20000ea4 	.word	0x20000ea4
 8003858:	20000668 	.word	0x20000668
 800385c:	20000210 	.word	0x20000210

08003860 <static_strings_get_string_max_length>:

int static_strings_get_string_max_length(static_strings_string_descriptor *string){
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	if(string->type == STATIC_STRINGS_STRING_TYPE_CUSTOM){
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	799b      	ldrb	r3, [r3, #6]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d102      	bne.n	8003876 <static_strings_get_string_max_length+0x16>
		return string->length;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	889b      	ldrh	r3, [r3, #4]
 8003874:	e01d      	b.n	80038b2 <static_strings_get_string_max_length+0x52>
	}
	else{
		switch(string->type){
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	799b      	ldrb	r3, [r3, #6]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d818      	bhi.n	80038b0 <static_strings_get_string_max_length+0x50>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <static_strings_get_string_max_length+0x24>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	08003899 	.word	0x08003899
 8003888:	0800389d 	.word	0x0800389d
 800388c:	080038a1 	.word	0x080038a1
 8003890:	080038a5 	.word	0x080038a5
 8003894:	080038ab 	.word	0x080038ab
			case STATIC_STRINGS_STRING_TYPE_VERY_SHORT:
				return STATIC_STRINGS_VERY_SHORT_STRING_SIZE;
 8003898:	2332      	movs	r3, #50	; 0x32
 800389a:	e00a      	b.n	80038b2 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_SHORT:
				return STATIC_STRINGS_SHORT_STRING_SIZE;
 800389c:	2364      	movs	r3, #100	; 0x64
 800389e:	e008      	b.n	80038b2 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_MEDIUM:
				return STATIC_STRINGS_MEDIUM_STRING_SIZE;
 80038a0:	23c8      	movs	r3, #200	; 0xc8
 80038a2:	e006      	b.n	80038b2 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_LONG:
				return STATIC_STRINGS_LONG_STRING_SIZE;
 80038a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038a8:	e003      	b.n	80038b2 <static_strings_get_string_max_length+0x52>
				break;
			case STATIC_STRINGS_STRING_TYPE_VERY_LONG:
				return STATIC_STRINGS_VERY_LONG_STRING_SIZE;
 80038aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ae:	e000      	b.n	80038b2 <static_strings_get_string_max_length+0x52>
				break;
		}
	}
	return 0;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <static_strings_copy>:

static_strings_string_descriptor *static_strings_copy(static_strings_string_descriptor *copy_to,static_strings_string_descriptor *copy_from,uint16_t copy_to_offset){
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
	if(copy_to == NULL || copy_from == NULL){
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <static_strings_copy+0x1a>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <static_strings_copy+0x1e>
		return NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e022      	b.n	8003920 <static_strings_copy+0x64>
	}
	if(static_strings_get_string_max_length(copy_to) <= copy_from->length + copy_to_offset){
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ffc0 	bl	8003860 <static_strings_get_string_max_length>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	889b      	ldrh	r3, [r3, #4]
 80038e6:	4619      	mov	r1, r3
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	440b      	add	r3, r1
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dc04      	bgt.n	80038fa <static_strings_copy+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_OVERFLOW;
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <static_strings_copy+0x6c>)
 80038f2:	2205      	movs	r2, #5
 80038f4:	701a      	strb	r2, [r3, #0]
		return NULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e012      	b.n	8003920 <static_strings_copy+0x64>
	}
	memcpy(copy_to->string + copy_to_offset,copy_from->string,copy_from->length);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	18d0      	adds	r0, r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	889b      	ldrh	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	f000 fd16 	bl	800433c <memcpy>
	copy_to->length = copy_from->length + copy_to_offset;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	889a      	ldrh	r2, [r3, #4]
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	4413      	add	r3, r2
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	809a      	strh	r2, [r3, #4]
	return copy_to;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000664 	.word	0x20000664

0800392c <static_strings_move>:

static_strings_string_descriptor *static_strings_move(static_strings_string_descriptor *move_to,static_strings_string_descriptor *move_from,uint16_t move_to_offset){
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
	if(static_strings_copy(move_to,move_from,move_to_offset) == NULL){
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	461a      	mov	r2, r3
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ffbb 	bl	80038bc <static_strings_copy>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <static_strings_move+0x24>
		return NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	e003      	b.n	8003958 <static_strings_move+0x2c>
	}
	static_strings_deallocate(move_from);
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f000 f929 	bl	8003ba8 <static_strings_deallocate>
	return move_to;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <static_strings_clone>:

static_strings_string_descriptor *static_strings_clone(static_strings_string_descriptor *clone_from){
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	if(clone_from == NULL){
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <static_strings_clone+0x12>
		return NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	e018      	b.n	80039a4 <static_strings_clone+0x44>
	}
	static_strings_string_descriptor *cloned_string = static_strings_allocate(clone_from->length);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	889b      	ldrh	r3, [r3, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f818 	bl	80039ac <static_strings_allocate>
 800397c:	60f8      	str	r0, [r7, #12]
	if(cloned_string == NULL){
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <static_strings_clone+0x28>
		return NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	e00d      	b.n	80039a4 <static_strings_clone+0x44>
	}
	memcpy(cloned_string->string,clone_from->string,clone_from->length);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	889b      	ldrh	r3, [r3, #4]
 8003994:	461a      	mov	r2, r3
 8003996:	f000 fcd1 	bl	800433c <memcpy>
	cloned_string->length = clone_from->length;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	889a      	ldrh	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	809a      	strh	r2, [r3, #4]
	return cloned_string;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b32      	cmp	r3, #50	; 0x32
 80039ba:	d81a      	bhi.n	80039f2 <static_strings_allocate+0x46>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e014      	b.n	80039ec <static_strings_allocate+0x40>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80039c2:	4a51      	ldr	r2, [pc, #324]	; (8003b08 <static_strings_allocate+0x15c>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	79db      	ldrb	r3, [r3, #7]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <static_strings_allocate+0x3a>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80039d0:	4a4d      	ldr	r2, [pc, #308]	; (8003b08 <static_strings_allocate+0x15c>)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	2201      	movs	r2, #1
 80039da:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_short_strings_descriptors[i];
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4a49      	ldr	r2, [pc, #292]	; (8003b08 <static_strings_allocate+0x15c>)
 80039e2:	4413      	add	r3, r2
 80039e4:	e08b      	b.n	8003afe <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3301      	adds	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b09      	cmp	r3, #9
 80039f0:	dde7      	ble.n	80039c2 <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b64      	cmp	r3, #100	; 0x64
 80039f6:	d81a      	bhi.n	8003a2e <static_strings_allocate+0x82>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e014      	b.n	8003a28 <static_strings_allocate+0x7c>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80039fe:	4a43      	ldr	r2, [pc, #268]	; (8003b0c <static_strings_allocate+0x160>)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	79db      	ldrb	r3, [r3, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <static_strings_allocate+0x76>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003a0c:	4a3f      	ldr	r2, [pc, #252]	; (8003b0c <static_strings_allocate+0x160>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	2201      	movs	r2, #1
 8003a16:	71da      	strb	r2, [r3, #7]
				return &static_strings_short_strings_descriptors[i];
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4a3b      	ldr	r2, [pc, #236]	; (8003b0c <static_strings_allocate+0x160>)
 8003a1e:	4413      	add	r3, r2
 8003a20:	e06d      	b.n	8003afe <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3301      	adds	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	dde7      	ble.n	80039fe <static_strings_allocate+0x52>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2bc8      	cmp	r3, #200	; 0xc8
 8003a32:	d81a      	bhi.n	8003a6a <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e014      	b.n	8003a64 <static_strings_allocate+0xb8>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003a3a:	4a35      	ldr	r2, [pc, #212]	; (8003b10 <static_strings_allocate+0x164>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	79db      	ldrb	r3, [r3, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <static_strings_allocate+0xb2>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <static_strings_allocate+0x164>)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	2201      	movs	r2, #1
 8003a52:	71da      	strb	r2, [r3, #7]
				return &static_strings_medium_strings_descriptors[i];
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <static_strings_allocate+0x164>)
 8003a5a:	4413      	add	r3, r2
 8003a5c:	e04f      	b.n	8003afe <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	dde7      	ble.n	8003a3a <static_strings_allocate+0x8e>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a70:	d81a      	bhi.n	8003aa8 <static_strings_allocate+0xfc>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e014      	b.n	8003aa2 <static_strings_allocate+0xf6>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <static_strings_allocate+0x168>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	79db      	ldrb	r3, [r3, #7]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <static_strings_allocate+0xf0>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003a86:	4a23      	ldr	r2, [pc, #140]	; (8003b14 <static_strings_allocate+0x168>)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	2201      	movs	r2, #1
 8003a90:	71da      	strb	r2, [r3, #7]
				return &static_strings_long_strings_descriptors[i];
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <static_strings_allocate+0x168>)
 8003a98:	4413      	add	r3, r2
 8003a9a:	e030      	b.n	8003afe <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dde7      	ble.n	8003a78 <static_strings_allocate+0xcc>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aae:	d81a      	bhi.n	8003ae6 <static_strings_allocate+0x13a>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e014      	b.n	8003ae0 <static_strings_allocate+0x134>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <static_strings_allocate+0x16c>)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	79db      	ldrb	r3, [r3, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <static_strings_allocate+0x12e>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003ac4:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <static_strings_allocate+0x16c>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	2201      	movs	r2, #1
 8003ace:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_long_strings_descriptors[i];
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <static_strings_allocate+0x16c>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	e011      	b.n	8003afe <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	dde7      	ble.n	8003ab6 <static_strings_allocate+0x10a>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aec:	d803      	bhi.n	8003af6 <static_strings_allocate+0x14a>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <static_strings_allocate+0x170>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e002      	b.n	8003afc <static_strings_allocate+0x150>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <static_strings_allocate+0x170>)
 8003af8:	2202      	movs	r2, #2
 8003afa:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	20000a60 	.word	0x20000a60
 8003b0c:	20000e74 	.word	0x20000e74
 8003b10:	20000a50 	.word	0x20000a50
 8003b14:	20000ea4 	.word	0x20000ea4
 8003b18:	20000210 	.word	0x20000210
 8003b1c:	20000664 	.word	0x20000664

08003b20 <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f86b 	bl	8003c04 <static_strings_strlen>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 8003b32:	89fb      	ldrh	r3, [r7, #14]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e014      	b.n	8003b66 <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8003b3c:	89fb      	ldrh	r3, [r7, #14]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff ff34 	bl	80039ac <static_strings_allocate>
 8003b44:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <static_strings_save+0x30>
		return descriptor;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	e00a      	b.n	8003b66 <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	89fa      	ldrh	r2, [r7, #14]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fbef 	bl	800433c <memcpy>
	descriptor->length = string_length;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	89fa      	ldrh	r2, [r7, #14]
 8003b62:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8003b64:	68bb      	ldr	r3, [r7, #8]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <static_strings_create_custom_string>:

int static_strings_create_custom_string(static_strings_string_descriptor *string_descriptor,uint8_t *string){
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
	string_descriptor->type = STATIC_STRINGS_STRING_TYPE_CUSTOM;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2205      	movs	r2, #5
 8003b7c:	719a      	strb	r2, [r3, #6]
	string_descriptor->status = STATIC_STRINGS_STRING_STATUS_CONSTANT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	71da      	strb	r2, [r3, #7]
	string_descriptor->string = string;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f838 	bl	8003c04 <static_strings_strlen>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	809a      	strh	r2, [r3, #4]
	return string_descriptor->length;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	889b      	ldrh	r3, [r3, #4]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <static_strings_deallocate>:

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	if(string_descriptor->status != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	79db      	ldrb	r3, [r3, #7]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d002      	beq.n	8003bbe <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	71da      	strb	r2, [r3, #7]
	}
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <static_strings_is_line>:

int static_strings_is_line(static_strings_string_descriptor *string_descriptor){
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	if( *(string_descriptor->string + string_descriptor->length - 2) == '\r' || *(string_descriptor->string + string_descriptor->length - 1) == '\n'){
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	889b      	ldrh	r3, [r3, #4]
 8003bd8:	3b02      	subs	r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b0d      	cmp	r3, #13
 8003be0:	d008      	beq.n	8003bf4 <static_strings_is_line+0x2c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	889b      	ldrh	r3, [r3, #4]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b0a      	cmp	r3, #10
 8003bf2:	d101      	bne.n	8003bf8 <static_strings_is_line+0x30>
		return 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <static_strings_is_line+0x32>
	}
	return 0;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <static_strings_strlen>:

uint16_t static_strings_strlen(uint8_t *string){
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	81fb      	strh	r3, [r7, #14]
 8003c10:	e010      	b.n	8003c34 <static_strings_strlen+0x30>
		if( *(string + length) == '\r'){
 8003c12:	89fb      	ldrh	r3, [r7, #14]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b0d      	cmp	r3, #13
 8003c1c:	d00f      	beq.n	8003c3e <static_strings_strlen+0x3a>
			break;
		}
		if( *(string + length) == '\0'){
 8003c1e:	89fb      	ldrh	r3, [r7, #14]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <static_strings_strlen+0x2a>
			return length;
 8003c2a:	89fb      	ldrh	r3, [r7, #14]
 8003c2c:	e022      	b.n	8003c74 <static_strings_strlen+0x70>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	3301      	adds	r3, #1
 8003c32:	81fb      	strh	r3, [r7, #14]
 8003c34:	89fb      	ldrh	r3, [r7, #14]
 8003c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3a:	d3ea      	bcc.n	8003c12 <static_strings_strlen+0xe>
 8003c3c:	e000      	b.n	8003c40 <static_strings_strlen+0x3c>
			break;
 8003c3e:	bf00      	nop
		}
	}
	if(length >= 999){
 8003c40:	89fb      	ldrh	r3, [r7, #14]
 8003c42:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d904      	bls.n	8003c54 <static_strings_strlen+0x50>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_INVALID_STRING;
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <static_strings_strlen+0x7c>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
		return 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e00f      	b.n	8003c74 <static_strings_strlen+0x70>
	}
	else{
		if(*(string + length + 1) != '\n'){
 8003c54:	89fb      	ldrh	r3, [r7, #14]
 8003c56:	3301      	adds	r3, #1
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b0a      	cmp	r3, #10
 8003c60:	d005      	beq.n	8003c6e <static_strings_strlen+0x6a>
			*(string + length + 1) = '\n';
 8003c62:	89fb      	ldrh	r3, [r7, #14]
 8003c64:	3301      	adds	r3, #1
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	220a      	movs	r2, #10
 8003c6c:	701a      	strb	r2, [r3, #0]
		}
		return length + 2;
 8003c6e:	89fb      	ldrh	r3, [r7, #14]
 8003c70:	3302      	adds	r3, #2
 8003c72:	b29b      	uxth	r3, r3
	}
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000664 	.word	0x20000664

08003c84 <static_strings_string_splitter_set_parameters>:

void static_strings_string_splitter_set_parameters(static_strings_string_descriptor *string_descriptor,uint8_t delimiter){
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
	static_strings_string_splitter.string_descriptor = string_descriptor;
 8003c90:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <static_strings_string_splitter_set_parameters+0x2c>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6013      	str	r3, [r2, #0]
	static_strings_string_splitter.next_token_start = string_descriptor->string;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <static_strings_string_splitter_set_parameters+0x2c>)
 8003c9c:	6053      	str	r3, [r2, #4]
	static_strings_string_splitter.delimiter = delimiter;
 8003c9e:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <static_strings_string_splitter_set_parameters+0x2c>)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	7213      	strb	r3, [r2, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	200001fc 	.word	0x200001fc

08003cb4 <static_strings_string_splitter_get_next_token>:

int static_strings_string_splitter_get_next_token(static_strings_string_descriptor **string_descriptor){
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	if(static_strings_string_splitter.next_token_start == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4929      	ldr	r1, [pc, #164]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003cc8:	6809      	ldr	r1, [r1, #0]
 8003cca:	8889      	ldrh	r1, [r1, #4]
 8003ccc:	440b      	add	r3, r1
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d101      	bne.n	8003cd6 <static_strings_string_splitter_get_next_token+0x22>
		return 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e045      	b.n	8003d62 <static_strings_string_splitter_get_next_token+0xae>
	}
	uint8_t *current_position = static_strings_string_splitter.next_token_start;
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60fb      	str	r3, [r7, #12]
	while(*current_position++ != static_strings_string_splitter.delimiter && current_position < static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length);
 8003cdc:	bf00      	nop
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	60fa      	str	r2, [r7, #12]
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003ce8:	7a1b      	ldrb	r3, [r3, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d009      	beq.n	8003d02 <static_strings_string_splitter_get_next_token+0x4e>
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	8892      	ldrh	r2, [r2, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3ed      	bcc.n	8003cde <static_strings_string_splitter_get_next_token+0x2a>

	int token_length;
	if(current_position == static_strings_string_splitter.string_descriptor->string + static_strings_string_splitter.string_descriptor->length){
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	8892      	ldrh	r2, [r2, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d105      	bne.n	8003d22 <static_strings_string_splitter_get_next_token+0x6e>
		token_length = current_position - static_strings_string_splitter.next_token_start;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003d1a:	6852      	ldr	r2, [r2, #4]
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	e005      	b.n	8003d2e <static_strings_string_splitter_get_next_token+0x7a>
	}
	else{
		token_length = current_position - static_strings_string_splitter.next_token_start - 1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003d26:	6852      	ldr	r2, [r2, #4]
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60bb      	str	r3, [r7, #8]
	}
	*string_descriptor = static_strings_allocate(token_length);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fe3a 	bl	80039ac <static_strings_allocate>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	601a      	str	r2, [r3, #0]
	memcpy((*string_descriptor)->string,static_strings_string_splitter.next_token_start,token_length);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f000 faf6 	bl	800433c <memcpy>
	(*string_descriptor)->length = token_length;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	b292      	uxth	r2, r2
 8003d58:	809a      	strh	r2, [r3, #4]
	static_strings_string_splitter.next_token_start = current_position;
 8003d5a:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <static_strings_string_splitter_get_next_token+0xb8>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6053      	str	r3, [r2, #4]
	return 1;
 8003d60:	2301      	movs	r3, #1
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200001fc 	.word	0x200001fc

08003d70 <static_strings_substring>:

static_strings_string_descriptor *static_strings_substring(static_strings_string_descriptor* string,uint16_t start_index,uint16_t finish_index){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	803b      	strh	r3, [r7, #0]
	if(start_index < 0 || start_index >= string->length){
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	889b      	ldrh	r3, [r3, #4]
 8003d84:	887a      	ldrh	r2, [r7, #2]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d304      	bcc.n	8003d94 <static_strings_substring+0x24>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_START_INDEX_OUT_OF_RANGE;
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <static_strings_substring+0x80>)
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e028      	b.n	8003de6 <static_strings_substring+0x76>
	}
	if(finish_index <= 0 || finish_index > string->length){
 8003d94:	883b      	ldrh	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <static_strings_substring+0x34>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	889b      	ldrh	r3, [r3, #4]
 8003d9e:	883a      	ldrh	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d904      	bls.n	8003dae <static_strings_substring+0x3e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_SUBSTRING_FINISH_INDEX_OUT_OF_RANGE;
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <static_strings_substring+0x80>)
 8003da6:	2204      	movs	r2, #4
 8003da8:	701a      	strb	r2, [r3, #0]
		return NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e01b      	b.n	8003de6 <static_strings_substring+0x76>
	}
	uint16_t substring_length = finish_index - start_index;
 8003dae:	883a      	ldrh	r2, [r7, #0]
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	81fb      	strh	r3, [r7, #14]
	static_strings_string_descriptor *substring = static_strings_allocate(substring_length);
 8003db6:	89fb      	ldrh	r3, [r7, #14]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fdf7 	bl	80039ac <static_strings_allocate>
 8003dbe:	60b8      	str	r0, [r7, #8]
	if(substring == NULL){
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <static_strings_substring+0x5a>
		return substring;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	e00d      	b.n	8003de6 <static_strings_substring+0x76>
	}
	memcpy(substring->string,string->string + start_index,substring_length);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	89fa      	ldrh	r2, [r7, #14]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f000 faaf 	bl	800433c <memcpy>
	substring->length = substring_length;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	89fa      	ldrh	r2, [r7, #14]
 8003de2:	809a      	strh	r2, [r3, #4]
	return substring;
 8003de4:	68bb      	ldr	r3, [r7, #8]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000664 	.word	0x20000664

08003df4 <static_strings_concatenate>:

static_strings_string_descriptor *static_strings_concatenate(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	int concatenated_string_length = concatenate_at->length + concatenate->length;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	889b      	ldrh	r3, [r3, #4]
 8003e02:	461a      	mov	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	889b      	ldrh	r3, [r3, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(concatenated_string_length);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fdcb 	bl	80039ac <static_strings_allocate>
 8003e16:	60b8      	str	r0, [r7, #8]
	if(concatenated_string == NULL){
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <static_strings_concatenate+0x2e>
		return concatenated_string;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	e019      	b.n	8003e56 <static_strings_concatenate+0x62>
	}
	memcpy(concatenated_string->string,concatenate_at->string,concatenate_at->length);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	889b      	ldrh	r3, [r3, #4]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 fa84 	bl	800433c <memcpy>
	memcpy(concatenated_string->string + concatenate_at->length,concatenate->string,concatenate->length);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	8892      	ldrh	r2, [r2, #4]
 8003e3c:	1898      	adds	r0, r3, r2
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	889b      	ldrh	r3, [r3, #4]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 fa78 	bl	800433c <memcpy>
	concatenated_string->length = concatenated_string_length;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	809a      	strh	r2, [r3, #4]
	return concatenated_string;
 8003e54:	68bb      	ldr	r3, [r7, #8]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <static_strings_concatenate_and_clean>:

static_strings_string_descriptor *static_strings_concatenate_and_clean(static_strings_string_descriptor* concatenate_at,static_strings_string_descriptor* concatenate){
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
	static_strings_string_descriptor* concatenated_string = static_strings_concatenate(concatenate_at,concatenate);
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff ffc2 	bl	8003df4 <static_strings_concatenate>
 8003e70:	60f8      	str	r0, [r7, #12]
	if(concatenated_string == NULL){
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <static_strings_concatenate_and_clean+0x1e>
		return concatenated_string;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	e003      	b.n	8003e84 <static_strings_concatenate_and_clean+0x26>
	}
	static_strings_deallocate(concatenate_at);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fe93 	bl	8003ba8 <static_strings_deallocate>
	return concatenated_string;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <static_strings_concatenate_all>:

static_strings_string_descriptor *static_strings_concatenate_all(uint16_t arguments_quantity,...){
 8003e8c:	b40f      	push	{r0, r1, r2, r3}
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
	va_list arguments_list;
	int i;
	va_start(arguments_list, arguments_quantity);
 8003e94:	f107 031c 	add.w	r3, r7, #28
 8003e98:	603b      	str	r3, [r7, #0]
	static_strings_string_descriptor *next_string_to_concatenate;
	static_strings_string_descriptor *concatenated_string = static_strings_allocate(0);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7ff fd86 	bl	80039ac <static_strings_allocate>
 8003ea0:	60b8      	str	r0, [r7, #8]
	concatenated_string->length = 0;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < arguments_quantity;i++){
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e00c      	b.n	8003ec8 <static_strings_concatenate_all+0x3c>
		next_string_to_concatenate = va_arg(arguments_list, static_strings_string_descriptor *);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	1d1a      	adds	r2, r3, #4
 8003eb2:	603a      	str	r2, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	607b      	str	r3, [r7, #4]
		concatenated_string = static_strings_concatenate_and_clean(concatenated_string,next_string_to_concatenate);
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	68b8      	ldr	r0, [r7, #8]
 8003ebc:	f7ff ffcf 	bl	8003e5e <static_strings_concatenate_and_clean>
 8003ec0:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < arguments_quantity;i++){
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	8b3b      	ldrh	r3, [r7, #24]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	dbee      	blt.n	8003eae <static_strings_concatenate_all+0x22>
	}
	va_end(arguments_list);
	return concatenated_string;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003edc:	b004      	add	sp, #16
 8003ede:	4770      	bx	lr

08003ee0 <static_strings_contains_string>:

int static_strings_contains_string(static_strings_string_descriptor* search_in,static_strings_string_descriptor* search_for){
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
	if(search_in->length < search_for->length){
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	889a      	ldrh	r2, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	889b      	ldrh	r3, [r3, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d201      	bcs.n	8003efa <static_strings_contains_string+0x1a>
		return 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e034      	b.n	8003f64 <static_strings_contains_string+0x84>
	}
	int i,j;
	int searched_string_found;
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e026      	b.n	8003f4e <static_strings_contains_string+0x6e>
		searched_string_found = 1;
 8003f00:	2301      	movs	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < search_for->length;j++){
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e013      	b.n	8003f32 <static_strings_contains_string+0x52>
			if( *(search_in->string + i + j) != *(search_for->string + j) ){
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	6979      	ldr	r1, [r7, #20]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	440b      	add	r3, r1
 8003f14:	4413      	add	r3, r2
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	440b      	add	r3, r1
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d002      	beq.n	8003f2c <static_strings_contains_string+0x4c>
				searched_string_found = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
				break;
 8003f2a:	e008      	b.n	8003f3e <static_strings_contains_string+0x5e>
		for(j = 0; j < search_for->length;j++){
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	889b      	ldrh	r3, [r3, #4]
 8003f36:	461a      	mov	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	dbe5      	blt.n	8003f0a <static_strings_contains_string+0x2a>
			}
		}
		if(searched_string_found){
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <static_strings_contains_string+0x68>
			return 1;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e00d      	b.n	8003f64 <static_strings_contains_string+0x84>
	for(i = 0;search_for->length <= search_in->length - i;i++){
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	889b      	ldrh	r3, [r3, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	889b      	ldrh	r3, [r3, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1acb      	subs	r3, r1, r3
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	ddce      	ble.n	8003f00 <static_strings_contains_string+0x20>
		}
	}
	return 0;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <static_strings_contains_char>:

int static_strings_contains_char(static_strings_string_descriptor* search_in,uint8_t search_for){
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i = 0;i < search_in->length;i++){
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e00c      	b.n	8003f9a <static_strings_contains_char+0x2c>
		if( *(search_in->string + i) == search_for){
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d101      	bne.n	8003f94 <static_strings_contains_char+0x26>
			return 1;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e009      	b.n	8003fa8 <static_strings_contains_char+0x3a>
	for(i = 0;i < search_in->length;i++){
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	889b      	ldrh	r3, [r3, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	dbec      	blt.n	8003f80 <static_strings_contains_char+0x12>
		}
	}
	return 0;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <static_strings_compare>:

int static_strings_compare(static_strings_string_descriptor* compare_string_one,static_strings_string_descriptor* compare_string_two){
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
	if(compare_string_one->length != compare_string_two->length){
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	889a      	ldrh	r2, [r3, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	889b      	ldrh	r3, [r3, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <static_strings_compare+0x1a>
		return 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e01a      	b.n	8004002 <static_strings_compare+0x50>
	}
	int i;
	for(i = 0;i < compare_string_one->length;i++){
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e010      	b.n	8003ff4 <static_strings_compare+0x42>
		if(*(compare_string_one->string + i) != *(compare_string_two->string + i)){
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6819      	ldr	r1, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	440b      	add	r3, r1
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d001      	beq.n	8003fee <static_strings_compare+0x3c>
			return 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e009      	b.n	8004002 <static_strings_compare+0x50>
	for(i = 0;i < compare_string_one->length;i++){
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	889b      	ldrh	r3, [r3, #4]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	dbe8      	blt.n	8003fd2 <static_strings_compare+0x20>
		}
	}
	return 1;
 8004000:	2301      	movs	r3, #1
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <static_strings_uint8_to_string>:

static_strings_string_descriptor *static_strings_uint8_to_string(uint8_t uint8){
 800400c:	b580      	push	{r7, lr}
 800400e:	b092      	sub	sp, #72	; 0x48
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
	uint8_t uint8_temp_string[50];
	sprintf((char *)uint8_temp_string,"%" PRIu8,uint8);
 8004016:	79fa      	ldrb	r2, [r7, #7]
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	4914      	ldr	r1, [pc, #80]	; (8004070 <static_strings_uint8_to_string+0x64>)
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fdee 	bl	8004c00 <siprintf>
	uint16_t uint8_string_length = static_strings_strlen(uint8_temp_string);
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fdeb 	bl	8003c04 <static_strings_strlen>
 800402e:	4603      	mov	r3, r0
 8004030:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint8_string = static_strings_allocate(uint8_string_length);
 8004034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fcb7 	bl	80039ac <static_strings_allocate>
 800403e:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint8_string == NULL){
 8004040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <static_strings_uint8_to_string+0x3e>
		return uint8_string;
 8004046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004048:	e00d      	b.n	8004066 <static_strings_uint8_to_string+0x5a>
	}
	memcpy(uint8_string->string,uint8_temp_string,uint8_string_length);
 800404a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004052:	f107 010c 	add.w	r1, r7, #12
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f970 	bl	800433c <memcpy>
	uint8_string->length = uint8_string_length;
 800405c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004062:	809a      	strh	r2, [r3, #4]
	return uint8_string;
 8004064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004066:	4618      	mov	r0, r3
 8004068:	3748      	adds	r7, #72	; 0x48
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	080070d0 	.word	0x080070d0

08004074 <static_strings_uint16_to_string>:

static_strings_string_descriptor *static_strings_uint16_to_string(uint16_t uint16){
 8004074:	b580      	push	{r7, lr}
 8004076:	b092      	sub	sp, #72	; 0x48
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
	uint8_t uint16_temp_string[50];
	sprintf((char *)uint16_temp_string,"%" PRIu16,uint16);
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	4914      	ldr	r1, [pc, #80]	; (80040d8 <static_strings_uint16_to_string+0x64>)
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fdba 	bl	8004c00 <siprintf>
	uint16_t uint16_string_length = static_strings_strlen(uint16_temp_string);
 800408c:	f107 030c 	add.w	r3, r7, #12
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fdb7 	bl	8003c04 <static_strings_strlen>
 8004096:	4603      	mov	r3, r0
 8004098:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint16_string = static_strings_allocate(uint16_string_length);
 800409c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fc83 	bl	80039ac <static_strings_allocate>
 80040a6:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint16_string == NULL){
 80040a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <static_strings_uint16_to_string+0x3e>
		return uint16_string;
 80040ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b0:	e00d      	b.n	80040ce <static_strings_uint16_to_string+0x5a>
	}
	memcpy(uint16_string->string,uint16_temp_string,uint16_string_length);
 80040b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80040ba:	f107 010c 	add.w	r1, r7, #12
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f93c 	bl	800433c <memcpy>
	uint16_string->length = uint16_string_length;
 80040c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80040ca:	809a      	strh	r2, [r3, #4]
	return uint16_string;
 80040cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3748      	adds	r7, #72	; 0x48
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	080070d4 	.word	0x080070d4

080040dc <static_strings_uint32_to_string>:

static_strings_string_descriptor *static_strings_uint32_to_string(uint32_t uint32){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b092      	sub	sp, #72	; 0x48
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	uint8_t uint32_temp_string[50];
	sprintf((char *)uint32_temp_string,"%" PRIu32,uint32);
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4914      	ldr	r1, [pc, #80]	; (800413c <static_strings_uint32_to_string+0x60>)
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fd87 	bl	8004c00 <siprintf>
	uint16_t uint32_string_length = static_strings_strlen(uint32_temp_string);
 80040f2:	f107 030c 	add.w	r3, r7, #12
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fd84 	bl	8003c04 <static_strings_strlen>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *uint32_string = static_strings_allocate(uint32_string_length);
 8004102:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fc50 	bl	80039ac <static_strings_allocate>
 800410c:	6438      	str	r0, [r7, #64]	; 0x40
	if(uint32_string == NULL){
 800410e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <static_strings_uint32_to_string+0x3c>
		return uint32_string;
 8004114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004116:	e00d      	b.n	8004134 <static_strings_uint32_to_string+0x58>
	}
	memcpy(uint32_string->string,uint32_temp_string,uint32_string_length);
 8004118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004120:	f107 010c 	add.w	r1, r7, #12
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f909 	bl	800433c <memcpy>
	uint32_string->length = uint32_string_length;
 800412a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004130:	809a      	strh	r2, [r3, #4]
	return uint32_string;
 8004132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004134:	4618      	mov	r0, r3
 8004136:	3748      	adds	r7, #72	; 0x48
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	080070d8 	.word	0x080070d8

08004140 <static_strings_int8_to_string>:

static_strings_string_descriptor *static_strings_int8_to_string(int8_t int8){
 8004140:	b580      	push	{r7, lr}
 8004142:	b092      	sub	sp, #72	; 0x48
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
	uint8_t int8_temp_string[50];
	sprintf((char *)int8_temp_string,"%" PRId8,int8);
 800414a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800414e:	f107 030c 	add.w	r3, r7, #12
 8004152:	4914      	ldr	r1, [pc, #80]	; (80041a4 <static_strings_int8_to_string+0x64>)
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd53 	bl	8004c00 <siprintf>
	uint16_t int8_string_length = static_strings_strlen(int8_temp_string);
 800415a:	f107 030c 	add.w	r3, r7, #12
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fd50 	bl	8003c04 <static_strings_strlen>
 8004164:	4603      	mov	r3, r0
 8004166:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int8_string = static_strings_allocate(int8_string_length);
 800416a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fc1c 	bl	80039ac <static_strings_allocate>
 8004174:	6438      	str	r0, [r7, #64]	; 0x40
	if(int8_string == NULL){
 8004176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <static_strings_int8_to_string+0x40>
		return int8_string;
 800417c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417e:	e00d      	b.n	800419c <static_strings_int8_to_string+0x5c>
	}
	memcpy(int8_string->string,int8_temp_string,int8_string_length);
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004188:	f107 010c 	add.w	r1, r7, #12
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f8d5 	bl	800433c <memcpy>
	int8_string->length = int8_string_length;
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004198:	809a      	strh	r2, [r3, #4]
	return int8_string;
 800419a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800419c:	4618      	mov	r0, r3
 800419e:	3748      	adds	r7, #72	; 0x48
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	080070dc 	.word	0x080070dc

080041a8 <static_strings_int16_to_string>:

static_strings_string_descriptor *static_strings_int16_to_string(int16_t int16){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b092      	sub	sp, #72	; 0x48
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
	uint8_t int16_temp_string[50];
	sprintf((char *)int16_temp_string,"%" PRId16,int16);
 80041b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041b6:	f107 030c 	add.w	r3, r7, #12
 80041ba:	4914      	ldr	r1, [pc, #80]	; (800420c <static_strings_int16_to_string+0x64>)
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd1f 	bl	8004c00 <siprintf>
	int16_t int16_string_length = static_strings_strlen(int16_temp_string);
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fd1c 	bl	8003c04 <static_strings_strlen>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *int16_string = static_strings_allocate(int16_string_length);
 80041d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fbe8 	bl	80039ac <static_strings_allocate>
 80041dc:	6438      	str	r0, [r7, #64]	; 0x40
	if(int16_string == NULL){
 80041de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <static_strings_int16_to_string+0x40>
		return int16_string;
 80041e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e6:	e00d      	b.n	8004204 <static_strings_int16_to_string+0x5c>
	}
	memcpy(int16_string->string,int16_temp_string,int16_string_length);
 80041e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80041f0:	f107 010c 	add.w	r1, r7, #12
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f8a1 	bl	800433c <memcpy>
	int16_string->length = int16_string_length;
 80041fa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	809a      	strh	r2, [r3, #4]
	return int16_string;
 8004202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004204:	4618      	mov	r0, r3
 8004206:	3748      	adds	r7, #72	; 0x48
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	080070e0 	.word	0x080070e0

08004210 <static_strings_float_to_string>:
	memcpy(int32_string->string,int32_temp_string,int32_string_length);
	int32_string->length = int32_string_length;
	return int32_string;
}

static_strings_string_descriptor *static_strings_float_to_string(float float_arg){
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b093      	sub	sp, #76	; 0x4c
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	uint8_t float_temp_string[50];
	sprintf((char *)float_temp_string,"%f",float_arg);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fc f905 	bl	8000428 <__aeabi_f2d>
 800421e:	4603      	mov	r3, r0
 8004220:	460c      	mov	r4, r1
 8004222:	f107 000c 	add.w	r0, r7, #12
 8004226:	461a      	mov	r2, r3
 8004228:	4623      	mov	r3, r4
 800422a:	4914      	ldr	r1, [pc, #80]	; (800427c <static_strings_float_to_string+0x6c>)
 800422c:	f000 fce8 	bl	8004c00 <siprintf>
	int16_t float_string_length = static_strings_strlen(float_temp_string);
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fce5 	bl	8003c04 <static_strings_strlen>
 800423a:	4603      	mov	r3, r0
 800423c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *float_string = static_strings_allocate(float_string_length);
 8004240:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fbb1 	bl	80039ac <static_strings_allocate>
 800424a:	6438      	str	r0, [r7, #64]	; 0x40
	if(float_string == NULL){
 800424c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <static_strings_float_to_string+0x46>
		return float_string;
 8004252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004254:	e00d      	b.n	8004272 <static_strings_float_to_string+0x62>
	}
	memcpy(float_string->string,float_temp_string,float_string_length);
 8004256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800425e:	f107 010c 	add.w	r1, r7, #12
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f86a 	bl	800433c <memcpy>
	float_string->length = float_string_length;
 8004268:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800426c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426e:	809a      	strh	r2, [r3, #4]
	return float_string;
 8004270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004272:	4618      	mov	r0, r3
 8004274:	374c      	adds	r7, #76	; 0x4c
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	080070e8 	.word	0x080070e8

08004280 <static_strings_double_to_string>:

static_strings_string_descriptor *static_strings_double_to_string(double double_arg){
 8004280:	b580      	push	{r7, lr}
 8004282:	b092      	sub	sp, #72	; 0x48
 8004284:	af00      	add	r7, sp, #0
 8004286:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t double_temp_string[50];
	sprintf((char *)double_temp_string,"%lf",double_arg);
 800428a:	f107 000c 	add.w	r0, r7, #12
 800428e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004292:	4914      	ldr	r1, [pc, #80]	; (80042e4 <static_strings_double_to_string+0x64>)
 8004294:	f000 fcb4 	bl	8004c00 <siprintf>
	int16_t double_string_length = static_strings_strlen(double_temp_string);
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fcb1 	bl	8003c04 <static_strings_strlen>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static_strings_string_descriptor *double_string = static_strings_allocate(double_string_length);
 80042a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fb7d 	bl	80039ac <static_strings_allocate>
 80042b2:	6438      	str	r0, [r7, #64]	; 0x40
	if(double_string == NULL){
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <static_strings_double_to_string+0x3e>
		return double_string;
 80042ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042bc:	e00d      	b.n	80042da <static_strings_double_to_string+0x5a>
	}
	memcpy(double_string->string,double_temp_string,double_string_length);
 80042be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80042c6:	f107 010c 	add.w	r1, r7, #12
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f836 	bl	800433c <memcpy>
	double_string->length = double_string_length;
 80042d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80042d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d6:	809a      	strh	r2, [r3, #4]
	return double_string;
 80042d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3748      	adds	r7, #72	; 0x48
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	080070ec 	.word	0x080070ec

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000000c 	.word	0x2000000c

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	2500      	movs	r5, #0
 80042f8:	4e0c      	ldr	r6, [pc, #48]	; (800432c <__libc_init_array+0x38>)
 80042fa:	4c0d      	ldr	r4, [pc, #52]	; (8004330 <__libc_init_array+0x3c>)
 80042fc:	1ba4      	subs	r4, r4, r6
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	42a5      	cmp	r5, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	f002 f85e 	bl	80063c4 <_init>
 8004308:	2500      	movs	r5, #0
 800430a:	4e0a      	ldr	r6, [pc, #40]	; (8004334 <__libc_init_array+0x40>)
 800430c:	4c0a      	ldr	r4, [pc, #40]	; (8004338 <__libc_init_array+0x44>)
 800430e:	1ba4      	subs	r4, r4, r6
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	42a5      	cmp	r5, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800431c:	4798      	blx	r3
 800431e:	3501      	adds	r5, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004326:	4798      	blx	r3
 8004328:	3501      	adds	r5, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	08007368 	.word	0x08007368
 8004330:	08007368 	.word	0x08007368
 8004334:	08007368 	.word	0x08007368
 8004338:	0800736c 	.word	0x0800736c

0800433c <memcpy>:
 800433c:	b510      	push	{r4, lr}
 800433e:	1e43      	subs	r3, r0, #1
 8004340:	440a      	add	r2, r1
 8004342:	4291      	cmp	r1, r2
 8004344:	d100      	bne.n	8004348 <memcpy+0xc>
 8004346:	bd10      	pop	{r4, pc}
 8004348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800434c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004350:	e7f7      	b.n	8004342 <memcpy+0x6>

08004352 <memset>:
 8004352:	4603      	mov	r3, r0
 8004354:	4402      	add	r2, r0
 8004356:	4293      	cmp	r3, r2
 8004358:	d100      	bne.n	800435c <memset+0xa>
 800435a:	4770      	bx	lr
 800435c:	f803 1b01 	strb.w	r1, [r3], #1
 8004360:	e7f9      	b.n	8004356 <memset+0x4>

08004362 <__cvt>:
 8004362:	2b00      	cmp	r3, #0
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	461e      	mov	r6, r3
 800436a:	bfbb      	ittet	lt
 800436c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004370:	461e      	movlt	r6, r3
 8004372:	2300      	movge	r3, #0
 8004374:	232d      	movlt	r3, #45	; 0x2d
 8004376:	b088      	sub	sp, #32
 8004378:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800437a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800437e:	f027 0720 	bic.w	r7, r7, #32
 8004382:	2f46      	cmp	r7, #70	; 0x46
 8004384:	4614      	mov	r4, r2
 8004386:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004388:	700b      	strb	r3, [r1, #0]
 800438a:	d004      	beq.n	8004396 <__cvt+0x34>
 800438c:	2f45      	cmp	r7, #69	; 0x45
 800438e:	d100      	bne.n	8004392 <__cvt+0x30>
 8004390:	3501      	adds	r5, #1
 8004392:	2302      	movs	r3, #2
 8004394:	e000      	b.n	8004398 <__cvt+0x36>
 8004396:	2303      	movs	r3, #3
 8004398:	aa07      	add	r2, sp, #28
 800439a:	9204      	str	r2, [sp, #16]
 800439c:	aa06      	add	r2, sp, #24
 800439e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80043a2:	e9cd 3500 	strd	r3, r5, [sp]
 80043a6:	4622      	mov	r2, r4
 80043a8:	4633      	mov	r3, r6
 80043aa:	f000 fcd9 	bl	8004d60 <_dtoa_r>
 80043ae:	2f47      	cmp	r7, #71	; 0x47
 80043b0:	4680      	mov	r8, r0
 80043b2:	d102      	bne.n	80043ba <__cvt+0x58>
 80043b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043b6:	07db      	lsls	r3, r3, #31
 80043b8:	d526      	bpl.n	8004408 <__cvt+0xa6>
 80043ba:	2f46      	cmp	r7, #70	; 0x46
 80043bc:	eb08 0905 	add.w	r9, r8, r5
 80043c0:	d111      	bne.n	80043e6 <__cvt+0x84>
 80043c2:	f898 3000 	ldrb.w	r3, [r8]
 80043c6:	2b30      	cmp	r3, #48	; 0x30
 80043c8:	d10a      	bne.n	80043e0 <__cvt+0x7e>
 80043ca:	2200      	movs	r2, #0
 80043cc:	2300      	movs	r3, #0
 80043ce:	4620      	mov	r0, r4
 80043d0:	4631      	mov	r1, r6
 80043d2:	f7fc fae9 	bl	80009a8 <__aeabi_dcmpeq>
 80043d6:	b918      	cbnz	r0, 80043e0 <__cvt+0x7e>
 80043d8:	f1c5 0501 	rsb	r5, r5, #1
 80043dc:	f8ca 5000 	str.w	r5, [sl]
 80043e0:	f8da 3000 	ldr.w	r3, [sl]
 80043e4:	4499      	add	r9, r3
 80043e6:	2200      	movs	r2, #0
 80043e8:	2300      	movs	r3, #0
 80043ea:	4620      	mov	r0, r4
 80043ec:	4631      	mov	r1, r6
 80043ee:	f7fc fadb 	bl	80009a8 <__aeabi_dcmpeq>
 80043f2:	b938      	cbnz	r0, 8004404 <__cvt+0xa2>
 80043f4:	2230      	movs	r2, #48	; 0x30
 80043f6:	9b07      	ldr	r3, [sp, #28]
 80043f8:	454b      	cmp	r3, r9
 80043fa:	d205      	bcs.n	8004408 <__cvt+0xa6>
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	9107      	str	r1, [sp, #28]
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e7f8      	b.n	80043f6 <__cvt+0x94>
 8004404:	f8cd 901c 	str.w	r9, [sp, #28]
 8004408:	4640      	mov	r0, r8
 800440a:	9b07      	ldr	r3, [sp, #28]
 800440c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800440e:	eba3 0308 	sub.w	r3, r3, r8
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	b008      	add	sp, #32
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800441a <__exponent>:
 800441a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800441c:	2900      	cmp	r1, #0
 800441e:	bfb4      	ite	lt
 8004420:	232d      	movlt	r3, #45	; 0x2d
 8004422:	232b      	movge	r3, #43	; 0x2b
 8004424:	4604      	mov	r4, r0
 8004426:	bfb8      	it	lt
 8004428:	4249      	neglt	r1, r1
 800442a:	2909      	cmp	r1, #9
 800442c:	f804 2b02 	strb.w	r2, [r4], #2
 8004430:	7043      	strb	r3, [r0, #1]
 8004432:	dd21      	ble.n	8004478 <__exponent+0x5e>
 8004434:	f10d 0307 	add.w	r3, sp, #7
 8004438:	461f      	mov	r7, r3
 800443a:	260a      	movs	r6, #10
 800443c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004440:	fb06 1115 	mls	r1, r6, r5, r1
 8004444:	2d09      	cmp	r5, #9
 8004446:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800444a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800444e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004452:	4629      	mov	r1, r5
 8004454:	dc09      	bgt.n	800446a <__exponent+0x50>
 8004456:	3130      	adds	r1, #48	; 0x30
 8004458:	3b02      	subs	r3, #2
 800445a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800445e:	42bb      	cmp	r3, r7
 8004460:	4622      	mov	r2, r4
 8004462:	d304      	bcc.n	800446e <__exponent+0x54>
 8004464:	1a10      	subs	r0, r2, r0
 8004466:	b003      	add	sp, #12
 8004468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446a:	4613      	mov	r3, r2
 800446c:	e7e6      	b.n	800443c <__exponent+0x22>
 800446e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004472:	f804 2b01 	strb.w	r2, [r4], #1
 8004476:	e7f2      	b.n	800445e <__exponent+0x44>
 8004478:	2330      	movs	r3, #48	; 0x30
 800447a:	4419      	add	r1, r3
 800447c:	7083      	strb	r3, [r0, #2]
 800447e:	1d02      	adds	r2, r0, #4
 8004480:	70c1      	strb	r1, [r0, #3]
 8004482:	e7ef      	b.n	8004464 <__exponent+0x4a>

08004484 <_printf_float>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	b091      	sub	sp, #68	; 0x44
 800448a:	460c      	mov	r4, r1
 800448c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800448e:	4693      	mov	fp, r2
 8004490:	461e      	mov	r6, r3
 8004492:	4605      	mov	r5, r0
 8004494:	f001 fa18 	bl	80058c8 <_localeconv_r>
 8004498:	6803      	ldr	r3, [r0, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	9309      	str	r3, [sp, #36]	; 0x24
 800449e:	f7fb fe57 	bl	8000150 <strlen>
 80044a2:	2300      	movs	r3, #0
 80044a4:	930e      	str	r3, [sp, #56]	; 0x38
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	900a      	str	r0, [sp, #40]	; 0x28
 80044aa:	3307      	adds	r3, #7
 80044ac:	f023 0307 	bic.w	r3, r3, #7
 80044b0:	f103 0208 	add.w	r2, r3, #8
 80044b4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80044b8:	f8d4 a000 	ldr.w	sl, [r4]
 80044bc:	603a      	str	r2, [r7, #0]
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044c6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80044ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	4ba6      	ldr	r3, [pc, #664]	; (8004770 <_printf_float+0x2ec>)
 80044d6:	4638      	mov	r0, r7
 80044d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044da:	f7fc fa97 	bl	8000a0c <__aeabi_dcmpun>
 80044de:	bb68      	cbnz	r0, 800453c <_printf_float+0xb8>
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	4ba2      	ldr	r3, [pc, #648]	; (8004770 <_printf_float+0x2ec>)
 80044e6:	4638      	mov	r0, r7
 80044e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ea:	f7fc fa71 	bl	80009d0 <__aeabi_dcmple>
 80044ee:	bb28      	cbnz	r0, 800453c <_printf_float+0xb8>
 80044f0:	2200      	movs	r2, #0
 80044f2:	2300      	movs	r3, #0
 80044f4:	4638      	mov	r0, r7
 80044f6:	4649      	mov	r1, r9
 80044f8:	f7fc fa60 	bl	80009bc <__aeabi_dcmplt>
 80044fc:	b110      	cbz	r0, 8004504 <_printf_float+0x80>
 80044fe:	232d      	movs	r3, #45	; 0x2d
 8004500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004504:	4f9b      	ldr	r7, [pc, #620]	; (8004774 <_printf_float+0x2f0>)
 8004506:	4b9c      	ldr	r3, [pc, #624]	; (8004778 <_printf_float+0x2f4>)
 8004508:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800450c:	bf98      	it	ls
 800450e:	461f      	movls	r7, r3
 8004510:	2303      	movs	r3, #3
 8004512:	f04f 0900 	mov.w	r9, #0
 8004516:	6123      	str	r3, [r4, #16]
 8004518:	f02a 0304 	bic.w	r3, sl, #4
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	9600      	str	r6, [sp, #0]
 8004520:	465b      	mov	r3, fp
 8004522:	aa0f      	add	r2, sp, #60	; 0x3c
 8004524:	4621      	mov	r1, r4
 8004526:	4628      	mov	r0, r5
 8004528:	f000 f9e2 	bl	80048f0 <_printf_common>
 800452c:	3001      	adds	r0, #1
 800452e:	f040 8090 	bne.w	8004652 <_printf_float+0x1ce>
 8004532:	f04f 30ff 	mov.w	r0, #4294967295
 8004536:	b011      	add	sp, #68	; 0x44
 8004538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453c:	463a      	mov	r2, r7
 800453e:	464b      	mov	r3, r9
 8004540:	4638      	mov	r0, r7
 8004542:	4649      	mov	r1, r9
 8004544:	f7fc fa62 	bl	8000a0c <__aeabi_dcmpun>
 8004548:	b110      	cbz	r0, 8004550 <_printf_float+0xcc>
 800454a:	4f8c      	ldr	r7, [pc, #560]	; (800477c <_printf_float+0x2f8>)
 800454c:	4b8c      	ldr	r3, [pc, #560]	; (8004780 <_printf_float+0x2fc>)
 800454e:	e7db      	b.n	8004508 <_printf_float+0x84>
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	a80d      	add	r0, sp, #52	; 0x34
 800455a:	a90e      	add	r1, sp, #56	; 0x38
 800455c:	d140      	bne.n	80045e0 <_printf_float+0x15c>
 800455e:	2306      	movs	r3, #6
 8004560:	6063      	str	r3, [r4, #4]
 8004562:	f04f 0c00 	mov.w	ip, #0
 8004566:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800456a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	6022      	str	r2, [r4, #0]
 8004572:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	463a      	mov	r2, r7
 800457a:	464b      	mov	r3, r9
 800457c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004580:	4628      	mov	r0, r5
 8004582:	f7ff feee 	bl	8004362 <__cvt>
 8004586:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800458a:	2b47      	cmp	r3, #71	; 0x47
 800458c:	4607      	mov	r7, r0
 800458e:	d109      	bne.n	80045a4 <_printf_float+0x120>
 8004590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004592:	1cd8      	adds	r0, r3, #3
 8004594:	db02      	blt.n	800459c <_printf_float+0x118>
 8004596:	6862      	ldr	r2, [r4, #4]
 8004598:	4293      	cmp	r3, r2
 800459a:	dd47      	ble.n	800462c <_printf_float+0x1a8>
 800459c:	f1a8 0802 	sub.w	r8, r8, #2
 80045a0:	fa5f f888 	uxtb.w	r8, r8
 80045a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80045a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045aa:	d824      	bhi.n	80045f6 <_printf_float+0x172>
 80045ac:	3901      	subs	r1, #1
 80045ae:	4642      	mov	r2, r8
 80045b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045b4:	910d      	str	r1, [sp, #52]	; 0x34
 80045b6:	f7ff ff30 	bl	800441a <__exponent>
 80045ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045bc:	4681      	mov	r9, r0
 80045be:	1813      	adds	r3, r2, r0
 80045c0:	2a01      	cmp	r2, #1
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	dc02      	bgt.n	80045cc <_printf_float+0x148>
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	07d1      	lsls	r1, r2, #31
 80045ca:	d501      	bpl.n	80045d0 <_printf_float+0x14c>
 80045cc:	3301      	adds	r3, #1
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0a2      	beq.n	800451e <_printf_float+0x9a>
 80045d8:	232d      	movs	r3, #45	; 0x2d
 80045da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045de:	e79e      	b.n	800451e <_printf_float+0x9a>
 80045e0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80045e4:	f000 816e 	beq.w	80048c4 <_printf_float+0x440>
 80045e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045ec:	d1b9      	bne.n	8004562 <_printf_float+0xde>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1b7      	bne.n	8004562 <_printf_float+0xde>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e7b4      	b.n	8004560 <_printf_float+0xdc>
 80045f6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80045fa:	d119      	bne.n	8004630 <_printf_float+0x1ac>
 80045fc:	2900      	cmp	r1, #0
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	dd0c      	ble.n	800461c <_printf_float+0x198>
 8004602:	6121      	str	r1, [r4, #16]
 8004604:	b913      	cbnz	r3, 800460c <_printf_float+0x188>
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	07d2      	lsls	r2, r2, #31
 800460a:	d502      	bpl.n	8004612 <_printf_float+0x18e>
 800460c:	3301      	adds	r3, #1
 800460e:	440b      	add	r3, r1
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004614:	f04f 0900 	mov.w	r9, #0
 8004618:	65a3      	str	r3, [r4, #88]	; 0x58
 800461a:	e7d9      	b.n	80045d0 <_printf_float+0x14c>
 800461c:	b913      	cbnz	r3, 8004624 <_printf_float+0x1a0>
 800461e:	6822      	ldr	r2, [r4, #0]
 8004620:	07d0      	lsls	r0, r2, #31
 8004622:	d501      	bpl.n	8004628 <_printf_float+0x1a4>
 8004624:	3302      	adds	r3, #2
 8004626:	e7f3      	b.n	8004610 <_printf_float+0x18c>
 8004628:	2301      	movs	r3, #1
 800462a:	e7f1      	b.n	8004610 <_printf_float+0x18c>
 800462c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004630:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004634:	4293      	cmp	r3, r2
 8004636:	db05      	blt.n	8004644 <_printf_float+0x1c0>
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	07d1      	lsls	r1, r2, #31
 800463e:	d5e8      	bpl.n	8004612 <_printf_float+0x18e>
 8004640:	3301      	adds	r3, #1
 8004642:	e7e5      	b.n	8004610 <_printf_float+0x18c>
 8004644:	2b00      	cmp	r3, #0
 8004646:	bfcc      	ite	gt
 8004648:	2301      	movgt	r3, #1
 800464a:	f1c3 0302 	rsble	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	e7de      	b.n	8004610 <_printf_float+0x18c>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	055a      	lsls	r2, r3, #21
 8004656:	d407      	bmi.n	8004668 <_printf_float+0x1e4>
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	463a      	mov	r2, r7
 800465c:	4659      	mov	r1, fp
 800465e:	4628      	mov	r0, r5
 8004660:	47b0      	blx	r6
 8004662:	3001      	adds	r0, #1
 8004664:	d129      	bne.n	80046ba <_printf_float+0x236>
 8004666:	e764      	b.n	8004532 <_printf_float+0xae>
 8004668:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800466c:	f240 80d7 	bls.w	800481e <_printf_float+0x39a>
 8004670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004674:	2200      	movs	r2, #0
 8004676:	2300      	movs	r3, #0
 8004678:	f7fc f996 	bl	80009a8 <__aeabi_dcmpeq>
 800467c:	b388      	cbz	r0, 80046e2 <_printf_float+0x25e>
 800467e:	2301      	movs	r3, #1
 8004680:	4a40      	ldr	r2, [pc, #256]	; (8004784 <_printf_float+0x300>)
 8004682:	4659      	mov	r1, fp
 8004684:	4628      	mov	r0, r5
 8004686:	47b0      	blx	r6
 8004688:	3001      	adds	r0, #1
 800468a:	f43f af52 	beq.w	8004532 <_printf_float+0xae>
 800468e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004692:	429a      	cmp	r2, r3
 8004694:	db02      	blt.n	800469c <_printf_float+0x218>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	07d8      	lsls	r0, r3, #31
 800469a:	d50e      	bpl.n	80046ba <_printf_float+0x236>
 800469c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a0:	4659      	mov	r1, fp
 80046a2:	4628      	mov	r0, r5
 80046a4:	47b0      	blx	r6
 80046a6:	3001      	adds	r0, #1
 80046a8:	f43f af43 	beq.w	8004532 <_printf_float+0xae>
 80046ac:	2700      	movs	r7, #0
 80046ae:	f104 081a 	add.w	r8, r4, #26
 80046b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046b4:	3b01      	subs	r3, #1
 80046b6:	42bb      	cmp	r3, r7
 80046b8:	dc09      	bgt.n	80046ce <_printf_float+0x24a>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	079f      	lsls	r7, r3, #30
 80046be:	f100 80fd 	bmi.w	80048bc <_printf_float+0x438>
 80046c2:	68e0      	ldr	r0, [r4, #12]
 80046c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046c6:	4298      	cmp	r0, r3
 80046c8:	bfb8      	it	lt
 80046ca:	4618      	movlt	r0, r3
 80046cc:	e733      	b.n	8004536 <_printf_float+0xb2>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4642      	mov	r2, r8
 80046d2:	4659      	mov	r1, fp
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b0      	blx	r6
 80046d8:	3001      	adds	r0, #1
 80046da:	f43f af2a 	beq.w	8004532 <_printf_float+0xae>
 80046de:	3701      	adds	r7, #1
 80046e0:	e7e7      	b.n	80046b2 <_printf_float+0x22e>
 80046e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dc2b      	bgt.n	8004740 <_printf_float+0x2bc>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <_printf_float+0x300>)
 80046ec:	4659      	mov	r1, fp
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b0      	blx	r6
 80046f2:	3001      	adds	r0, #1
 80046f4:	f43f af1d 	beq.w	8004532 <_printf_float+0xae>
 80046f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046fa:	b923      	cbnz	r3, 8004706 <_printf_float+0x282>
 80046fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046fe:	b913      	cbnz	r3, 8004706 <_printf_float+0x282>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	07d9      	lsls	r1, r3, #31
 8004704:	d5d9      	bpl.n	80046ba <_printf_float+0x236>
 8004706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800470a:	4659      	mov	r1, fp
 800470c:	4628      	mov	r0, r5
 800470e:	47b0      	blx	r6
 8004710:	3001      	adds	r0, #1
 8004712:	f43f af0e 	beq.w	8004532 <_printf_float+0xae>
 8004716:	f04f 0800 	mov.w	r8, #0
 800471a:	f104 091a 	add.w	r9, r4, #26
 800471e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004720:	425b      	negs	r3, r3
 8004722:	4543      	cmp	r3, r8
 8004724:	dc01      	bgt.n	800472a <_printf_float+0x2a6>
 8004726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004728:	e797      	b.n	800465a <_printf_float+0x1d6>
 800472a:	2301      	movs	r3, #1
 800472c:	464a      	mov	r2, r9
 800472e:	4659      	mov	r1, fp
 8004730:	4628      	mov	r0, r5
 8004732:	47b0      	blx	r6
 8004734:	3001      	adds	r0, #1
 8004736:	f43f aefc 	beq.w	8004532 <_printf_float+0xae>
 800473a:	f108 0801 	add.w	r8, r8, #1
 800473e:	e7ee      	b.n	800471e <_printf_float+0x29a>
 8004740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004744:	429a      	cmp	r2, r3
 8004746:	bfa8      	it	ge
 8004748:	461a      	movge	r2, r3
 800474a:	2a00      	cmp	r2, #0
 800474c:	4690      	mov	r8, r2
 800474e:	dd07      	ble.n	8004760 <_printf_float+0x2dc>
 8004750:	4613      	mov	r3, r2
 8004752:	4659      	mov	r1, fp
 8004754:	463a      	mov	r2, r7
 8004756:	4628      	mov	r0, r5
 8004758:	47b0      	blx	r6
 800475a:	3001      	adds	r0, #1
 800475c:	f43f aee9 	beq.w	8004532 <_printf_float+0xae>
 8004760:	f104 031a 	add.w	r3, r4, #26
 8004764:	f04f 0a00 	mov.w	sl, #0
 8004768:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800476c:	930b      	str	r3, [sp, #44]	; 0x2c
 800476e:	e015      	b.n	800479c <_printf_float+0x318>
 8004770:	7fefffff 	.word	0x7fefffff
 8004774:	0800710c 	.word	0x0800710c
 8004778:	08007108 	.word	0x08007108
 800477c:	08007114 	.word	0x08007114
 8004780:	08007110 	.word	0x08007110
 8004784:	08007118 	.word	0x08007118
 8004788:	2301      	movs	r3, #1
 800478a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800478c:	4659      	mov	r1, fp
 800478e:	4628      	mov	r0, r5
 8004790:	47b0      	blx	r6
 8004792:	3001      	adds	r0, #1
 8004794:	f43f aecd 	beq.w	8004532 <_printf_float+0xae>
 8004798:	f10a 0a01 	add.w	sl, sl, #1
 800479c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80047a0:	eba9 0308 	sub.w	r3, r9, r8
 80047a4:	4553      	cmp	r3, sl
 80047a6:	dcef      	bgt.n	8004788 <_printf_float+0x304>
 80047a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ac:	429a      	cmp	r2, r3
 80047ae:	444f      	add	r7, r9
 80047b0:	db14      	blt.n	80047dc <_printf_float+0x358>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	07da      	lsls	r2, r3, #31
 80047b6:	d411      	bmi.n	80047dc <_printf_float+0x358>
 80047b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047bc:	eba3 0209 	sub.w	r2, r3, r9
 80047c0:	eba3 0901 	sub.w	r9, r3, r1
 80047c4:	4591      	cmp	r9, r2
 80047c6:	bfa8      	it	ge
 80047c8:	4691      	movge	r9, r2
 80047ca:	f1b9 0f00 	cmp.w	r9, #0
 80047ce:	dc0d      	bgt.n	80047ec <_printf_float+0x368>
 80047d0:	2700      	movs	r7, #0
 80047d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047d6:	f104 081a 	add.w	r8, r4, #26
 80047da:	e018      	b.n	800480e <_printf_float+0x38a>
 80047dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e0:	4659      	mov	r1, fp
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b0      	blx	r6
 80047e6:	3001      	adds	r0, #1
 80047e8:	d1e6      	bne.n	80047b8 <_printf_float+0x334>
 80047ea:	e6a2      	b.n	8004532 <_printf_float+0xae>
 80047ec:	464b      	mov	r3, r9
 80047ee:	463a      	mov	r2, r7
 80047f0:	4659      	mov	r1, fp
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b0      	blx	r6
 80047f6:	3001      	adds	r0, #1
 80047f8:	d1ea      	bne.n	80047d0 <_printf_float+0x34c>
 80047fa:	e69a      	b.n	8004532 <_printf_float+0xae>
 80047fc:	2301      	movs	r3, #1
 80047fe:	4642      	mov	r2, r8
 8004800:	4659      	mov	r1, fp
 8004802:	4628      	mov	r0, r5
 8004804:	47b0      	blx	r6
 8004806:	3001      	adds	r0, #1
 8004808:	f43f ae93 	beq.w	8004532 <_printf_float+0xae>
 800480c:	3701      	adds	r7, #1
 800480e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	eba3 0309 	sub.w	r3, r3, r9
 8004818:	42bb      	cmp	r3, r7
 800481a:	dcef      	bgt.n	80047fc <_printf_float+0x378>
 800481c:	e74d      	b.n	80046ba <_printf_float+0x236>
 800481e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004820:	2a01      	cmp	r2, #1
 8004822:	dc01      	bgt.n	8004828 <_printf_float+0x3a4>
 8004824:	07db      	lsls	r3, r3, #31
 8004826:	d538      	bpl.n	800489a <_printf_float+0x416>
 8004828:	2301      	movs	r3, #1
 800482a:	463a      	mov	r2, r7
 800482c:	4659      	mov	r1, fp
 800482e:	4628      	mov	r0, r5
 8004830:	47b0      	blx	r6
 8004832:	3001      	adds	r0, #1
 8004834:	f43f ae7d 	beq.w	8004532 <_printf_float+0xae>
 8004838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800483c:	4659      	mov	r1, fp
 800483e:	4628      	mov	r0, r5
 8004840:	47b0      	blx	r6
 8004842:	3001      	adds	r0, #1
 8004844:	f107 0701 	add.w	r7, r7, #1
 8004848:	f43f ae73 	beq.w	8004532 <_printf_float+0xae>
 800484c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004852:	2200      	movs	r2, #0
 8004854:	f103 38ff 	add.w	r8, r3, #4294967295
 8004858:	2300      	movs	r3, #0
 800485a:	f7fc f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800485e:	b9c0      	cbnz	r0, 8004892 <_printf_float+0x40e>
 8004860:	4643      	mov	r3, r8
 8004862:	463a      	mov	r2, r7
 8004864:	4659      	mov	r1, fp
 8004866:	4628      	mov	r0, r5
 8004868:	47b0      	blx	r6
 800486a:	3001      	adds	r0, #1
 800486c:	d10d      	bne.n	800488a <_printf_float+0x406>
 800486e:	e660      	b.n	8004532 <_printf_float+0xae>
 8004870:	2301      	movs	r3, #1
 8004872:	4642      	mov	r2, r8
 8004874:	4659      	mov	r1, fp
 8004876:	4628      	mov	r0, r5
 8004878:	47b0      	blx	r6
 800487a:	3001      	adds	r0, #1
 800487c:	f43f ae59 	beq.w	8004532 <_printf_float+0xae>
 8004880:	3701      	adds	r7, #1
 8004882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004884:	3b01      	subs	r3, #1
 8004886:	42bb      	cmp	r3, r7
 8004888:	dcf2      	bgt.n	8004870 <_printf_float+0x3ec>
 800488a:	464b      	mov	r3, r9
 800488c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004890:	e6e4      	b.n	800465c <_printf_float+0x1d8>
 8004892:	2700      	movs	r7, #0
 8004894:	f104 081a 	add.w	r8, r4, #26
 8004898:	e7f3      	b.n	8004882 <_printf_float+0x3fe>
 800489a:	2301      	movs	r3, #1
 800489c:	e7e1      	b.n	8004862 <_printf_float+0x3de>
 800489e:	2301      	movs	r3, #1
 80048a0:	4642      	mov	r2, r8
 80048a2:	4659      	mov	r1, fp
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b0      	blx	r6
 80048a8:	3001      	adds	r0, #1
 80048aa:	f43f ae42 	beq.w	8004532 <_printf_float+0xae>
 80048ae:	3701      	adds	r7, #1
 80048b0:	68e3      	ldr	r3, [r4, #12]
 80048b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	42bb      	cmp	r3, r7
 80048b8:	dcf1      	bgt.n	800489e <_printf_float+0x41a>
 80048ba:	e702      	b.n	80046c2 <_printf_float+0x23e>
 80048bc:	2700      	movs	r7, #0
 80048be:	f104 0819 	add.w	r8, r4, #25
 80048c2:	e7f5      	b.n	80048b0 <_printf_float+0x42c>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f43f ae94 	beq.w	80045f2 <_printf_float+0x16e>
 80048ca:	f04f 0c00 	mov.w	ip, #0
 80048ce:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80048d2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80048d6:	6022      	str	r2, [r4, #0]
 80048d8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80048dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	463a      	mov	r2, r7
 80048e4:	464b      	mov	r3, r9
 80048e6:	4628      	mov	r0, r5
 80048e8:	f7ff fd3b 	bl	8004362 <__cvt>
 80048ec:	4607      	mov	r7, r0
 80048ee:	e64f      	b.n	8004590 <_printf_float+0x10c>

080048f0 <_printf_common>:
 80048f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	4691      	mov	r9, r2
 80048f6:	461f      	mov	r7, r3
 80048f8:	688a      	ldr	r2, [r1, #8]
 80048fa:	690b      	ldr	r3, [r1, #16]
 80048fc:	4606      	mov	r6, r0
 80048fe:	4293      	cmp	r3, r2
 8004900:	bfb8      	it	lt
 8004902:	4613      	movlt	r3, r2
 8004904:	f8c9 3000 	str.w	r3, [r9]
 8004908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800490c:	460c      	mov	r4, r1
 800490e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004912:	b112      	cbz	r2, 800491a <_printf_common+0x2a>
 8004914:	3301      	adds	r3, #1
 8004916:	f8c9 3000 	str.w	r3, [r9]
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	0699      	lsls	r1, r3, #26
 800491e:	bf42      	ittt	mi
 8004920:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004924:	3302      	addmi	r3, #2
 8004926:	f8c9 3000 	strmi.w	r3, [r9]
 800492a:	6825      	ldr	r5, [r4, #0]
 800492c:	f015 0506 	ands.w	r5, r5, #6
 8004930:	d107      	bne.n	8004942 <_printf_common+0x52>
 8004932:	f104 0a19 	add.w	sl, r4, #25
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	f8d9 2000 	ldr.w	r2, [r9]
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	42ab      	cmp	r3, r5
 8004940:	dc29      	bgt.n	8004996 <_printf_common+0xa6>
 8004942:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	3300      	adds	r3, #0
 800494a:	bf18      	it	ne
 800494c:	2301      	movne	r3, #1
 800494e:	0692      	lsls	r2, r2, #26
 8004950:	d42e      	bmi.n	80049b0 <_printf_common+0xc0>
 8004952:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004956:	4639      	mov	r1, r7
 8004958:	4630      	mov	r0, r6
 800495a:	47c0      	blx	r8
 800495c:	3001      	adds	r0, #1
 800495e:	d021      	beq.n	80049a4 <_printf_common+0xb4>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	68e5      	ldr	r5, [r4, #12]
 8004964:	f003 0306 	and.w	r3, r3, #6
 8004968:	2b04      	cmp	r3, #4
 800496a:	bf18      	it	ne
 800496c:	2500      	movne	r5, #0
 800496e:	f8d9 2000 	ldr.w	r2, [r9]
 8004972:	f04f 0900 	mov.w	r9, #0
 8004976:	bf08      	it	eq
 8004978:	1aad      	subeq	r5, r5, r2
 800497a:	68a3      	ldr	r3, [r4, #8]
 800497c:	6922      	ldr	r2, [r4, #16]
 800497e:	bf08      	it	eq
 8004980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004984:	4293      	cmp	r3, r2
 8004986:	bfc4      	itt	gt
 8004988:	1a9b      	subgt	r3, r3, r2
 800498a:	18ed      	addgt	r5, r5, r3
 800498c:	341a      	adds	r4, #26
 800498e:	454d      	cmp	r5, r9
 8004990:	d11a      	bne.n	80049c8 <_printf_common+0xd8>
 8004992:	2000      	movs	r0, #0
 8004994:	e008      	b.n	80049a8 <_printf_common+0xb8>
 8004996:	2301      	movs	r3, #1
 8004998:	4652      	mov	r2, sl
 800499a:	4639      	mov	r1, r7
 800499c:	4630      	mov	r0, r6
 800499e:	47c0      	blx	r8
 80049a0:	3001      	adds	r0, #1
 80049a2:	d103      	bne.n	80049ac <_printf_common+0xbc>
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ac:	3501      	adds	r5, #1
 80049ae:	e7c2      	b.n	8004936 <_printf_common+0x46>
 80049b0:	2030      	movs	r0, #48	; 0x30
 80049b2:	18e1      	adds	r1, r4, r3
 80049b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049be:	4422      	add	r2, r4
 80049c0:	3302      	adds	r3, #2
 80049c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049c6:	e7c4      	b.n	8004952 <_printf_common+0x62>
 80049c8:	2301      	movs	r3, #1
 80049ca:	4622      	mov	r2, r4
 80049cc:	4639      	mov	r1, r7
 80049ce:	4630      	mov	r0, r6
 80049d0:	47c0      	blx	r8
 80049d2:	3001      	adds	r0, #1
 80049d4:	d0e6      	beq.n	80049a4 <_printf_common+0xb4>
 80049d6:	f109 0901 	add.w	r9, r9, #1
 80049da:	e7d8      	b.n	800498e <_printf_common+0x9e>

080049dc <_printf_i>:
 80049dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049e4:	460c      	mov	r4, r1
 80049e6:	7e09      	ldrb	r1, [r1, #24]
 80049e8:	b085      	sub	sp, #20
 80049ea:	296e      	cmp	r1, #110	; 0x6e
 80049ec:	4617      	mov	r7, r2
 80049ee:	4606      	mov	r6, r0
 80049f0:	4698      	mov	r8, r3
 80049f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049f4:	f000 80b3 	beq.w	8004b5e <_printf_i+0x182>
 80049f8:	d822      	bhi.n	8004a40 <_printf_i+0x64>
 80049fa:	2963      	cmp	r1, #99	; 0x63
 80049fc:	d036      	beq.n	8004a6c <_printf_i+0x90>
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x3a>
 8004a00:	2900      	cmp	r1, #0
 8004a02:	f000 80b9 	beq.w	8004b78 <_printf_i+0x19c>
 8004a06:	2958      	cmp	r1, #88	; 0x58
 8004a08:	f000 8083 	beq.w	8004b12 <_printf_i+0x136>
 8004a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a14:	e032      	b.n	8004a7c <_printf_i+0xa0>
 8004a16:	2964      	cmp	r1, #100	; 0x64
 8004a18:	d001      	beq.n	8004a1e <_printf_i+0x42>
 8004a1a:	2969      	cmp	r1, #105	; 0x69
 8004a1c:	d1f6      	bne.n	8004a0c <_printf_i+0x30>
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	6813      	ldr	r3, [r2, #0]
 8004a22:	0605      	lsls	r5, r0, #24
 8004a24:	f103 0104 	add.w	r1, r3, #4
 8004a28:	d52a      	bpl.n	8004a80 <_printf_i+0xa4>
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6011      	str	r1, [r2, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da03      	bge.n	8004a3a <_printf_i+0x5e>
 8004a32:	222d      	movs	r2, #45	; 0x2d
 8004a34:	425b      	negs	r3, r3
 8004a36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a3a:	486f      	ldr	r0, [pc, #444]	; (8004bf8 <_printf_i+0x21c>)
 8004a3c:	220a      	movs	r2, #10
 8004a3e:	e039      	b.n	8004ab4 <_printf_i+0xd8>
 8004a40:	2973      	cmp	r1, #115	; 0x73
 8004a42:	f000 809d 	beq.w	8004b80 <_printf_i+0x1a4>
 8004a46:	d808      	bhi.n	8004a5a <_printf_i+0x7e>
 8004a48:	296f      	cmp	r1, #111	; 0x6f
 8004a4a:	d020      	beq.n	8004a8e <_printf_i+0xb2>
 8004a4c:	2970      	cmp	r1, #112	; 0x70
 8004a4e:	d1dd      	bne.n	8004a0c <_printf_i+0x30>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f043 0320 	orr.w	r3, r3, #32
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	e003      	b.n	8004a62 <_printf_i+0x86>
 8004a5a:	2975      	cmp	r1, #117	; 0x75
 8004a5c:	d017      	beq.n	8004a8e <_printf_i+0xb2>
 8004a5e:	2978      	cmp	r1, #120	; 0x78
 8004a60:	d1d4      	bne.n	8004a0c <_printf_i+0x30>
 8004a62:	2378      	movs	r3, #120	; 0x78
 8004a64:	4865      	ldr	r0, [pc, #404]	; (8004bfc <_printf_i+0x220>)
 8004a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a6a:	e055      	b.n	8004b18 <_printf_i+0x13c>
 8004a6c:	6813      	ldr	r3, [r2, #0]
 8004a6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a72:	1d19      	adds	r1, r3, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6011      	str	r1, [r2, #0]
 8004a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e08c      	b.n	8004b9a <_printf_i+0x1be>
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a86:	6011      	str	r1, [r2, #0]
 8004a88:	bf18      	it	ne
 8004a8a:	b21b      	sxthne	r3, r3
 8004a8c:	e7cf      	b.n	8004a2e <_printf_i+0x52>
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	6825      	ldr	r5, [r4, #0]
 8004a92:	1d18      	adds	r0, r3, #4
 8004a94:	6010      	str	r0, [r2, #0]
 8004a96:	0628      	lsls	r0, r5, #24
 8004a98:	d501      	bpl.n	8004a9e <_printf_i+0xc2>
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	e002      	b.n	8004aa4 <_printf_i+0xc8>
 8004a9e:	0668      	lsls	r0, r5, #25
 8004aa0:	d5fb      	bpl.n	8004a9a <_printf_i+0xbe>
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	296f      	cmp	r1, #111	; 0x6f
 8004aa6:	bf14      	ite	ne
 8004aa8:	220a      	movne	r2, #10
 8004aaa:	2208      	moveq	r2, #8
 8004aac:	4852      	ldr	r0, [pc, #328]	; (8004bf8 <_printf_i+0x21c>)
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ab4:	6865      	ldr	r5, [r4, #4]
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	60a5      	str	r5, [r4, #8]
 8004aba:	f2c0 8095 	blt.w	8004be8 <_printf_i+0x20c>
 8004abe:	6821      	ldr	r1, [r4, #0]
 8004ac0:	f021 0104 	bic.w	r1, r1, #4
 8004ac4:	6021      	str	r1, [r4, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d13d      	bne.n	8004b46 <_printf_i+0x16a>
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	f040 808e 	bne.w	8004bec <_printf_i+0x210>
 8004ad0:	4665      	mov	r5, ip
 8004ad2:	2a08      	cmp	r2, #8
 8004ad4:	d10b      	bne.n	8004aee <_printf_i+0x112>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	07db      	lsls	r3, r3, #31
 8004ada:	d508      	bpl.n	8004aee <_printf_i+0x112>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	6862      	ldr	r2, [r4, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bfde      	ittt	le
 8004ae4:	2330      	movle	r3, #48	; 0x30
 8004ae6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aee:	ebac 0305 	sub.w	r3, ip, r5
 8004af2:	6123      	str	r3, [r4, #16]
 8004af4:	f8cd 8000 	str.w	r8, [sp]
 8004af8:	463b      	mov	r3, r7
 8004afa:	aa03      	add	r2, sp, #12
 8004afc:	4621      	mov	r1, r4
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff fef6 	bl	80048f0 <_printf_common>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d14d      	bne.n	8004ba4 <_printf_i+0x1c8>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	b005      	add	sp, #20
 8004b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b12:	4839      	ldr	r0, [pc, #228]	; (8004bf8 <_printf_i+0x21c>)
 8004b14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b18:	6813      	ldr	r3, [r2, #0]
 8004b1a:	6821      	ldr	r1, [r4, #0]
 8004b1c:	1d1d      	adds	r5, r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6015      	str	r5, [r2, #0]
 8004b22:	060a      	lsls	r2, r1, #24
 8004b24:	d50b      	bpl.n	8004b3e <_printf_i+0x162>
 8004b26:	07ca      	lsls	r2, r1, #31
 8004b28:	bf44      	itt	mi
 8004b2a:	f041 0120 	orrmi.w	r1, r1, #32
 8004b2e:	6021      	strmi	r1, [r4, #0]
 8004b30:	b91b      	cbnz	r3, 8004b3a <_printf_i+0x15e>
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	f022 0220 	bic.w	r2, r2, #32
 8004b38:	6022      	str	r2, [r4, #0]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	e7b7      	b.n	8004aae <_printf_i+0xd2>
 8004b3e:	064d      	lsls	r5, r1, #25
 8004b40:	bf48      	it	mi
 8004b42:	b29b      	uxthmi	r3, r3
 8004b44:	e7ef      	b.n	8004b26 <_printf_i+0x14a>
 8004b46:	4665      	mov	r5, ip
 8004b48:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b4c:	fb02 3311 	mls	r3, r2, r1, r3
 8004b50:	5cc3      	ldrb	r3, [r0, r3]
 8004b52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b56:	460b      	mov	r3, r1
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	d1f5      	bne.n	8004b48 <_printf_i+0x16c>
 8004b5c:	e7b9      	b.n	8004ad2 <_printf_i+0xf6>
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	6825      	ldr	r5, [r4, #0]
 8004b62:	1d18      	adds	r0, r3, #4
 8004b64:	6961      	ldr	r1, [r4, #20]
 8004b66:	6010      	str	r0, [r2, #0]
 8004b68:	0628      	lsls	r0, r5, #24
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	d501      	bpl.n	8004b72 <_printf_i+0x196>
 8004b6e:	6019      	str	r1, [r3, #0]
 8004b70:	e002      	b.n	8004b78 <_printf_i+0x19c>
 8004b72:	066a      	lsls	r2, r5, #25
 8004b74:	d5fb      	bpl.n	8004b6e <_printf_i+0x192>
 8004b76:	8019      	strh	r1, [r3, #0]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4665      	mov	r5, ip
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	e7b9      	b.n	8004af4 <_printf_i+0x118>
 8004b80:	6813      	ldr	r3, [r2, #0]
 8004b82:	1d19      	adds	r1, r3, #4
 8004b84:	6011      	str	r1, [r2, #0]
 8004b86:	681d      	ldr	r5, [r3, #0]
 8004b88:	6862      	ldr	r2, [r4, #4]
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 feb1 	bl	80058f4 <memchr>
 8004b92:	b108      	cbz	r0, 8004b98 <_printf_i+0x1bc>
 8004b94:	1b40      	subs	r0, r0, r5
 8004b96:	6060      	str	r0, [r4, #4]
 8004b98:	6863      	ldr	r3, [r4, #4]
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba2:	e7a7      	b.n	8004af4 <_printf_i+0x118>
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	462a      	mov	r2, r5
 8004ba8:	4639      	mov	r1, r7
 8004baa:	4630      	mov	r0, r6
 8004bac:	47c0      	blx	r8
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d0aa      	beq.n	8004b08 <_printf_i+0x12c>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	079b      	lsls	r3, r3, #30
 8004bb6:	d413      	bmi.n	8004be0 <_printf_i+0x204>
 8004bb8:	68e0      	ldr	r0, [r4, #12]
 8004bba:	9b03      	ldr	r3, [sp, #12]
 8004bbc:	4298      	cmp	r0, r3
 8004bbe:	bfb8      	it	lt
 8004bc0:	4618      	movlt	r0, r3
 8004bc2:	e7a3      	b.n	8004b0c <_printf_i+0x130>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	464a      	mov	r2, r9
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	47c0      	blx	r8
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d09a      	beq.n	8004b08 <_printf_i+0x12c>
 8004bd2:	3501      	adds	r5, #1
 8004bd4:	68e3      	ldr	r3, [r4, #12]
 8004bd6:	9a03      	ldr	r2, [sp, #12]
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	42ab      	cmp	r3, r5
 8004bdc:	dcf2      	bgt.n	8004bc4 <_printf_i+0x1e8>
 8004bde:	e7eb      	b.n	8004bb8 <_printf_i+0x1dc>
 8004be0:	2500      	movs	r5, #0
 8004be2:	f104 0919 	add.w	r9, r4, #25
 8004be6:	e7f5      	b.n	8004bd4 <_printf_i+0x1f8>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ac      	bne.n	8004b46 <_printf_i+0x16a>
 8004bec:	7803      	ldrb	r3, [r0, #0]
 8004bee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bf6:	e76c      	b.n	8004ad2 <_printf_i+0xf6>
 8004bf8:	0800711a 	.word	0x0800711a
 8004bfc:	0800712b 	.word	0x0800712b

08004c00 <siprintf>:
 8004c00:	b40e      	push	{r1, r2, r3}
 8004c02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c06:	b500      	push	{lr}
 8004c08:	b09c      	sub	sp, #112	; 0x70
 8004c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c0c:	9002      	str	r0, [sp, #8]
 8004c0e:	9006      	str	r0, [sp, #24]
 8004c10:	9107      	str	r1, [sp, #28]
 8004c12:	9104      	str	r1, [sp, #16]
 8004c14:	4808      	ldr	r0, [pc, #32]	; (8004c38 <siprintf+0x38>)
 8004c16:	4909      	ldr	r1, [pc, #36]	; (8004c3c <siprintf+0x3c>)
 8004c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c1c:	9105      	str	r1, [sp, #20]
 8004c1e:	6800      	ldr	r0, [r0, #0]
 8004c20:	a902      	add	r1, sp, #8
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	f001 fa5e 	bl	80060e4 <_svfiprintf_r>
 8004c28:	2200      	movs	r2, #0
 8004c2a:	9b02      	ldr	r3, [sp, #8]
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	b01c      	add	sp, #112	; 0x70
 8004c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c34:	b003      	add	sp, #12
 8004c36:	4770      	bx	lr
 8004c38:	2000000c 	.word	0x2000000c
 8004c3c:	ffff0208 	.word	0xffff0208

08004c40 <quorem>:
 8004c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	6903      	ldr	r3, [r0, #16]
 8004c46:	690c      	ldr	r4, [r1, #16]
 8004c48:	4680      	mov	r8, r0
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	f2c0 8084 	blt.w	8004d58 <quorem+0x118>
 8004c50:	3c01      	subs	r4, #1
 8004c52:	f101 0714 	add.w	r7, r1, #20
 8004c56:	f100 0614 	add.w	r6, r0, #20
 8004c5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c62:	3501      	adds	r5, #1
 8004c64:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c68:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004c6c:	eb06 030c 	add.w	r3, r6, ip
 8004c70:	eb07 090c 	add.w	r9, r7, ip
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	b39d      	cbz	r5, 8004ce0 <quorem+0xa0>
 8004c78:	f04f 0a00 	mov.w	sl, #0
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	46b6      	mov	lr, r6
 8004c80:	46d3      	mov	fp, sl
 8004c82:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c86:	b293      	uxth	r3, r2
 8004c88:	fb05 a303 	mla	r3, r5, r3, sl
 8004c8c:	0c12      	lsrs	r2, r2, #16
 8004c8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c92:	fb05 a202 	mla	r2, r5, r2, sl
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	ebab 0303 	sub.w	r3, fp, r3
 8004c9c:	f8de b000 	ldr.w	fp, [lr]
 8004ca0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004ca4:	fa1f fb8b 	uxth.w	fp, fp
 8004ca8:	445b      	add	r3, fp
 8004caa:	fa1f fb82 	uxth.w	fp, r2
 8004cae:	f8de 2000 	ldr.w	r2, [lr]
 8004cb2:	4581      	cmp	r9, r0
 8004cb4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cc2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004cc6:	f84e 3b04 	str.w	r3, [lr], #4
 8004cca:	d2da      	bcs.n	8004c82 <quorem+0x42>
 8004ccc:	f856 300c 	ldr.w	r3, [r6, ip]
 8004cd0:	b933      	cbnz	r3, 8004ce0 <quorem+0xa0>
 8004cd2:	9b01      	ldr	r3, [sp, #4]
 8004cd4:	3b04      	subs	r3, #4
 8004cd6:	429e      	cmp	r6, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	d331      	bcc.n	8004d40 <quorem+0x100>
 8004cdc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	f001 f829 	bl	8005d38 <__mcmp>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	db26      	blt.n	8004d38 <quorem+0xf8>
 8004cea:	4630      	mov	r0, r6
 8004cec:	f04f 0c00 	mov.w	ip, #0
 8004cf0:	3501      	adds	r5, #1
 8004cf2:	f857 1b04 	ldr.w	r1, [r7], #4
 8004cf6:	f8d0 e000 	ldr.w	lr, [r0]
 8004cfa:	b28b      	uxth	r3, r1
 8004cfc:	ebac 0303 	sub.w	r3, ip, r3
 8004d00:	fa1f f28e 	uxth.w	r2, lr
 8004d04:	4413      	add	r3, r2
 8004d06:	0c0a      	lsrs	r2, r1, #16
 8004d08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d16:	45b9      	cmp	r9, r7
 8004d18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d1c:	f840 3b04 	str.w	r3, [r0], #4
 8004d20:	d2e7      	bcs.n	8004cf2 <quorem+0xb2>
 8004d22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004d26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004d2a:	b92a      	cbnz	r2, 8004d38 <quorem+0xf8>
 8004d2c:	3b04      	subs	r3, #4
 8004d2e:	429e      	cmp	r6, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	d30b      	bcc.n	8004d4c <quorem+0x10c>
 8004d34:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d38:	4628      	mov	r0, r5
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	3b04      	subs	r3, #4
 8004d44:	2a00      	cmp	r2, #0
 8004d46:	d1c9      	bne.n	8004cdc <quorem+0x9c>
 8004d48:	3c01      	subs	r4, #1
 8004d4a:	e7c4      	b.n	8004cd6 <quorem+0x96>
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	d1ef      	bne.n	8004d34 <quorem+0xf4>
 8004d54:	3c01      	subs	r4, #1
 8004d56:	e7ea      	b.n	8004d2e <quorem+0xee>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e7ee      	b.n	8004d3a <quorem+0xfa>
 8004d5c:	0000      	movs	r0, r0
	...

08004d60 <_dtoa_r>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	4616      	mov	r6, r2
 8004d66:	461f      	mov	r7, r3
 8004d68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d6a:	b095      	sub	sp, #84	; 0x54
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004d72:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004d76:	b93d      	cbnz	r5, 8004d88 <_dtoa_r+0x28>
 8004d78:	2010      	movs	r0, #16
 8004d7a:	f000 fdb3 	bl	80058e4 <malloc>
 8004d7e:	6260      	str	r0, [r4, #36]	; 0x24
 8004d80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d84:	6005      	str	r5, [r0, #0]
 8004d86:	60c5      	str	r5, [r0, #12]
 8004d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	b151      	cbz	r1, 8004da4 <_dtoa_r+0x44>
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	2301      	movs	r3, #1
 8004d92:	4093      	lsls	r3, r2
 8004d94:	604a      	str	r2, [r1, #4]
 8004d96:	608b      	str	r3, [r1, #8]
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 fded 	bl	8005978 <_Bfree>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	1e3b      	subs	r3, r7, #0
 8004da6:	bfaf      	iteee	ge
 8004da8:	2300      	movge	r3, #0
 8004daa:	2201      	movlt	r2, #1
 8004dac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004db0:	9303      	strlt	r3, [sp, #12]
 8004db2:	bfac      	ite	ge
 8004db4:	f8c8 3000 	strge.w	r3, [r8]
 8004db8:	f8c8 2000 	strlt.w	r2, [r8]
 8004dbc:	4bae      	ldr	r3, [pc, #696]	; (8005078 <_dtoa_r+0x318>)
 8004dbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004dc2:	ea33 0308 	bics.w	r3, r3, r8
 8004dc6:	d11b      	bne.n	8004e00 <_dtoa_r+0xa0>
 8004dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	b923      	cbnz	r3, 8004dde <_dtoa_r+0x7e>
 8004dd4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f000 8545 	beq.w	8005868 <_dtoa_r+0xb08>
 8004dde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004de0:	b953      	cbnz	r3, 8004df8 <_dtoa_r+0x98>
 8004de2:	4ba6      	ldr	r3, [pc, #664]	; (800507c <_dtoa_r+0x31c>)
 8004de4:	e021      	b.n	8004e2a <_dtoa_r+0xca>
 8004de6:	4ba6      	ldr	r3, [pc, #664]	; (8005080 <_dtoa_r+0x320>)
 8004de8:	9306      	str	r3, [sp, #24]
 8004dea:	3308      	adds	r3, #8
 8004dec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	9806      	ldr	r0, [sp, #24]
 8004df2:	b015      	add	sp, #84	; 0x54
 8004df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df8:	4ba0      	ldr	r3, [pc, #640]	; (800507c <_dtoa_r+0x31c>)
 8004dfa:	9306      	str	r3, [sp, #24]
 8004dfc:	3303      	adds	r3, #3
 8004dfe:	e7f5      	b.n	8004dec <_dtoa_r+0x8c>
 8004e00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2300      	movs	r3, #0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8004e10:	4682      	mov	sl, r0
 8004e12:	b160      	cbz	r0, 8004e2e <_dtoa_r+0xce>
 8004e14:	2301      	movs	r3, #1
 8004e16:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8520 	beq.w	8005862 <_dtoa_r+0xb02>
 8004e22:	4b98      	ldr	r3, [pc, #608]	; (8005084 <_dtoa_r+0x324>)
 8004e24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	9306      	str	r3, [sp, #24]
 8004e2c:	e7e0      	b.n	8004df0 <_dtoa_r+0x90>
 8004e2e:	ab12      	add	r3, sp, #72	; 0x48
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	ab13      	add	r3, sp, #76	; 0x4c
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	4632      	mov	r2, r6
 8004e38:	463b      	mov	r3, r7
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 fff4 	bl	8005e28 <__d2b>
 8004e40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004e44:	4683      	mov	fp, r0
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	d07d      	beq.n	8004f46 <_dtoa_r+0x1e6>
 8004e4a:	46b0      	mov	r8, r6
 8004e4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e50:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004e54:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004e58:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e5c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004e60:	2200      	movs	r2, #0
 8004e62:	4b89      	ldr	r3, [pc, #548]	; (8005088 <_dtoa_r+0x328>)
 8004e64:	4640      	mov	r0, r8
 8004e66:	4649      	mov	r1, r9
 8004e68:	f7fb f97e 	bl	8000168 <__aeabi_dsub>
 8004e6c:	a37c      	add	r3, pc, #496	; (adr r3, 8005060 <_dtoa_r+0x300>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb fb31 	bl	80004d8 <__aeabi_dmul>
 8004e76:	a37c      	add	r3, pc, #496	; (adr r3, 8005068 <_dtoa_r+0x308>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f7fb f976 	bl	800016c <__adddf3>
 8004e80:	4606      	mov	r6, r0
 8004e82:	4628      	mov	r0, r5
 8004e84:	460f      	mov	r7, r1
 8004e86:	f7fb fabd 	bl	8000404 <__aeabi_i2d>
 8004e8a:	a379      	add	r3, pc, #484	; (adr r3, 8005070 <_dtoa_r+0x310>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb fb22 	bl	80004d8 <__aeabi_dmul>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	f7fb f966 	bl	800016c <__adddf3>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	f7fb fdc8 	bl	8000a38 <__aeabi_d2iz>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4682      	mov	sl, r0
 8004eac:	2300      	movs	r3, #0
 8004eae:	4630      	mov	r0, r6
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7fb fd83 	bl	80009bc <__aeabi_dcmplt>
 8004eb6:	b148      	cbz	r0, 8004ecc <_dtoa_r+0x16c>
 8004eb8:	4650      	mov	r0, sl
 8004eba:	f7fb faa3 	bl	8000404 <__aeabi_i2d>
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	f7fb fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8004ec6:	b908      	cbnz	r0, 8004ecc <_dtoa_r+0x16c>
 8004ec8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ecc:	f1ba 0f16 	cmp.w	sl, #22
 8004ed0:	d85a      	bhi.n	8004f88 <_dtoa_r+0x228>
 8004ed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ed6:	496d      	ldr	r1, [pc, #436]	; (800508c <_dtoa_r+0x32c>)
 8004ed8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee0:	f7fb fd8a 	bl	80009f8 <__aeabi_dcmpgt>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d051      	beq.n	8004f8c <_dtoa_r+0x22c>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eee:	930d      	str	r3, [sp, #52]	; 0x34
 8004ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ef2:	1b5d      	subs	r5, r3, r5
 8004ef4:	1e6b      	subs	r3, r5, #1
 8004ef6:	9307      	str	r3, [sp, #28]
 8004ef8:	bf43      	ittte	mi
 8004efa:	2300      	movmi	r3, #0
 8004efc:	f1c5 0901 	rsbmi	r9, r5, #1
 8004f00:	9307      	strmi	r3, [sp, #28]
 8004f02:	f04f 0900 	movpl.w	r9, #0
 8004f06:	f1ba 0f00 	cmp.w	sl, #0
 8004f0a:	db41      	blt.n	8004f90 <_dtoa_r+0x230>
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004f12:	4453      	add	r3, sl
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	2300      	movs	r3, #0
 8004f18:	9308      	str	r3, [sp, #32]
 8004f1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	f200 808f 	bhi.w	8005040 <_dtoa_r+0x2e0>
 8004f22:	2b05      	cmp	r3, #5
 8004f24:	bfc4      	itt	gt
 8004f26:	3b04      	subgt	r3, #4
 8004f28:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004f2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f2c:	bfc8      	it	gt
 8004f2e:	2500      	movgt	r5, #0
 8004f30:	f1a3 0302 	sub.w	r3, r3, #2
 8004f34:	bfd8      	it	le
 8004f36:	2501      	movle	r5, #1
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	f200 808d 	bhi.w	8005058 <_dtoa_r+0x2f8>
 8004f3e:	e8df f003 	tbb	[pc, r3]
 8004f42:	7d7b      	.short	0x7d7b
 8004f44:	6f2f      	.short	0x6f2f
 8004f46:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004f4a:	441d      	add	r5, r3
 8004f4c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004f50:	2820      	cmp	r0, #32
 8004f52:	dd13      	ble.n	8004f7c <_dtoa_r+0x21c>
 8004f54:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004f58:	9b02      	ldr	r3, [sp, #8]
 8004f5a:	fa08 f800 	lsl.w	r8, r8, r0
 8004f5e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004f62:	fa23 f000 	lsr.w	r0, r3, r0
 8004f66:	ea48 0000 	orr.w	r0, r8, r0
 8004f6a:	f7fb fa3b 	bl	80003e4 <__aeabi_ui2d>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4680      	mov	r8, r0
 8004f72:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004f76:	3d01      	subs	r5, #1
 8004f78:	9310      	str	r3, [sp, #64]	; 0x40
 8004f7a:	e771      	b.n	8004e60 <_dtoa_r+0x100>
 8004f7c:	9b02      	ldr	r3, [sp, #8]
 8004f7e:	f1c0 0020 	rsb	r0, r0, #32
 8004f82:	fa03 f000 	lsl.w	r0, r3, r0
 8004f86:	e7f0      	b.n	8004f6a <_dtoa_r+0x20a>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e7b0      	b.n	8004eee <_dtoa_r+0x18e>
 8004f8c:	900d      	str	r0, [sp, #52]	; 0x34
 8004f8e:	e7af      	b.n	8004ef0 <_dtoa_r+0x190>
 8004f90:	f1ca 0300 	rsb	r3, sl, #0
 8004f94:	9308      	str	r3, [sp, #32]
 8004f96:	2300      	movs	r3, #0
 8004f98:	eba9 090a 	sub.w	r9, r9, sl
 8004f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8004f9e:	e7bc      	b.n	8004f1a <_dtoa_r+0x1ba>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	dd74      	ble.n	8005094 <_dtoa_r+0x334>
 8004faa:	4698      	mov	r8, r3
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fb2:	6072      	str	r2, [r6, #4]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	f102 0014 	add.w	r0, r2, #20
 8004fba:	4298      	cmp	r0, r3
 8004fbc:	6871      	ldr	r1, [r6, #4]
 8004fbe:	d96e      	bls.n	800509e <_dtoa_r+0x33e>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 fca5 	bl	8005910 <_Balloc>
 8004fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fc8:	6030      	str	r0, [r6, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b8 0f0e 	cmp.w	r8, #14
 8004fd0:	9306      	str	r3, [sp, #24]
 8004fd2:	f200 80ed 	bhi.w	80051b0 <_dtoa_r+0x450>
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	f000 80ea 	beq.w	80051b0 <_dtoa_r+0x450>
 8004fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe0:	f1ba 0f00 	cmp.w	sl, #0
 8004fe4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004fe8:	dd77      	ble.n	80050da <_dtoa_r+0x37a>
 8004fea:	4a28      	ldr	r2, [pc, #160]	; (800508c <_dtoa_r+0x32c>)
 8004fec:	f00a 030f 	and.w	r3, sl, #15
 8004ff0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ff4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ff8:	06f0      	lsls	r0, r6, #27
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005002:	d568      	bpl.n	80050d6 <_dtoa_r+0x376>
 8005004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <_dtoa_r+0x330>)
 800500a:	2503      	movs	r5, #3
 800500c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005010:	f7fb fb8c 	bl	800072c <__aeabi_ddiv>
 8005014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005018:	f006 060f 	and.w	r6, r6, #15
 800501c:	4f1c      	ldr	r7, [pc, #112]	; (8005090 <_dtoa_r+0x330>)
 800501e:	e04f      	b.n	80050c0 <_dtoa_r+0x360>
 8005020:	2301      	movs	r3, #1
 8005022:	9309      	str	r3, [sp, #36]	; 0x24
 8005024:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005026:	4453      	add	r3, sl
 8005028:	f103 0801 	add.w	r8, r3, #1
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	4643      	mov	r3, r8
 8005030:	2b01      	cmp	r3, #1
 8005032:	bfb8      	it	lt
 8005034:	2301      	movlt	r3, #1
 8005036:	e7ba      	b.n	8004fae <_dtoa_r+0x24e>
 8005038:	2300      	movs	r3, #0
 800503a:	e7b2      	b.n	8004fa2 <_dtoa_r+0x242>
 800503c:	2300      	movs	r3, #0
 800503e:	e7f0      	b.n	8005022 <_dtoa_r+0x2c2>
 8005040:	2501      	movs	r5, #1
 8005042:	2300      	movs	r3, #0
 8005044:	9509      	str	r5, [sp, #36]	; 0x24
 8005046:	931e      	str	r3, [sp, #120]	; 0x78
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	2200      	movs	r2, #0
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	4698      	mov	r8, r3
 8005052:	2312      	movs	r3, #18
 8005054:	921f      	str	r2, [sp, #124]	; 0x7c
 8005056:	e7aa      	b.n	8004fae <_dtoa_r+0x24e>
 8005058:	2301      	movs	r3, #1
 800505a:	9309      	str	r3, [sp, #36]	; 0x24
 800505c:	e7f4      	b.n	8005048 <_dtoa_r+0x2e8>
 800505e:	bf00      	nop
 8005060:	636f4361 	.word	0x636f4361
 8005064:	3fd287a7 	.word	0x3fd287a7
 8005068:	8b60c8b3 	.word	0x8b60c8b3
 800506c:	3fc68a28 	.word	0x3fc68a28
 8005070:	509f79fb 	.word	0x509f79fb
 8005074:	3fd34413 	.word	0x3fd34413
 8005078:	7ff00000 	.word	0x7ff00000
 800507c:	08007145 	.word	0x08007145
 8005080:	0800713c 	.word	0x0800713c
 8005084:	08007119 	.word	0x08007119
 8005088:	3ff80000 	.word	0x3ff80000
 800508c:	08007178 	.word	0x08007178
 8005090:	08007150 	.word	0x08007150
 8005094:	2301      	movs	r3, #1
 8005096:	9304      	str	r3, [sp, #16]
 8005098:	4698      	mov	r8, r3
 800509a:	461a      	mov	r2, r3
 800509c:	e7da      	b.n	8005054 <_dtoa_r+0x2f4>
 800509e:	3101      	adds	r1, #1
 80050a0:	6071      	str	r1, [r6, #4]
 80050a2:	0052      	lsls	r2, r2, #1
 80050a4:	e787      	b.n	8004fb6 <_dtoa_r+0x256>
 80050a6:	07f1      	lsls	r1, r6, #31
 80050a8:	d508      	bpl.n	80050bc <_dtoa_r+0x35c>
 80050aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b2:	f7fb fa11 	bl	80004d8 <__aeabi_dmul>
 80050b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050ba:	3501      	adds	r5, #1
 80050bc:	1076      	asrs	r6, r6, #1
 80050be:	3708      	adds	r7, #8
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	d1f0      	bne.n	80050a6 <_dtoa_r+0x346>
 80050c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050cc:	f7fb fb2e 	bl	800072c <__aeabi_ddiv>
 80050d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050d4:	e01b      	b.n	800510e <_dtoa_r+0x3ae>
 80050d6:	2502      	movs	r5, #2
 80050d8:	e7a0      	b.n	800501c <_dtoa_r+0x2bc>
 80050da:	f000 80a4 	beq.w	8005226 <_dtoa_r+0x4c6>
 80050de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80050e2:	f1ca 0600 	rsb	r6, sl, #0
 80050e6:	4ba0      	ldr	r3, [pc, #640]	; (8005368 <_dtoa_r+0x608>)
 80050e8:	f006 020f 	and.w	r2, r6, #15
 80050ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f7fb f9f0 	bl	80004d8 <__aeabi_dmul>
 80050f8:	2502      	movs	r5, #2
 80050fa:	2300      	movs	r3, #0
 80050fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005100:	4f9a      	ldr	r7, [pc, #616]	; (800536c <_dtoa_r+0x60c>)
 8005102:	1136      	asrs	r6, r6, #4
 8005104:	2e00      	cmp	r6, #0
 8005106:	f040 8083 	bne.w	8005210 <_dtoa_r+0x4b0>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e0      	bne.n	80050d0 <_dtoa_r+0x370>
 800510e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 808a 	beq.w	800522a <_dtoa_r+0x4ca>
 8005116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800511a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800511e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005122:	2200      	movs	r2, #0
 8005124:	4b92      	ldr	r3, [pc, #584]	; (8005370 <_dtoa_r+0x610>)
 8005126:	f7fb fc49 	bl	80009bc <__aeabi_dcmplt>
 800512a:	2800      	cmp	r0, #0
 800512c:	d07d      	beq.n	800522a <_dtoa_r+0x4ca>
 800512e:	f1b8 0f00 	cmp.w	r8, #0
 8005132:	d07a      	beq.n	800522a <_dtoa_r+0x4ca>
 8005134:	9b04      	ldr	r3, [sp, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	dd36      	ble.n	80051a8 <_dtoa_r+0x448>
 800513a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800513e:	2200      	movs	r2, #0
 8005140:	4b8c      	ldr	r3, [pc, #560]	; (8005374 <_dtoa_r+0x614>)
 8005142:	f7fb f9c9 	bl	80004d8 <__aeabi_dmul>
 8005146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800514a:	9e04      	ldr	r6, [sp, #16]
 800514c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005150:	3501      	adds	r5, #1
 8005152:	4628      	mov	r0, r5
 8005154:	f7fb f956 	bl	8000404 <__aeabi_i2d>
 8005158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800515c:	f7fb f9bc 	bl	80004d8 <__aeabi_dmul>
 8005160:	2200      	movs	r2, #0
 8005162:	4b85      	ldr	r3, [pc, #532]	; (8005378 <_dtoa_r+0x618>)
 8005164:	f7fb f802 	bl	800016c <__adddf3>
 8005168:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800516c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005170:	950b      	str	r5, [sp, #44]	; 0x2c
 8005172:	2e00      	cmp	r6, #0
 8005174:	d15c      	bne.n	8005230 <_dtoa_r+0x4d0>
 8005176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800517a:	2200      	movs	r2, #0
 800517c:	4b7f      	ldr	r3, [pc, #508]	; (800537c <_dtoa_r+0x61c>)
 800517e:	f7fa fff3 	bl	8000168 <__aeabi_dsub>
 8005182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005184:	462b      	mov	r3, r5
 8005186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800518a:	f7fb fc35 	bl	80009f8 <__aeabi_dcmpgt>
 800518e:	2800      	cmp	r0, #0
 8005190:	f040 8281 	bne.w	8005696 <_dtoa_r+0x936>
 8005194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800519a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800519e:	f7fb fc0d 	bl	80009bc <__aeabi_dcmplt>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f040 8275 	bne.w	8005692 <_dtoa_r+0x932>
 80051a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80051ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f2c0 814b 	blt.w	800544e <_dtoa_r+0x6ee>
 80051b8:	f1ba 0f0e 	cmp.w	sl, #14
 80051bc:	f300 8147 	bgt.w	800544e <_dtoa_r+0x6ee>
 80051c0:	4b69      	ldr	r3, [pc, #420]	; (8005368 <_dtoa_r+0x608>)
 80051c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f280 80d7 	bge.w	8005384 <_dtoa_r+0x624>
 80051d6:	f1b8 0f00 	cmp.w	r8, #0
 80051da:	f300 80d3 	bgt.w	8005384 <_dtoa_r+0x624>
 80051de:	f040 8257 	bne.w	8005690 <_dtoa_r+0x930>
 80051e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051e6:	2200      	movs	r2, #0
 80051e8:	4b64      	ldr	r3, [pc, #400]	; (800537c <_dtoa_r+0x61c>)
 80051ea:	f7fb f975 	bl	80004d8 <__aeabi_dmul>
 80051ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051f2:	f7fb fbf7 	bl	80009e4 <__aeabi_dcmpge>
 80051f6:	4646      	mov	r6, r8
 80051f8:	4647      	mov	r7, r8
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f040 822d 	bne.w	800565a <_dtoa_r+0x8fa>
 8005200:	9b06      	ldr	r3, [sp, #24]
 8005202:	9a06      	ldr	r2, [sp, #24]
 8005204:	1c5d      	adds	r5, r3, #1
 8005206:	2331      	movs	r3, #49	; 0x31
 8005208:	f10a 0a01 	add.w	sl, sl, #1
 800520c:	7013      	strb	r3, [r2, #0]
 800520e:	e228      	b.n	8005662 <_dtoa_r+0x902>
 8005210:	07f2      	lsls	r2, r6, #31
 8005212:	d505      	bpl.n	8005220 <_dtoa_r+0x4c0>
 8005214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005218:	f7fb f95e 	bl	80004d8 <__aeabi_dmul>
 800521c:	2301      	movs	r3, #1
 800521e:	3501      	adds	r5, #1
 8005220:	1076      	asrs	r6, r6, #1
 8005222:	3708      	adds	r7, #8
 8005224:	e76e      	b.n	8005104 <_dtoa_r+0x3a4>
 8005226:	2502      	movs	r5, #2
 8005228:	e771      	b.n	800510e <_dtoa_r+0x3ae>
 800522a:	4657      	mov	r7, sl
 800522c:	4646      	mov	r6, r8
 800522e:	e790      	b.n	8005152 <_dtoa_r+0x3f2>
 8005230:	4b4d      	ldr	r3, [pc, #308]	; (8005368 <_dtoa_r+0x608>)
 8005232:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005236:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800523a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523c:	2b00      	cmp	r3, #0
 800523e:	d048      	beq.n	80052d2 <_dtoa_r+0x572>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	2000      	movs	r0, #0
 8005246:	494e      	ldr	r1, [pc, #312]	; (8005380 <_dtoa_r+0x620>)
 8005248:	f7fb fa70 	bl	800072c <__aeabi_ddiv>
 800524c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005250:	f7fa ff8a 	bl	8000168 <__aeabi_dsub>
 8005254:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005258:	9d06      	ldr	r5, [sp, #24]
 800525a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800525e:	f7fb fbeb 	bl	8000a38 <__aeabi_d2iz>
 8005262:	9011      	str	r0, [sp, #68]	; 0x44
 8005264:	f7fb f8ce 	bl	8000404 <__aeabi_i2d>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005270:	f7fa ff7a 	bl	8000168 <__aeabi_dsub>
 8005274:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800527a:	3330      	adds	r3, #48	; 0x30
 800527c:	f805 3b01 	strb.w	r3, [r5], #1
 8005280:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005284:	f7fb fb9a 	bl	80009bc <__aeabi_dcmplt>
 8005288:	2800      	cmp	r0, #0
 800528a:	d163      	bne.n	8005354 <_dtoa_r+0x5f4>
 800528c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005290:	2000      	movs	r0, #0
 8005292:	4937      	ldr	r1, [pc, #220]	; (8005370 <_dtoa_r+0x610>)
 8005294:	f7fa ff68 	bl	8000168 <__aeabi_dsub>
 8005298:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800529c:	f7fb fb8e 	bl	80009bc <__aeabi_dcmplt>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f040 80b5 	bne.w	8005410 <_dtoa_r+0x6b0>
 80052a6:	9b06      	ldr	r3, [sp, #24]
 80052a8:	1aeb      	subs	r3, r5, r3
 80052aa:	429e      	cmp	r6, r3
 80052ac:	f77f af7c 	ble.w	80051a8 <_dtoa_r+0x448>
 80052b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <_dtoa_r+0x614>)
 80052b8:	f7fb f90e 	bl	80004d8 <__aeabi_dmul>
 80052bc:	2200      	movs	r2, #0
 80052be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c6:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <_dtoa_r+0x614>)
 80052c8:	f7fb f906 	bl	80004d8 <__aeabi_dmul>
 80052cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d0:	e7c3      	b.n	800525a <_dtoa_r+0x4fa>
 80052d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052d6:	f7fb f8ff 	bl	80004d8 <__aeabi_dmul>
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052e0:	199d      	adds	r5, r3, r6
 80052e2:	461e      	mov	r6, r3
 80052e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e8:	f7fb fba6 	bl	8000a38 <__aeabi_d2iz>
 80052ec:	9011      	str	r0, [sp, #68]	; 0x44
 80052ee:	f7fb f889 	bl	8000404 <__aeabi_i2d>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052fa:	f7fa ff35 	bl	8000168 <__aeabi_dsub>
 80052fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005304:	3330      	adds	r3, #48	; 0x30
 8005306:	f806 3b01 	strb.w	r3, [r6], #1
 800530a:	42ae      	cmp	r6, r5
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	d124      	bne.n	800535c <_dtoa_r+0x5fc>
 8005312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005316:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <_dtoa_r+0x620>)
 8005318:	f7fa ff28 	bl	800016c <__adddf3>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005324:	f7fb fb68 	bl	80009f8 <__aeabi_dcmpgt>
 8005328:	2800      	cmp	r0, #0
 800532a:	d171      	bne.n	8005410 <_dtoa_r+0x6b0>
 800532c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005330:	2000      	movs	r0, #0
 8005332:	4913      	ldr	r1, [pc, #76]	; (8005380 <_dtoa_r+0x620>)
 8005334:	f7fa ff18 	bl	8000168 <__aeabi_dsub>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005340:	f7fb fb3c 	bl	80009bc <__aeabi_dcmplt>
 8005344:	2800      	cmp	r0, #0
 8005346:	f43f af2f 	beq.w	80051a8 <_dtoa_r+0x448>
 800534a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800534e:	1e6a      	subs	r2, r5, #1
 8005350:	2b30      	cmp	r3, #48	; 0x30
 8005352:	d001      	beq.n	8005358 <_dtoa_r+0x5f8>
 8005354:	46ba      	mov	sl, r7
 8005356:	e04a      	b.n	80053ee <_dtoa_r+0x68e>
 8005358:	4615      	mov	r5, r2
 800535a:	e7f6      	b.n	800534a <_dtoa_r+0x5ea>
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <_dtoa_r+0x614>)
 800535e:	f7fb f8bb 	bl	80004d8 <__aeabi_dmul>
 8005362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005366:	e7bd      	b.n	80052e4 <_dtoa_r+0x584>
 8005368:	08007178 	.word	0x08007178
 800536c:	08007150 	.word	0x08007150
 8005370:	3ff00000 	.word	0x3ff00000
 8005374:	40240000 	.word	0x40240000
 8005378:	401c0000 	.word	0x401c0000
 800537c:	40140000 	.word	0x40140000
 8005380:	3fe00000 	.word	0x3fe00000
 8005384:	9d06      	ldr	r5, [sp, #24]
 8005386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800538a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800538e:	4630      	mov	r0, r6
 8005390:	4639      	mov	r1, r7
 8005392:	f7fb f9cb 	bl	800072c <__aeabi_ddiv>
 8005396:	f7fb fb4f 	bl	8000a38 <__aeabi_d2iz>
 800539a:	4681      	mov	r9, r0
 800539c:	f7fb f832 	bl	8000404 <__aeabi_i2d>
 80053a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053a4:	f7fb f898 	bl	80004d8 <__aeabi_dmul>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4630      	mov	r0, r6
 80053ae:	4639      	mov	r1, r7
 80053b0:	f7fa feda 	bl	8000168 <__aeabi_dsub>
 80053b4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80053b8:	f805 6b01 	strb.w	r6, [r5], #1
 80053bc:	9e06      	ldr	r6, [sp, #24]
 80053be:	4602      	mov	r2, r0
 80053c0:	1bae      	subs	r6, r5, r6
 80053c2:	45b0      	cmp	r8, r6
 80053c4:	460b      	mov	r3, r1
 80053c6:	d135      	bne.n	8005434 <_dtoa_r+0x6d4>
 80053c8:	f7fa fed0 	bl	800016c <__adddf3>
 80053cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d0:	4606      	mov	r6, r0
 80053d2:	460f      	mov	r7, r1
 80053d4:	f7fb fb10 	bl	80009f8 <__aeabi_dcmpgt>
 80053d8:	b9c8      	cbnz	r0, 800540e <_dtoa_r+0x6ae>
 80053da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fb fae1 	bl	80009a8 <__aeabi_dcmpeq>
 80053e6:	b110      	cbz	r0, 80053ee <_dtoa_r+0x68e>
 80053e8:	f019 0f01 	tst.w	r9, #1
 80053ec:	d10f      	bne.n	800540e <_dtoa_r+0x6ae>
 80053ee:	4659      	mov	r1, fp
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fac1 	bl	8005978 <_Bfree>
 80053f6:	2300      	movs	r3, #0
 80053f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053fa:	702b      	strb	r3, [r5, #0]
 80053fc:	f10a 0301 	add.w	r3, sl, #1
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005404:	2b00      	cmp	r3, #0
 8005406:	f43f acf3 	beq.w	8004df0 <_dtoa_r+0x90>
 800540a:	601d      	str	r5, [r3, #0]
 800540c:	e4f0      	b.n	8004df0 <_dtoa_r+0x90>
 800540e:	4657      	mov	r7, sl
 8005410:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005414:	1e6b      	subs	r3, r5, #1
 8005416:	2a39      	cmp	r2, #57	; 0x39
 8005418:	d106      	bne.n	8005428 <_dtoa_r+0x6c8>
 800541a:	9a06      	ldr	r2, [sp, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d107      	bne.n	8005430 <_dtoa_r+0x6d0>
 8005420:	2330      	movs	r3, #48	; 0x30
 8005422:	7013      	strb	r3, [r2, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	3701      	adds	r7, #1
 8005428:	781a      	ldrb	r2, [r3, #0]
 800542a:	3201      	adds	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e791      	b.n	8005354 <_dtoa_r+0x5f4>
 8005430:	461d      	mov	r5, r3
 8005432:	e7ed      	b.n	8005410 <_dtoa_r+0x6b0>
 8005434:	2200      	movs	r2, #0
 8005436:	4b99      	ldr	r3, [pc, #612]	; (800569c <_dtoa_r+0x93c>)
 8005438:	f7fb f84e 	bl	80004d8 <__aeabi_dmul>
 800543c:	2200      	movs	r2, #0
 800543e:	2300      	movs	r3, #0
 8005440:	4606      	mov	r6, r0
 8005442:	460f      	mov	r7, r1
 8005444:	f7fb fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8005448:	2800      	cmp	r0, #0
 800544a:	d09e      	beq.n	800538a <_dtoa_r+0x62a>
 800544c:	e7cf      	b.n	80053ee <_dtoa_r+0x68e>
 800544e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005450:	2a00      	cmp	r2, #0
 8005452:	f000 8088 	beq.w	8005566 <_dtoa_r+0x806>
 8005456:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005458:	2a01      	cmp	r2, #1
 800545a:	dc6d      	bgt.n	8005538 <_dtoa_r+0x7d8>
 800545c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800545e:	2a00      	cmp	r2, #0
 8005460:	d066      	beq.n	8005530 <_dtoa_r+0x7d0>
 8005462:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005466:	464d      	mov	r5, r9
 8005468:	9e08      	ldr	r6, [sp, #32]
 800546a:	9a07      	ldr	r2, [sp, #28]
 800546c:	2101      	movs	r1, #1
 800546e:	441a      	add	r2, r3
 8005470:	4620      	mov	r0, r4
 8005472:	4499      	add	r9, r3
 8005474:	9207      	str	r2, [sp, #28]
 8005476:	f000 fb1f 	bl	8005ab8 <__i2b>
 800547a:	4607      	mov	r7, r0
 800547c:	2d00      	cmp	r5, #0
 800547e:	dd0b      	ble.n	8005498 <_dtoa_r+0x738>
 8005480:	9b07      	ldr	r3, [sp, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	dd08      	ble.n	8005498 <_dtoa_r+0x738>
 8005486:	42ab      	cmp	r3, r5
 8005488:	bfa8      	it	ge
 800548a:	462b      	movge	r3, r5
 800548c:	9a07      	ldr	r2, [sp, #28]
 800548e:	eba9 0903 	sub.w	r9, r9, r3
 8005492:	1aed      	subs	r5, r5, r3
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	9307      	str	r3, [sp, #28]
 8005498:	9b08      	ldr	r3, [sp, #32]
 800549a:	b1eb      	cbz	r3, 80054d8 <_dtoa_r+0x778>
 800549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d065      	beq.n	800556e <_dtoa_r+0x80e>
 80054a2:	b18e      	cbz	r6, 80054c8 <_dtoa_r+0x768>
 80054a4:	4639      	mov	r1, r7
 80054a6:	4632      	mov	r2, r6
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fba3 	bl	8005bf4 <__pow5mult>
 80054ae:	465a      	mov	r2, fp
 80054b0:	4601      	mov	r1, r0
 80054b2:	4607      	mov	r7, r0
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fb08 	bl	8005aca <__multiply>
 80054ba:	4659      	mov	r1, fp
 80054bc:	900a      	str	r0, [sp, #40]	; 0x28
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 fa5a 	bl	8005978 <_Bfree>
 80054c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c6:	469b      	mov	fp, r3
 80054c8:	9b08      	ldr	r3, [sp, #32]
 80054ca:	1b9a      	subs	r2, r3, r6
 80054cc:	d004      	beq.n	80054d8 <_dtoa_r+0x778>
 80054ce:	4659      	mov	r1, fp
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fb8f 	bl	8005bf4 <__pow5mult>
 80054d6:	4683      	mov	fp, r0
 80054d8:	2101      	movs	r1, #1
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 faec 	bl	8005ab8 <__i2b>
 80054e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054e2:	4606      	mov	r6, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 81c6 	beq.w	8005876 <_dtoa_r+0xb16>
 80054ea:	461a      	mov	r2, r3
 80054ec:	4601      	mov	r1, r0
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 fb80 	bl	8005bf4 <__pow5mult>
 80054f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054f6:	4606      	mov	r6, r0
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	dc3e      	bgt.n	800557a <_dtoa_r+0x81a>
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d137      	bne.n	8005572 <_dtoa_r+0x812>
 8005502:	9b03      	ldr	r3, [sp, #12]
 8005504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005508:	2b00      	cmp	r3, #0
 800550a:	d134      	bne.n	8005576 <_dtoa_r+0x816>
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005512:	0d1b      	lsrs	r3, r3, #20
 8005514:	051b      	lsls	r3, r3, #20
 8005516:	b12b      	cbz	r3, 8005524 <_dtoa_r+0x7c4>
 8005518:	9b07      	ldr	r3, [sp, #28]
 800551a:	f109 0901 	add.w	r9, r9, #1
 800551e:	3301      	adds	r3, #1
 8005520:	9307      	str	r3, [sp, #28]
 8005522:	2301      	movs	r3, #1
 8005524:	9308      	str	r3, [sp, #32]
 8005526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005528:	2b00      	cmp	r3, #0
 800552a:	d128      	bne.n	800557e <_dtoa_r+0x81e>
 800552c:	2001      	movs	r0, #1
 800552e:	e02e      	b.n	800558e <_dtoa_r+0x82e>
 8005530:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005532:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005536:	e796      	b.n	8005466 <_dtoa_r+0x706>
 8005538:	9b08      	ldr	r3, [sp, #32]
 800553a:	f108 36ff 	add.w	r6, r8, #4294967295
 800553e:	42b3      	cmp	r3, r6
 8005540:	bfb7      	itett	lt
 8005542:	9b08      	ldrlt	r3, [sp, #32]
 8005544:	1b9e      	subge	r6, r3, r6
 8005546:	1af2      	sublt	r2, r6, r3
 8005548:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800554a:	bfbf      	itttt	lt
 800554c:	9608      	strlt	r6, [sp, #32]
 800554e:	189b      	addlt	r3, r3, r2
 8005550:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005552:	2600      	movlt	r6, #0
 8005554:	f1b8 0f00 	cmp.w	r8, #0
 8005558:	bfb9      	ittee	lt
 800555a:	eba9 0508 	sublt.w	r5, r9, r8
 800555e:	2300      	movlt	r3, #0
 8005560:	464d      	movge	r5, r9
 8005562:	4643      	movge	r3, r8
 8005564:	e781      	b.n	800546a <_dtoa_r+0x70a>
 8005566:	9e08      	ldr	r6, [sp, #32]
 8005568:	464d      	mov	r5, r9
 800556a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800556c:	e786      	b.n	800547c <_dtoa_r+0x71c>
 800556e:	9a08      	ldr	r2, [sp, #32]
 8005570:	e7ad      	b.n	80054ce <_dtoa_r+0x76e>
 8005572:	2300      	movs	r3, #0
 8005574:	e7d6      	b.n	8005524 <_dtoa_r+0x7c4>
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	e7d4      	b.n	8005524 <_dtoa_r+0x7c4>
 800557a:	2300      	movs	r3, #0
 800557c:	9308      	str	r3, [sp, #32]
 800557e:	6933      	ldr	r3, [r6, #16]
 8005580:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005584:	6918      	ldr	r0, [r3, #16]
 8005586:	f000 fa49 	bl	8005a1c <__hi0bits>
 800558a:	f1c0 0020 	rsb	r0, r0, #32
 800558e:	9b07      	ldr	r3, [sp, #28]
 8005590:	4418      	add	r0, r3
 8005592:	f010 001f 	ands.w	r0, r0, #31
 8005596:	d047      	beq.n	8005628 <_dtoa_r+0x8c8>
 8005598:	f1c0 0320 	rsb	r3, r0, #32
 800559c:	2b04      	cmp	r3, #4
 800559e:	dd3b      	ble.n	8005618 <_dtoa_r+0x8b8>
 80055a0:	9b07      	ldr	r3, [sp, #28]
 80055a2:	f1c0 001c 	rsb	r0, r0, #28
 80055a6:	4481      	add	r9, r0
 80055a8:	4405      	add	r5, r0
 80055aa:	4403      	add	r3, r0
 80055ac:	9307      	str	r3, [sp, #28]
 80055ae:	f1b9 0f00 	cmp.w	r9, #0
 80055b2:	dd05      	ble.n	80055c0 <_dtoa_r+0x860>
 80055b4:	4659      	mov	r1, fp
 80055b6:	464a      	mov	r2, r9
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fb69 	bl	8005c90 <__lshift>
 80055be:	4683      	mov	fp, r0
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	dd05      	ble.n	80055d2 <_dtoa_r+0x872>
 80055c6:	4631      	mov	r1, r6
 80055c8:	461a      	mov	r2, r3
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 fb60 	bl	8005c90 <__lshift>
 80055d0:	4606      	mov	r6, r0
 80055d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d4:	b353      	cbz	r3, 800562c <_dtoa_r+0x8cc>
 80055d6:	4631      	mov	r1, r6
 80055d8:	4658      	mov	r0, fp
 80055da:	f000 fbad 	bl	8005d38 <__mcmp>
 80055de:	2800      	cmp	r0, #0
 80055e0:	da24      	bge.n	800562c <_dtoa_r+0x8cc>
 80055e2:	2300      	movs	r3, #0
 80055e4:	4659      	mov	r1, fp
 80055e6:	220a      	movs	r2, #10
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 f9dc 	bl	80059a6 <__multadd>
 80055ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055f4:	4683      	mov	fp, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8144 	beq.w	8005884 <_dtoa_r+0xb24>
 80055fc:	2300      	movs	r3, #0
 80055fe:	4639      	mov	r1, r7
 8005600:	220a      	movs	r2, #10
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f9cf 	bl	80059a6 <__multadd>
 8005608:	9b04      	ldr	r3, [sp, #16]
 800560a:	4607      	mov	r7, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	dc4d      	bgt.n	80056ac <_dtoa_r+0x94c>
 8005610:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005612:	2b02      	cmp	r3, #2
 8005614:	dd4a      	ble.n	80056ac <_dtoa_r+0x94c>
 8005616:	e011      	b.n	800563c <_dtoa_r+0x8dc>
 8005618:	d0c9      	beq.n	80055ae <_dtoa_r+0x84e>
 800561a:	9a07      	ldr	r2, [sp, #28]
 800561c:	331c      	adds	r3, #28
 800561e:	441a      	add	r2, r3
 8005620:	4499      	add	r9, r3
 8005622:	441d      	add	r5, r3
 8005624:	4613      	mov	r3, r2
 8005626:	e7c1      	b.n	80055ac <_dtoa_r+0x84c>
 8005628:	4603      	mov	r3, r0
 800562a:	e7f6      	b.n	800561a <_dtoa_r+0x8ba>
 800562c:	f1b8 0f00 	cmp.w	r8, #0
 8005630:	dc36      	bgt.n	80056a0 <_dtoa_r+0x940>
 8005632:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005634:	2b02      	cmp	r3, #2
 8005636:	dd33      	ble.n	80056a0 <_dtoa_r+0x940>
 8005638:	f8cd 8010 	str.w	r8, [sp, #16]
 800563c:	9b04      	ldr	r3, [sp, #16]
 800563e:	b963      	cbnz	r3, 800565a <_dtoa_r+0x8fa>
 8005640:	4631      	mov	r1, r6
 8005642:	2205      	movs	r2, #5
 8005644:	4620      	mov	r0, r4
 8005646:	f000 f9ae 	bl	80059a6 <__multadd>
 800564a:	4601      	mov	r1, r0
 800564c:	4606      	mov	r6, r0
 800564e:	4658      	mov	r0, fp
 8005650:	f000 fb72 	bl	8005d38 <__mcmp>
 8005654:	2800      	cmp	r0, #0
 8005656:	f73f add3 	bgt.w	8005200 <_dtoa_r+0x4a0>
 800565a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800565c:	9d06      	ldr	r5, [sp, #24]
 800565e:	ea6f 0a03 	mvn.w	sl, r3
 8005662:	f04f 0900 	mov.w	r9, #0
 8005666:	4631      	mov	r1, r6
 8005668:	4620      	mov	r0, r4
 800566a:	f000 f985 	bl	8005978 <_Bfree>
 800566e:	2f00      	cmp	r7, #0
 8005670:	f43f aebd 	beq.w	80053ee <_dtoa_r+0x68e>
 8005674:	f1b9 0f00 	cmp.w	r9, #0
 8005678:	d005      	beq.n	8005686 <_dtoa_r+0x926>
 800567a:	45b9      	cmp	r9, r7
 800567c:	d003      	beq.n	8005686 <_dtoa_r+0x926>
 800567e:	4649      	mov	r1, r9
 8005680:	4620      	mov	r0, r4
 8005682:	f000 f979 	bl	8005978 <_Bfree>
 8005686:	4639      	mov	r1, r7
 8005688:	4620      	mov	r0, r4
 800568a:	f000 f975 	bl	8005978 <_Bfree>
 800568e:	e6ae      	b.n	80053ee <_dtoa_r+0x68e>
 8005690:	2600      	movs	r6, #0
 8005692:	4637      	mov	r7, r6
 8005694:	e7e1      	b.n	800565a <_dtoa_r+0x8fa>
 8005696:	46ba      	mov	sl, r7
 8005698:	4637      	mov	r7, r6
 800569a:	e5b1      	b.n	8005200 <_dtoa_r+0x4a0>
 800569c:	40240000 	.word	0x40240000
 80056a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80f3 	beq.w	8005892 <_dtoa_r+0xb32>
 80056ac:	2d00      	cmp	r5, #0
 80056ae:	dd05      	ble.n	80056bc <_dtoa_r+0x95c>
 80056b0:	4639      	mov	r1, r7
 80056b2:	462a      	mov	r2, r5
 80056b4:	4620      	mov	r0, r4
 80056b6:	f000 faeb 	bl	8005c90 <__lshift>
 80056ba:	4607      	mov	r7, r0
 80056bc:	9b08      	ldr	r3, [sp, #32]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04c      	beq.n	800575c <_dtoa_r+0x9fc>
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 f923 	bl	8005910 <_Balloc>
 80056ca:	4605      	mov	r5, r0
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	f107 010c 	add.w	r1, r7, #12
 80056d2:	3202      	adds	r2, #2
 80056d4:	0092      	lsls	r2, r2, #2
 80056d6:	300c      	adds	r0, #12
 80056d8:	f7fe fe30 	bl	800433c <memcpy>
 80056dc:	2201      	movs	r2, #1
 80056de:	4629      	mov	r1, r5
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 fad5 	bl	8005c90 <__lshift>
 80056e6:	46b9      	mov	r9, r7
 80056e8:	4607      	mov	r7, r0
 80056ea:	9b06      	ldr	r3, [sp, #24]
 80056ec:	9307      	str	r3, [sp, #28]
 80056ee:	9b02      	ldr	r3, [sp, #8]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	9308      	str	r3, [sp, #32]
 80056f6:	4631      	mov	r1, r6
 80056f8:	4658      	mov	r0, fp
 80056fa:	f7ff faa1 	bl	8004c40 <quorem>
 80056fe:	4649      	mov	r1, r9
 8005700:	4605      	mov	r5, r0
 8005702:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005706:	4658      	mov	r0, fp
 8005708:	f000 fb16 	bl	8005d38 <__mcmp>
 800570c:	463a      	mov	r2, r7
 800570e:	9002      	str	r0, [sp, #8]
 8005710:	4631      	mov	r1, r6
 8005712:	4620      	mov	r0, r4
 8005714:	f000 fb2a 	bl	8005d6c <__mdiff>
 8005718:	68c3      	ldr	r3, [r0, #12]
 800571a:	4602      	mov	r2, r0
 800571c:	bb03      	cbnz	r3, 8005760 <_dtoa_r+0xa00>
 800571e:	4601      	mov	r1, r0
 8005720:	9009      	str	r0, [sp, #36]	; 0x24
 8005722:	4658      	mov	r0, fp
 8005724:	f000 fb08 	bl	8005d38 <__mcmp>
 8005728:	4603      	mov	r3, r0
 800572a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572c:	4611      	mov	r1, r2
 800572e:	4620      	mov	r0, r4
 8005730:	9309      	str	r3, [sp, #36]	; 0x24
 8005732:	f000 f921 	bl	8005978 <_Bfree>
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005738:	b9a3      	cbnz	r3, 8005764 <_dtoa_r+0xa04>
 800573a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800573c:	b992      	cbnz	r2, 8005764 <_dtoa_r+0xa04>
 800573e:	9a08      	ldr	r2, [sp, #32]
 8005740:	b982      	cbnz	r2, 8005764 <_dtoa_r+0xa04>
 8005742:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005746:	d029      	beq.n	800579c <_dtoa_r+0xa3c>
 8005748:	9b02      	ldr	r3, [sp, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	dd01      	ble.n	8005752 <_dtoa_r+0x9f2>
 800574e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005752:	9b07      	ldr	r3, [sp, #28]
 8005754:	1c5d      	adds	r5, r3, #1
 8005756:	f883 8000 	strb.w	r8, [r3]
 800575a:	e784      	b.n	8005666 <_dtoa_r+0x906>
 800575c:	4638      	mov	r0, r7
 800575e:	e7c2      	b.n	80056e6 <_dtoa_r+0x986>
 8005760:	2301      	movs	r3, #1
 8005762:	e7e3      	b.n	800572c <_dtoa_r+0x9cc>
 8005764:	9a02      	ldr	r2, [sp, #8]
 8005766:	2a00      	cmp	r2, #0
 8005768:	db04      	blt.n	8005774 <_dtoa_r+0xa14>
 800576a:	d123      	bne.n	80057b4 <_dtoa_r+0xa54>
 800576c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800576e:	bb0a      	cbnz	r2, 80057b4 <_dtoa_r+0xa54>
 8005770:	9a08      	ldr	r2, [sp, #32]
 8005772:	b9fa      	cbnz	r2, 80057b4 <_dtoa_r+0xa54>
 8005774:	2b00      	cmp	r3, #0
 8005776:	ddec      	ble.n	8005752 <_dtoa_r+0x9f2>
 8005778:	4659      	mov	r1, fp
 800577a:	2201      	movs	r2, #1
 800577c:	4620      	mov	r0, r4
 800577e:	f000 fa87 	bl	8005c90 <__lshift>
 8005782:	4631      	mov	r1, r6
 8005784:	4683      	mov	fp, r0
 8005786:	f000 fad7 	bl	8005d38 <__mcmp>
 800578a:	2800      	cmp	r0, #0
 800578c:	dc03      	bgt.n	8005796 <_dtoa_r+0xa36>
 800578e:	d1e0      	bne.n	8005752 <_dtoa_r+0x9f2>
 8005790:	f018 0f01 	tst.w	r8, #1
 8005794:	d0dd      	beq.n	8005752 <_dtoa_r+0x9f2>
 8005796:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800579a:	d1d8      	bne.n	800574e <_dtoa_r+0x9ee>
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	9a07      	ldr	r2, [sp, #28]
 80057a0:	1c5d      	adds	r5, r3, #1
 80057a2:	2339      	movs	r3, #57	; 0x39
 80057a4:	7013      	strb	r3, [r2, #0]
 80057a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057aa:	1e6a      	subs	r2, r5, #1
 80057ac:	2b39      	cmp	r3, #57	; 0x39
 80057ae:	d04d      	beq.n	800584c <_dtoa_r+0xaec>
 80057b0:	3301      	adds	r3, #1
 80057b2:	e052      	b.n	800585a <_dtoa_r+0xafa>
 80057b4:	9a07      	ldr	r2, [sp, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f102 0501 	add.w	r5, r2, #1
 80057bc:	dd06      	ble.n	80057cc <_dtoa_r+0xa6c>
 80057be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057c2:	d0eb      	beq.n	800579c <_dtoa_r+0xa3c>
 80057c4:	f108 0801 	add.w	r8, r8, #1
 80057c8:	9b07      	ldr	r3, [sp, #28]
 80057ca:	e7c4      	b.n	8005756 <_dtoa_r+0x9f6>
 80057cc:	9b06      	ldr	r3, [sp, #24]
 80057ce:	9a04      	ldr	r2, [sp, #16]
 80057d0:	1aeb      	subs	r3, r5, r3
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80057d8:	d021      	beq.n	800581e <_dtoa_r+0xabe>
 80057da:	4659      	mov	r1, fp
 80057dc:	2300      	movs	r3, #0
 80057de:	220a      	movs	r2, #10
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 f8e0 	bl	80059a6 <__multadd>
 80057e6:	45b9      	cmp	r9, r7
 80057e8:	4683      	mov	fp, r0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	f04f 020a 	mov.w	r2, #10
 80057f2:	4649      	mov	r1, r9
 80057f4:	4620      	mov	r0, r4
 80057f6:	d105      	bne.n	8005804 <_dtoa_r+0xaa4>
 80057f8:	f000 f8d5 	bl	80059a6 <__multadd>
 80057fc:	4681      	mov	r9, r0
 80057fe:	4607      	mov	r7, r0
 8005800:	9507      	str	r5, [sp, #28]
 8005802:	e778      	b.n	80056f6 <_dtoa_r+0x996>
 8005804:	f000 f8cf 	bl	80059a6 <__multadd>
 8005808:	4639      	mov	r1, r7
 800580a:	4681      	mov	r9, r0
 800580c:	2300      	movs	r3, #0
 800580e:	220a      	movs	r2, #10
 8005810:	4620      	mov	r0, r4
 8005812:	f000 f8c8 	bl	80059a6 <__multadd>
 8005816:	4607      	mov	r7, r0
 8005818:	e7f2      	b.n	8005800 <_dtoa_r+0xaa0>
 800581a:	f04f 0900 	mov.w	r9, #0
 800581e:	4659      	mov	r1, fp
 8005820:	2201      	movs	r2, #1
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fa34 	bl	8005c90 <__lshift>
 8005828:	4631      	mov	r1, r6
 800582a:	4683      	mov	fp, r0
 800582c:	f000 fa84 	bl	8005d38 <__mcmp>
 8005830:	2800      	cmp	r0, #0
 8005832:	dcb8      	bgt.n	80057a6 <_dtoa_r+0xa46>
 8005834:	d102      	bne.n	800583c <_dtoa_r+0xadc>
 8005836:	f018 0f01 	tst.w	r8, #1
 800583a:	d1b4      	bne.n	80057a6 <_dtoa_r+0xa46>
 800583c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005840:	1e6a      	subs	r2, r5, #1
 8005842:	2b30      	cmp	r3, #48	; 0x30
 8005844:	f47f af0f 	bne.w	8005666 <_dtoa_r+0x906>
 8005848:	4615      	mov	r5, r2
 800584a:	e7f7      	b.n	800583c <_dtoa_r+0xadc>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	4293      	cmp	r3, r2
 8005850:	d105      	bne.n	800585e <_dtoa_r+0xafe>
 8005852:	2331      	movs	r3, #49	; 0x31
 8005854:	9a06      	ldr	r2, [sp, #24]
 8005856:	f10a 0a01 	add.w	sl, sl, #1
 800585a:	7013      	strb	r3, [r2, #0]
 800585c:	e703      	b.n	8005666 <_dtoa_r+0x906>
 800585e:	4615      	mov	r5, r2
 8005860:	e7a1      	b.n	80057a6 <_dtoa_r+0xa46>
 8005862:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <_dtoa_r+0xb60>)
 8005864:	f7ff bae1 	b.w	8004e2a <_dtoa_r+0xca>
 8005868:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800586a:	2b00      	cmp	r3, #0
 800586c:	f47f aabb 	bne.w	8004de6 <_dtoa_r+0x86>
 8005870:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <_dtoa_r+0xb64>)
 8005872:	f7ff bada 	b.w	8004e2a <_dtoa_r+0xca>
 8005876:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005878:	2b01      	cmp	r3, #1
 800587a:	f77f ae3f 	ble.w	80054fc <_dtoa_r+0x79c>
 800587e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005880:	9308      	str	r3, [sp, #32]
 8005882:	e653      	b.n	800552c <_dtoa_r+0x7cc>
 8005884:	9b04      	ldr	r3, [sp, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	dc03      	bgt.n	8005892 <_dtoa_r+0xb32>
 800588a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800588c:	2b02      	cmp	r3, #2
 800588e:	f73f aed5 	bgt.w	800563c <_dtoa_r+0x8dc>
 8005892:	9d06      	ldr	r5, [sp, #24]
 8005894:	4631      	mov	r1, r6
 8005896:	4658      	mov	r0, fp
 8005898:	f7ff f9d2 	bl	8004c40 <quorem>
 800589c:	9b06      	ldr	r3, [sp, #24]
 800589e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058a2:	f805 8b01 	strb.w	r8, [r5], #1
 80058a6:	9a04      	ldr	r2, [sp, #16]
 80058a8:	1aeb      	subs	r3, r5, r3
 80058aa:	429a      	cmp	r2, r3
 80058ac:	ddb5      	ble.n	800581a <_dtoa_r+0xaba>
 80058ae:	4659      	mov	r1, fp
 80058b0:	2300      	movs	r3, #0
 80058b2:	220a      	movs	r2, #10
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 f876 	bl	80059a6 <__multadd>
 80058ba:	4683      	mov	fp, r0
 80058bc:	e7ea      	b.n	8005894 <_dtoa_r+0xb34>
 80058be:	bf00      	nop
 80058c0:	08007118 	.word	0x08007118
 80058c4:	0800713c 	.word	0x0800713c

080058c8 <_localeconv_r>:
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <_localeconv_r+0x14>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6a18      	ldr	r0, [r3, #32]
 80058ce:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <_localeconv_r+0x18>)
 80058d0:	2800      	cmp	r0, #0
 80058d2:	bf08      	it	eq
 80058d4:	4618      	moveq	r0, r3
 80058d6:	30f0      	adds	r0, #240	; 0xf0
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	20000070 	.word	0x20000070

080058e4 <malloc>:
 80058e4:	4b02      	ldr	r3, [pc, #8]	; (80058f0 <malloc+0xc>)
 80058e6:	4601      	mov	r1, r0
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	f000 bb47 	b.w	8005f7c <_malloc_r>
 80058ee:	bf00      	nop
 80058f0:	2000000c 	.word	0x2000000c

080058f4 <memchr>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	b2c9      	uxtb	r1, r1
 80058f8:	4402      	add	r2, r0
 80058fa:	4290      	cmp	r0, r2
 80058fc:	4603      	mov	r3, r0
 80058fe:	d101      	bne.n	8005904 <memchr+0x10>
 8005900:	2300      	movs	r3, #0
 8005902:	e003      	b.n	800590c <memchr+0x18>
 8005904:	781c      	ldrb	r4, [r3, #0]
 8005906:	3001      	adds	r0, #1
 8005908:	428c      	cmp	r4, r1
 800590a:	d1f6      	bne.n	80058fa <memchr+0x6>
 800590c:	4618      	mov	r0, r3
 800590e:	bd10      	pop	{r4, pc}

08005910 <_Balloc>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005914:	4604      	mov	r4, r0
 8005916:	460e      	mov	r6, r1
 8005918:	b93d      	cbnz	r5, 800592a <_Balloc+0x1a>
 800591a:	2010      	movs	r0, #16
 800591c:	f7ff ffe2 	bl	80058e4 <malloc>
 8005920:	6260      	str	r0, [r4, #36]	; 0x24
 8005922:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005926:	6005      	str	r5, [r0, #0]
 8005928:	60c5      	str	r5, [r0, #12]
 800592a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800592c:	68eb      	ldr	r3, [r5, #12]
 800592e:	b183      	cbz	r3, 8005952 <_Balloc+0x42>
 8005930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005938:	b9b8      	cbnz	r0, 800596a <_Balloc+0x5a>
 800593a:	2101      	movs	r1, #1
 800593c:	fa01 f506 	lsl.w	r5, r1, r6
 8005940:	1d6a      	adds	r2, r5, #5
 8005942:	0092      	lsls	r2, r2, #2
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fabe 	bl	8005ec6 <_calloc_r>
 800594a:	b160      	cbz	r0, 8005966 <_Balloc+0x56>
 800594c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005950:	e00e      	b.n	8005970 <_Balloc+0x60>
 8005952:	2221      	movs	r2, #33	; 0x21
 8005954:	2104      	movs	r1, #4
 8005956:	4620      	mov	r0, r4
 8005958:	f000 fab5 	bl	8005ec6 <_calloc_r>
 800595c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800595e:	60e8      	str	r0, [r5, #12]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e4      	bne.n	8005930 <_Balloc+0x20>
 8005966:	2000      	movs	r0, #0
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	6802      	ldr	r2, [r0, #0]
 800596c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005970:	2300      	movs	r3, #0
 8005972:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005976:	e7f7      	b.n	8005968 <_Balloc+0x58>

08005978 <_Bfree>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800597c:	4606      	mov	r6, r0
 800597e:	460d      	mov	r5, r1
 8005980:	b93c      	cbnz	r4, 8005992 <_Bfree+0x1a>
 8005982:	2010      	movs	r0, #16
 8005984:	f7ff ffae 	bl	80058e4 <malloc>
 8005988:	6270      	str	r0, [r6, #36]	; 0x24
 800598a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800598e:	6004      	str	r4, [r0, #0]
 8005990:	60c4      	str	r4, [r0, #12]
 8005992:	b13d      	cbz	r5, 80059a4 <_Bfree+0x2c>
 8005994:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005996:	686a      	ldr	r2, [r5, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800599e:	6029      	str	r1, [r5, #0]
 80059a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80059a4:	bd70      	pop	{r4, r5, r6, pc}

080059a6 <__multadd>:
 80059a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059aa:	461f      	mov	r7, r3
 80059ac:	4606      	mov	r6, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	2300      	movs	r3, #0
 80059b2:	690d      	ldr	r5, [r1, #16]
 80059b4:	f101 0c14 	add.w	ip, r1, #20
 80059b8:	f8dc 0000 	ldr.w	r0, [ip]
 80059bc:	3301      	adds	r3, #1
 80059be:	b281      	uxth	r1, r0
 80059c0:	fb02 7101 	mla	r1, r2, r1, r7
 80059c4:	0c00      	lsrs	r0, r0, #16
 80059c6:	0c0f      	lsrs	r7, r1, #16
 80059c8:	fb02 7000 	mla	r0, r2, r0, r7
 80059cc:	b289      	uxth	r1, r1
 80059ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059d2:	429d      	cmp	r5, r3
 80059d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059d8:	f84c 1b04 	str.w	r1, [ip], #4
 80059dc:	dcec      	bgt.n	80059b8 <__multadd+0x12>
 80059de:	b1d7      	cbz	r7, 8005a16 <__multadd+0x70>
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	42ab      	cmp	r3, r5
 80059e4:	dc12      	bgt.n	8005a0c <__multadd+0x66>
 80059e6:	6861      	ldr	r1, [r4, #4]
 80059e8:	4630      	mov	r0, r6
 80059ea:	3101      	adds	r1, #1
 80059ec:	f7ff ff90 	bl	8005910 <_Balloc>
 80059f0:	4680      	mov	r8, r0
 80059f2:	6922      	ldr	r2, [r4, #16]
 80059f4:	f104 010c 	add.w	r1, r4, #12
 80059f8:	3202      	adds	r2, #2
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	300c      	adds	r0, #12
 80059fe:	f7fe fc9d 	bl	800433c <memcpy>
 8005a02:	4621      	mov	r1, r4
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff ffb7 	bl	8005978 <_Bfree>
 8005a0a:	4644      	mov	r4, r8
 8005a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a10:	3501      	adds	r5, #1
 8005a12:	615f      	str	r7, [r3, #20]
 8005a14:	6125      	str	r5, [r4, #16]
 8005a16:	4620      	mov	r0, r4
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a1c <__hi0bits>:
 8005a1c:	0c02      	lsrs	r2, r0, #16
 8005a1e:	0412      	lsls	r2, r2, #16
 8005a20:	4603      	mov	r3, r0
 8005a22:	b9b2      	cbnz	r2, 8005a52 <__hi0bits+0x36>
 8005a24:	0403      	lsls	r3, r0, #16
 8005a26:	2010      	movs	r0, #16
 8005a28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a2c:	bf04      	itt	eq
 8005a2e:	021b      	lsleq	r3, r3, #8
 8005a30:	3008      	addeq	r0, #8
 8005a32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a36:	bf04      	itt	eq
 8005a38:	011b      	lsleq	r3, r3, #4
 8005a3a:	3004      	addeq	r0, #4
 8005a3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a40:	bf04      	itt	eq
 8005a42:	009b      	lsleq	r3, r3, #2
 8005a44:	3002      	addeq	r0, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	db06      	blt.n	8005a58 <__hi0bits+0x3c>
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	d503      	bpl.n	8005a56 <__hi0bits+0x3a>
 8005a4e:	3001      	adds	r0, #1
 8005a50:	4770      	bx	lr
 8005a52:	2000      	movs	r0, #0
 8005a54:	e7e8      	b.n	8005a28 <__hi0bits+0xc>
 8005a56:	2020      	movs	r0, #32
 8005a58:	4770      	bx	lr

08005a5a <__lo0bits>:
 8005a5a:	6803      	ldr	r3, [r0, #0]
 8005a5c:	4601      	mov	r1, r0
 8005a5e:	f013 0207 	ands.w	r2, r3, #7
 8005a62:	d00b      	beq.n	8005a7c <__lo0bits+0x22>
 8005a64:	07da      	lsls	r2, r3, #31
 8005a66:	d423      	bmi.n	8005ab0 <__lo0bits+0x56>
 8005a68:	0798      	lsls	r0, r3, #30
 8005a6a:	bf49      	itett	mi
 8005a6c:	085b      	lsrmi	r3, r3, #1
 8005a6e:	089b      	lsrpl	r3, r3, #2
 8005a70:	2001      	movmi	r0, #1
 8005a72:	600b      	strmi	r3, [r1, #0]
 8005a74:	bf5c      	itt	pl
 8005a76:	600b      	strpl	r3, [r1, #0]
 8005a78:	2002      	movpl	r0, #2
 8005a7a:	4770      	bx	lr
 8005a7c:	b298      	uxth	r0, r3
 8005a7e:	b9a8      	cbnz	r0, 8005aac <__lo0bits+0x52>
 8005a80:	2010      	movs	r0, #16
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a88:	bf04      	itt	eq
 8005a8a:	0a1b      	lsreq	r3, r3, #8
 8005a8c:	3008      	addeq	r0, #8
 8005a8e:	071a      	lsls	r2, r3, #28
 8005a90:	bf04      	itt	eq
 8005a92:	091b      	lsreq	r3, r3, #4
 8005a94:	3004      	addeq	r0, #4
 8005a96:	079a      	lsls	r2, r3, #30
 8005a98:	bf04      	itt	eq
 8005a9a:	089b      	lsreq	r3, r3, #2
 8005a9c:	3002      	addeq	r0, #2
 8005a9e:	07da      	lsls	r2, r3, #31
 8005aa0:	d402      	bmi.n	8005aa8 <__lo0bits+0x4e>
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	d006      	beq.n	8005ab4 <__lo0bits+0x5a>
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	600b      	str	r3, [r1, #0]
 8005aaa:	4770      	bx	lr
 8005aac:	4610      	mov	r0, r2
 8005aae:	e7e9      	b.n	8005a84 <__lo0bits+0x2a>
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	4770      	bx	lr
 8005ab4:	2020      	movs	r0, #32
 8005ab6:	4770      	bx	lr

08005ab8 <__i2b>:
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	460c      	mov	r4, r1
 8005abc:	2101      	movs	r1, #1
 8005abe:	f7ff ff27 	bl	8005910 <_Balloc>
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	6144      	str	r4, [r0, #20]
 8005ac6:	6102      	str	r2, [r0, #16]
 8005ac8:	bd10      	pop	{r4, pc}

08005aca <__multiply>:
 8005aca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ace:	4614      	mov	r4, r2
 8005ad0:	690a      	ldr	r2, [r1, #16]
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	4688      	mov	r8, r1
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	bfbe      	ittt	lt
 8005ada:	460b      	movlt	r3, r1
 8005adc:	46a0      	movlt	r8, r4
 8005ade:	461c      	movlt	r4, r3
 8005ae0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ae4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ae8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005aec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005af0:	eb07 0609 	add.w	r6, r7, r9
 8005af4:	42b3      	cmp	r3, r6
 8005af6:	bfb8      	it	lt
 8005af8:	3101      	addlt	r1, #1
 8005afa:	f7ff ff09 	bl	8005910 <_Balloc>
 8005afe:	f100 0514 	add.w	r5, r0, #20
 8005b02:	462b      	mov	r3, r5
 8005b04:	2200      	movs	r2, #0
 8005b06:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005b0a:	4573      	cmp	r3, lr
 8005b0c:	d316      	bcc.n	8005b3c <__multiply+0x72>
 8005b0e:	f104 0214 	add.w	r2, r4, #20
 8005b12:	f108 0114 	add.w	r1, r8, #20
 8005b16:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005b1a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	9b00      	ldr	r3, [sp, #0]
 8005b22:	9201      	str	r2, [sp, #4]
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d80c      	bhi.n	8005b42 <__multiply+0x78>
 8005b28:	2e00      	cmp	r6, #0
 8005b2a:	dd03      	ble.n	8005b34 <__multiply+0x6a>
 8005b2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d05d      	beq.n	8005bf0 <__multiply+0x126>
 8005b34:	6106      	str	r6, [r0, #16]
 8005b36:	b003      	add	sp, #12
 8005b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3c:	f843 2b04 	str.w	r2, [r3], #4
 8005b40:	e7e3      	b.n	8005b0a <__multiply+0x40>
 8005b42:	f8b2 b000 	ldrh.w	fp, [r2]
 8005b46:	f1bb 0f00 	cmp.w	fp, #0
 8005b4a:	d023      	beq.n	8005b94 <__multiply+0xca>
 8005b4c:	4689      	mov	r9, r1
 8005b4e:	46ac      	mov	ip, r5
 8005b50:	f04f 0800 	mov.w	r8, #0
 8005b54:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b58:	f8dc a000 	ldr.w	sl, [ip]
 8005b5c:	b2a3      	uxth	r3, r4
 8005b5e:	fa1f fa8a 	uxth.w	sl, sl
 8005b62:	fb0b a303 	mla	r3, fp, r3, sl
 8005b66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b6a:	f8dc 4000 	ldr.w	r4, [ip]
 8005b6e:	4443      	add	r3, r8
 8005b70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b74:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b78:	46e2      	mov	sl, ip
 8005b7a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b84:	454f      	cmp	r7, r9
 8005b86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b8a:	f84a 3b04 	str.w	r3, [sl], #4
 8005b8e:	d82b      	bhi.n	8005be8 <__multiply+0x11e>
 8005b90:	f8cc 8004 	str.w	r8, [ip, #4]
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	3204      	adds	r2, #4
 8005b98:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005b9c:	f1ba 0f00 	cmp.w	sl, #0
 8005ba0:	d020      	beq.n	8005be4 <__multiply+0x11a>
 8005ba2:	4689      	mov	r9, r1
 8005ba4:	46a8      	mov	r8, r5
 8005ba6:	f04f 0b00 	mov.w	fp, #0
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	f8b9 c000 	ldrh.w	ip, [r9]
 8005bb0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	fb0a 440c 	mla	r4, sl, ip, r4
 8005bba:	46c4      	mov	ip, r8
 8005bbc:	445c      	add	r4, fp
 8005bbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005bc2:	f84c 3b04 	str.w	r3, [ip], #4
 8005bc6:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005bce:	0c1b      	lsrs	r3, r3, #16
 8005bd0:	fb0a b303 	mla	r3, sl, r3, fp
 8005bd4:	454f      	cmp	r7, r9
 8005bd6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005bda:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005bde:	d805      	bhi.n	8005bec <__multiply+0x122>
 8005be0:	f8c8 3004 	str.w	r3, [r8, #4]
 8005be4:	3504      	adds	r5, #4
 8005be6:	e79b      	b.n	8005b20 <__multiply+0x56>
 8005be8:	46d4      	mov	ip, sl
 8005bea:	e7b3      	b.n	8005b54 <__multiply+0x8a>
 8005bec:	46e0      	mov	r8, ip
 8005bee:	e7dd      	b.n	8005bac <__multiply+0xe2>
 8005bf0:	3e01      	subs	r6, #1
 8005bf2:	e799      	b.n	8005b28 <__multiply+0x5e>

08005bf4 <__pow5mult>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	4615      	mov	r5, r2
 8005bfa:	f012 0203 	ands.w	r2, r2, #3
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460f      	mov	r7, r1
 8005c02:	d007      	beq.n	8005c14 <__pow5mult+0x20>
 8005c04:	4c21      	ldr	r4, [pc, #132]	; (8005c8c <__pow5mult+0x98>)
 8005c06:	3a01      	subs	r2, #1
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c0e:	f7ff feca 	bl	80059a6 <__multadd>
 8005c12:	4607      	mov	r7, r0
 8005c14:	10ad      	asrs	r5, r5, #2
 8005c16:	d035      	beq.n	8005c84 <__pow5mult+0x90>
 8005c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c1a:	b93c      	cbnz	r4, 8005c2c <__pow5mult+0x38>
 8005c1c:	2010      	movs	r0, #16
 8005c1e:	f7ff fe61 	bl	80058e4 <malloc>
 8005c22:	6270      	str	r0, [r6, #36]	; 0x24
 8005c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c28:	6004      	str	r4, [r0, #0]
 8005c2a:	60c4      	str	r4, [r0, #12]
 8005c2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c34:	b94c      	cbnz	r4, 8005c4a <__pow5mult+0x56>
 8005c36:	f240 2171 	movw	r1, #625	; 0x271
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ff3c 	bl	8005ab8 <__i2b>
 8005c40:	2300      	movs	r3, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c48:	6003      	str	r3, [r0, #0]
 8005c4a:	f04f 0800 	mov.w	r8, #0
 8005c4e:	07eb      	lsls	r3, r5, #31
 8005c50:	d50a      	bpl.n	8005c68 <__pow5mult+0x74>
 8005c52:	4639      	mov	r1, r7
 8005c54:	4622      	mov	r2, r4
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff ff37 	bl	8005aca <__multiply>
 8005c5c:	4681      	mov	r9, r0
 8005c5e:	4639      	mov	r1, r7
 8005c60:	4630      	mov	r0, r6
 8005c62:	f7ff fe89 	bl	8005978 <_Bfree>
 8005c66:	464f      	mov	r7, r9
 8005c68:	106d      	asrs	r5, r5, #1
 8005c6a:	d00b      	beq.n	8005c84 <__pow5mult+0x90>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	b938      	cbnz	r0, 8005c80 <__pow5mult+0x8c>
 8005c70:	4622      	mov	r2, r4
 8005c72:	4621      	mov	r1, r4
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff ff28 	bl	8005aca <__multiply>
 8005c7a:	6020      	str	r0, [r4, #0]
 8005c7c:	f8c0 8000 	str.w	r8, [r0]
 8005c80:	4604      	mov	r4, r0
 8005c82:	e7e4      	b.n	8005c4e <__pow5mult+0x5a>
 8005c84:	4638      	mov	r0, r7
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08007240 	.word	0x08007240

08005c90 <__lshift>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	460c      	mov	r4, r1
 8005c96:	4607      	mov	r7, r0
 8005c98:	4616      	mov	r6, r2
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca0:	eb0a 0903 	add.w	r9, sl, r3
 8005ca4:	6849      	ldr	r1, [r1, #4]
 8005ca6:	68a3      	ldr	r3, [r4, #8]
 8005ca8:	f109 0501 	add.w	r5, r9, #1
 8005cac:	42ab      	cmp	r3, r5
 8005cae:	db32      	blt.n	8005d16 <__lshift+0x86>
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f7ff fe2d 	bl	8005910 <_Balloc>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4680      	mov	r8, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f100 0114 	add.w	r1, r0, #20
 8005cc0:	4553      	cmp	r3, sl
 8005cc2:	db2b      	blt.n	8005d1c <__lshift+0x8c>
 8005cc4:	6920      	ldr	r0, [r4, #16]
 8005cc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cca:	f104 0314 	add.w	r3, r4, #20
 8005cce:	f016 021f 	ands.w	r2, r6, #31
 8005cd2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cd6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cda:	d025      	beq.n	8005d28 <__lshift+0x98>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f1c2 0e20 	rsb	lr, r2, #32
 8005ce2:	468a      	mov	sl, r1
 8005ce4:	681e      	ldr	r6, [r3, #0]
 8005ce6:	4096      	lsls	r6, r2
 8005ce8:	4330      	orrs	r0, r6
 8005cea:	f84a 0b04 	str.w	r0, [sl], #4
 8005cee:	f853 0b04 	ldr.w	r0, [r3], #4
 8005cf2:	459c      	cmp	ip, r3
 8005cf4:	fa20 f00e 	lsr.w	r0, r0, lr
 8005cf8:	d814      	bhi.n	8005d24 <__lshift+0x94>
 8005cfa:	6048      	str	r0, [r1, #4]
 8005cfc:	b108      	cbz	r0, 8005d02 <__lshift+0x72>
 8005cfe:	f109 0502 	add.w	r5, r9, #2
 8005d02:	3d01      	subs	r5, #1
 8005d04:	4638      	mov	r0, r7
 8005d06:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	f7ff fe34 	bl	8005978 <_Bfree>
 8005d10:	4640      	mov	r0, r8
 8005d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d16:	3101      	adds	r1, #1
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	e7c7      	b.n	8005cac <__lshift+0x1c>
 8005d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d20:	3301      	adds	r3, #1
 8005d22:	e7cd      	b.n	8005cc0 <__lshift+0x30>
 8005d24:	4651      	mov	r1, sl
 8005d26:	e7dc      	b.n	8005ce2 <__lshift+0x52>
 8005d28:	3904      	subs	r1, #4
 8005d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2e:	459c      	cmp	ip, r3
 8005d30:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d34:	d8f9      	bhi.n	8005d2a <__lshift+0x9a>
 8005d36:	e7e4      	b.n	8005d02 <__lshift+0x72>

08005d38 <__mcmp>:
 8005d38:	6903      	ldr	r3, [r0, #16]
 8005d3a:	690a      	ldr	r2, [r1, #16]
 8005d3c:	b530      	push	{r4, r5, lr}
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	d10c      	bne.n	8005d5c <__mcmp+0x24>
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	3014      	adds	r0, #20
 8005d46:	3114      	adds	r1, #20
 8005d48:	1884      	adds	r4, r0, r2
 8005d4a:	4411      	add	r1, r2
 8005d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d54:	4295      	cmp	r5, r2
 8005d56:	d003      	beq.n	8005d60 <__mcmp+0x28>
 8005d58:	d305      	bcc.n	8005d66 <__mcmp+0x2e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	bd30      	pop	{r4, r5, pc}
 8005d60:	42a0      	cmp	r0, r4
 8005d62:	d3f3      	bcc.n	8005d4c <__mcmp+0x14>
 8005d64:	e7fa      	b.n	8005d5c <__mcmp+0x24>
 8005d66:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6a:	e7f7      	b.n	8005d5c <__mcmp+0x24>

08005d6c <__mdiff>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	460d      	mov	r5, r1
 8005d72:	4607      	mov	r7, r0
 8005d74:	4611      	mov	r1, r2
 8005d76:	4628      	mov	r0, r5
 8005d78:	4614      	mov	r4, r2
 8005d7a:	f7ff ffdd 	bl	8005d38 <__mcmp>
 8005d7e:	1e06      	subs	r6, r0, #0
 8005d80:	d108      	bne.n	8005d94 <__mdiff+0x28>
 8005d82:	4631      	mov	r1, r6
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff fdc3 	bl	8005910 <_Balloc>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	bfa4      	itt	ge
 8005d96:	4623      	movge	r3, r4
 8005d98:	462c      	movge	r4, r5
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	6861      	ldr	r1, [r4, #4]
 8005d9e:	bfa6      	itte	ge
 8005da0:	461d      	movge	r5, r3
 8005da2:	2600      	movge	r6, #0
 8005da4:	2601      	movlt	r6, #1
 8005da6:	f7ff fdb3 	bl	8005910 <_Balloc>
 8005daa:	f04f 0e00 	mov.w	lr, #0
 8005dae:	60c6      	str	r6, [r0, #12]
 8005db0:	692b      	ldr	r3, [r5, #16]
 8005db2:	6926      	ldr	r6, [r4, #16]
 8005db4:	f104 0214 	add.w	r2, r4, #20
 8005db8:	f105 0914 	add.w	r9, r5, #20
 8005dbc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005dc0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005dc4:	f100 0114 	add.w	r1, r0, #20
 8005dc8:	f852 ab04 	ldr.w	sl, [r2], #4
 8005dcc:	f859 5b04 	ldr.w	r5, [r9], #4
 8005dd0:	fa1f f38a 	uxth.w	r3, sl
 8005dd4:	4473      	add	r3, lr
 8005dd6:	b2ac      	uxth	r4, r5
 8005dd8:	1b1b      	subs	r3, r3, r4
 8005dda:	0c2c      	lsrs	r4, r5, #16
 8005ddc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005de0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005dea:	45c8      	cmp	r8, r9
 8005dec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005df0:	4694      	mov	ip, r2
 8005df2:	f841 4b04 	str.w	r4, [r1], #4
 8005df6:	d8e7      	bhi.n	8005dc8 <__mdiff+0x5c>
 8005df8:	45bc      	cmp	ip, r7
 8005dfa:	d304      	bcc.n	8005e06 <__mdiff+0x9a>
 8005dfc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e00:	b183      	cbz	r3, 8005e24 <__mdiff+0xb8>
 8005e02:	6106      	str	r6, [r0, #16]
 8005e04:	e7c4      	b.n	8005d90 <__mdiff+0x24>
 8005e06:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005e0a:	b2a2      	uxth	r2, r4
 8005e0c:	4472      	add	r2, lr
 8005e0e:	1413      	asrs	r3, r2, #16
 8005e10:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e14:	b292      	uxth	r2, r2
 8005e16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e1a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005e1e:	f841 2b04 	str.w	r2, [r1], #4
 8005e22:	e7e9      	b.n	8005df8 <__mdiff+0x8c>
 8005e24:	3e01      	subs	r6, #1
 8005e26:	e7e9      	b.n	8005dfc <__mdiff+0x90>

08005e28 <__d2b>:
 8005e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005e2c:	461c      	mov	r4, r3
 8005e2e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005e32:	2101      	movs	r1, #1
 8005e34:	4690      	mov	r8, r2
 8005e36:	f7ff fd6b 	bl	8005910 <_Balloc>
 8005e3a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005e3e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005e42:	4607      	mov	r7, r0
 8005e44:	bb34      	cbnz	r4, 8005e94 <__d2b+0x6c>
 8005e46:	9201      	str	r2, [sp, #4]
 8005e48:	f1b8 0200 	subs.w	r2, r8, #0
 8005e4c:	d027      	beq.n	8005e9e <__d2b+0x76>
 8005e4e:	a802      	add	r0, sp, #8
 8005e50:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005e54:	f7ff fe01 	bl	8005a5a <__lo0bits>
 8005e58:	9900      	ldr	r1, [sp, #0]
 8005e5a:	b1f0      	cbz	r0, 8005e9a <__d2b+0x72>
 8005e5c:	9a01      	ldr	r2, [sp, #4]
 8005e5e:	f1c0 0320 	rsb	r3, r0, #32
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	430b      	orrs	r3, r1
 8005e68:	40c2      	lsrs	r2, r0
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	9201      	str	r2, [sp, #4]
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bf14      	ite	ne
 8005e74:	2102      	movne	r1, #2
 8005e76:	2101      	moveq	r1, #1
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	6139      	str	r1, [r7, #16]
 8005e7c:	b1c4      	cbz	r4, 8005eb0 <__d2b+0x88>
 8005e7e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e82:	4404      	add	r4, r0
 8005e84:	6034      	str	r4, [r6, #0]
 8005e86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e8a:	6028      	str	r0, [r5, #0]
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	b002      	add	sp, #8
 8005e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e98:	e7d5      	b.n	8005e46 <__d2b+0x1e>
 8005e9a:	6179      	str	r1, [r7, #20]
 8005e9c:	e7e7      	b.n	8005e6e <__d2b+0x46>
 8005e9e:	a801      	add	r0, sp, #4
 8005ea0:	f7ff fddb 	bl	8005a5a <__lo0bits>
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	6139      	str	r1, [r7, #16]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	3020      	adds	r0, #32
 8005eae:	e7e5      	b.n	8005e7c <__d2b+0x54>
 8005eb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005eb4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005eb8:	6030      	str	r0, [r6, #0]
 8005eba:	6918      	ldr	r0, [r3, #16]
 8005ebc:	f7ff fdae 	bl	8005a1c <__hi0bits>
 8005ec0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ec4:	e7e1      	b.n	8005e8a <__d2b+0x62>

08005ec6 <_calloc_r>:
 8005ec6:	b538      	push	{r3, r4, r5, lr}
 8005ec8:	fb02 f401 	mul.w	r4, r2, r1
 8005ecc:	4621      	mov	r1, r4
 8005ece:	f000 f855 	bl	8005f7c <_malloc_r>
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	b118      	cbz	r0, 8005ede <_calloc_r+0x18>
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f7fe fa3a 	bl	8004352 <memset>
 8005ede:	4628      	mov	r0, r5
 8005ee0:	bd38      	pop	{r3, r4, r5, pc}
	...

08005ee4 <_free_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	d043      	beq.n	8005f74 <_free_r+0x90>
 8005eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef0:	1f0c      	subs	r4, r1, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bfb8      	it	lt
 8005ef6:	18e4      	addlt	r4, r4, r3
 8005ef8:	f000 fa27 	bl	800634a <__malloc_lock>
 8005efc:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <_free_r+0x94>)
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	4610      	mov	r0, r2
 8005f02:	b933      	cbnz	r3, 8005f12 <_free_r+0x2e>
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6014      	str	r4, [r2, #0]
 8005f08:	4628      	mov	r0, r5
 8005f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f0e:	f000 ba1d 	b.w	800634c <__malloc_unlock>
 8005f12:	42a3      	cmp	r3, r4
 8005f14:	d90b      	bls.n	8005f2e <_free_r+0x4a>
 8005f16:	6821      	ldr	r1, [r4, #0]
 8005f18:	1862      	adds	r2, r4, r1
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	bf01      	itttt	eq
 8005f1e:	681a      	ldreq	r2, [r3, #0]
 8005f20:	685b      	ldreq	r3, [r3, #4]
 8005f22:	1852      	addeq	r2, r2, r1
 8005f24:	6022      	streq	r2, [r4, #0]
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	6004      	str	r4, [r0, #0]
 8005f2a:	e7ed      	b.n	8005f08 <_free_r+0x24>
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	b10a      	cbz	r2, 8005f36 <_free_r+0x52>
 8005f32:	42a2      	cmp	r2, r4
 8005f34:	d9fa      	bls.n	8005f2c <_free_r+0x48>
 8005f36:	6819      	ldr	r1, [r3, #0]
 8005f38:	1858      	adds	r0, r3, r1
 8005f3a:	42a0      	cmp	r0, r4
 8005f3c:	d10b      	bne.n	8005f56 <_free_r+0x72>
 8005f3e:	6820      	ldr	r0, [r4, #0]
 8005f40:	4401      	add	r1, r0
 8005f42:	1858      	adds	r0, r3, r1
 8005f44:	4282      	cmp	r2, r0
 8005f46:	6019      	str	r1, [r3, #0]
 8005f48:	d1de      	bne.n	8005f08 <_free_r+0x24>
 8005f4a:	6810      	ldr	r0, [r2, #0]
 8005f4c:	6852      	ldr	r2, [r2, #4]
 8005f4e:	4401      	add	r1, r0
 8005f50:	6019      	str	r1, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	e7d8      	b.n	8005f08 <_free_r+0x24>
 8005f56:	d902      	bls.n	8005f5e <_free_r+0x7a>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	602b      	str	r3, [r5, #0]
 8005f5c:	e7d4      	b.n	8005f08 <_free_r+0x24>
 8005f5e:	6820      	ldr	r0, [r4, #0]
 8005f60:	1821      	adds	r1, r4, r0
 8005f62:	428a      	cmp	r2, r1
 8005f64:	bf01      	itttt	eq
 8005f66:	6811      	ldreq	r1, [r2, #0]
 8005f68:	6852      	ldreq	r2, [r2, #4]
 8005f6a:	1809      	addeq	r1, r1, r0
 8005f6c:	6021      	streq	r1, [r4, #0]
 8005f6e:	6062      	str	r2, [r4, #4]
 8005f70:	605c      	str	r4, [r3, #4]
 8005f72:	e7c9      	b.n	8005f08 <_free_r+0x24>
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
 8005f76:	bf00      	nop
 8005f78:	20000208 	.word	0x20000208

08005f7c <_malloc_r>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	1ccd      	adds	r5, r1, #3
 8005f80:	f025 0503 	bic.w	r5, r5, #3
 8005f84:	3508      	adds	r5, #8
 8005f86:	2d0c      	cmp	r5, #12
 8005f88:	bf38      	it	cc
 8005f8a:	250c      	movcc	r5, #12
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	4606      	mov	r6, r0
 8005f90:	db01      	blt.n	8005f96 <_malloc_r+0x1a>
 8005f92:	42a9      	cmp	r1, r5
 8005f94:	d903      	bls.n	8005f9e <_malloc_r+0x22>
 8005f96:	230c      	movs	r3, #12
 8005f98:	6033      	str	r3, [r6, #0]
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	f000 f9d4 	bl	800634a <__malloc_lock>
 8005fa2:	4a21      	ldr	r2, [pc, #132]	; (8006028 <_malloc_r+0xac>)
 8005fa4:	6814      	ldr	r4, [r2, #0]
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	b991      	cbnz	r1, 8005fd0 <_malloc_r+0x54>
 8005faa:	4c20      	ldr	r4, [pc, #128]	; (800602c <_malloc_r+0xb0>)
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	b91b      	cbnz	r3, 8005fb8 <_malloc_r+0x3c>
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f000 f98f 	bl	80062d4 <_sbrk_r>
 8005fb6:	6020      	str	r0, [r4, #0]
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f000 f98a 	bl	80062d4 <_sbrk_r>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d124      	bne.n	800600e <_malloc_r+0x92>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	6033      	str	r3, [r6, #0]
 8005fca:	f000 f9bf 	bl	800634c <__malloc_unlock>
 8005fce:	e7e4      	b.n	8005f9a <_malloc_r+0x1e>
 8005fd0:	680b      	ldr	r3, [r1, #0]
 8005fd2:	1b5b      	subs	r3, r3, r5
 8005fd4:	d418      	bmi.n	8006008 <_malloc_r+0x8c>
 8005fd6:	2b0b      	cmp	r3, #11
 8005fd8:	d90f      	bls.n	8005ffa <_malloc_r+0x7e>
 8005fda:	600b      	str	r3, [r1, #0]
 8005fdc:	18cc      	adds	r4, r1, r3
 8005fde:	50cd      	str	r5, [r1, r3]
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 f9b3 	bl	800634c <__malloc_unlock>
 8005fe6:	f104 000b 	add.w	r0, r4, #11
 8005fea:	1d23      	adds	r3, r4, #4
 8005fec:	f020 0007 	bic.w	r0, r0, #7
 8005ff0:	1ac3      	subs	r3, r0, r3
 8005ff2:	d0d3      	beq.n	8005f9c <_malloc_r+0x20>
 8005ff4:	425a      	negs	r2, r3
 8005ff6:	50e2      	str	r2, [r4, r3]
 8005ff8:	e7d0      	b.n	8005f9c <_malloc_r+0x20>
 8005ffa:	684b      	ldr	r3, [r1, #4]
 8005ffc:	428c      	cmp	r4, r1
 8005ffe:	bf16      	itet	ne
 8006000:	6063      	strne	r3, [r4, #4]
 8006002:	6013      	streq	r3, [r2, #0]
 8006004:	460c      	movne	r4, r1
 8006006:	e7eb      	b.n	8005fe0 <_malloc_r+0x64>
 8006008:	460c      	mov	r4, r1
 800600a:	6849      	ldr	r1, [r1, #4]
 800600c:	e7cc      	b.n	8005fa8 <_malloc_r+0x2c>
 800600e:	1cc4      	adds	r4, r0, #3
 8006010:	f024 0403 	bic.w	r4, r4, #3
 8006014:	42a0      	cmp	r0, r4
 8006016:	d005      	beq.n	8006024 <_malloc_r+0xa8>
 8006018:	1a21      	subs	r1, r4, r0
 800601a:	4630      	mov	r0, r6
 800601c:	f000 f95a 	bl	80062d4 <_sbrk_r>
 8006020:	3001      	adds	r0, #1
 8006022:	d0cf      	beq.n	8005fc4 <_malloc_r+0x48>
 8006024:	6025      	str	r5, [r4, #0]
 8006026:	e7db      	b.n	8005fe0 <_malloc_r+0x64>
 8006028:	20000208 	.word	0x20000208
 800602c:	2000020c 	.word	0x2000020c

08006030 <__ssputs_r>:
 8006030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006034:	688e      	ldr	r6, [r1, #8]
 8006036:	4682      	mov	sl, r0
 8006038:	429e      	cmp	r6, r3
 800603a:	460c      	mov	r4, r1
 800603c:	4690      	mov	r8, r2
 800603e:	4699      	mov	r9, r3
 8006040:	d837      	bhi.n	80060b2 <__ssputs_r+0x82>
 8006042:	898a      	ldrh	r2, [r1, #12]
 8006044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006048:	d031      	beq.n	80060ae <__ssputs_r+0x7e>
 800604a:	2302      	movs	r3, #2
 800604c:	6825      	ldr	r5, [r4, #0]
 800604e:	6909      	ldr	r1, [r1, #16]
 8006050:	1a6f      	subs	r7, r5, r1
 8006052:	6965      	ldr	r5, [r4, #20]
 8006054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006058:	fb95 f5f3 	sdiv	r5, r5, r3
 800605c:	f109 0301 	add.w	r3, r9, #1
 8006060:	443b      	add	r3, r7
 8006062:	429d      	cmp	r5, r3
 8006064:	bf38      	it	cc
 8006066:	461d      	movcc	r5, r3
 8006068:	0553      	lsls	r3, r2, #21
 800606a:	d530      	bpl.n	80060ce <__ssputs_r+0x9e>
 800606c:	4629      	mov	r1, r5
 800606e:	f7ff ff85 	bl	8005f7c <_malloc_r>
 8006072:	4606      	mov	r6, r0
 8006074:	b950      	cbnz	r0, 800608c <__ssputs_r+0x5c>
 8006076:	230c      	movs	r3, #12
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	f8ca 3000 	str.w	r3, [sl]
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	463a      	mov	r2, r7
 800608e:	6921      	ldr	r1, [r4, #16]
 8006090:	f7fe f954 	bl	800433c <memcpy>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800609a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	6126      	str	r6, [r4, #16]
 80060a2:	443e      	add	r6, r7
 80060a4:	6026      	str	r6, [r4, #0]
 80060a6:	464e      	mov	r6, r9
 80060a8:	6165      	str	r5, [r4, #20]
 80060aa:	1bed      	subs	r5, r5, r7
 80060ac:	60a5      	str	r5, [r4, #8]
 80060ae:	454e      	cmp	r6, r9
 80060b0:	d900      	bls.n	80060b4 <__ssputs_r+0x84>
 80060b2:	464e      	mov	r6, r9
 80060b4:	4632      	mov	r2, r6
 80060b6:	4641      	mov	r1, r8
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	f000 f92d 	bl	8006318 <memmove>
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	2000      	movs	r0, #0
 80060c2:	1b9b      	subs	r3, r3, r6
 80060c4:	60a3      	str	r3, [r4, #8]
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	441e      	add	r6, r3
 80060ca:	6026      	str	r6, [r4, #0]
 80060cc:	e7dc      	b.n	8006088 <__ssputs_r+0x58>
 80060ce:	462a      	mov	r2, r5
 80060d0:	f000 f93d 	bl	800634e <_realloc_r>
 80060d4:	4606      	mov	r6, r0
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d1e2      	bne.n	80060a0 <__ssputs_r+0x70>
 80060da:	6921      	ldr	r1, [r4, #16]
 80060dc:	4650      	mov	r0, sl
 80060de:	f7ff ff01 	bl	8005ee4 <_free_r>
 80060e2:	e7c8      	b.n	8006076 <__ssputs_r+0x46>

080060e4 <_svfiprintf_r>:
 80060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	461d      	mov	r5, r3
 80060ea:	898b      	ldrh	r3, [r1, #12]
 80060ec:	b09d      	sub	sp, #116	; 0x74
 80060ee:	061f      	lsls	r7, r3, #24
 80060f0:	4680      	mov	r8, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	4616      	mov	r6, r2
 80060f6:	d50f      	bpl.n	8006118 <_svfiprintf_r+0x34>
 80060f8:	690b      	ldr	r3, [r1, #16]
 80060fa:	b96b      	cbnz	r3, 8006118 <_svfiprintf_r+0x34>
 80060fc:	2140      	movs	r1, #64	; 0x40
 80060fe:	f7ff ff3d 	bl	8005f7c <_malloc_r>
 8006102:	6020      	str	r0, [r4, #0]
 8006104:	6120      	str	r0, [r4, #16]
 8006106:	b928      	cbnz	r0, 8006114 <_svfiprintf_r+0x30>
 8006108:	230c      	movs	r3, #12
 800610a:	f8c8 3000 	str.w	r3, [r8]
 800610e:	f04f 30ff 	mov.w	r0, #4294967295
 8006112:	e0c8      	b.n	80062a6 <_svfiprintf_r+0x1c2>
 8006114:	2340      	movs	r3, #64	; 0x40
 8006116:	6163      	str	r3, [r4, #20]
 8006118:	2300      	movs	r3, #0
 800611a:	9309      	str	r3, [sp, #36]	; 0x24
 800611c:	2320      	movs	r3, #32
 800611e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006122:	2330      	movs	r3, #48	; 0x30
 8006124:	f04f 0b01 	mov.w	fp, #1
 8006128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800612c:	9503      	str	r5, [sp, #12]
 800612e:	4637      	mov	r7, r6
 8006130:	463d      	mov	r5, r7
 8006132:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006136:	b10b      	cbz	r3, 800613c <_svfiprintf_r+0x58>
 8006138:	2b25      	cmp	r3, #37	; 0x25
 800613a:	d13e      	bne.n	80061ba <_svfiprintf_r+0xd6>
 800613c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006140:	d00b      	beq.n	800615a <_svfiprintf_r+0x76>
 8006142:	4653      	mov	r3, sl
 8006144:	4632      	mov	r2, r6
 8006146:	4621      	mov	r1, r4
 8006148:	4640      	mov	r0, r8
 800614a:	f7ff ff71 	bl	8006030 <__ssputs_r>
 800614e:	3001      	adds	r0, #1
 8006150:	f000 80a4 	beq.w	800629c <_svfiprintf_r+0x1b8>
 8006154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006156:	4453      	add	r3, sl
 8006158:	9309      	str	r3, [sp, #36]	; 0x24
 800615a:	783b      	ldrb	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 809d 	beq.w	800629c <_svfiprintf_r+0x1b8>
 8006162:	2300      	movs	r3, #0
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006174:	931a      	str	r3, [sp, #104]	; 0x68
 8006176:	462f      	mov	r7, r5
 8006178:	2205      	movs	r2, #5
 800617a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800617e:	4850      	ldr	r0, [pc, #320]	; (80062c0 <_svfiprintf_r+0x1dc>)
 8006180:	f7ff fbb8 	bl	80058f4 <memchr>
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	b9d0      	cbnz	r0, 80061be <_svfiprintf_r+0xda>
 8006188:	06d9      	lsls	r1, r3, #27
 800618a:	bf44      	itt	mi
 800618c:	2220      	movmi	r2, #32
 800618e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006192:	071a      	lsls	r2, r3, #28
 8006194:	bf44      	itt	mi
 8006196:	222b      	movmi	r2, #43	; 0x2b
 8006198:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800619c:	782a      	ldrb	r2, [r5, #0]
 800619e:	2a2a      	cmp	r2, #42	; 0x2a
 80061a0:	d015      	beq.n	80061ce <_svfiprintf_r+0xea>
 80061a2:	462f      	mov	r7, r5
 80061a4:	2000      	movs	r0, #0
 80061a6:	250a      	movs	r5, #10
 80061a8:	9a07      	ldr	r2, [sp, #28]
 80061aa:	4639      	mov	r1, r7
 80061ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b0:	3b30      	subs	r3, #48	; 0x30
 80061b2:	2b09      	cmp	r3, #9
 80061b4:	d94d      	bls.n	8006252 <_svfiprintf_r+0x16e>
 80061b6:	b1b8      	cbz	r0, 80061e8 <_svfiprintf_r+0x104>
 80061b8:	e00f      	b.n	80061da <_svfiprintf_r+0xf6>
 80061ba:	462f      	mov	r7, r5
 80061bc:	e7b8      	b.n	8006130 <_svfiprintf_r+0x4c>
 80061be:	4a40      	ldr	r2, [pc, #256]	; (80062c0 <_svfiprintf_r+0x1dc>)
 80061c0:	463d      	mov	r5, r7
 80061c2:	1a80      	subs	r0, r0, r2
 80061c4:	fa0b f000 	lsl.w	r0, fp, r0
 80061c8:	4318      	orrs	r0, r3
 80061ca:	9004      	str	r0, [sp, #16]
 80061cc:	e7d3      	b.n	8006176 <_svfiprintf_r+0x92>
 80061ce:	9a03      	ldr	r2, [sp, #12]
 80061d0:	1d11      	adds	r1, r2, #4
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	9103      	str	r1, [sp, #12]
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	db01      	blt.n	80061de <_svfiprintf_r+0xfa>
 80061da:	9207      	str	r2, [sp, #28]
 80061dc:	e004      	b.n	80061e8 <_svfiprintf_r+0x104>
 80061de:	4252      	negs	r2, r2
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	9207      	str	r2, [sp, #28]
 80061e6:	9304      	str	r3, [sp, #16]
 80061e8:	783b      	ldrb	r3, [r7, #0]
 80061ea:	2b2e      	cmp	r3, #46	; 0x2e
 80061ec:	d10c      	bne.n	8006208 <_svfiprintf_r+0x124>
 80061ee:	787b      	ldrb	r3, [r7, #1]
 80061f0:	2b2a      	cmp	r3, #42	; 0x2a
 80061f2:	d133      	bne.n	800625c <_svfiprintf_r+0x178>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	3702      	adds	r7, #2
 80061f8:	1d1a      	adds	r2, r3, #4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	9203      	str	r2, [sp, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bfb8      	it	lt
 8006202:	f04f 33ff 	movlt.w	r3, #4294967295
 8006206:	9305      	str	r3, [sp, #20]
 8006208:	4d2e      	ldr	r5, [pc, #184]	; (80062c4 <_svfiprintf_r+0x1e0>)
 800620a:	2203      	movs	r2, #3
 800620c:	7839      	ldrb	r1, [r7, #0]
 800620e:	4628      	mov	r0, r5
 8006210:	f7ff fb70 	bl	80058f4 <memchr>
 8006214:	b138      	cbz	r0, 8006226 <_svfiprintf_r+0x142>
 8006216:	2340      	movs	r3, #64	; 0x40
 8006218:	1b40      	subs	r0, r0, r5
 800621a:	fa03 f000 	lsl.w	r0, r3, r0
 800621e:	9b04      	ldr	r3, [sp, #16]
 8006220:	3701      	adds	r7, #1
 8006222:	4303      	orrs	r3, r0
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	7839      	ldrb	r1, [r7, #0]
 8006228:	2206      	movs	r2, #6
 800622a:	4827      	ldr	r0, [pc, #156]	; (80062c8 <_svfiprintf_r+0x1e4>)
 800622c:	1c7e      	adds	r6, r7, #1
 800622e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006232:	f7ff fb5f 	bl	80058f4 <memchr>
 8006236:	2800      	cmp	r0, #0
 8006238:	d038      	beq.n	80062ac <_svfiprintf_r+0x1c8>
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <_svfiprintf_r+0x1e8>)
 800623c:	bb13      	cbnz	r3, 8006284 <_svfiprintf_r+0x1a0>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	3307      	adds	r3, #7
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	3308      	adds	r3, #8
 8006248:	9303      	str	r3, [sp, #12]
 800624a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624c:	444b      	add	r3, r9
 800624e:	9309      	str	r3, [sp, #36]	; 0x24
 8006250:	e76d      	b.n	800612e <_svfiprintf_r+0x4a>
 8006252:	fb05 3202 	mla	r2, r5, r2, r3
 8006256:	2001      	movs	r0, #1
 8006258:	460f      	mov	r7, r1
 800625a:	e7a6      	b.n	80061aa <_svfiprintf_r+0xc6>
 800625c:	2300      	movs	r3, #0
 800625e:	250a      	movs	r5, #10
 8006260:	4619      	mov	r1, r3
 8006262:	3701      	adds	r7, #1
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	4638      	mov	r0, r7
 8006268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626c:	3a30      	subs	r2, #48	; 0x30
 800626e:	2a09      	cmp	r2, #9
 8006270:	d903      	bls.n	800627a <_svfiprintf_r+0x196>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0c8      	beq.n	8006208 <_svfiprintf_r+0x124>
 8006276:	9105      	str	r1, [sp, #20]
 8006278:	e7c6      	b.n	8006208 <_svfiprintf_r+0x124>
 800627a:	fb05 2101 	mla	r1, r5, r1, r2
 800627e:	2301      	movs	r3, #1
 8006280:	4607      	mov	r7, r0
 8006282:	e7f0      	b.n	8006266 <_svfiprintf_r+0x182>
 8006284:	ab03      	add	r3, sp, #12
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4622      	mov	r2, r4
 800628a:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <_svfiprintf_r+0x1ec>)
 800628c:	a904      	add	r1, sp, #16
 800628e:	4640      	mov	r0, r8
 8006290:	f7fe f8f8 	bl	8004484 <_printf_float>
 8006294:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006298:	4681      	mov	r9, r0
 800629a:	d1d6      	bne.n	800624a <_svfiprintf_r+0x166>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	065b      	lsls	r3, r3, #25
 80062a0:	f53f af35 	bmi.w	800610e <_svfiprintf_r+0x2a>
 80062a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a6:	b01d      	add	sp, #116	; 0x74
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ac:	ab03      	add	r3, sp, #12
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4622      	mov	r2, r4
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <_svfiprintf_r+0x1ec>)
 80062b4:	a904      	add	r1, sp, #16
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7fe fb90 	bl	80049dc <_printf_i>
 80062bc:	e7ea      	b.n	8006294 <_svfiprintf_r+0x1b0>
 80062be:	bf00      	nop
 80062c0:	0800724c 	.word	0x0800724c
 80062c4:	08007252 	.word	0x08007252
 80062c8:	08007256 	.word	0x08007256
 80062cc:	08004485 	.word	0x08004485
 80062d0:	08006031 	.word	0x08006031

080062d4 <_sbrk_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	2300      	movs	r3, #0
 80062d8:	4c05      	ldr	r4, [pc, #20]	; (80062f0 <_sbrk_r+0x1c>)
 80062da:	4605      	mov	r5, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	f7fc f8ae 	bl	8002440 <_sbrk>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_sbrk_r+0x1a>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_sbrk_r+0x1a>
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	20000eb0 	.word	0x20000eb0

080062f4 <__ascii_mbtowc>:
 80062f4:	b082      	sub	sp, #8
 80062f6:	b901      	cbnz	r1, 80062fa <__ascii_mbtowc+0x6>
 80062f8:	a901      	add	r1, sp, #4
 80062fa:	b142      	cbz	r2, 800630e <__ascii_mbtowc+0x1a>
 80062fc:	b14b      	cbz	r3, 8006312 <__ascii_mbtowc+0x1e>
 80062fe:	7813      	ldrb	r3, [r2, #0]
 8006300:	600b      	str	r3, [r1, #0]
 8006302:	7812      	ldrb	r2, [r2, #0]
 8006304:	1c10      	adds	r0, r2, #0
 8006306:	bf18      	it	ne
 8006308:	2001      	movne	r0, #1
 800630a:	b002      	add	sp, #8
 800630c:	4770      	bx	lr
 800630e:	4610      	mov	r0, r2
 8006310:	e7fb      	b.n	800630a <__ascii_mbtowc+0x16>
 8006312:	f06f 0001 	mvn.w	r0, #1
 8006316:	e7f8      	b.n	800630a <__ascii_mbtowc+0x16>

08006318 <memmove>:
 8006318:	4288      	cmp	r0, r1
 800631a:	b510      	push	{r4, lr}
 800631c:	eb01 0302 	add.w	r3, r1, r2
 8006320:	d807      	bhi.n	8006332 <memmove+0x1a>
 8006322:	1e42      	subs	r2, r0, #1
 8006324:	4299      	cmp	r1, r3
 8006326:	d00a      	beq.n	800633e <memmove+0x26>
 8006328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006330:	e7f8      	b.n	8006324 <memmove+0xc>
 8006332:	4283      	cmp	r3, r0
 8006334:	d9f5      	bls.n	8006322 <memmove+0xa>
 8006336:	1881      	adds	r1, r0, r2
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	42d3      	cmn	r3, r2
 800633c:	d100      	bne.n	8006340 <memmove+0x28>
 800633e:	bd10      	pop	{r4, pc}
 8006340:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006344:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006348:	e7f7      	b.n	800633a <memmove+0x22>

0800634a <__malloc_lock>:
 800634a:	4770      	bx	lr

0800634c <__malloc_unlock>:
 800634c:	4770      	bx	lr

0800634e <_realloc_r>:
 800634e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006350:	4607      	mov	r7, r0
 8006352:	4614      	mov	r4, r2
 8006354:	460e      	mov	r6, r1
 8006356:	b921      	cbnz	r1, 8006362 <_realloc_r+0x14>
 8006358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800635c:	4611      	mov	r1, r2
 800635e:	f7ff be0d 	b.w	8005f7c <_malloc_r>
 8006362:	b922      	cbnz	r2, 800636e <_realloc_r+0x20>
 8006364:	f7ff fdbe 	bl	8005ee4 <_free_r>
 8006368:	4625      	mov	r5, r4
 800636a:	4628      	mov	r0, r5
 800636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800636e:	f000 f821 	bl	80063b4 <_malloc_usable_size_r>
 8006372:	42a0      	cmp	r0, r4
 8006374:	d20f      	bcs.n	8006396 <_realloc_r+0x48>
 8006376:	4621      	mov	r1, r4
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff fdff 	bl	8005f7c <_malloc_r>
 800637e:	4605      	mov	r5, r0
 8006380:	2800      	cmp	r0, #0
 8006382:	d0f2      	beq.n	800636a <_realloc_r+0x1c>
 8006384:	4631      	mov	r1, r6
 8006386:	4622      	mov	r2, r4
 8006388:	f7fd ffd8 	bl	800433c <memcpy>
 800638c:	4631      	mov	r1, r6
 800638e:	4638      	mov	r0, r7
 8006390:	f7ff fda8 	bl	8005ee4 <_free_r>
 8006394:	e7e9      	b.n	800636a <_realloc_r+0x1c>
 8006396:	4635      	mov	r5, r6
 8006398:	e7e7      	b.n	800636a <_realloc_r+0x1c>

0800639a <__ascii_wctomb>:
 800639a:	b149      	cbz	r1, 80063b0 <__ascii_wctomb+0x16>
 800639c:	2aff      	cmp	r2, #255	; 0xff
 800639e:	bf8b      	itete	hi
 80063a0:	238a      	movhi	r3, #138	; 0x8a
 80063a2:	700a      	strbls	r2, [r1, #0]
 80063a4:	6003      	strhi	r3, [r0, #0]
 80063a6:	2001      	movls	r0, #1
 80063a8:	bf88      	it	hi
 80063aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80063ae:	4770      	bx	lr
 80063b0:	4608      	mov	r0, r1
 80063b2:	4770      	bx	lr

080063b4 <_malloc_usable_size_r>:
 80063b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b8:	1f18      	subs	r0, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfbc      	itt	lt
 80063be:	580b      	ldrlt	r3, [r1, r0]
 80063c0:	18c0      	addlt	r0, r0, r3
 80063c2:	4770      	bx	lr

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
